cscope 15 $HOME/src/gpsp_src               0001299958
	@cheats.c

20 
	~"comm⁄.h
"

22 
chót_ty≥
 
	gchóts
[
MAX_CHEATS
];

23 
u32
 
	gnum_chóts
;

25 
	$de¸y±_gß_code
(
u32
 *
addªss_±r
, u32 *
vÆue_±r
, 
chót_v¨ü¡_íum


26 
chót_v¨ü¡
)

28 
u32
 
i
, 
i2
, 
code_posôi⁄
;

29 
u32
 
addªss
 = *
addªss_±r
;

30 
u32
 
vÆue
 = *
vÆue_±r
;

31 
u32
 
r
 = 0xc6ef3720;

33 
u32
 
£eds_v1
[4] =

37 
u32
 
£eds_v3
[4] =

41 
u32
 *
£eds
;

43 if(
chót_v¨ü¡
 =
CHEAT_TYPE_GAMESHARK_V1
)

44 
£eds
 = 
£eds_v1
;

46 
£eds
 = 
£eds_v3
;

48 
i
 = 0; i < 32; i++)

50 
vÆue
 -((
addªss
 << 4Ë+ 
£eds
[2]Ë^ (addªs†+ 
r
) ^

51 ((
addªss
 >> 5Ë+ 
£eds
[3]);

52 
addªss
 -((
vÆue
 << 4Ë+ 
£eds
[0]Ë^ (vÆuê+ 
r
) ^

53 ((
vÆue
 >> 5Ë+ 
£eds
[1]);

54 
r
 -= 0x9e3779b9;

57 *
addªss_±r
 = 
addªss
;

58 *
vÆue_±r
 = 
vÆue
;

59 
	}
}

61 
	$add_chóts
(
u8
 *
chóts_fûíame
)

63 
FILE
 *
chóts_fûe
;

64 
u8
 
cuºít_löe
[256];

65 
u8
 *
«me_±r
;

66 
u32
 *
chót_code_±r
;

67 
u32
 
addªss
, 
vÆue
;

68 
u32
 
num_chót_löes
;

69 
u32
 
chót_«me_Àngth
;

70 
chót_v¨ü¡_íum
 
cuºít_chót_v¨ü¡
;

72 
num_chóts
 = 0;

74 
chóts_fûe
 = 
	`f›í
(
chóts_fûíame
, "rb");

76 if(
chóts_fûe
)

78 
	`fgës
(
cuºít_löe
, 256, 
chóts_fûe
))

81 
«me_±r
 = 
	`°rchr
(
cuºít_löe
, ' ');

82 if(
«me_±r
)

84 *
«me_±r
 = 0;

85 
«me_±r
++;

88 if(!
	`°rˇ£cmp
(
cuºít_löe
, "gameshark_v1") ||

89 !
	`°rˇ£cmp
(
cuºít_löe
, "gameshark_v2") ||

90 !
	`°rˇ£cmp
(
cuºít_löe
, "PAR_v1") ||

91 !
	`°rˇ£cmp
(
cuºít_löe
, "PAR_v2"))

93 
cuºít_chót_v¨ü¡
 = 
CHEAT_TYPE_GAMESHARK_V1
;

97 if(!
	`°rˇ£cmp
(
cuºít_löe
, "gameshark_v3") ||

98 !
	`°rˇ£cmp
(
cuºít_löe
, "PAR_v3"))

100 
cuºít_chót_v¨ü¡
 = 
CHEAT_TYPE_GAMESHARK_V3
;

104 
cuºít_chót_v¨ü¡
 = 
CHEAT_TYPE_INVALID
;

107 if(
cuºít_chót_v¨ü¡
 !
CHEAT_TYPE_INVALID
)

109 
	`°∫˝y
(
chóts
[
num_chóts
].
chót_«me
, 
«me_±r
, 
CHEAT_NAME_LENGTH
 - 1);

110 
chóts
[
num_chóts
].
chót_«me
[
CHEAT_NAME_LENGTH
 - 1] = 0;

111 
chót_«me_Àngth
 = 
	`°æí
(
chóts
[
num_chóts
].
chót_«me
);

112 if(
chót_«me_Àngth
 &&

113 (
chóts
[
num_chóts
].
chót_«me
[
chót_«me_Àngth
 - 1] == '\n') ||

114 (
chóts
[
num_chóts
].
chót_«me
[
chót_«me_Àngth
 - 1] == '\r'))

116 
chóts
[
num_chóts
].
chót_«me
[
chót_«me_Àngth
 - 1] = 0;

117 
chót_«me_Àngth
--;

120 if(
chót_«me_Àngth
 &&

121 
chóts
[
num_chóts
].
chót_«me
[
chót_«me_Àngth
 - 1] == '\r')

123 
chóts
[
num_chóts
].
chót_«me
[
chót_«me_Àngth
 - 1] = 0;

126 
chóts
[
num_chóts
].
chót_v¨ü¡
 = 
cuºít_chót_v¨ü¡
;

127 
chót_code_±r
 = 
chóts
[
num_chóts
].
chót_codes
;

128 
num_chót_löes
 = 0;

130 
	`fgës
(
cuºít_löe
, 256, 
chóts_fûe
))

132 if(
	`°æí
(
cuºít_löe
) < 3)

135 
	`ssˇnf
(
cuºít_löe
, "%08x %08x", &
addªss
, &
vÆue
);

137 
	`de¸y±_gß_code
(&
addªss
, &
vÆue
, 
cuºít_chót_v¨ü¡
);

139 
chót_code_±r
[0] = 
addªss
;

140 
chót_code_±r
[1] = 
vÆue
;

142 
chót_code_±r
 += 2;

143 
num_chót_löes
++;

146 
chóts
[
num_chóts
].
num_chót_löes
 =Çum_cheat_lines;

148 
num_chóts
++;

152 
	`f˛o£
(
chóts_fûe
);

154 
	}
}

156 
	$¥o˚ss_chót_gs1
(
chót_ty≥
 *
chót
)

158 
u32
 
chót_›code
;

159 
u32
 *
code_±r
 = 
chót
->
chót_codes
;

160 
u32
 
addªss
, 
vÆue
;

161 
u32
 
i
;

163 
i
 = 0; i < 
chót
->
num_chót_löes
; i++)

165 
addªss
 = 
code_±r
[0];

166 
vÆue
 = 
code_±r
[1];

168 
code_±r
 += 2;

170 
chót_›code
 = 
addªss
 >> 28;

171 
addªss
 &= 0xFFFFFFF;

173 
chót_›code
)

176 
	`wrôe_mem‹y8
(
addªss
, 
vÆue
);

180 
	`wrôe_mem‹y16
(
addªss
, 
vÆue
);

184 
	`wrôe_mem‹y32
(
addªss
, 
vÆue
);

189 
u32
 
num_addªs£s
 = 
addªss
 & 0xFFFF;

190 
u32
 
addªss1
, 
addªss2
;

191 
u32
 
i2
;

193 
i2
 = 0; i2 < 
num_addªs£s
; i2++)

195 
addªss1
 = 
code_±r
[0];

196 
addªss2
 = 
code_±r
[1];

197 
code_±r
 += 2;

198 
i
++;

200 
	`wrôe_mem‹y32
(
addªss1
, 
vÆue
);

201 if(
addªss2
 != 0)

202 
	`wrôe_mem‹y32
(
addªss2
, 
vÆue
);

217 if(
	`ªad_mem‹y16
(
addªss
Ë!(
vÆue
 & 0xFFFF))

219 
code_±r
 += 2;

220 
i
++;

225 if(
	`ªad_mem‹y16
(
vÆue
 & 0xFFFFFFFË!(
addªss
 & 0xFFFF))

227 
u32
 
skù
 = ((
addªss
 >> 16) & 0x03);

228 
code_±r
 +
skù
 * 2;

229 
i
 +
skù
;

238 
	}
}

242 
	$¥o˚ss_chót_gs3
(
chót_ty≥
 *
chót
)

244 
u32
 
chót_›code
;

245 
u32
 *
code_±r
 = 
chót
->
chót_codes
;

246 
u32
 
addªss
, 
vÆue
;

247 
u32
 
i
;

249 
i
 = 0; i < 
chót
->
num_chót_löes
; i++)

251 
addªss
 = 
code_±r
[0];

252 
vÆue
 = 
code_±r
[1];

254 
code_±r
 += 2;

256 
chót_›code
 = 
addªss
 >> 28;

257 
addªss
 &= 0xFFFFFFF;

259 
chót_›code
)

262 
chót_›code
 = 
addªss
 >> 24;

263 
addªss
 = (address & 0xFFFFF) + ((address << 4) & 0xF000000);

265 
chót_›code
)

269 
u32
 
ôî©i⁄s
 = 
vÆue
 >> 24;

270 
u32
 
i2
;

272 
vÆue
 &= 0xFF;

274 
i2
 = 0; i2 <
ôî©i⁄s
; i2++, 
addªss
++)

276 
	`wrôe_mem‹y8
(
addªss
, 
vÆue
);

283 
u32
 
ôî©i⁄s
 = 
vÆue
 >> 16;

284 
u32
 
i2
;

286 
vÆue
 &= 0xFFFF;

288 
i2
 = 0; i2 <
ôî©i⁄s
; i2++, 
addªss
 += 2)

290 
	`wrôe_mem‹y16
(
addªss
, 
vÆue
);

296 
	`wrôe_mem‹y32
(
addªss
, 
vÆue
);

302 
chót_›code
 = 
addªss
 >> 24;

303 
addªss
 = (address & 0xFFFFF) + ((address << 4) & 0xF000000);

305 
chót_›code
)

308 
addªss
 = 
	`ªad_mem‹y32
◊ddªssË+ (
vÆue
 >> 24);

309 
	`wrôe_mem‹y8
(
addªss
, 
vÆue
 & 0xFF);

313 
addªss
 = 
	`ªad_mem‹y32
◊ddªssË+ ((
vÆue
 >> 16) * 2);

314 
	`wrôe_mem‹y16
(
addªss
, 
vÆue
 & 0xFFFF);

318 
addªss
 = 
	`ªad_mem‹y32
(address);

319 
	`wrôe_mem‹y32
(
addªss
, 
vÆue
);

326 
chót_›code
 = 
addªss
 >> 24;

327 
addªss
 = (address & 0xFFFFF) + ((address << 4) & 0xF000000);

329 
chót_›code
)

332 
vÆue
 = (vÆuê& 0xFFË+ 
	`ªad_mem‹y8
(
addªss
);

333 
	`wrôe_mem‹y8
(
addªss
, 
vÆue
);

337 
vÆue
 = (vÆuê& 0xFFFFË+ 
	`ªad_mem‹y16
(
addªss
);

338 
	`wrôe_mem‹y16
(
addªss
, 
vÆue
);

342 
vÆue
 = vÆuê+ 
	`ªad_mem‹y32
(
addªss
);

343 
	`wrôe_mem‹y32
(
addªss
, 
vÆue
);

349 
chót_›code
 = 
addªss
 >> 24;

350 
addªss
 = (address & 0xFFFFFF) + 0x4000000;

352 
chót_›code
)

355 
	`wrôe_mem‹y16
(
addªss
, 
vÆue
);

359 
	`wrôe_mem‹y32
(
addªss
, 
vÆue
);

365 
	}
}

368 
	$¥o˚ss_chóts
()

370 
u32
 
i
;

372 
i
 = 0; i < 
num_chóts
; i++)

374 if(
chóts
[
i
].
chót_a˘ive
)

376 
chóts
[
i
].
chót_v¨ü¡
)

378 
CHEAT_TYPE_GAMESHARK_V1
:

379 
	`¥o˚ss_chót_gs1
(
chóts
 + 
i
);

382 
CHEAT_TYPE_GAMESHARK_V3
:

383 
	`¥o˚ss_chót_gs3
(
chóts
 + 
i
);

388 
	}
}

	@cheats.h

20 
	#CHEAT_NAME_LENGTH
 17

	)

24 
	mCHEAT_TYPE_GAMESHARK_V1
,

25 
	mCHEAT_TYPE_GAMESHARK_V3
,

26 
	mCHEAT_TYPE_INVALID


27 } 
	tchót_v¨ü¡_íum
;

31 
u8
 
	mchót_«me
[
CHEAT_NAME_LENGTH
];

32 
u32
 
	mchót_a˘ive
;

33 
u32
 
	mchót_codes
[256];

34 
u32
 
	mnum_chót_löes
;

35 
chót_v¨ü¡_íum
 
	mchót_v¨ü¡
;

36 } 
	tchót_ty≥
;

38 
¥o˚ss_chóts
();

39 
add_chóts
(
u8
 *
chóts_fûíame
);

41 
	#MAX_CHEATS
 16

	)

43 
chót_ty≥
 
chóts
[
MAX_CHEATS
];

44 
u32
 
num_chóts
;

	@common.h

20 #i‚de‡
COMMON_H


21 
	#COMMON_H


	)

23 
	#r‹
(
de°
, 
vÆue
, 
shi·
) \

24 
de°
 = ((
vÆue
Ë>> 
shi·
) | ((value) << (32 - shift)) \

25 

	)

27 #ifde‡
ARM_ARCH


29 #ifde‡
_WIN32_WCE


30 
	~<wödows.h
>

32 
	~<°dlib.h
>

33 
	~<°dio.h
>

34 
	~<°rög.h
>

35 
	~<m©h.h
>

36 
	~<f˙é.h
>

37 
	~<uni°d.h
>

38 
	~<°d¨g.h
>

39 
	~<time.h
>

40 
	~<sys/time.h
>

43 #ifde‡
GIZ_BUILD


44 
	~"giz/giz.h
"

51 
	#fûe_wrôe_mem
(
fûíame_èg
, 
buf„r
, 
size
) \

53 
	`mem˝y
(
wrôe_mem_±r
, 
buf„r
, 
size
); \

54 
wrôe_mem_±r
 +
size
; \

56 

	)

57 
	#fûe_wrôe_mem_¨øy
(
fûíame_èg
, 
¨øy
) \

58 
	`fûe_wrôe_mem
(
fûíame_èg
, 
¨øy
, (array)) \

59 

	)

60 
	#fûe_wrôe_mem_v¨übÀ
(
fûíame_èg
, 
v¨übÀ
) \

61 
	`fûe_wrôe_mem
(
fûíame_èg
, &
v¨übÀ
, (variable)) \

62 

	)

63 #ifde‡
PSP_BUILD


64 
	#Á°ˇŒ


	)

66 
	~<p•kî√l.h
>

67 
	~<p•debug.h
>

68 
	~<p•˘æ.h
>

69 
	~<p•gu.h
>

70 
	~<p•audio.h
>

71 
	~<p•audiﬁib.h
>

72 
	~<p•πc.h
>

74 
	#fun˘i⁄_cc


	)

76 
	#c⁄vît_∑Àâe
(
vÆue
) \

77 
vÆue
 = ((value & 0x7FE0) << 1) | (value & 0x1F) \

78 

	)

79 
	#p•_fûe_›í_ªad
 
PSP_O_RDONLY


	)

80 
	#p•_fûe_›í_wrôe
 (
PSP_O_CREAT
 | 
PSP_O_WRONLY
 | 
PSP_O_TRUNC
)

	)

82 
	#fûe_›í
(
fûíame_èg
, 
fûíame
, 
mode
) \

83 
s32
 
fûíame_èg
 = 
	`s˚IoO≥n
(
fûíame
, 
p•_fûe_›í_
##
mode
, 0777) \

84 

	)

85 
	#fûe_check_vÆid
(
fûíame_èg
) \

86 (
fûíame_èg
 >= 0) \

87 

	)

88 
	#fûe_˛o£
(
fûíame_èg
) \

89 
	`s˚IoClo£
(
fûíame_èg
) \

90 

	)

91 
	#fûe_ªad
(
fûíame_èg
, 
buf„r
, 
size
) \

92 
	`s˚IoRód
(
fûíame_èg
, 
buf„r
, 
size
) \

93 

	)

94 
	#fûe_wrôe
(
fûíame_èg
, 
buf„r
, 
size
) \

95 
	`s˚IoWrôe
(
fûíame_èg
, 
buf„r
, 
size
) \

96 

	)

97 
	#fûe_£ek
(
fûíame_èg
, 
off£t
, 
ty≥
) \

98 
	`s˚IoL£ek
(
fûíame_èg
, 
off£t
, 
PSP_
##
ty≥
) \

99 

	)

100 
	#fûe_èg_ty≥
 
s32


	)

102 
	~<time.h
>

103 
	~<°dio.h
>

105 
	~"SDL.h
"

107 #ifde‡
ARM_ARCH


108 
	#fun˘i⁄_cc


	)

110 
	#fun˘i⁄_cc
 
	`__©åibuã__
((
	`ªg∑rm
(2)))

	)

113 
	tu8
;

114 sig√d 
	ts8
;

115 
	tu16
;

116 sig√d 
	ts16
;

117 
	tu32
;

118 sig√d 
	ts32
;

119 
	tu64
;

120 sig√d 
	ts64
;

122 
	#c⁄vît_∑Àâe
(
vÆue
) \

123 
vÆue
 = ((value & 0x1F) << 11) | ((value & 0x03E0) << 1) | (value >> 10) \

124 

	)

125 
	#°dio_fûe_›í_ªad
 "rb"

	)

126 
	#°dio_fûe_›í_wrôe
 "wb"

	)

128 
	#fûe_›í
(
fûíame_èg
, 
fûíame
, 
mode
) \

129 
FILE
 *
fûíame_èg
 = 
	`f›í
(
fûíame
, 
°dio_fûe_›í_
##
mode
) \

130 

	)

131 
	#fûe_check_vÆid
(
fûíame_èg
) \

132 (
fûíame_èg
) \

133 

	)

134 #ifde‡
GP2X_BUILD


136 
	#fûe_˛o£
(
fûíame_èg
) \

138 
	`sync
(); \

139 
	`f˛o£
(
fûíame_èg
); \

141 

	)

144 
	#fûe_˛o£
(
fûíame_èg
) \

145 
	`f˛o£
(
fûíame_èg
) \

146 

	)

149 
	#fûe_ªad
(
fûíame_èg
, 
buf„r
, 
size
) \

150 
	`‰ód
(
buf„r
, 
size
, 1, 
fûíame_èg
) \

151 

	)

152 
	#fûe_wrôe
(
fûíame_èg
, 
buf„r
, 
size
) \

153 
	`fwrôe
(
buf„r
, 
size
, 1, 
fûíame_èg
) \

154 

	)

155 
	#fûe_£ek
(
fûíame_èg
, 
off£t
, 
ty≥
) \

156 
	`f£ek
(
fûíame_èg
, 
off£t
, 
ty≥
) \

157 

	)

158 
	#fûe_èg_ty≥
 
FILE
 *

	)

164 #i‚de‡
PC_BUILD


166 
	#GP2X_SCREEN_WIDTH
 320

	)

167 
	#GP2X_SCREEN_HEIGHT
 240

	)

169 
	#GIZ_SCREEN_WIDTH
 320

	)

170 
	#GIZ_SCREEN_HEIGHT
 240

	)

172 #ifde‡
GP2X_BUILD


173 
	#SDL_SCREEN_WIDTH
 
GP2X_SCREEN_WIDTH


	)

174 
	#SDL_SCREEN_HEIGHT
 
GP2X_SCREEN_HEIGHT


	)

176 #ñi‡
deföed
(
GIZ_BUILD
)

178 
	#SDL_SCREEN_WIDTH
 
GIZ_SCREEN_WIDTH


	)

179 
	#SDL_SCREEN_HEIGHT
 
GIZ_SCREEN_HEIGHT


	)

188 
	#fûe_ªad_v¨übÀ
(
fûíame_èg
, 
v¨übÀ
) \

189 
	`fûe_ªad
(
fûíame_èg
, &
v¨übÀ
, (variable)) \

190 

	)

191 
	#fûe_wrôe_v¨übÀ
(
fûíame_èg
, 
v¨übÀ
) \

192 
	`fûe_wrôe
(
fûíame_èg
, &
v¨übÀ
, (variable)) \

193 

	)

197 
	#fûe_ªad_¨øy
(
fûíame_èg
, 
¨øy
) \

198 
	`fûe_ªad
(
fûíame_èg
, 
¨øy
, (array)) \

199 

	)

200 
	#fûe_wrôe_¨øy
(
fûíame_èg
, 
¨øy
) \

201 
	`fûe_wrôe
(
fûíame_èg
, 
¨øy
, (array)) \

202 

	)

205 
u32
 
	tfixed16_16
;

207 
	#Êﬂt_to_Â16_16
(
vÆue
) \

208 (
fixed16_16
)((
vÆue
) * 65536.0) \

209 

	)

210 
	#Â16_16_to_Êﬂt
(
vÆue
) \

211 ()((
vÆue
) / 65536.0) \

212 

	)

213 
	#u32_to_Â16_16
(
vÆue
) \

214 ((
vÆue
) << 16) \

215 

	)

216 
	#Â16_16_to_u32
(
vÆue
) \

217 ((
vÆue
) >> 16) \

218 

	)

219 
	#Â16_16_‰a˘i⁄Æ_∑π
(
vÆue
) \

220 ((
vÆue
) & 0xFFFF) \

221 

	)

222 
	#fixed_div
(
numî©‹
, 
díomö©‹
, 
bôs
) \

223 (((
numî©‹
 * (1 << 
bôs
)Ë+ (
díomö©‹
 / 2)) / denominator) \

224 

	)

225 
	#addªss8
(
ba£
, 
off£t
) \

226 *((
u8
 *)((u8 *)
ba£
 + (
off£t
))) \

227 

	)

228 
	#addªss16
(
ba£
, 
off£t
) \

229 *((
u16
 *)((
u8
 *)
ba£
 + (
off£t
))) \

230 

	)

231 
	#addªss32
(
ba£
, 
off£t
) \

232 *((
u32
 *)((
u8
 *)
ba£
 + (
off£t
))) \

233 

	)

234 
	~<uni°d.h
>

235 
	~<time.h
>

236 
	~<°dio.h
>

237 
	~<°dlib.h
>

238 
	~<°rög.h
>

239 
	~<°d¨g.h
>

240 
	~"SDL.h
"

241 
	~"˝u.h
"

242 
	~"mem‹y.h
"

243 
	~"video.h
"

244 
	~"öput.h
"

245 
	~"sound.h
"

246 
	~"maö.h
"

247 
	~"gui.h
"

248 
	~"zù.h
"

249 
	~"chóts.h
"

252 #ifde‡
PSP_BUILD


253 
	#¥ötf
 
p•DebugS¸ìnPrötf


	)

256 #ifde‡
PC_BUILD


257 
	#STDIO_DEBUG


	)

261 #ifde‡
GP2X_BUILD


262 
	~<°rögs.h
>

263 
	~"gp2x/gp2x.h
"

265 
	#¥ötf
(
f‹m©
, ...) \

266 
	`Ârötf
(
°dîr
, 
f‹m©
, ##
__VA_ARGS__
) \

267 

	)

268 
	#v¥ötf
(
f‹m©
, 
≠
) \

269 
	`vÂrötf
(
°dîr
, 
f‹m©
, 
≠
) \

270 

	)

271 
gp2x_ovî˛ock
();

	@cpu.c

24 
	~<°dio.h
>

25 
	~"comm⁄.h
"

27 
u32
 
	gmem‹y_ªgi⁄_ac˚ss_ªad_u8
[16];

28 
u32
 
	gmem‹y_ªgi⁄_ac˚ss_ªad_s8
[16];

29 
u32
 
	gmem‹y_ªgi⁄_ac˚ss_ªad_u16
[16];

30 
u32
 
	gmem‹y_ªgi⁄_ac˚ss_ªad_s16
[16];

31 
u32
 
	gmem‹y_ªgi⁄_ac˚ss_ªad_u32
[16];

32 
u32
 
	gmem‹y_ªgi⁄_ac˚ss_wrôe_u8
[16];

33 
u32
 
	gmem‹y_ªgi⁄_ac˚ss_wrôe_u16
[16];

34 
u32
 
	gmem‹y_ªgi⁄_ac˚ss_wrôe_u32
[16];

35 
u32
 
	gmem‹y_ªads_u8
;

36 
u32
 
	gmem‹y_ªads_s8
;

37 
u32
 
	gmem‹y_ªads_u16
;

38 
u32
 
	gmem‹y_ªads_s16
;

39 
u32
 
	gmem‹y_ªads_u32
;

40 
u32
 
	gmem‹y_wrôes_u8
;

41 
u32
 
	gmem‹y_wrôes_u16
;

42 
u32
 
	gmem‹y_wrôes_u32
;

44 c⁄° 
u8
 
	gbô_cou¡
[256] =

61 #ifde‡
REGISTER_USAGE_ANALYZE


63 
u64
 
	gö°ru˘i⁄s_tŸÆ
 = 0;

65 
u64
 
	g¨m_ªg_‰eq
[16];

66 
u64
 
	g¨m_ªg_ac˚ss_tŸÆ
 = 0;

67 
u64
 
	g¨m_ö°ru˘i⁄s_tŸÆ
 = 0;

69 
u64
 
	gthumb_ªg_‰eq
[16];

70 
u64
 
	gthumb_ªg_ac˚ss_tŸÆ
 = 0;

71 
u64
 
	gthumb_ö°ru˘i⁄s_tŸÆ
 = 0;

75 
	#usög_ªgi°î
(
ö°ru˘i⁄_£t
, , 
ty≥
) \

76 
ö°ru˘i⁄_£t
##
_ªg_‰eq
[]++; \

77 
ö°ru˘i⁄_£t
##
_ªg_ac˚ss_tŸÆ
++ \

78 

	)

79 
	#usög_ªgi°î_li°
(
ö°ru˘i⁄_£t
, 
æi°
, 
cou¡
) \

81 
u32
 
i
; \

82 
i
 = 0; i < 
cou¡
; i++) \

84 if((
ªg_li°
 >> 
i
) & 0x01) \

86 
	`usög_ªgi°î
(
ö°ru˘i⁄_£t
, 
i
, 
mem‹y_èrgë
); \

90 

	)

91 
	#usög_ö°ru˘i⁄
(
ö°ru˘i⁄_£t
) \

92 
ö°ru˘i⁄_£t
##
_ö°ru˘i⁄s_tŸÆ
++; \

93 
ö°ru˘i⁄s_tŸÆ
++ \

94 

	)

95 
	$s‹t_ègged_ñemít
(c⁄° *
_a
, c⁄° *
_b
)

97 c⁄° 
u64
 *
a
 = 
_a
;

98 c⁄° 
u64
 *
b
 = 
_b
;

100  ()(
b
[1] - 
a
[1]);

101 
	}
}

103 
	$¥öt_ªgi°î_ußge
()

105 
u32
 
i
;

106 
u64
 
¨m_ªg_‰eq_ègged
[32];

107 
u64
 
thumb_ªg_‰eq_ègged
[32];

108 
≥r˚¡
;

109 
≥r˚¡_tŸÆ
 = 0.0;

111 
i
 = 0; i < 16; i++)

113 
¨m_ªg_‰eq_ègged
[
i
 * 2] = i;

114 
¨m_ªg_‰eq_ègged
[(
i
 * 2Ë+ 1] = 
¨m_ªg_‰eq
[i];

115 
thumb_ªg_‰eq_ègged
[
i
 * 2] = i;

116 
thumb_ªg_‰eq_ègged
[(
i
 * 2Ë+ 1] = 
thumb_ªg_‰eq
[i];

119 
	`qs‹t
(
¨m_ªg_‰eq_ègged
, 16, (
u64
Ë* 2, 
s‹t_ègged_ñemít
);

120 
	`qs‹t
(
thumb_ªg_‰eq_ègged
, 16, (
u64
Ë* 2, 
s‹t_ègged_ñemít
);

122 
	`¥ötf
("ARMÑegister usage (%lf%% ARM instructions):\n",

123 (
¨m_ö°ru˘i⁄s_tŸÆ
 * 100.0Ë/ 
ö°ru˘i⁄s_tŸÆ
);

124 
i
 = 0; i < 16; i++)

126 
≥r˚¡
 = (
¨m_ªg_‰eq_ègged
[(
i
 * 2) + 1] * 100.0) /

127 
¨m_ªg_ac˚ss_tŸÆ
;

128 
≥r˚¡_tŸÆ
 +
≥r˚¡
;

129 
	`¥ötf
("r%02d: %lf%% (-- %lf%%)\n",

130 (
u32
)
¨m_ªg_‰eq_ègged
[(
i
 * 2)], 
≥r˚¡
, 
≥r˚¡_tŸÆ
);

133 
≥r˚¡_tŸÆ
 = 0.0;

135 
	`¥ötf
("\nThumbÑegister usage (%lf%% Thumb instructions):\n",

136 (
thumb_ö°ru˘i⁄s_tŸÆ
 * 100.0Ë/ 
ö°ru˘i⁄s_tŸÆ
);

137 
i
 = 0; i < 16; i++)

139 
≥r˚¡
 = (
thumb_ªg_‰eq_ègged
[(
i
 * 2) + 1] * 100.0) /

140 
thumb_ªg_ac˚ss_tŸÆ
;

141 
≥r˚¡_tŸÆ
 +
≥r˚¡
;

142 
	`¥ötf
("r%02d: %lf%% (-- %lf%%)\n",

143 (
u32
)
thumb_ªg_‰eq_ègged
[(
i
 * 2)], 
≥r˚¡
, 
≥r˚¡_tŸÆ
);

146 
	`mem£t
(
¨m_ªg_‰eq
, 0, (
u64
) * 16);

147 
	`mem£t
(
thumb_ªg_‰eq
, 0, (
u64
) * 16);

148 
¨m_ªg_ac˚ss_tŸÆ
 = 0;

149 
thumb_ªg_ac˚ss_tŸÆ
 = 0;

150 
	}
}

154 
	#usög_ªgi°î
(
ö°ru˘i⁄_£t
, , 
ty≥
) \

155 

	)

156 
	#usög_ªgi°î_li°
(
ö°ru˘i⁄_£t
, 
æi°
, 
cou¡
) \

157 

	)

158 
	#usög_ö°ru˘i⁄
(
ö°ru˘i⁄_£t
) \

159 

	)

163 
	#¨m_decode_d©a_¥oc_ªg
() \

164 
u32
 
∫
 = (
›code
 >> 16) & 0x0F; \

165 
u32
 
rd
 = (
›code
 >> 12) & 0x0F; \

166 
u32
 
rm
 = 
›code
 & 0x0F; \

167 
	`usög_ªgi°î
(
¨m
, 
rd
, 
›_de°
); \

168 
	`usög_ªgi°î
(
¨m
, 
∫
, 
›_§c
); \

169 
	`usög_ªgi°î
(
¨m
, 
rm
, 
›_§c
) \

170 

	)

171 
	#¨m_decode_d©a_¥oc_imm
() \

172 
u32
 
∫
 = (
›code
 >> 16) & 0x0F; \

173 
u32
 
rd
 = (
›code
 >> 12) & 0x0F; \

174 
u32
 
imm
; \

175 
	`r‹
(
imm
, 
›code
 & 0xFF, ((opcode >> 8) & 0x0F) * 2); \

176 
	`usög_ªgi°î
(
¨m
, 
rd
, 
›_de°
); \

177 
	`usög_ªgi°î
(
¨m
, 
∫
, 
›_§c
) \

178 

	)

179 
	#¨m_decode_p§_ªg
() \

180 
u32
 
p§_fõld
 = (
›code
 >> 16) & 0x0F; \

181 
u32
 
rd
 = (
›code
 >> 12) & 0x0F; \

182 
u32
 
rm
 = 
›code
 & 0x0F; \

183 
	`usög_ªgi°î
(
¨m
, 
rd
, 
›_de°
); \

184 
	`usög_ªgi°î
(
¨m
, 
rm
, 
›_§c
) \

185 

	)

186 
	#¨m_decode_p§_imm
() \

187 
u32
 
p§_fõld
 = (
›code
 >> 16) & 0x0F; \

188 
u32
 
rd
 = (
›code
 >> 12) & 0x0F; \

189 
u32
 
imm
; \

190 
	`r‹
(
imm
, 
›code
 & 0xFF, ((opcode >> 8) & 0x0F) * 2); \

191 
	`usög_ªgi°î
(
¨m
, 
rd
, 
›_de°
) \

192 

	)

193 
	#¨m_decode_bønchx
() \

194 
u32
 
∫
 = 
›code
 & 0x0F; \

195 
	`usög_ªgi°î
(
¨m
, 
∫
, 
bønch_èrgë
) \

196 

	)

197 
	#¨m_decode_mu…ùly
() \

198 
u32
 
rd
 = (
›code
 >> 16) & 0x0F; \

199 
u32
 
∫
 = (
›code
 >> 12) & 0x0F; \

200 
u32
 
rs
 = (
›code
 >> 8) & 0x0F; \

201 
u32
 
rm
 = 
›code
 & 0x0F; \

202 
	`usög_ªgi°î
(
¨m
, 
rd
, 
›_de°
); \

203 
	`usög_ªgi°î
(
¨m
, 
∫
, 
›_§c
); \

204 
	`usög_ªgi°î
(
¨m
, 
rm
, 
›_§c
) \

205 

	)

206 
	#¨m_decode_mu…ùly_l⁄g
() \

207 
u32
 
rdhi
 = (
›code
 >> 16) & 0x0F; \

208 
u32
 
rdlo
 = (
›code
 >> 12) & 0x0F; \

209 
u32
 
∫
 = (
›code
 >> 8) & 0x0F; \

210 
u32
 
rm
 = 
›code
 & 0x0F; \

211 
	`usög_ªgi°î
(
¨m
, 
rdhi
, 
›_de°
); \

212 
	`usög_ªgi°î
(
¨m
, 
rdlo
, 
›_de°
); \

213 
	`usög_ªgi°î
(
¨m
, 
∫
, 
›_§c
); \

214 
	`usög_ªgi°î
(
¨m
, 
rm
, 
›_§c
) \

215 

	)

216 
	#¨m_decode_sw≠
() \

217 
u32
 
∫
 = (
›code
 >> 16) & 0x0F; \

218 
u32
 
rd
 = (
›code
 >> 12) & 0x0F; \

219 
u32
 
rm
 = 
›code
 & 0x0F; \

220 
	`usög_ªgi°î
(
¨m
, 
rd
, 
mem‹y_èrgë
); \

221 
	`usög_ªgi°î
(
¨m
, 
∫
, 
mem‹y_ba£
); \

222 
	`usög_ªgi°î
(
¨m
, 
rm
, 
mem‹y_èrgë
) \

223 

	)

224 
	#¨m_decode_hÆf_å™s_r
() \

225 
u32
 
∫
 = (
›code
 >> 16) & 0x0F; \

226 
u32
 
rd
 = (
›code
 >> 12) & 0x0F; \

227 
u32
 
rm
 = 
›code
 & 0x0F; \

228 
	`usög_ªgi°î
(
¨m
, 
rd
, 
mem‹y_èrgë
); \

229 
	`usög_ªgi°î
(
¨m
, 
∫
, 
mem‹y_ba£
); \

230 
	`usög_ªgi°î
(
¨m
, 
rm
, 
mem‹y_off£t
) \

231 

	)

232 
	#¨m_decode_hÆf_å™s_of
() \

233 
u32
 
∫
 = (
›code
 >> 16) & 0x0F; \

234 
u32
 
rd
 = (
›code
 >> 12) & 0x0F; \

235 
u32
 
off£t
 = ((
›code
 >> 4) & 0xF0) | (opcode & 0x0F); \

236 
	`usög_ªgi°î
(
¨m
, 
rd
, 
mem‹y_èrgë
); \

237 
	`usög_ªgi°î
(
¨m
, 
∫
, 
mem‹y_ba£
) \

238 

	)

239 
	#¨m_decode_d©a_å™s_imm
() \

240 
u32
 
∫
 = (
›code
 >> 16) & 0x0F; \

241 
u32
 
rd
 = (
›code
 >> 12) & 0x0F; \

242 
u32
 
off£t
 = 
›code
 & 0x0FFF; \

243 
	`usög_ªgi°î
(
¨m
, 
rd
, 
mem‹y_èrgë
); \

244 
	`usög_ªgi°î
(
¨m
, 
∫
, 
mem‹y_ba£
) \

245 

	)

246 
	#¨m_decode_d©a_å™s_ªg
() \

247 
u32
 
∫
 = (
›code
 >> 16) & 0x0F; \

248 
u32
 
rd
 = (
›code
 >> 12) & 0x0F; \

249 
u32
 
rm
 = 
›code
 & 0x0F; \

250 
	`usög_ªgi°î
(
¨m
, 
rd
, 
mem‹y_èrgë
); \

251 
	`usög_ªgi°î
(
¨m
, 
∫
, 
mem‹y_ba£
); \

252 
	`usög_ªgi°î
(
¨m
, 
rm
, 
mem‹y_off£t
) \

253 

	)

254 
	#¨m_decode_block_å™s
() \

255 
u32
 
∫
 = (
›code
 >> 16) & 0x0F; \

256 
u32
 
ªg_li°
 = 
›code
 & 0xFFFF; \

257 
	`usög_ªgi°î
(
¨m
, 
∫
, 
mem‹y_ba£
); \

258 
	`usög_ªgi°î_li°
(
¨m
, 
ªg_li°
, 16) \

259 

	)

260 
	#¨m_decode_bønch
() \

261 
s32
 
off£t
 = ((s32)(
›code
 & 0xFFFFFF) << 8) >> 6 \

262 

	)

264 
	#thumb_decode_shi·
() \

265 
u32
 
imm
 = (
›code
 >> 6) & 0x1F; \

266 
u32
 
rs
 = (
›code
 >> 3) & 0x07; \

267 
u32
 
rd
 = 
›code
 & 0x07; \

268 
	`usög_ªgi°î
(
thumb
, 
rd
, 
›_de°
); \

269 
	`usög_ªgi°î
(
thumb
, 
rs
, 
›_shi·
) \

270 

	)

271 
	#thumb_decode_add_sub
() \

272 
u32
 
∫
 = (
›code
 >> 6) & 0x07; \

273 
u32
 
rs
 = (
›code
 >> 3) & 0x07; \

274 
u32
 
rd
 = 
›code
 & 0x07; \

275 
	`usög_ªgi°î
(
thumb
, 
rd
, 
›_de°
); \

276 
	`usög_ªgi°î
(
thumb
, 
∫
, 
›_§c
); \

277 
	`usög_ªgi°î
(
thumb
, 
∫
, 
›_§c
) \

278 

	)

279 
	#thumb_decode_add_sub_imm
() \

280 
u32
 
imm
 = (
›code
 >> 6) & 0x07; \

281 
u32
 
rs
 = (
›code
 >> 3) & 0x07; \

282 
u32
 
rd
 = 
›code
 & 0x07; \

283 
	`usög_ªgi°î
(
thumb
, 
rd
, 
›_§c_de°
); \

284 
	`usög_ªgi°î
(
thumb
, 
rs
, 
›_§c
) \

285 

	)

286 
	#thumb_decode_imm
() \

287 
u32
 
imm
 = 
›code
 & 0xFF; \

288 
	`usög_ªgi°î
(
thumb
, ((
›code
 >> 8Ë& 0x07), 
›_de°
) \

289 

	)

290 
	#thumb_decode_Æu_›
() \

291 
u32
 
rs
 = (
›code
 >> 3) & 0x07; \

292 
u32
 
rd
 = 
›code
 & 0x07; \

293 
	`usög_ªgi°î
(
thumb
, 
rd
, 
›_§c_de°
); \

294 
	`usög_ªgi°î
(
thumb
, 
rs
, 
›_§c
) \

295 

	)

296 
	#thumb_decode_húeg_›
() \

297 
u32
 
rs
 = (
›code
 >> 3) & 0x0F; \

298 
u32
 
rd
 = ((
›code
 >> 4) & 0x08) | (opcode & 0x07); \

299 
	`usög_ªgi°î
(
thumb
, 
rd
, 
›_§c_de°
); \

300 
	`usög_ªgi°î
(
thumb
, 
rs
, 
›_§c
) \

301 

	)

303 
	#thumb_decode_mem_ªg
() \

304 
u32
 
ro
 = (
›code
 >> 6) & 0x07; \

305 
u32
 
rb
 = (
›code
 >> 3) & 0x07; \

306 
u32
 
rd
 = 
›code
 & 0x07; \

307 
	`usög_ªgi°î
(
thumb
, 
rd
, 
mem‹y_èrgë
); \

308 
	`usög_ªgi°î
(
thumb
, 
rb
, 
mem‹y_ba£
); \

309 
	`usög_ªgi°î
(
thumb
, 
ro
, 
mem‹y_off£t
) \

310 

	)

312 
	#thumb_decode_mem_imm
() \

313 
u32
 
imm
 = (
›code
 >> 6) & 0x1F; \

314 
u32
 
rb
 = (
›code
 >> 3) & 0x07; \

315 
u32
 
rd
 = 
›code
 & 0x07; \

316 
	`usög_ªgi°î
(
thumb
, 
rd
, 
mem‹y_èrgë
); \

317 
	`usög_ªgi°î
(
thumb
, 
rb
, 
mem‹y_ba£
) \

318 

	)

320 
	#thumb_decode_add_•
() \

321 
u32
 
imm
 = 
›code
 & 0x7F; \

322 
	`usög_ªgi°î
(
thumb
, 
REG_SP
, 
›_de°
) \

323 

	)

324 
	#thumb_decode_æi°
() \

325 
u32
 
ªg_li°
 = 
›code
 & 0xFF; \

326 
	`usög_ªgi°î_li°
(
thumb
, 
æi°
, 8) \

327 

	)

328 
	#thumb_decode_bønch_c⁄d
() \

329 
s32
 
off£t
 = (
s8
)(
›code
 & 0xFF) \

330 

	)

331 
	#thumb_decode_swi
() \

332 
u32
 
commít
 = 
›code
 & 0xFF \

333 

	)

334 
	#thumb_decode_bønch
() \

335 
u32
 
off£t
 = 
›code
 & 0x07FF \

336 

	)

338 
	#gë_shi·_ªgi°î
(
de°
) \

339 
u32
 
shi·
 = 
ªg
[(
›code
 >> 8) & 0x0F]; \

340 
	`usög_ªgi°î
(
¨m
, ((
›code
 >> 8Ë& 0x0F), 
›_shi·
); \

341 
de°
 = 
ªg
[
rm
]; \

342 if(
rm
 == 15) \

343 
de°
 += 4 \

344 

	)

346 
	#ˇlcuœã_z_Êag
(
de°
) \

347 
z_Êag
 = (
de°
 == 0) \

348 

	)

349 
	#ˇlcuœã_n_Êag
(
de°
) \

350 
n_Êag
 = ((sig√d)
de°
 < 0) \

351 

	)

352 
	#ˇlcuœã_c_Êag_sub
(
de°
, 
§c_a
, 
§c_b
) \

353 
c_Êag
 = (()
§c_b
 <()
§c_a
) \

354 

	)

355 
	#ˇlcuœã_v_Êag_sub
(
de°
, 
§c_a
, 
§c_b
) \

356 
v_Êag
 = ((sig√d)
§c_b
 > (sig√d)
§c_a
Ë!((sig√d)
de°
 < 0) \

357 

	)

358 
	#ˇlcuœã_c_Êag_add
(
de°
, 
§c_a
, 
§c_b
) \

359 
c_Êag
 = (()
de°
 < ()
§c_a
) \

360 

	)

361 
	#ˇlcuœã_v_Êag_add
(
de°
, 
§c_a
, 
§c_b
) \

362 
v_Êag
 = ((sig√d)
de°
 < (sig√d)
§c_a
Ë!((sig√d)
§c_b
 < 0) \

363 

	)

365 
	#ˇlcuœã_ªg_sh
() \

366 
u32
 
ªg_sh
; \

367 (
›code
 >> 4) & 0x07) \

372 
ªg_sh
 = 
ªg
[
rm
] << ((
›code
 >> 7) & 0x1F); \

379 
	`gë_shi·_ªgi°î
(
ªg_sh
); \

380 if(
shi·
 <= 31) \

381 
ªg_sh
 =Ñeg_sh << 
shi·
; \

383 
ªg_sh
 = 0; \

390 
u32
 
imm
 = (
›code
 >> 7) & 0x1F; \

391 if(
imm
 == 0) \

392 
ªg_sh
 = 0; \

394 
ªg_sh
 = 
ªg
[
rm
] >> 
imm
; \

401 
	`gë_shi·_ªgi°î
(
ªg_sh
); \

402 if(
shi·
 <= 31) \

403 
ªg_sh
 =Ñeg_sh >> 
shi·
; \

405 
ªg_sh
 = 0; \

412 
u32
 
imm
 = (
›code
 >> 7) & 0x1F; \

413 
ªg_sh
 = 
ªg
[
rm
]; \

415 if(
imm
 == 0) \

416 
ªg_sh
 = (
s32
)reg_sh >> 31; \

418 
ªg_sh
 = (
s32
Ïeg_sh >> 
imm
; \

425 
	`gë_shi·_ªgi°î
(
ªg_sh
); \

426 if(
shi·
 <= 31) \

427 
ªg_sh
 = (
s32
Ïeg_sh >> 
shi·
; \

429 
ªg_sh
 = (
s32
)reg_sh >> 31; \

436 
u32
 
imm
 = (
›code
 >> 7) & 0x1F; \

438 if(
imm
 == 0) \

439 
ªg_sh
 = (
ªg
[
rm
] >> 1Ë| (
c_Êag
 << 31); \

441 
	`r‹
(
ªg_sh
, 
ªg
[
rm
], 
imm
); \

448 
	`gë_shi·_ªgi°î
(
ªg_sh
); \

449 
	`r‹
(
ªg_sh
,Ñeg_sh, 
shi·
); \

453 

	)

454 
	#ˇlcuœã_ªg_sh_Êags
() \

455 
u32
 
ªg_sh
; \

456 (
›code
 >> 4) & 0x07) \

461 
u32
 
imm
 = (
›code
 >> 7) & 0x1F; \

462 
ªg_sh
 = 
ªg
[
rm
]; \

464 if(
imm
 != 0) \

466 
c_Êag
 = (
ªg_sh
 >> (32 - 
imm
)) & 0x01; \

467 
ªg_sh
 <<
imm
; \

476 
	`gë_shi·_ªgi°î
(
ªg_sh
); \

477 if(
shi·
 != 0) \

479 if(
shi·
 > 31) \

481 if(
shi·
 == 32) \

482 
c_Êag
 = 
ªg_sh
 & 0x01; \

484 
c_Êag
 = 0; \

485 
ªg_sh
 = 0; \

489 
c_Êag
 = (
ªg_sh
 >> (32 - 
shi·
)) & 0x01; \

490 
ªg_sh
 <<
shi·
; \

499 
u32
 
imm
 = (
›code
 >> 7) & 0x1F; \

500 
ªg_sh
 = 
ªg
[
rm
]; \

501 if(
imm
 == 0) \

503 
c_Êag
 = 
ªg_sh
 >> 31; \

504 
ªg_sh
 = 0; \

508 
c_Êag
 = (
ªg_sh
 >> (
imm
 - 1)) & 0x01; \

509 
ªg_sh
 >>
imm
; \

517 
	`gë_shi·_ªgi°î
(
ªg_sh
); \

518 if(
shi·
 != 0) \

520 if(
shi·
 > 31) \

522 if(
shi·
 == 32) \

523 
c_Êag
 = (
ªg_sh
 >> 31) & 0x01; \

525 
c_Êag
 = 0; \

526 
ªg_sh
 = 0; \

530 
c_Êag
 = (
ªg_sh
 >> (
shi·
 - 1)) & 0x01; \

531 
ªg_sh
 >>
shi·
; \

540 
u32
 
imm
 = (
›code
 >> 7) & 0x1F; \

541 
ªg_sh
 = 
ªg
[
rm
]; \

542 if(
imm
 == 0) \

544 
ªg_sh
 = (
s32
)reg_sh >> 31; \

545 
c_Êag
 = 
ªg_sh
 & 0x01; \

549 
c_Êag
 = (
ªg_sh
 >> (
imm
 - 1)) & 0x01; \

550 
ªg_sh
 = (
s32
Ïeg_sh >> 
imm
; \

558 
	`gë_shi·_ªgi°î
(
ªg_sh
); \

559 if(
shi·
 != 0) \

561 if(
shi·
 > 31) \

563 
ªg_sh
 = (
s32
)reg_sh >> 31; \

564 
c_Êag
 = 
ªg_sh
 & 0x01; \

568 
c_Êag
 = (
ªg_sh
 >> (
shi·
 - 1)) & 0x01; \

569 
ªg_sh
 = (
s32
Ïeg_sh >> 
shi·
; \

578 
u32
 
imm
 = (
›code
 >> 7) & 0x1F; \

579 
ªg_sh
 = 
ªg
[
rm
]; \

580 if(
imm
 == 0) \

582 
u32
 
ﬁd_c_Êag
 = 
c_Êag
; \

583 
c_Êag
 = 
ªg_sh
 & 0x01; \

584 
ªg_sh
 = (ªg_sh >> 1Ë| (
ﬁd_c_Êag
 << 31); \

588 
c_Êag
 = (
ªg_sh
 >> (
imm
 - 1)) & 0x01; \

589 
	`r‹
(
ªg_sh
,Ñeg_sh, 
imm
); \

597 
	`gë_shi·_ªgi°î
(
ªg_sh
); \

598 if(
shi·
 != 0) \

600 
c_Êag
 = (
ªg_sh
 >> (
shi·
 - 1)) & 0x01; \

601 
	`r‹
(
ªg_sh
,Ñeg_sh, 
shi·
); \

606 

	)

607 
	#ˇlcuœã_ªg_off£t
() \

608 
u32
 
ªg_off£t
; \

609 (
›code
 >> 5) & 0x03) \

614 
ªg_off£t
 = 
ªg
[
rm
] << ((
›code
 >> 7) & 0x1F); \

621 
u32
 
imm
 = (
›code
 >> 7) & 0x1F; \

622 if(
imm
 == 0) \

623 
ªg_off£t
 = 0; \

625 
ªg_off£t
 = 
ªg
[
rm
] >> 
imm
; \

632 
u32
 
imm
 = (
›code
 >> 7) & 0x1F; \

633 if(
imm
 == 0) \

634 
ªg_off£t
 = (
s32
)
ªg
[
rm
] >> 31; \

636 
ªg_off£t
 = (
s32
)
ªg
[
rm
] >> 
imm
; \

643 
u32
 
imm
 = (
›code
 >> 7) & 0x1F; \

644 if(
imm
 == 0) \

645 
ªg_off£t
 = (
ªg
[
rm
] >> 1Ë| (
c_Êag
 << 31); \

647 
	`r‹
(
ªg_off£t
, 
ªg
[
rm
], 
imm
); \

651 

	)

652 
	#ˇlcuœã_Êags_add
(
de°
, 
§c_a
, 
§c_b
) \

653 
	`ˇlcuœã_z_Êag
(
de°
); \

654 
	`ˇlcuœã_n_Êag
(
de°
); \

655 
	`ˇlcuœã_c_Êag_add
(
de°
, 
§c_a
, 
§c_b
); \

656 
	`ˇlcuœã_v_Êag_add
(
de°
, 
§c_a
, 
§c_b
) \

657 

	)

658 
	#ˇlcuœã_Êags_sub
(
de°
, 
§c_a
, 
§c_b
) \

659 
	`ˇlcuœã_z_Êag
(
de°
); \

660 
	`ˇlcuœã_n_Êag
(
de°
); \

661 
	`ˇlcuœã_c_Êag_sub
(
de°
, 
§c_a
, 
§c_b
); \

662 
	`ˇlcuœã_v_Êag_sub
(
de°
, 
§c_a
, 
§c_b
) \

663 

	)

664 
	#ˇlcuœã_Êags_logic
(
de°
) \

665 
	`ˇlcuœã_z_Êag
(
de°
); \

666 
	`ˇlcuœã_n_Êag
(
de°
) \

667 

	)

668 
	#exåa˘_Êags
() \

669 
n_Êag
 = 
ªg
[
REG_CPSR
] >> 31; \

670 
z_Êag
 = (
ªg
[
REG_CPSR
] >> 30) & 0x01; \

671 
c_Êag
 = (
ªg
[
REG_CPSR
] >> 29) & 0x01; \

672 
v_Êag
 = (
ªg
[
REG_CPSR
] >> 28) & 0x01; \

673 

	)

674 
	#cﬁœp£_Êags
() \

675 
ªg
[
REG_CPSR
] = (
n_Êag
 << 31Ë| (
z_Êag
 << 30Ë| (
c_Êag
 << 29) | \

676 (
v_Êag
 << 28Ë| (
ªg
[
REG_CPSR
] & 0xFF) \

677 

	)

678 
	#mem‹y_ªgi⁄
(
r_de°
, 
l_de°
, 
addªss
) \

679 
r_de°
 = 
mem‹y_ªgi⁄s
[
addªss
 >> 24]; \

680 
l_de°
 = 
mem‹y_limôs
[
addªss
 >> 24] \

681 

	)

683 
	#pc_ªgi⁄
() \

684 
	`mem‹y_ªgi⁄
(
pc_ªgi⁄
, 
pc_limô
, 
pc
) \

685 

	)

686 
	#check_pc_ªgi⁄
() \

687 
√w_pc_ªgi⁄
 = (
pc
 >> 15); \

688 if(
√w_pc_ªgi⁄
 !
pc_ªgi⁄
) \

690 
pc_ªgi⁄
 = 
√w_pc_ªgi⁄
; \

691 
pc_addªss_block
 = 
mem‹y_m≠_ªad
[
√w_pc_ªgi⁄
]; \

693 if(
pc_addªss_block
 =
NULL
) \

694 
pc_addªss_block
 = 
	`lﬂd_gamïak_∑ge
(
pc_ªgi⁄
 & 0x3FF); \

696 

	)

697 
u32
 
	gbønch_èrgës
 = 0;

698 
u32
 
	ghigh_‰equícy_bønch_èrgës
 = 0;

700 
	#BRANCH_ACTIVITY_THRESHOLD
 50

	)

702 
	#¨m_upd©e_pc
() \

703 
pc
 = 
ªg
[
REG_PC
] \

704 

	)

705 
	#¨m_pc_off£t
(
vÆ
) \

706 
pc
 +
vÆ
; \

707 
ªg
[
REG_PC
] = 
pc
 \

708 

	)

709 
	#¨m_pc_off£t_upd©e
(
vÆ
) \

710 
pc
 +
vÆ
; \

711 
ªg
[
REG_PC
] = 
pc
 \

712 

	)

713 
	#¨m_pc_off£t_upd©e_dúe˘
(
vÆ
) \

714 
pc
 = 
vÆ
; \

715 
ªg
[
REG_PC
] = 
pc
 \

716 

	)

722 
	#check_f‹_öãºu±s
() \

723 if((
io_ªgi°îs
[
REG_IE
] & io_ªgi°îs[
REG_IF
]) && \

724 
io_ªgi°îs
[
REG_IME
] && ((
ªg
[
REG_CPSR
] & 0x80) == 0)) \

726 
ªg_mode
[
MODE_IRQ
][6] = 
ªg
[
REG_PC
] + 4; \

727 
•§
[
MODE_IRQ
] = 
ªg
[
REG_CPSR
]; \

728 
ªg
[
REG_CPSR
] = 0xD2; \

729 
ªg
[
REG_PC
] = 0x00000018; \

730 
	`¨m_upd©e_pc
(); \

731 
	`£t_˝u_mode
(
MODE_IRQ
); \

732 
¨m_lo›
; \

734 

	)

735 
	#¨m_•§_ª°‹e
() \

736 if(
rd
 == 15) \

738 if(
ªg
[
CPU_MODE
] !
MODE_USER
) \

740 
ªg
[
REG_CPSR
] = 
•§
[ªg[
CPU_MODE
]]; \

741 
	`exåa˘_Êags
(); \

742 
	`£t_˝u_mode
(
˝u_modes
[
ªg
[
REG_CPSR
] & 0x1F]); \

743 
	`check_f‹_öãºu±s
(); \

745 
	`¨m_upd©e_pc
(); \

747 if(
ªg
[
REG_CPSR
] & 0x20) \

748 
thumb_lo›
; \

750 

	)

751 
	#¨m_d©a_¥oc_Êags_ªg
() \

752 
	`¨m_decode_d©a_¥oc_ªg
(); \

753 
	`ˇlcuœã_ªg_sh_Êags
() \

754 

	)

755 
	#¨m_d©a_¥oc_ªg
() \

756 
	`¨m_decode_d©a_¥oc_ªg
(); \

757 
	`ˇlcuœã_ªg_sh
() \

758 

	)

759 
	#¨m_d©a_¥oc_Êags_imm
() \

760 
	`¨m_decode_d©a_¥oc_imm
() \

761 

	)

762 
	#¨m_d©a_¥oc_imm
() \

763 
	`¨m_decode_d©a_¥oc_imm
() \

764 

	)

765 
	#¨m_d©a_¥oc
(
ex¥
, 
ty≥
) \

767 
u32
 
de°
; \

768 
	`¨m_pc_off£t
(8); \

769 
¨m_d©a_¥oc_
##
	`ty≥
(); \

770 
de°
 = 
ex¥
; \

771 
	`¨m_pc_off£t
(-4); \

772 
ªg
[
rd
] = 
de°
; \

774 if(
rd
 == 15) \

776 
	`¨m_upd©e_pc
(); \

779 

	)

780 
	#Êags_v¨s
(
§c_a
, 
§c_b
) \

781 
u32
 
de°
; \

782 c⁄° 
u32
 
_ß
 = 
§c_a
; \

783 c⁄° 
u32
 
_sb
 = 
§c_b
 \

784 

	)

785 
	#¨m_d©a_¥oc_logic_Êags
(
ex¥
, 
ty≥
) \

787 
	`¨m_pc_off£t
(8); \

788 
¨m_d©a_¥oc_Êags_
##
	`ty≥
(); \

789 
u32
 
de°
 = 
ex¥
; \

790 
	`ˇlcuœã_Êags_logic
(
de°
); \

791 
	`¨m_pc_off£t
(-4); \

792 
ªg
[
rd
] = 
de°
; \

793 
	`¨m_•§_ª°‹e
(); \

795 

	)

796 
	#¨m_d©a_¥oc_add_Êags
(
§c_a
, 
§c_b
, 
ty≥
) \

798 
	`¨m_pc_off£t
(8); \

799 
¨m_d©a_¥oc_
##
	`ty≥
(); \

800 
	`Êags_v¨s
(
§c_a
, 
§c_b
); \

801 
de°
 = 
_ß
 + 
_sb
; \

802 
	`ˇlcuœã_Êags_add
(
de°
, 
_ß
, 
_sb
); \

803 
	`¨m_pc_off£t
(-4); \

804 
ªg
[
rd
] = 
de°
; \

805 
	`¨m_•§_ª°‹e
(); \

806 }

	)

808 
	#¨m_d©a_¥oc_sub_Êags
(
§c_a
, 
§c_b
, 
ty≥
) \

810 
	`¨m_pc_off£t
(8); \

811 
¨m_d©a_¥oc_
##
	`ty≥
(); \

812 
	`Êags_v¨s
(
§c_a
, 
§c_b
); \

813 
de°
 = 
_ß
 - 
_sb
; \

814 
	`ˇlcuœã_Êags_sub
(
de°
, 
_ß
, 
_sb
); \

815 
	`¨m_pc_off£t
(-4); \

816 
ªg
[
rd
] = 
de°
; \

817 
	`¨m_•§_ª°‹e
(); \

819 

	)

820 
	#¨m_d©a_¥oc_ã°_logic
(
ex¥
, 
ty≥
) \

822 
	`¨m_pc_off£t
(8); \

823 
¨m_d©a_¥oc_Êags_
##
	`ty≥
(); \

824 
u32
 
de°
 = 
ex¥
; \

825 
	`ˇlcuœã_Êags_logic
(
de°
); \

826 
	`¨m_pc_off£t
(-4); \

828 

	)

829 
	#¨m_d©a_¥oc_ã°_add
(
§c_a
, 
§c_b
, 
ty≥
) \

831 
	`¨m_pc_off£t
(8); \

832 
¨m_d©a_¥oc_
##
	`ty≥
(); \

833 
	`Êags_v¨s
(
§c_a
, 
§c_b
); \

834 
de°
 = 
_ß
 + 
_sb
; \

835 
	`ˇlcuœã_Êags_add
(
de°
, 
_ß
, 
_sb
); \

836 
	`¨m_pc_off£t
(-4); \

838 

	)

839 
	#¨m_d©a_¥oc_ã°_sub
(
§c_a
, 
§c_b
, 
ty≥
) \

841 
	`¨m_pc_off£t
(8); \

842 
¨m_d©a_¥oc_
##
	`ty≥
(); \

843 
	`Êags_v¨s
(
§c_a
, 
§c_b
); \

844 
de°
 = 
_ß
 - 
_sb
; \

845 
	`ˇlcuœã_Êags_sub
(
de°
, 
_ß
, 
_sb
); \

846 
	`¨m_pc_off£t
(-4); \

848 

	)

849 
	#¨m_mu…ùly_Êags_yes
(
_de°
) \

850 
	`ˇlcuœã_z_Êag
(
_de°
); \

851 
	`ˇlcuœã_n_Êag
(
_de°
); \

852 

	)

853 
	#¨m_mu…ùly_Êags_no
(
_de°
) \

854 

	)

855 
	#¨m_mu…ùly_l⁄g_Êags_yes
(
_de°_lo
, 
_de°_hi
) \

856 
z_Êag
 = (
_de°_lo
 =0Ë& (
_de°_hi
 == 0); \

857 
	`ˇlcuœã_n_Êag
(
_de°_hi
) \

858 

	)

859 
	#¨m_mu…ùly_l⁄g_Êags_no
(
_de°_lo
, 
_de°_hi
) \

860 

	)

861 
	#¨m_mu…ùly
(
add_›
, 
Êags
) \

863 
u32
 
de°
; \

864 
	`¨m_decode_mu…ùly
(); \

865 
de°
 = (
ªg
[
rm
] *Ñeg[
rs
]Ë
add_›
; \

866 
¨m_mu…ùly_Êags_
##
	`Êags
(
de°
); \

867 
ªg
[
rd
] = 
de°
; \

868 
	`¨m_pc_off£t
(4); \

870 

	)

871 
	#¨m_mu…ùly_l⁄g_add›
(
ty≥
) \

872 + ((
ty≥
##64)(((—y≥##64)
ªg
[
rdhi
]Ë<< 32Ë|Ñeg[
rdlo
])); \

873 

	)

874 
	#¨m_mu…ùly_l⁄g
(
add_›
, 
Êags
, 
ty≥
) \

876 
ty≥
##64 
de°
; \

877 
u32
 
de°_lo
; \

878 
u32
 
de°_hi
; \

879 
	`¨m_decode_mu…ùly_l⁄g
(); \

880 
de°
 = ((
ty≥
##64)(—y≥##32)
ªg
[
rm
]) * \

881 (
ty≥
##64)(—y≥##32)
ªg
[
∫
])Ë
add_›
; \

882 
de°_lo
 = (
u32
)
de°
; \

883 
de°_hi
 = (
u32
)(
de°
 >> 32); \

884 
¨m_mu…ùly_l⁄g_Êags_
##
	`Êags
(
de°_lo
, 
de°_hi
); \

885 
ªg
[
rdlo
] = 
de°_lo
; \

886 
ªg
[
rdhi
] = 
de°_hi
; \

887 
	`¨m_pc_off£t
(4); \

889 

	)

890 c⁄° 
u32
 
	gp§_masks
[16] =

898 
	#¨m_p§_ªad
(
dummy
, 
p§_ªg
) \

899 
	`cﬁœp£_Êags
(); \

900 
ªg
[
rd
] = 
p§_ªg
 \

901 

	)

902 
	#¨m_p§_°‹e_˝§
(
sour˚
) \

903 
ªg
[
REG_CPSR
] = (
sour˚
 & 
°‹e_mask
) | (reg[REG_CPSR] & (~store_mask)); \

904 
	`exåa˘_Êags
(); \

905 if(
°‹e_mask
 & 0xFF) \

907 
	`£t_˝u_mode
(
˝u_modes
[
ªg
[
REG_CPSR
] & 0x1F]); \

908 
	`check_f‹_öãºu±s
(); \

910 

	)

911 
	#¨m_p§_°‹e_•§
(
sour˚
) \

912 
u32
 
_p§
 = 
•§
[
ªg
[
CPU_MODE
]]; \

913 
•§
[
ªg
[
CPU_MODE
]] = (
sour˚
 & 
°‹e_mask
Ë| (
_p§
 & (~store_mask)) \

914 

	)

915 
	#¨m_p§_°‹e
(
sour˚
, 
p§_ªg
) \

916 c⁄° 
u32
 
°‹e_mask
 = 
p§_masks
[
p§_fõld
]; \

917 
¨m_p§_°‹e_
##
	`p§_ªg
(
sour˚
) \

918 

	)

919 
	#¨m_p§_§c_ªg
 
ªg
[
rm
]

	)

921 
	#¨m_p§_§c_imm
 
imm


	)

923 
	#¨m_p§
(
›_ty≥
, 
å™s„r_ty≥
, 
p§_ªg
) \

925 
¨m_decode_p§_
##
	`›_ty≥
(); \

926 
	`¨m_pc_off£t
(4); \

927 
¨m_p§_
##
	`å™s„r_ty≥
(
¨m_p§_§c_
##
›_ty≥
, 
p§_ªg
); \

929 

	)

930 
	#¨m_d©a_å™s_ªg
() \

931 
	`¨m_decode_d©a_å™s_ªg
(); \

932 
	`ˇlcuœã_ªg_off£t
() \

933 

	)

934 
	#¨m_d©a_å™s_imm
() \

935 
	`¨m_decode_d©a_å™s_imm
() \

936 

	)

937 
	#¨m_d©a_å™s_hÆf_ªg
() \

938 
	`¨m_decode_hÆf_å™s_r
() \

939 

	)

940 
	#¨m_d©a_å™s_hÆf_imm
() \

941 
	`¨m_decode_hÆf_å™s_of
() \

942 

	)

943 
	#Æig√d_addªss_mask8
 0xF0000000

	)

944 
	#Æig√d_addªss_mask16
 0xF0000001

	)

945 
	#Æig√d_addªss_mask32
 0xF0000003

	)

947 
	#Á°_ªad_mem‹y
(
size
, 
ty≥
, 
addªss
, 
de°
) \

949 
u8
 *
m≠
; \

950 
u32
 
_addªss
 = 
addªss
; \

952 if(
_addªss
 < 0x10000000) \

954 
mem‹y_ªgi⁄_ac˚ss_ªad_
##
ty≥
[
_addªss
 >> 24]++; \

955 
mem‹y_ªads_
##
ty≥
++; \

957 if(((
_addªss
 >> 24Ë=0Ë&& (
pc
 >= 0x4000)) \

959 
de°
 = *((
ty≥
 *)((
u8
 *)&
bios_ªad_¥Ÿe˘
 + (
_addªss
 & 0x03))); \

963 if(((
_addªss
 & 
Æig√d_addªss_mask
##
size
) == 0) && \

964 (
m≠
 = 
mem‹y_m≠_ªad
[
addªss
 >> 15])) \

966 
de°
 = *((
ty≥
 *)((
u8
 *)
m≠
 + (
_addªss
 & 0x7FFF))); \

970 
de°
 = (
ty≥
)
ªad_mem‹y
##
	`size
(
_addªss
); \

973 

	)

974 
	#Á°_ªad_mem‹y_s16
(
addªss
, 
de°
) \

976 
u8
 *
m≠
; \

977 
u32
 
_addªss
 = 
addªss
; \

978 if(
_addªss
 < 0x10000000) \

980 
mem‹y_ªgi⁄_ac˚ss_ªad_s16
[
_addªss
 >> 24]++; \

981 
mem‹y_ªads_s16
++; \

983 if(((
_addªss
 & 
Æig√d_addªss_mask16
) == 0) && \

984 (
m≠
 = 
mem‹y_m≠_ªad
[
_addªss
 >> 15])) \

986 
de°
 = *((
s16
 *)((
u8
 *)
m≠
 + (
_addªss
 & 0x7FFF))); \

990 
de°
 = (
s16
)
	`ªad_mem‹y16_sig√d
(
_addªss
); \

993 

	)

995 
	#Á°_wrôe_mem‹y
(
size
, 
ty≥
, 
addªss
, 
vÆue
) \

997 
u8
 *
m≠
; \

998 
u32
 
_addªss
 = (
addªss
Ë& ~(
Æig√d_addªss_mask
##
size
 & 0x03); \

999 if(
_addªss
 < 0x10000000) \

1001 
mem‹y_ªgi⁄_ac˚ss_wrôe_
##
ty≥
[
_addªss
 >> 24]++; \

1002 
mem‹y_wrôes_
##
ty≥
++; \

1005 if(((
_addªss
 & 
Æig√d_addªss_mask
##
size
) == 0) && \

1006 (
m≠
 = 
mem‹y_m≠_wrôe
[
_addªss
 >> 15])) \

1008 *((
ty≥
 *)((
u8
 *)
m≠
 + (
_addªss
 & 0x7FFF))Ë
vÆue
; \

1012 
˝u_Æît
 = 
wrôe_mem‹y
##
	`size
(
_addªss
, 
vÆue
); \

1013 if(
˝u_Æît
) \

1014 
Æît
; \

1017 

	)

1018 
	#lﬂd_Æig√d32
(
addªss
, 
de°
) \

1020 
u8
 *
m≠
 = 
mem‹y_m≠_ªad
[
addªss
 >> 15]; \

1021 if(
addªss
 < 0x10000000) \

1023 
mem‹y_ªgi⁄_ac˚ss_ªad_u32
[
addªss
 >> 24]++; \

1024 
mem‹y_ªads_u32
++; \

1026 if(
m≠
) \

1028 
de°
 = 
	`addªss32
(
m≠
, 
addªss
 & 0x7FFF); \

1032 
de°
 = 
	`ªad_mem‹y32
(
addªss
); \

1035 

	)

1036 
	#°‹e_Æig√d32
(
addªss
, 
vÆue
) \

1038 
u8
 *
m≠
 = 
mem‹y_m≠_wrôe
[
addªss
 >> 15]; \

1039 if(
addªss
 < 0x10000000) \

1041 
mem‹y_ªgi⁄_ac˚ss_wrôe_u32
[
addªss
 >> 24]++; \

1042 
mem‹y_wrôes_u32
++; \

1044 if(
m≠
) \

1046 
	`addªss32
(
m≠
, 
addªss
 & 0x7FFFË
vÆue
; \

1050 
˝u_Æît
 = 
	`wrôe_mem‹y32
(
addªss
, 
vÆue
); \

1051 if(
˝u_Æît
) \

1052 
Æît
; \

1055 

	)

1056 
	#lﬂd_mem‹y_u8
(
addªss
, 
de°
) \

1057 
	`Á°_ªad_mem‹y
(8, 
u8
, 
addªss
, 
de°
) \

1058 

	)

1059 
	#lﬂd_mem‹y_u16
(
addªss
, 
de°
) \

1060 
	`Á°_ªad_mem‹y
(16, 
u16
, 
addªss
, 
de°
) \

1061 

	)

1062 
	#lﬂd_mem‹y_u32
(
addªss
, 
de°
) \

1063 
	`Á°_ªad_mem‹y
(32, 
u32
, 
addªss
, 
de°
) \

1064 

	)

1065 
	#lﬂd_mem‹y_s8
(
addªss
, 
de°
) \

1066 
	`Á°_ªad_mem‹y
(8, 
s8
, 
addªss
, 
de°
) \

1067 

	)

1068 
	#lﬂd_mem‹y_s16
(
addªss
, 
de°
) \

1069 
	`Á°_ªad_mem‹y_s16
(
addªss
, 
de°
) \

1070 

	)

1071 
	#°‹e_mem‹y_u8
(
addªss
, 
vÆue
) \

1072 
	`Á°_wrôe_mem‹y
(8, 
u8
, 
addªss
, 
vÆue
) \

1073 

	)

1074 
	#°‹e_mem‹y_u16
(
addªss
, 
vÆue
) \

1075 
	`Á°_wrôe_mem‹y
(16, 
u16
, 
addªss
, 
vÆue
) \

1076 

	)

1077 
	#°‹e_mem‹y_u32
(
addªss
, 
vÆue
) \

1078 
	`Á°_wrôe_mem‹y
(32, 
u32
, 
addªss
, 
vÆue
) \

1079 

	)

1080 
	#no_›
 \

1081 

	)

1082 
	#¨m_ac˚ss_mem‹y_wrôeback_yes
(
off_›
) \

1083 
ªg
[
∫
] = 
addªss
 
off_›
 \

1084 

	)

1085 
	#¨m_ac˚ss_mem‹y_wrôeback_no
(
off_›
) \

1086 

	)

1087 
	#¨m_ac˚ss_mem‹y_pc_¥ódju°_lﬂd
() \

1088 

	)

1089 
	#¨m_ac˚ss_mem‹y_pc_¥ódju°_°‹e
() \

1090 
u32
 
ªg_›
 = 
ªg
[
rd
]; \

1091 if(
rd
 == 15) \

1092 
ªg_›
 += 4 \

1093 

	)

1094 
	#¨m_ac˚ss_mem‹y_pc_po°adju°_lﬂd
() \

1095 
	`¨m_upd©e_pc
() \

1096 

	)

1097 
	#¨m_ac˚ss_mem‹y_pc_po°adju°_°‹e
() \

1098 

	)

1099 
	#lﬂd_ªg_›
 
ªg
[
rd
] \

1100 

	)

1101 
	#°‹e_ªg_›
 
ªg_›
 \

1102 

	)

1103 
	#¨m_ac˚ss_mem‹y
(
ac˚ss_ty≥
, 
off_›
, 
off_ty≥
, 
mem_ty≥
, \

1104 
wb
, 
wb_off_›
) \

1106 
	`¨m_pc_off£t
(8); \

1107 
¨m_d©a_å™s_
##
	`off_ty≥
(); \

1108 
u32
 
addªss
 = 
ªg
[
∫
] 
off_›
; \

1109 
¨m_ac˚ss_mem‹y_pc_¥ódju°_
##
	`ac˚ss_ty≥
(); \

1111 
	`¨m_pc_off£t
(-4); \

1112 
¨m_ac˚ss_mem‹y_wrôeback_
##
	`wb
(
wb_off_›
); \

1113 
ac˚ss_ty≥
##
_mem‹y_
##
	`mem_ty≥
(
addªss
,ác˚ss_ty≥##
_ªg_›
); \

1114 
¨m_ac˚ss_mem‹y_pc_po°adju°_
##
	`ac˚ss_ty≥
(); \

1116 

	)

1117 
	#w‹d_bô_cou¡
(
w‹d
) \

1118 (
bô_cou¡
[
w‹d
 >> 8] + bit_count[word & 0xFF]) \

1119 

	)

1120 
	#•röt_no
(
ac˚ss_ty≥
, 
off£t_ty≥
, 
wrôeback_ty≥
) \

1121 

	)

1122 
	#•röt_yes
(
ac˚ss_ty≥
, 
off£t_ty≥
, 
wrôeback_ty≥
) \

1123 
	`¥ötf
("sbit on %s %s %s\n", #access_type, #offset_type, #writeback_type) \

1124 

	)

1125 
	#¨m_block_wrôeback_lﬂd
() \

1126 if(!((
ªg_li°
 >> 
∫
) & 0x01)) \

1128 
ªg
[
∫
] = 
addªss
; \

1130 

	)

1131 
	#¨m_block_wrôeback_°‹e
() \

1132 
ªg
[
∫
] = 
addªss
 \

1133 

	)

1134 
	#¨m_block_wrôeback_yes
(
ac˚ss_ty≥
) \

1135 
¨m_block_wrôeback_
##
	`ac˚ss_ty≥
() \

1136 

	)

1137 
	#¨m_block_wrôeback_no
(
ac˚ss_ty≥
) \

1138 

	)

1139 
	#lﬂd_block_mem‹y
(
addªss
, 
de°
) \

1140 
de°
 = 
	`addªss32
(
addªss_ªgi⁄
, (
addªss
 + 
off£t
) & 0x7FFF) \

1141 

	)

1142 
	#°‹e_block_mem‹y
(
addªss
, 
de°
) \

1143 
	`addªss32
(
addªss_ªgi⁄
, (
addªss
 + 
off£t
Ë& 0x7FFFË
de°
 \

1144 

	)

1145 
	#¨m_block_mem‹y_off£t_down_a
() \

1146 (
ba£
 - (
	`w‹d_bô_cou¡
(
ªg_li°
) * 4) + 4) \

1147 

	)

1148 
	#¨m_block_mem‹y_off£t_down_b
() \

1149 (
ba£
 - (
	`w‹d_bô_cou¡
(
ªg_li°
) * 4)) \

1150 

	)

1151 
	#¨m_block_mem‹y_off£t_no
() \

1152 (
ba£
) \

1153 

	)

1154 
	#¨m_block_mem‹y_off£t_up
() \

1155 (
ba£
 + 4) \

1156 

	)

1157 
	#¨m_block_mem‹y_wrôeback_down
() \

1158 
ªg
[
∫
] = 
ba£
 - (
	`w‹d_bô_cou¡
(
ªg_li°
) * 4) \

1159 

	)

1160 
	#¨m_block_mem‹y_wrôeback_up
() \

1161 
ªg
[
∫
] = 
ba£
 + (
	`w‹d_bô_cou¡
(
ªg_li°
) * 4) \

1162 

	)

1163 
	#¨m_block_mem‹y_wrôeback_no
() \

1164 

	)

1165 
	#¨m_block_mem‹y_lﬂd_pc
() \

1166 
	`lﬂd_Æig√d32
(
addªss
, 
pc
); \

1167 
ªg
[
REG_PC
] = 
pc
 \

1168 

	)

1169 
	#¨m_block_mem‹y_°‹e_pc
() \

1170 
	`°‹e_Æig√d32
(
addªss
, 
pc
 + 4) \

1171 

	)

1172 
	#¨m_block_mem‹y
(
ac˚ss_ty≥
, 
off£t_ty≥
, 
wrôeback_ty≥
, 
s_bô
) \

1174 
	`¨m_decode_block_å™s
(); \

1175 
u32
 
ba£
 = 
ªg
[
∫
]; \

1176 
u32
 
addªss
 = 
¨m_block_mem‹y_off£t_
##
	`off£t_ty≥
() & 0xFFFFFFFC; \

1177 
u32
 
i
; \

1179 
¨m_block_mem‹y_wrôeback_
##
	`wrôeback_ty≥
(); \

1181 
i
 = 0; i < 15; i++) \

1183 if((
ªg_li°
 >> 
i
) & 0x01) \

1185 
ac˚ss_ty≥
##
	`_Æig√d32
(
addªss
, 
ªg
[
i
]); \

1186 
addªss
 += 4; \

1190 
	`¨m_pc_off£t
(4); \

1191 if(
ªg_li°
 & 0x8000) \

1193 
¨m_block_mem‹y_
##
ac˚ss_ty≥
##
	`_pc
(); \

1196 

	)

1197 
	#¨m_sw≠
(
ty≥
) \

1199 
	`¨m_decode_sw≠
(); \

1200 
u32
 
ãmp
; \

1201 
lﬂd_mem‹y_
##
	`ty≥
(
ªg
[
∫
], 
ãmp
); \

1202 
°‹e_mem‹y_
##
	`ty≥
(
ªg
[
∫
],Ñeg[
rm
]); \

1203 
ªg
[
rd
] = 
ãmp
; \

1204 
	`¨m_pc_off£t
(4); \

1206 

	)

1207 
	#¨m_√xt_ö°ru˘i⁄
() \

1209 
	`¨m_pc_off£t
(4); \

1210 
skù_ö°ru˘i⁄
; \

1212 

	)

1213 
	#thumb_upd©e_pc
() \

1214 
pc
 = 
ªg
[
REG_PC
] \

1215 

	)

1216 
	#thumb_pc_off£t
(
vÆ
) \

1217 
pc
 +
vÆ
; \

1218 
ªg
[
REG_PC
] = 
pc
 \

1219 

	)

1220 
	#thumb_pc_off£t_upd©e
(
vÆ
) \

1221 
pc
 +
vÆ
; \

1222 
ªg
[
REG_PC
] = 
pc
 \

1223 

	)

1224 
	#thumb_pc_off£t_upd©e_dúe˘
(
vÆ
) \

1225 
pc
 = 
vÆ
; \

1226 
ªg
[
REG_PC
] = 
pc
 \

1227 

	)

1231 
	#thumb_add
(
ty≥
, 
de°_ªg
, 
§c_a
, 
§c_b
) \

1233 
thumb_decode_
##
	`ty≥
(); \

1234 c⁄° 
u32
 
_ß
 = 
§c_a
; \

1235 c⁄° 
u32
 
_sb
 = 
§c_b
; \

1236 
u32
 
de°
 = 
_ß
 + 
_sb
; \

1237 
	`ˇlcuœã_Êags_add
(
de°
, 
§c_a
, 
§c_b
); \

1238 
ªg
[
de°_ªg
] = 
de°
; \

1239 
	`thumb_pc_off£t
(2); \

1241 

	)

1242 
	#thumb_add_noÊags
(
ty≥
, 
de°_ªg
, 
§c_a
, 
§c_b
) \

1244 
thumb_decode_
##
	`ty≥
(); \

1245 
u32
 
de°
 = 
§c_a
 + 
§c_b
; \

1246 
ªg
[
de°_ªg
] = 
de°
; \

1247 
	`thumb_pc_off£t
(2); \

1249 

	)

1250 
	#thumb_sub
(
ty≥
, 
de°_ªg
, 
§c_a
, 
§c_b
) \

1252 
thumb_decode_
##
	`ty≥
(); \

1253 c⁄° 
u32
 
_ß
 = 
§c_a
; \

1254 c⁄° 
u32
 
_sb
 = 
§c_b
; \

1255 
u32
 
de°
 = 
_ß
 - 
_sb
; \

1256 
	`ˇlcuœã_Êags_sub
(
de°
, 
§c_a
, 
§c_b
); \

1257 
ªg
[
de°_ªg
] = 
de°
; \

1258 
	`thumb_pc_off£t
(2); \

1260 

	)

1263 
	#thumb_logic
(
ty≥
, 
de°_ªg
, 
ex¥
) \

1265 
thumb_decode_
##
	`ty≥
(); \

1266 
u32
 
de°
 = 
ex¥
; \

1267 
	`ˇlcuœã_Êags_logic
(
de°
); \

1268 
ªg
[
de°_ªg
] = 
de°
; \

1269 
	`thumb_pc_off£t
(2); \

1271 

	)

1276 
	#thumb_shi·_l¶_ªg
() \

1277 
u32
 
shi·
 = 
ªg
[
rs
]; \

1278 
u32
 
de°
 = 
ªg
[
rd
]; \

1279 if(
shi·
 != 0) \

1281 if(
shi·
 > 31) \

1283 if(
shi·
 == 32) \

1284 
c_Êag
 = 
de°
 & 0x01; \

1286 
c_Êag
 = 0; \

1287 
de°
 = 0; \

1291 
c_Êag
 = (
de°
 >> (32 - 
shi·
)) & 0x01; \

1292 
de°
 <<
shi·
; \

1295 

	)

1296 
	#thumb_shi·_l§_ªg
() \

1297 
u32
 
shi·
 = 
ªg
[
rs
]; \

1298 
u32
 
de°
 = 
ªg
[
rd
]; \

1299 if(
shi·
 != 0) \

1301 if(
shi·
 > 31) \

1303 if(
shi·
 == 32) \

1304 
c_Êag
 = 
de°
 >> 31; \

1306 
c_Êag
 = 0; \

1307 
de°
 = 0; \

1311 
c_Êag
 = (
de°
 >> (
shi·
 - 1)) & 0x01; \

1312 
de°
 >>
shi·
; \

1315 

	)

1316 
	#thumb_shi·_a§_ªg
() \

1317 
u32
 
shi·
 = 
ªg
[
rs
]; \

1318 
u32
 
de°
 = 
ªg
[
rd
]; \

1319 if(
shi·
 != 0) \

1321 if(
shi·
 > 31) \

1323 
de°
 = (
s32
)dest >> 31; \

1324 
c_Êag
 = 
de°
 & 0x01; \

1328 
c_Êag
 = (
de°
 >> (
shi·
 - 1)) & 0x01; \

1329 
de°
 = (
s32
)de° >> 
shi·
; \

1332 

	)

1333 
	#thumb_shi·_r‹_ªg
() \

1334 
u32
 
shi·
 = 
ªg
[
rs
]; \

1335 
u32
 
de°
 = 
ªg
[
rd
]; \

1336 if(
shi·
 != 0) \

1338 
c_Êag
 = (
de°
 >> (
shi·
 - 1)) & 0x01; \

1339 
	`r‹
(
de°
, de°, 
shi·
); \

1341 

	)

1342 
	#thumb_shi·_l¶_imm
() \

1343 
u32
 
de°
 = 
ªg
[
rs
]; \

1344 if(
imm
 != 0) \

1346 
c_Êag
 = (
de°
 >> (32 - 
imm
)) & 0x01; \

1347 
de°
 <<
imm
; \

1349 

	)

1350 
	#thumb_shi·_l§_imm
() \

1351 
u32
 
de°
; \

1352 if(
imm
 == 0) \

1354 
de°
 = 0; \

1355 
c_Êag
 = 
ªg
[
rs
] >> 31; \

1359 
de°
 = 
ªg
[
rs
]; \

1360 
c_Êag
 = (
de°
 >> (
imm
 - 1)) & 0x01; \

1361 
de°
 >>
imm
; \

1363 

	)

1364 
	#thumb_shi·_a§_imm
() \

1365 
u32
 
de°
; \

1366 if(
imm
 == 0) \

1368 
de°
 = (
s32
)
ªg
[
rs
] >> 31; \

1369 
c_Êag
 = 
de°
 & 0x01; \

1373 
de°
 = 
ªg
[
rs
]; \

1374 
c_Êag
 = (
de°
 >> (
imm
 - 1)) & 0x01; \

1375 
de°
 = (
s32
)de° >> 
imm
; \

1377 

	)

1378 
	#thumb_shi·_r‹_imm
() \

1379 
u32
 
de°
 = 
ªg
[
rs
]; \

1380 if(
imm
 == 0) \

1382 
u32
 
ﬁd_c_Êag
 = 
c_Êag
; \

1383 
c_Êag
 = 
de°
 & 0x01; \

1384 
de°
 = (de° >> 1Ë| (
ﬁd_c_Êag
 << 31); \

1388 
c_Êag
 = (
de°
 >> (
imm
 - 1)) & 0x01; \

1389 
	`r‹
(
de°
, de°, 
imm
); \

1391 

	)

1392 
	#thumb_shi·
(
decode_ty≥
, 
›_ty≥
, 
vÆue_ty≥
) \

1394 
thumb_decode_
##
	`decode_ty≥
(); \

1395 
thumb_shi·_
##
›_ty≥
##
_
##
	`vÆue_ty≥
(); \

1396 
	`ˇlcuœã_Êags_logic
(
de°
); \

1397 
ªg
[
rd
] = 
de°
; \

1398 
	`thumb_pc_off£t
(2); \

1400 

	)

1401 
	#thumb_ã°_add
(
ty≥
, 
§c_a
, 
§c_b
) \

1403 
thumb_decode_
##
	`ty≥
(); \

1404 c⁄° 
u32
 
_ß
 = 
§c_a
; \

1405 c⁄° 
u32
 
_sb
 = 
§c_b
; \

1406 
u32
 
de°
 = 
_ß
 + 
_sb
; \

1407 
	`ˇlcuœã_Êags_add
(
de°
, 
§c_a
, 
§c_b
); \

1408 
	`thumb_pc_off£t
(2); \

1410 

	)

1411 
	#thumb_ã°_sub
(
ty≥
, 
§c_a
, 
§c_b
) \

1413 
thumb_decode_
##
	`ty≥
(); \

1414 c⁄° 
u32
 
_ß
 = 
§c_a
; \

1415 c⁄° 
u32
 
_sb
 = 
§c_b
; \

1416 
u32
 
de°
 = 
_ß
 - 
_sb
; \

1417 
	`ˇlcuœã_Êags_sub
(
de°
, 
§c_a
, 
§c_b
); \

1418 
	`thumb_pc_off£t
(2); \

1420 

	)

1421 
	#thumb_ã°_logic
(
ty≥
, 
ex¥
) \

1423 
thumb_decode_
##
	`ty≥
(); \

1424 
u32
 
de°
 = 
ex¥
; \

1425 
	`ˇlcuœã_Êags_logic
(
de°
); \

1426 
	`thumb_pc_off£t
(2); \

1427 }

	)

1429 
	#thumb_húeg_›
(
ex¥
) \

1431 
	`thumb_pc_off£t
(4); \

1432 
	`thumb_decode_húeg_›
(); \

1433 
u32
 
de°
 = 
ex¥
; \

1434 
	`thumb_pc_off£t
(-2); \

1435 if(
rd
 == 15) \

1437 
ªg
[
REG_PC
] = 
de°
 & ~0x01; \

1438 
	`thumb_upd©e_pc
(); \

1442 
ªg
[
rd
] = 
de°
; \

1445 

	)

1448 
	#thumb_ac˚ss_mem‹y
(
ac˚ss_ty≥
, 
›_ty≥
, 
addªss
, 
ªg_›
, \

1449 
mem_ty≥
) \

1451 
thumb_decode_
##
	`›_ty≥
(); \

1452 
ac˚ss_ty≥
##
_mem‹y_
##
	`mem_ty≥
(
addªss
, 
ªg_›
); \

1453 
	`thumb_pc_off£t
(2); \

1455 

	)

1456 
	#thumb_block_addªss_¥ódju°_no_›
() \

1457 

	)

1458 
	#thumb_block_addªss_¥ódju°_up
() \

1459 
addªss
 +
bô_cou¡
[
ªg_li°
] * 4 \

1460 

	)

1461 
	#thumb_block_addªss_¥ódju°_down
() \

1462 
addªss
 -
bô_cou¡
[
ªg_li°
] * 4 \

1463 

	)

1464 
	#thumb_block_addªss_¥ódju°_push_Ã
() \

1465 
addªss
 -(
bô_cou¡
[
ªg_li°
] + 1) * 4 \

1466 

	)

1467 
	#thumb_block_addªss_po°adju°_no_›
() \

1468 

	)

1469 
	#thumb_block_addªss_po°adju°_up
() \

1470 
addªss
 +
off£t
 \

1471 

	)

1472 
	#thumb_block_addªss_po°adju°_down
() \

1473 
addªss
 -
off£t
 \

1474 

	)

1475 
	#thumb_block_addªss_po°adju°_p›_pc
() \

1476 
	`lﬂd_mem‹y_u32
(
addªss
 + 
off£t
, 
pc
); \

1477 
pc
 &= ~0x01; \

1478 
ªg
[
REG_PC
] = 
pc
; \

1479 
addªss
 +
off£t
 + 4 \

1480 

	)

1481 
	#thumb_block_addªss_po°adju°_push_Ã
() \

1482 
	`°‹e_mem‹y_u32
(
addªss
 + 
off£t
, 
ªg
[
REG_LR
]); \

1483 

	)

1484 
	#thumb_block_mem‹y_wb_lﬂd
(
ba£_ªg
) \

1485 if(!((
ªg_li°
 >> 
ba£_ªg
) & 0x01)) \

1487 
ªg
[
ba£_ªg
] = 
addªss
; \

1489 

	)

1490 
	#thumb_block_mem‹y_wb_°‹e
(
ba£_ªg
) \

1491 
ªg
[
ba£_ªg
] = 
addªss
 \

1492 

	)

1493 
	#thumb_block_mem‹y
(
ac˚ss_ty≥
, 
¥e_›
, 
po°_›
, 
ba£_ªg
) \

1495 
u32
 
i
; \

1496 
u32
 
off£t
 = 0; \

1497 
	`thumb_decode_æi°
(); \

1498 
	`usög_ªgi°î
(
thumb
, 
ba£_ªg
, 
mem‹y_ba£
); \

1499 
u32
 
addªss
 = 
ªg
[
ba£_ªg
] & ~0x03; \

1500 
thumb_block_addªss_¥ódju°_
##
	`¥e_›
(); \

1502 
i
 = 0; i < 8; i++) \

1504 if((
ªg_li°
 >> 
i
) & 1) \

1506 
ac˚ss_ty≥
##
	`_Æig√d32
(
addªss
 + 
off£t
, 
ªg
[
i
]); \

1507 
off£t
 += 4; \

1511 
	`thumb_pc_off£t
(2); \

1513 
thumb_block_addªss_po°adju°_
##
	`po°_›
(); \

1514 
thumb_block_mem‹y_wb_
##
	`ac˚ss_ty≥
(
ba£_ªg
); \

1516 

	)

1517 
	#thumb_c⁄dôi⁄Æ_bønch
(
c⁄dôi⁄
) \

1519 
	`thumb_decode_bønch_c⁄d
(); \

1520 if(
c⁄dôi⁄
) \

1522 
	`thumb_pc_off£t
((
off£t
 * 2) + 4); \

1526 
	`thumb_pc_off£t
(2); \

1529 

	)

1536 
u32
 
	gªg_mode
[7][7];

1538 
u32
 
	g˝u_modes
[32] =

1540 
MODE_INVALID
, MODE_INVALID, MODE_INVALID, MODE_INVALID, MODE_INVALID,

1541 
MODE_INVALID
, MODE_INVALID, MODE_INVALID, MODE_INVALID, MODE_INVALID,

1542 
MODE_INVALID
, MODE_INVALID, MODE_INVALID, MODE_INVALID, MODE_INVALID,

1543 
MODE_INVALID
, 
MODE_USER
, 
MODE_FIQ
, 
MODE_IRQ
, 
MODE_SUPERVISOR
, MODE_INVALID,

1544 
MODE_INVALID
, MODE_INVALID, 
MODE_ABORT
, MODE_INVALID, MODE_INVALID,

1545 
MODE_INVALID
, MODE_INVALID, 
MODE_UNDEFINED
, MODE_INVALID, MODE_INVALID,

1546 
MODE_USER


1549 
u32
 
	g˝u_modes_˝§
[7] = { 0x10, 0x11, 0x12, 0x13, 0x17, 0x1B, 0x1F };

1554 
u32
 
	göôül_ªg
[64];

1555 
u32
 *
	gªg
 = 
öôül_ªg
;

1556 
u32
 
	g•§
[6];

1561 *
	gªg_«mes
[16] =

1567 *
	g˝u_mode_«mes
[] =

1573 
	#execuã_¨m_ö°ru˘i⁄
() \

1574 
	`usög_ö°ru˘i⁄
(
¨m
); \

1575 
	`check_pc_ªgi⁄
(); \

1576 
pc
 &= ~0x03; \

1577 
›code
 = 
	`addªss32
(
pc_addªss_block
, (
pc
 & 0x7FFF)); \

1578 
c⁄dôi⁄
 = 
›code
 >> 28; \

1580 
c⁄dôi⁄
) \

1584 if(!
z_Êag
) \

1585 
	`¨m_√xt_ö°ru˘i⁄
(); \

1590 if(
z_Êag
) \

1591 
	`¨m_√xt_ö°ru˘i⁄
(); \

1596 if(!
c_Êag
) \

1597 
	`¨m_√xt_ö°ru˘i⁄
(); \

1602 if(
c_Êag
) \

1603 
	`¨m_√xt_ö°ru˘i⁄
(); \

1608 if(!
n_Êag
) \

1609 
	`¨m_√xt_ö°ru˘i⁄
(); \

1614 if(
n_Êag
) \

1615 
	`¨m_√xt_ö°ru˘i⁄
(); \

1620 if(!
v_Êag
) \

1621 
	`¨m_√xt_ö°ru˘i⁄
(); \

1626 if(
v_Êag
) \

1627 
	`¨m_√xt_ö°ru˘i⁄
(); \

1632 if((
c_Êag
 =0Ë| 
z_Êag
) \

1633 
	`¨m_√xt_ö°ru˘i⁄
(); \

1638 if(
c_Êag
 & (
z_Êag
 ^ 1)) \

1639 
	`¨m_√xt_ö°ru˘i⁄
(); \

1644 if(
n_Êag
 !
v_Êag
) \

1645 
	`¨m_√xt_ö°ru˘i⁄
(); \

1650 if(
n_Êag
 =
v_Êag
) \

1651 
	`¨m_√xt_ö°ru˘i⁄
(); \

1656 if(
z_Êag
 | (
n_Êag
 !
v_Êag
)) \

1657 
	`¨m_√xt_ö°ru˘i⁄
(); \

1662 if((
z_Êag
 =0Ë& (
n_Êag
 =
v_Êag
)) \

1663 
	`¨m_√xt_ö°ru˘i⁄
(); \

1672 
	`quô
(); \

1673 
	`¨m_√xt_ö°ru˘i⁄
(); \

1677 (
›code
 >> 20) & 0xFF) \

1680 if((
›code
 & 0x90) == 0x90) \

1682 if(
›code
 & 0x20) \

1685 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
no_›
, 
hÆf_ªg
, 
u16
, 
yes
, - 
ªg
[
rm
]); \

1690 
	`¨m_mu…ùly
(
no_›
, 
no
); \

1696 
	`¨m_d©a_¥oc
(
ªg
[
∫
] & 
ªg_sh
,Ñeg); \

1701 if((
›code
 & 0x90) == 0x90) \

1703 (
›code
 >> 5) & 0x03) \

1707 
	`¨m_mu…ùly
(
no_›
, 
yes
); \

1712 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
no_›
, 
hÆf_ªg
, 
u16
, 
yes
, - 
ªg
[
rm
]); \

1717 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
no_›
, 
hÆf_ªg
, 
s8
, 
yes
, - 
ªg
[
rm
]); \

1722 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
no_›
, 
hÆf_ªg
, 
s16
, 
yes
, - 
ªg
[
rm
]); \

1729 
	`¨m_d©a_¥oc_logic_Êags
(
ªg
[
∫
] & 
ªg_sh
,Ñeg); \

1734 if((
›code
 & 0x90) == 0x90) \

1736 if(
›code
 & 0x20) \

1739 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
no_›
, 
hÆf_ªg
, 
u16
, 
yes
, - 
ªg
[
rm
]); \

1744 
	`¨m_mu…ùly
(+ 
ªg
[
∫
], 
no
); \

1750 
	`¨m_d©a_¥oc
(
ªg
[
∫
] ^ 
ªg_sh
,Ñeg); \

1755 if((
›code
 & 0x90) == 0x90) \

1757 (
›code
 >> 5) & 0x03) \

1761 
	`¨m_mu…ùly
(+ 
ªg
[
∫
], 
yes
); \

1766 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
no_›
, 
hÆf_ªg
, 
u16
, 
yes
, - 
ªg
[
rm
]); \

1771 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
no_›
, 
hÆf_ªg
, 
s8
, 
yes
, - 
ªg
[
rm
]); \

1776 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
no_›
, 
hÆf_ªg
, 
s16
, 
yes
, - 
ªg
[
rm
]); \

1783 
	`¨m_d©a_¥oc_logic_Êags
(
ªg
[
∫
] ^ 
ªg_sh
,Ñeg); \

1788 if((
›code
 & 0x90) == 0x90) \

1791 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
no_›
, 
hÆf_imm
, 
u16
, 
yes
, - 
off£t
); \

1796 
	`¨m_d©a_¥oc
(
ªg
[
∫
] - 
ªg_sh
,Ñeg); \

1801 if((
›code
 & 0x90) == 0x90) \

1803 (
›code
 >> 5) & 0x03) \

1807 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
no_›
, 
hÆf_imm
, 
u16
, 
yes
, - 
off£t
); \

1812 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
no_›
, 
hÆf_imm
, 
s8
, 
yes
, - 
off£t
); \

1817 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
no_›
, 
hÆf_imm
, 
s16
, 
yes
, - 
off£t
); \

1824 
	`¨m_d©a_¥oc_sub_Êags
(
ªg
[
∫
], 
ªg_sh
,Ñeg); \

1829 if((
›code
 & 0x90) == 0x90) \

1832 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
no_›
, 
hÆf_imm
, 
u16
, 
yes
, - 
off£t
); \

1837 
	`¨m_d©a_¥oc
(
ªg_sh
 - 
ªg
[
∫
],Ñeg); \

1842 if((
›code
 & 0x90) == 0x90) \

1844 (
›code
 >> 5) & 0x03) \

1848 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
no_›
, 
hÆf_imm
, 
u16
, 
yes
, - 
off£t
); \

1853 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
no_›
, 
hÆf_imm
, 
s8
, 
yes
, - 
off£t
); \

1858 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
no_›
, 
hÆf_imm
, 
s16
, 
yes
, - 
off£t
); \

1865 
	`¨m_d©a_¥oc_sub_Êags
(
ªg_sh
, 
ªg
[
∫
],Ñeg); \

1870 if((
›code
 & 0x90) == 0x90) \

1872 if(
›code
 & 0x20) \

1875 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
no_›
, 
hÆf_ªg
, 
u16
, 
yes
, + 
ªg
[
rm
]); \

1880 
	`¨m_mu…ùly_l⁄g
(
no_›
, 
no
, 
u
); \

1886 
	`¨m_d©a_¥oc
(
ªg
[
∫
] + 
ªg_sh
,Ñeg); \

1891 if((
›code
 & 0x90) == 0x90) \

1893 (
›code
 >> 5) & 0x03) \

1897 
	`¨m_mu…ùly_l⁄g
(
no_›
, 
yes
, 
u
); \

1902 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
no_›
, 
hÆf_ªg
, 
u16
, 
yes
, + 
ªg
[
rm
]); \

1907 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
no_›
, 
hÆf_ªg
, 
s8
, 
yes
, + 
ªg
[
rm
]); \

1912 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
no_›
, 
hÆf_ªg
, 
s16
, 
yes
, + 
ªg
[
rm
]); \

1919 
	`¨m_d©a_¥oc_add_Êags
(
ªg
[
∫
], 
ªg_sh
,Ñeg); \

1924 if((
›code
 & 0x90) == 0x90) \

1926 if(
›code
 & 0x20) \

1929 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
no_›
, 
hÆf_ªg
, 
u16
, 
yes
, + 
ªg
[
rm
]); \

1934 
	`¨m_mu…ùly_l⁄g
(
	`¨m_mu…ùly_l⁄g_add›
(
u
), 
no
, u); \

1940 
	`¨m_d©a_¥oc
(
ªg
[
∫
] + 
ªg_sh
 + 
c_Êag
,Ñeg); \

1945 if((
›code
 & 0x90) == 0x90) \

1947 (
›code
 >> 5) & 0x03) \

1951 
	`¨m_mu…ùly_l⁄g
(
	`¨m_mu…ùly_l⁄g_add›
(
u
), 
yes
, u); \

1956 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
no_›
, 
hÆf_ªg
, 
u16
, 
yes
, + 
ªg
[
rm
]); \

1961 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
no_›
, 
hÆf_ªg
, 
s8
, 
yes
, + 
ªg
[
rm
]); \

1966 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
no_›
, 
hÆf_ªg
, 
s16
, 
yes
, + 
ªg
[
rm
]); \

1973 
	`¨m_d©a_¥oc_add_Êags
(
ªg
[
∫
], 
ªg_sh
 + 
c_Êag
,Ñeg); \

1978 if((
›code
 & 0x90) == 0x90) \

1980 if(
›code
 & 0x20) \

1983 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
no_›
, 
hÆf_imm
, 
u16
, 
yes
, + 
off£t
); \

1988 
	`¨m_mu…ùly_l⁄g
(
no_›
, 
no
, 
s
); \

1994 
	`¨m_d©a_¥oc
(
ªg
[
∫
] - (
ªg_sh
 + (
c_Êag
 ^ 1)),Ñeg); \

1999 if((
›code
 & 0x90) == 0x90) \

2001 (
›code
 >> 5) & 0x03) \

2005 
	`¨m_mu…ùly_l⁄g
(
no_›
, 
yes
, 
s
); \

2010 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
no_›
, 
hÆf_imm
, 
u16
, 
yes
, + 
off£t
); \

2015 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
no_›
, 
hÆf_imm
, 
s8
, 
yes
, + 
off£t
); \

2020 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
no_›
, 
hÆf_imm
, 
s16
, 
yes
, + 
off£t
); \

2027 
	`¨m_d©a_¥oc_sub_Êags
(
ªg
[
∫
], (
ªg_sh
 + (
c_Êag
 ^ 1)),Ñeg); \

2032 if((
›code
 & 0x90) == 0x90) \

2034 if(
›code
 & 0x20) \

2037 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
no_›
, 
hÆf_imm
, 
u16
, 
yes
, + 
off£t
); \

2042 
	`¨m_mu…ùly_l⁄g
(
	`¨m_mu…ùly_l⁄g_add›
(
s
), 
no
, s); \

2048 
	`¨m_d©a_¥oc
(
ªg_sh
 - 
ªg
[
∫
] + 
c_Êag
 - 1,Ñeg); \

2053 if((
›code
 & 0x90) == 0x90) \

2055 (
›code
 >> 5) & 0x03) \

2059 
	`¨m_mu…ùly_l⁄g
(
	`¨m_mu…ùly_l⁄g_add›
(
s
), 
yes
, s); \

2064 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
no_›
, 
hÆf_imm
, 
u16
, 
yes
, + 
off£t
); \

2069 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
no_›
, 
hÆf_imm
, 
s8
, 
yes
, + 
off£t
); \

2074 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
no_›
, 
hÆf_imm
, 
s16
, 
yes
, + 
off£t
); \

2081 
	`¨m_d©a_¥oc_sub_Êags
((
ªg_sh
 + 
c_Êag
 - 1), 
ªg
[
∫
],Ñeg); \

2086 if((
›code
 & 0x90) == 0x90) \

2088 if(
›code
 & 0x20) \

2091 
	`¨m_ac˚ss_mem‹y
(
°‹e
, - 
ªg
[
rm
], 
hÆf_ªg
, 
u16
, 
no
, 
no_›
); \

2096 
	`¨m_sw≠
(
u32
); \

2102 
	`¨m_p§
(
ªg
, 
ªad
,Ñeg[
REG_CPSR
]); \

2107 if((
›code
 & 0x90) == 0x90) \

2109 (
›code
 >> 5) & 0x03) \

2113 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, - 
ªg
[
rm
], 
hÆf_ªg
, 
u16
, 
no
, 
no_›
); \

2118 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, - 
ªg
[
rm
], 
hÆf_ªg
, 
s8
, 
no
, 
no_›
); \

2123 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, - 
ªg
[
rm
], 
hÆf_ªg
, 
s16
, 
no
, 
no_›
); \

2130 
	`¨m_d©a_¥oc_ã°_logic
(
ªg
[
∫
] & 
ªg_sh
,Ñeg); \

2135 if((
›code
 & 0x90) == 0x90) \

2138 
	`¨m_ac˚ss_mem‹y
(
°‹e
, - 
ªg
[
rm
], 
hÆf_ªg
, 
u16
, 
yes
, 
no_›
); \

2142 if(
›code
 & 0x10) \

2145 
	`¨m_decode_bønchx
(); \

2146 
u32
 
§c
 = 
ªg
[
∫
]; \

2147 if(
§c
 & 0x01) \

2149 
§c
 -= 1; \

2150 
	`¨m_pc_off£t_upd©e_dúe˘
(
§c
); \

2151 
ªg
[
REG_CPSR
] |= 0x20; \

2152 
thumb_lo›
; \

2156 
	`¨m_pc_off£t_upd©e_dúe˘
(
§c
); \

2162 
	`¨m_p§
(
ªg
, 
°‹e
, 
˝§
); \

2168 if((
›code
 & 0x90) == 0x90) \

2170 (
›code
 >> 5) & 0x03) \

2174 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, - 
ªg
[
rm
], 
hÆf_ªg
, 
u16
, 
yes
, 
no_›
); \

2179 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, - 
ªg
[
rm
], 
hÆf_ªg
, 
s8
, 
yes
, 
no_›
); \

2184 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, - 
ªg
[
rm
], 
hÆf_ªg
, 
s16
, 
yes
, 
no_›
); \

2191 
	`¨m_d©a_¥oc_ã°_logic
(
ªg
[
∫
] ^ 
ªg_sh
,Ñeg); \

2196 if((
›code
 & 0x90) == 0x90) \

2198 if(
›code
 & 0x20) \

2201 
	`¨m_ac˚ss_mem‹y
(
°‹e
, - 
off£t
, 
hÆf_imm
, 
u16
, 
no
, 
no_›
); \

2206 
	`¨m_sw≠
(
u8
); \

2212 
	`¨m_p§
(
ªg
, 
ªad
, 
•§
[ªg[
CPU_MODE
]]); \

2217 if((
›code
 & 0x90) == 0x90) \

2219 (
›code
 >> 5) & 0x03) \

2223 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, - 
off£t
, 
hÆf_imm
, 
u16
, 
no
, 
no_›
); \

2228 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, - 
off£t
, 
hÆf_imm
, 
s8
, 
no
, 
no_›
); \

2233 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, - 
off£t
, 
hÆf_imm
, 
s16
, 
no
, 
no_›
); \

2240 
	`¨m_d©a_¥oc_ã°_sub
(
ªg
[
∫
], 
ªg_sh
,Ñeg); \

2245 if((
›code
 & 0x90) == 0x90) \

2248 
	`¨m_ac˚ss_mem‹y
(
°‹e
, - 
off£t
, 
hÆf_imm
, 
u16
, 
yes
, 
no_›
); \

2253 
	`¨m_p§
(
ªg
, 
°‹e
, 
•§
); \

2258 if((
›code
 & 0x90) == 0x90) \

2260 (
›code
 >> 5) & 0x03) \

2264 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, - 
off£t
, 
hÆf_imm
, 
u16
, 
yes
, 
no_›
); \

2269 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, - 
off£t
, 
hÆf_imm
, 
s8
, 
yes
, 
no_›
); \

2274 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, - 
off£t
, 
hÆf_imm
, 
s16
, 
yes
, 
no_›
); \

2281 
	`¨m_d©a_¥oc_ã°_add
(
ªg
[
∫
], 
ªg_sh
,Ñeg); \

2286 if((
›code
 & 0x90) == 0x90) \

2289 
	`¨m_ac˚ss_mem‹y
(
°‹e
, + 
ªg
[
rm
], 
hÆf_ªg
, 
u16
, 
no
, 
no_›
); \

2294 
	`¨m_d©a_¥oc
(
ªg
[
∫
] | 
ªg_sh
,Ñeg); \

2299 if((
›code
 & 0x90) == 0x90) \

2301 (
›code
 >> 5) & 0x03) \

2305 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, + 
ªg
[
rm
], 
hÆf_ªg
, 
u16
, 
no
, 
no_›
); \

2310 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, + 
ªg
[
rm
], 
hÆf_ªg
, 
s8
, 
no
, 
no_›
); \

2315 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, + 
ªg
[
rm
], 
hÆf_ªg
, 
s16
, 
no
, 
no_›
); \

2322 
	`¨m_d©a_¥oc_logic_Êags
(
ªg
[
∫
] | 
ªg_sh
,Ñeg); \

2327 if((
›code
 & 0x90) == 0x90) \

2330 
	`¨m_ac˚ss_mem‹y
(
°‹e
, + 
ªg
[
rm
], 
hÆf_ªg
, 
u16
, 
yes
, 
no_›
); \

2335 
	`¨m_d©a_¥oc
(
ªg_sh
, 
ªg
); \

2340 if((
›code
 & 0x90) == 0x90) \

2342 (
›code
 >> 5) & 0x03) \

2346 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, + 
ªg
[
rm
], 
hÆf_ªg
, 
u16
, 
yes
, 
no_›
); \

2351 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, + 
ªg
[
rm
], 
hÆf_ªg
, 
s8
, 
yes
, 
no_›
); \

2356 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, + 
ªg
[
rm
], 
hÆf_ªg
, 
s16
, 
yes
, 
no_›
); \

2363 
	`¨m_d©a_¥oc_logic_Êags
(
ªg_sh
, 
ªg
); \

2368 if((
›code
 & 0x90) == 0x90) \

2371 
	`¨m_ac˚ss_mem‹y
(
°‹e
, + 
off£t
, 
hÆf_imm
, 
u16
, 
no
, 
no_›
); \

2376 
	`¨m_d©a_¥oc
(
ªg
[
∫
] & (~
ªg_sh
),Ñeg); \

2381 if((
›code
 & 0x90) == 0x90) \

2383 (
›code
 >> 5) & 0x03) \

2387 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, + 
off£t
, 
hÆf_imm
, 
u16
, 
no
, 
no_›
); \

2392 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, + 
off£t
, 
hÆf_imm
, 
s8
, 
no
, 
no_›
); \

2397 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, + 
off£t
, 
hÆf_imm
, 
s16
, 
no
, 
no_›
); \

2404 
	`¨m_d©a_¥oc_logic_Êags
(
ªg
[
∫
] & (~
ªg_sh
),Ñeg); \

2409 if((
›code
 & 0x90) == 0x90) \

2412 
	`¨m_ac˚ss_mem‹y
(
°‹e
, + 
off£t
, 
hÆf_imm
, 
u16
, 
yes
, 
no_›
); \

2417 
	`¨m_d©a_¥oc
(~
ªg_sh
, 
ªg
); \

2422 if((
›code
 & 0x90) == 0x90) \

2424 (
›code
 >> 5) & 0x03) \

2428 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, + 
off£t
, 
hÆf_imm
, 
u16
, 
yes
, 
no_›
); \

2433 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, + 
off£t
, 
hÆf_imm
, 
s8
, 
yes
, 
no_›
); \

2438 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, + 
off£t
, 
hÆf_imm
, 
s16
, 
yes
, 
no_›
); \

2445 
	`¨m_d©a_¥oc_logic_Êags
(~
ªg_sh
, 
ªg
); \

2451 
	`¨m_d©a_¥oc
(
ªg
[
∫
] & 
imm
, imm); \

2456 
	`¨m_d©a_¥oc_logic_Êags
(
ªg
[
∫
] & 
imm
, imm); \

2461 
	`¨m_d©a_¥oc
(
ªg
[
∫
] ^ 
imm
, imm); \

2466 
	`¨m_d©a_¥oc_logic_Êags
(
ªg
[
∫
] ^ 
imm
, imm); \

2471 
	`¨m_d©a_¥oc
(
ªg
[
∫
] - 
imm
, imm); \

2476 
	`¨m_d©a_¥oc_sub_Êags
(
ªg
[
∫
], 
imm
, imm); \

2481 
	`¨m_d©a_¥oc
(
imm
 - 
ªg
[
∫
], imm); \

2486 
	`¨m_d©a_¥oc_sub_Êags
(
imm
, 
ªg
[
∫
], imm); \

2491 
	`¨m_d©a_¥oc
(
ªg
[
∫
] + 
imm
, imm); \

2496 
	`¨m_d©a_¥oc_add_Êags
(
ªg
[
∫
], 
imm
, imm); \

2501 
	`¨m_d©a_¥oc
(
ªg
[
∫
] + 
imm
 + 
c_Êag
, imm); \

2506 
	`¨m_d©a_¥oc_add_Êags
(
ªg
[
∫
] + 
imm
, 
c_Êag
, imm); \

2511 
	`¨m_d©a_¥oc
(
ªg
[
∫
] - 
imm
 + 
c_Êag
 - 1, imm); \

2516 
	`¨m_d©a_¥oc_sub_Êags
(
ªg
[
∫
], (
imm
 + (
c_Êag
 ^ 1)), imm); \

2521 
	`¨m_d©a_¥oc
(
imm
 - 
ªg
[
∫
] + 
c_Êag
 - 1, imm); \

2526 
	`¨m_d©a_¥oc_sub_Êags
((
imm
 + 
c_Êag
 - 1), 
ªg
[
∫
], imm); \

2531 
	`¨m_d©a_¥oc_ã°_logic
(
ªg
[
∫
] & 
imm
, imm); \

2536 
	`¨m_p§
(
imm
, 
°‹e
, 
˝§
); \

2541 
	`¨m_d©a_¥oc_ã°_logic
(
ªg
[
∫
] ^ 
imm
, imm); \

2546 
	`¨m_d©a_¥oc_ã°_sub
(
ªg
[
∫
], 
imm
, imm); \

2551 
	`¨m_p§
(
imm
, 
°‹e
, 
•§
); \

2556 
	`¨m_d©a_¥oc_ã°_add
(
ªg
[
∫
], 
imm
, imm); \

2561 
	`¨m_d©a_¥oc
(
ªg
[
∫
] | 
imm
, imm); \

2566 
	`¨m_d©a_¥oc_logic_Êags
(
ªg
[
∫
] | 
imm
, imm); \

2571 
	`¨m_d©a_¥oc
(
imm
, imm); \

2576 
	`¨m_d©a_¥oc_logic_Êags
(
imm
, imm); \

2581 
	`¨m_d©a_¥oc
(
ªg
[
∫
] & (~
imm
), imm); \

2586 
	`¨m_d©a_¥oc_logic_Êags
(
ªg
[
∫
] & (~
imm
), imm); \

2591 
	`¨m_d©a_¥oc
(~
imm
, imm); \

2596 
	`¨m_d©a_¥oc_logic_Êags
(~
imm
, imm); \

2601 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
no_›
, 
imm
, 
u32
, 
yes
, - 
off£t
); \

2606 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
no_›
, 
imm
, 
u32
, 
yes
, - 
off£t
); \

2611 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
no_›
, 
imm
, 
u32
, 
yes
, - 
off£t
); \

2616 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
no_›
, 
imm
, 
u32
, 
yes
, - 
off£t
); \

2621 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
no_›
, 
imm
, 
u8
, 
yes
, - 
off£t
); \

2626 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
no_›
, 
imm
, 
u8
, 
yes
, - 
off£t
); \

2631 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
no_›
, 
imm
, 
u8
, 
yes
, - 
off£t
); \

2636 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
no_›
, 
imm
, 
u8
, 
yes
, - 
off£t
); \

2641 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
no_›
, 
imm
, 
u32
, 
yes
, + 
off£t
); \

2646 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
no_›
, 
imm
, 
u32
, 
yes
, + 
off£t
); \

2651 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
no_›
, 
imm
, 
u32
, 
yes
, + 
off£t
); \

2656 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
no_›
, 
imm
, 
u32
, 
yes
, + 
off£t
); \

2661 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
no_›
, 
imm
, 
u8
, 
yes
, + 
off£t
); \

2666 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
no_›
, 
imm
, 
u8
, 
yes
, + 
off£t
); \

2671 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
no_›
, 
imm
, 
u8
, 
yes
, + 
off£t
); \

2676 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
no_›
, 
imm
, 
u8
, 
yes
, + 
off£t
); \

2681 
	`¨m_ac˚ss_mem‹y
(
°‹e
, - 
off£t
, 
imm
, 
u32
, 
no
, 
no_›
); \

2686 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, - 
off£t
, 
imm
, 
u32
, 
no
, 
no_›
); \

2691 
	`¨m_ac˚ss_mem‹y
(
°‹e
, - 
off£t
, 
imm
, 
u32
, 
yes
, 
no_›
); \

2696 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, - 
off£t
, 
imm
, 
u32
, 
yes
, 
no_›
); \

2701 
	`¨m_ac˚ss_mem‹y
(
°‹e
, - 
off£t
, 
imm
, 
u8
, 
no
, 
no_›
); \

2706 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, - 
off£t
, 
imm
, 
u8
, 
no
, 
no_›
); \

2711 
	`¨m_ac˚ss_mem‹y
(
°‹e
, - 
off£t
, 
imm
, 
u8
, 
yes
, 
no_›
); \

2716 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, - 
off£t
, 
imm
, 
u8
, 
yes
, 
no_›
); \

2721 
	`¨m_ac˚ss_mem‹y
(
°‹e
, + 
off£t
, 
imm
, 
u32
, 
no
, 
no_›
); \

2726 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, + 
off£t
, 
imm
, 
u32
, 
no
, 
no_›
); \

2731 
	`¨m_ac˚ss_mem‹y
(
°‹e
, + 
off£t
, 
imm
, 
u32
, 
yes
, 
no_›
); \

2736 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, + 
off£t
, 
imm
, 
u32
, 
yes
, 
no_›
); \

2741 
	`¨m_ac˚ss_mem‹y
(
°‹e
, + 
off£t
, 
imm
, 
u8
, 
no
, 
no_›
); \

2746 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, + 
off£t
, 
imm
, 
u8
, 
no
, 
no_›
); \

2751 
	`¨m_ac˚ss_mem‹y
(
°‹e
, + 
off£t
, 
imm
, 
u8
, 
yes
, 
no_›
); \

2756 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, + 
off£t
, 
imm
, 
u8
, 
yes
, 
no_›
); \

2761 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
no_›
, 
ªg
, 
u32
, 
yes
, - 
ªg_off£t
); \

2766 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
no_›
, 
ªg
, 
u32
, 
yes
, - 
ªg_off£t
); \

2771 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
no_›
, 
ªg
, 
u32
, 
yes
, - 
ªg_off£t
); \

2776 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
no_›
, 
ªg
, 
u32
, 
yes
, - 
ªg_off£t
); \

2781 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
no_›
, 
ªg
, 
u8
, 
yes
, - 
ªg_off£t
); \

2786 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
no_›
, 
ªg
, 
u8
, 
yes
, - 
ªg_off£t
); \

2791 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
no_›
, 
ªg
, 
u8
, 
yes
, - 
ªg_off£t
); \

2796 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
no_›
, 
ªg
, 
u8
, 
yes
, - 
ªg_off£t
); \

2801 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
no_›
, 
ªg
, 
u32
, 
yes
, + 
ªg_off£t
); \

2806 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
no_›
, 
ªg
, 
u32
, 
yes
, + 
ªg_off£t
); \

2811 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
no_›
, 
ªg
, 
u32
, 
yes
, + 
ªg_off£t
); \

2816 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
no_›
, 
ªg
, 
u32
, 
yes
, + 
ªg_off£t
); \

2821 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
no_›
, 
ªg
, 
u8
, 
yes
, + 
ªg_off£t
); \

2826 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
no_›
, 
ªg
, 
u8
, 
yes
, + 
ªg_off£t
); \

2831 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
no_›
, 
ªg
, 
u8
, 
yes
, + 
ªg_off£t
); \

2836 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
no_›
, 
ªg
, 
u8
, 
yes
, + 
ªg_off£t
); \

2841 
	`¨m_ac˚ss_mem‹y
(
°‹e
, - 
ªg_off£t
, 
ªg
, 
u32
, 
no
, 
no_›
); \

2846 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, - 
ªg_off£t
, 
ªg
, 
u32
, 
no
, 
no_›
); \

2851 
	`¨m_ac˚ss_mem‹y
(
°‹e
, - 
ªg_off£t
, 
ªg
, 
u32
, 
yes
, 
no_›
); \

2856 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, - 
ªg_off£t
, 
ªg
, 
u32
, 
yes
, 
no_›
); \

2861 
	`¨m_ac˚ss_mem‹y
(
°‹e
, - 
ªg_off£t
, 
ªg
, 
u8
, 
no
, 
no_›
); \

2866 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, - 
ªg_off£t
, 
ªg
, 
u8
, 
no
, 
no_›
); \

2871 
	`¨m_ac˚ss_mem‹y
(
°‹e
, - 
ªg_off£t
, 
ªg
, 
u8
, 
yes
, 
no_›
); \

2876 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, - 
ªg_off£t
, 
ªg
, 
u8
, 
yes
, 
no_›
); \

2881 
	`¨m_ac˚ss_mem‹y
(
°‹e
, + 
ªg_off£t
, 
ªg
, 
u32
, 
no
, 
no_›
); \

2886 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, + 
ªg_off£t
, 
ªg
, 
u32
, 
no
, 
no_›
); \

2891 
	`¨m_ac˚ss_mem‹y
(
°‹e
, + 
ªg_off£t
, 
ªg
, 
u32
, 
yes
, 
no_›
); \

2896 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, + 
ªg_off£t
, 
ªg
, 
u32
, 
yes
, 
no_›
); \

2901 
	`¨m_ac˚ss_mem‹y
(
°‹e
, + 
ªg_off£t
, 
ªg
, 
u8
, 
no
, 
no_›
); \

2906 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, + 
ªg_off£t
, 
ªg
, 
u8
, 
no
, 
no_›
); \

2911 
	`¨m_ac˚ss_mem‹y
(
°‹e
, + 
ªg_off£t
, 
ªg
, 
u8
, 
yes
, 
no_›
); \

2916 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, + 
ªg_off£t
, 
ªg
, 
u8
, 
yes
, 
no_›
); \

2921 
	`¨m_block_mem‹y
(
°‹e
, 
down_a
, 
no
,Ço); \

2926 
	`¨m_block_mem‹y
(
lﬂd
, 
down_a
, 
no
,Ço); \

2931 
	`¨m_block_mem‹y
(
°‹e
, 
down_a
, 
down
, 
no
); \

2936 
	`¨m_block_mem‹y
(
lﬂd
, 
down_a
, 
down
, 
no
); \

2941 
	`¨m_block_mem‹y
(
°‹e
, 
down_a
, 
no
, 
yes
); \

2946 
	`¨m_block_mem‹y
(
lﬂd
, 
down_a
, 
no
, 
yes
); \

2951 
	`¨m_block_mem‹y
(
°‹e
, 
down_a
, 
down
, 
yes
); \

2956 
	`¨m_block_mem‹y
(
lﬂd
, 
down_a
, 
down
, 
yes
); \

2961 
	`¨m_block_mem‹y
(
°‹e
, 
no
,Ço,Ço); \

2966 
	`¨m_block_mem‹y
(
lﬂd
, 
no
,Ço,Ço); \

2971 
	`¨m_block_mem‹y
(
°‹e
, 
no
, 
up
,Ço); \

2976 
	`¨m_block_mem‹y
(
lﬂd
, 
no
, 
up
,Ço); \

2981 
	`¨m_block_mem‹y
(
°‹e
, 
no
,Ço, 
yes
); \

2986 
	`¨m_block_mem‹y
(
lﬂd
, 
no
,Ço, 
yes
); \

2991 
	`¨m_block_mem‹y
(
°‹e
, 
no
, 
up
, 
yes
); \

2996 
	`¨m_block_mem‹y
(
lﬂd
, 
no
, 
up
, 
yes
); \

3001 
	`¨m_block_mem‹y
(
°‹e
, 
down_b
, 
no
,Ço); \

3006 
	`¨m_block_mem‹y
(
lﬂd
, 
down_b
, 
no
,Ço); \

3011 
	`¨m_block_mem‹y
(
°‹e
, 
down_b
, 
down
, 
no
); \

3016 
	`¨m_block_mem‹y
(
lﬂd
, 
down_b
, 
down
, 
no
); \

3021 
	`¨m_block_mem‹y
(
°‹e
, 
down_b
, 
no
, 
yes
); \

3026 
	`¨m_block_mem‹y
(
lﬂd
, 
down_b
, 
no
, 
yes
); \

3031 
	`¨m_block_mem‹y
(
°‹e
, 
down_b
, 
down
, 
yes
); \

3036 
	`¨m_block_mem‹y
(
lﬂd
, 
down_b
, 
down
, 
yes
); \

3041 
	`¨m_block_mem‹y
(
°‹e
, 
up
, 
no
,Ço); \

3046 
	`¨m_block_mem‹y
(
lﬂd
, 
up
, 
no
,Ço); \

3051 
	`¨m_block_mem‹y
(
°‹e
, 
up
, up, 
no
); \

3056 
	`¨m_block_mem‹y
(
lﬂd
, 
up
, up, 
no
); \

3061 
	`¨m_block_mem‹y
(
°‹e
, 
up
, 
no
, 
yes
); \

3066 
	`¨m_block_mem‹y
(
lﬂd
, 
up
, 
no
, 
yes
); \

3071 
	`¨m_block_mem‹y
(
°‹e
, 
up
, up, 
yes
); \

3076 
	`¨m_block_mem‹y
(
lﬂd
, 
up
, up, 
yes
); \

3097 
	`¨m_decode_bønch
(); \

3098 
	`¨m_pc_off£t_upd©e
(
off£t
 + 8); \

3105 
	`¨m_decode_bønch
(); \

3106 
ªg
[
REG_LR
] = 
pc
 + 4; \

3107 
	`¨m_pc_off£t_upd©e
(
off£t
 + 8); \

3118 
u32
 
swi_commít
 = 
›code
 & 0x00FFFFFF; \

3120 
swi_commít
 >> 16) \

3124 
ªg_mode
[
MODE_SUPERVISOR
][6] = 
pc
 + 4; \

3125 
	`cﬁœp£_Êags
(); \

3126 
•§
[
MODE_SUPERVISOR
] = 
ªg
[
REG_CPSR
]; \

3127 
ªg
[
REG_PC
] = 0x00000008; \

3128 
	`¨m_upd©e_pc
(); \

3129 
ªg
[
REG_CPSR
] = (reg[REG_CPSR] & ~0x1F) | 0x13; \

3130 
	`£t_˝u_mode
(
MODE_SUPERVISOR
); \

3137 
skù_ö°ru˘i⁄
: \

3138 

	)

3139 
	#execuã_thumb_ö°ru˘i⁄
() \

3140 
	`usög_ö°ru˘i⁄
(
thumb
); \

3141 
	`check_pc_ªgi⁄
(); \

3142 
pc
 &= ~0x01; \

3143 
›code
 = 
	`addªss16
(
pc_addªss_block
, (
pc
 & 0x7FFF)); \

3145 (
›code
 >> 8) & 0xFF) \

3149 
	`thumb_shi·
(
shi·
, 
l¶
, 
imm
); \

3154 
	`thumb_shi·
(
shi·
, 
l§
, 
imm
); \

3159 
	`thumb_shi·
(
shi·
, 
a§
, 
imm
); \

3164 
	`thumb_add
(
add_sub
, 
rd
, 
ªg
[
rs
],Ñeg[
∫
]); \

3169 
	`thumb_sub
(
add_sub
, 
rd
, 
ªg
[
rs
],Ñeg[
∫
]); \

3174 
	`thumb_add
(
add_sub_imm
, 
rd
, 
ªg
[
rs
], 
imm
); \

3179 
	`thumb_sub
(
add_sub_imm
, 
rd
, 
ªg
[
rs
], 
imm
); \

3184 
	`thumb_logic
(
imm
, 0, imm); \

3189 
	`thumb_logic
(
imm
, 1, imm); \

3194 
	`thumb_logic
(
imm
, 2, imm); \

3199 
	`thumb_logic
(
imm
, 3, imm); \

3204 
	`thumb_logic
(
imm
, 4, imm); \

3209 
	`thumb_logic
(
imm
, 5, imm); \

3214 
	`thumb_logic
(
imm
, 6, imm); \

3219 
	`thumb_logic
(
imm
, 7, imm); \

3224 
	`thumb_ã°_sub
(
imm
, 
ªg
[0], imm); \

3229 
	`thumb_ã°_sub
(
imm
, 
ªg
[1], imm); \

3234 
	`thumb_ã°_sub
(
imm
, 
ªg
[2], imm); \

3239 
	`thumb_ã°_sub
(
imm
, 
ªg
[3], imm); \

3244 
	`thumb_ã°_sub
(
imm
, 
ªg
[4], imm); \

3249 
	`thumb_ã°_sub
(
imm
, 
ªg
[5], imm); \

3254 
	`thumb_ã°_sub
(
imm
, 
ªg
[6], imm); \

3259 
	`thumb_ã°_sub
(
imm
, 
ªg
[7], imm); \

3264 
	`thumb_add
(
imm
, 0, 
ªg
[0], imm); \

3269 
	`thumb_add
(
imm
, 1, 
ªg
[1], imm); \

3274 
	`thumb_add
(
imm
, 2, 
ªg
[2], imm); \

3279 
	`thumb_add
(
imm
, 3, 
ªg
[3], imm); \

3284 
	`thumb_add
(
imm
, 4, 
ªg
[4], imm); \

3289 
	`thumb_add
(
imm
, 5, 
ªg
[5], imm); \

3294 
	`thumb_add
(
imm
, 6, 
ªg
[6], imm); \

3299 
	`thumb_add
(
imm
, 7, 
ªg
[7], imm); \

3304 
	`thumb_sub
(
imm
, 0, 
ªg
[0], imm); \

3309 
	`thumb_sub
(
imm
, 1, 
ªg
[1], imm); \

3314 
	`thumb_sub
(
imm
, 2, 
ªg
[2], imm); \

3319 
	`thumb_sub
(
imm
, 3, 
ªg
[3], imm); \

3324 
	`thumb_sub
(
imm
, 4, 
ªg
[4], imm); \

3329 
	`thumb_sub
(
imm
, 5, 
ªg
[5], imm); \

3334 
	`thumb_sub
(
imm
, 6, 
ªg
[6], imm); \

3339 
	`thumb_sub
(
imm
, 7, 
ªg
[7], imm); \

3343 (
›code
 >> 6) & 0x03) \

3347 
	`thumb_logic
(
Æu_›
, 
rd
, 
ªg
[rd] &Ñeg[
rs
]); \

3352 
	`thumb_logic
(
Æu_›
, 
rd
, 
ªg
[rd] ^Ñeg[
rs
]); \

3357 
	`thumb_shi·
(
Æu_›
, 
l¶
, 
ªg
); \

3362 
	`thumb_shi·
(
Æu_›
, 
l§
, 
ªg
); \

3368 (
›code
 >> 6) & 0x03) \

3372 
	`thumb_shi·
(
Æu_›
, 
a§
, 
ªg
); \

3377 
	`thumb_add
(
Æu_›
, 
rd
, 
ªg
[rd] +Ñeg[
rs
], 
c_Êag
); \

3382 
	`thumb_sub
(
Æu_›
, 
rd
, 
ªg
[rd] -Ñeg[
rs
], (
c_Êag
 ^ 1)); \

3387 
	`thumb_shi·
(
Æu_›
, 
r‹
, 
ªg
); \

3393 (
›code
 >> 6) & 0x03) \

3397 
	`thumb_ã°_logic
(
Æu_›
, 
ªg
[
rd
] &Ñeg[
rs
]); \

3402 
	`thumb_sub
(
Æu_›
, 
rd
, 0, 
ªg
[
rs
]); \

3407 
	`thumb_ã°_sub
(
Æu_›
, 
ªg
[
rd
],Ñeg[
rs
]); \

3412 
	`thumb_ã°_add
(
Æu_›
, 
ªg
[
rd
],Ñeg[
rs
]); \

3418 (
›code
 >> 6) & 0x03) \

3422 
	`thumb_logic
(
Æu_›
, 
rd
, 
ªg
[rd] |Ñeg[
rs
]); \

3427 
	`thumb_logic
(
Æu_›
, 
rd
, 
ªg
[rd] *Ñeg[
rs
]); \

3432 
	`thumb_logic
(
Æu_›
, 
rd
, 
ªg
[rd] & (~ªg[
rs
])); \

3437 
	`thumb_logic
(
Æu_›
, 
rd
, ~
ªg
[
rs
]); \

3444 
	`thumb_húeg_›
(
ªg
[
rd
] +Ñeg[
rs
]); \

3450 
	`thumb_pc_off£t
(4); \

3451 
	`thumb_decode_húeg_›
(); \

3452 
u32
 
_ß
 = 
ªg
[
rd
]; \

3453 
u32
 
_sb
 = 
ªg
[
rs
]; \

3454 
u32
 
de°
 = 
_ß
 - 
_sb
; \

3455 
	`thumb_pc_off£t
(-2); \

3456 
	`ˇlcuœã_Êags_sub
(
de°
, 
_ß
, 
_sb
); \

3462 
	`thumb_húeg_›
(
ªg
[
rs
]); \

3468 
	`thumb_decode_húeg_›
(); \

3469 
u32
 
§c
; \

3470 
	`thumb_pc_off£t
(4); \

3471 
§c
 = 
ªg
[
rs
]; \

3472 if(
§c
 & 0x01) \

3474 
§c
 -= 1; \

3475 
	`thumb_pc_off£t_upd©e_dúe˘
(
§c
); \

3480 
	`thumb_pc_off£t_upd©e_dúe˘
(
§c
); \

3481 
ªg
[
REG_CPSR
] &= ~0x20; \

3482 
	`cﬁœp£_Êags
(); \

3483 
¨m_lo›
; \

3490 
	`thumb_ac˚ss_mem‹y
(
lﬂd
, 
imm
, (
pc
 & ~2Ë+ (imm * 4Ë+ 4, 
ªg
[0], 
u32
); \

3495 
	`thumb_ac˚ss_mem‹y
(
lﬂd
, 
imm
, (
pc
 & ~2Ë+ (imm * 4Ë+ 4, 
ªg
[1], 
u32
); \

3500 
	`thumb_ac˚ss_mem‹y
(
lﬂd
, 
imm
, (
pc
 & ~2Ë+ (imm * 4Ë+ 4, 
ªg
[2], 
u32
); \

3505 
	`thumb_ac˚ss_mem‹y
(
lﬂd
, 
imm
, (
pc
 & ~2Ë+ (imm * 4Ë+ 4, 
ªg
[3], 
u32
); \

3510 
	`thumb_ac˚ss_mem‹y
(
lﬂd
, 
imm
, (
pc
 & ~2Ë+ (imm * 4Ë+ 4, 
ªg
[4], 
u32
); \

3515 
	`thumb_ac˚ss_mem‹y
(
lﬂd
, 
imm
, (
pc
 & ~2Ë+ (imm * 4Ë+ 4, 
ªg
[5], 
u32
); \

3520 
	`thumb_ac˚ss_mem‹y
(
lﬂd
, 
imm
, (
pc
 & ~2Ë+ (imm * 4Ë+ 4, 
ªg
[6], 
u32
); \

3525 
	`thumb_ac˚ss_mem‹y
(
lﬂd
, 
imm
, (
pc
 & ~2Ë+ (imm * 4Ë+ 4, 
ªg
[7], 
u32
); \

3530 
	`thumb_ac˚ss_mem‹y
(
°‹e
, 
mem_ªg
, 
ªg
[
rb
] +Ñeg[
ro
],Ñeg[
rd
], 
u32
); \

3535 
	`thumb_ac˚ss_mem‹y
(
°‹e
, 
mem_ªg
, 
ªg
[
rb
] +Ñeg[
ro
],Ñeg[
rd
], 
u16
); \

3540 
	`thumb_ac˚ss_mem‹y
(
°‹e
, 
mem_ªg
, 
ªg
[
rb
] +Ñeg[
ro
],Ñeg[
rd
], 
u8
); \

3545 
	`thumb_ac˚ss_mem‹y
(
lﬂd
, 
mem_ªg
, 
ªg
[
rb
] +Ñeg[
ro
],Ñeg[
rd
], 
s8
); \

3550 
	`thumb_ac˚ss_mem‹y
(
lﬂd
, 
mem_ªg
, 
ªg
[
rb
] +Ñeg[
ro
],Ñeg[
rd
], 
u32
); \

3555 
	`thumb_ac˚ss_mem‹y
(
lﬂd
, 
mem_ªg
, 
ªg
[
rb
] +Ñeg[
ro
],Ñeg[
rd
], 
u16
); \

3560 
	`thumb_ac˚ss_mem‹y
(
lﬂd
, 
mem_ªg
, 
ªg
[
rb
] +Ñeg[
ro
],Ñeg[
rd
], 
u8
); \

3565 
	`thumb_ac˚ss_mem‹y
(
lﬂd
, 
mem_ªg
, 
ªg
[
rb
] +Ñeg[
ro
],Ñeg[
rd
], 
s16
); \

3570 
	`thumb_ac˚ss_mem‹y
(
°‹e
, 
mem_imm
, 
ªg
[
rb
] + (
imm
 * 4),Ñeg[
rd
], 
u32
); \

3575 
	`thumb_ac˚ss_mem‹y
(
lﬂd
, 
mem_imm
, 
ªg
[
rb
] + (
imm
 * 4),Ñeg[
rd
], 
u32
); \

3580 
	`thumb_ac˚ss_mem‹y
(
°‹e
, 
mem_imm
, 
ªg
[
rb
] + 
imm
,Ñeg[
rd
], 
u8
); \

3585 
	`thumb_ac˚ss_mem‹y
(
lﬂd
, 
mem_imm
, 
ªg
[
rb
] + 
imm
,Ñeg[
rd
], 
u8
); \

3590 
	`thumb_ac˚ss_mem‹y
(
°‹e
, 
mem_imm
, 
ªg
[
rb
] + (
imm
 * 2),Ñeg[
rd
], 
u16
); \

3595 
	`thumb_ac˚ss_mem‹y
(
lﬂd
, 
mem_imm
, 
ªg
[
rb
] + (
imm
 * 2),Ñeg[
rd
], 
u16
); \

3600 
	`thumb_ac˚ss_mem‹y
(
°‹e
, 
imm
, 
ªg
[
REG_SP
] + (imm * 4),Ñeg[0], 
u32
); \

3605 
	`thumb_ac˚ss_mem‹y
(
°‹e
, 
imm
, 
ªg
[
REG_SP
] + (imm * 4),Ñeg[1], 
u32
); \

3610 
	`thumb_ac˚ss_mem‹y
(
°‹e
, 
imm
, 
ªg
[
REG_SP
] + (imm * 4),Ñeg[2], 
u32
); \

3615 
	`thumb_ac˚ss_mem‹y
(
°‹e
, 
imm
, 
ªg
[
REG_SP
] + (imm * 4),Ñeg[3], 
u32
); \

3620 
	`thumb_ac˚ss_mem‹y
(
°‹e
, 
imm
, 
ªg
[
REG_SP
] + (imm * 4),Ñeg[4], 
u32
); \

3625 
	`thumb_ac˚ss_mem‹y
(
°‹e
, 
imm
, 
ªg
[
REG_SP
] + (imm * 4),Ñeg[5], 
u32
); \

3630 
	`thumb_ac˚ss_mem‹y
(
°‹e
, 
imm
, 
ªg
[
REG_SP
] + (imm * 4),Ñeg[6], 
u32
); \

3635 
	`thumb_ac˚ss_mem‹y
(
°‹e
, 
imm
, 
ªg
[
REG_SP
] + (imm * 4),Ñeg[7], 
u32
); \

3640 
	`thumb_ac˚ss_mem‹y
(
lﬂd
, 
imm
, 
ªg
[
REG_SP
] + (imm * 4),Ñeg[0], 
u32
); \

3645 
	`thumb_ac˚ss_mem‹y
(
lﬂd
, 
imm
, 
ªg
[
REG_SP
] + (imm * 4),Ñeg[1], 
u32
); \

3650 
	`thumb_ac˚ss_mem‹y
(
lﬂd
, 
imm
, 
ªg
[
REG_SP
] + (imm * 4),Ñeg[2], 
u32
); \

3655 
	`thumb_ac˚ss_mem‹y
(
lﬂd
, 
imm
, 
ªg
[
REG_SP
] + (imm * 4),Ñeg[3], 
u32
); \

3660 
	`thumb_ac˚ss_mem‹y
(
lﬂd
, 
imm
, 
ªg
[
REG_SP
] + (imm * 4),Ñeg[4], 
u32
); \

3665 
	`thumb_ac˚ss_mem‹y
(
lﬂd
, 
imm
, 
ªg
[
REG_SP
] + (imm * 4),Ñeg[5], 
u32
); \

3670 
	`thumb_ac˚ss_mem‹y
(
lﬂd
, 
imm
, 
ªg
[
REG_SP
] + (imm * 4),Ñeg[6], 
u32
); \

3675 
	`thumb_ac˚ss_mem‹y
(
lﬂd
, 
imm
, 
ªg
[
REG_SP
] + (imm * 4),Ñeg[7], 
u32
); \

3680 
	`thumb_add_noÊags
(
imm
, 0, (
pc
 & ~2) + 4, (imm * 4)); \

3685 
	`thumb_add_noÊags
(
imm
, 1, (
pc
 & ~2) + 4, (imm * 4)); \

3690 
	`thumb_add_noÊags
(
imm
, 2, (
pc
 & ~2) + 4, (imm * 4)); \

3695 
	`thumb_add_noÊags
(
imm
, 3, (
pc
 & ~2) + 4, (imm * 4)); \

3700 
	`thumb_add_noÊags
(
imm
, 4, (
pc
 & ~2) + 4, (imm * 4)); \

3705 
	`thumb_add_noÊags
(
imm
, 5, (
pc
 & ~2) + 4, (imm * 4)); \

3710 
	`thumb_add_noÊags
(
imm
, 6, (
pc
 & ~2) + 4, (imm * 4)); \

3715 
	`thumb_add_noÊags
(
imm
, 7, (
pc
 & ~2) + 4, (imm * 4)); \

3720 
	`thumb_add_noÊags
(
imm
, 0, 
ªg
[
REG_SP
], (imm * 4)); \

3725 
	`thumb_add_noÊags
(
imm
, 1, 
ªg
[
REG_SP
], (imm * 4)); \

3730 
	`thumb_add_noÊags
(
imm
, 2, 
ªg
[
REG_SP
], (imm * 4)); \

3735 
	`thumb_add_noÊags
(
imm
, 3, 
ªg
[
REG_SP
], (imm * 4)); \

3740 
	`thumb_add_noÊags
(
imm
, 4, 
ªg
[
REG_SP
], (imm * 4)); \

3745 
	`thumb_add_noÊags
(
imm
, 5, 
ªg
[
REG_SP
], (imm * 4)); \

3750 
	`thumb_add_noÊags
(
imm
, 6, 
ªg
[
REG_SP
], (imm * 4)); \

3755 
	`thumb_add_noÊags
(
imm
, 7, 
ªg
[
REG_SP
], (imm * 4)); \

3759 if((
›code
 >> 7) & 0x01) \

3762 
	`thumb_add_noÊags
(
add_•
, 13, 
ªg
[
REG_SP
], -(
imm
 * 4)); \

3767 
	`thumb_add_noÊags
(
add_•
, 13, 
ªg
[
REG_SP
], (
imm
 * 4)); \

3773 
	`thumb_block_mem‹y
(
°‹e
, 
down
, 
no_›
, 13); \

3778 
	`thumb_block_mem‹y
(
°‹e
, 
push_Ã
,Öush_lr, 13); \

3783 
	`thumb_block_mem‹y
(
lﬂd
, 
no_›
, 
up
, 13); \

3788 
	`thumb_block_mem‹y
(
lﬂd
, 
no_›
, 
p›_pc
, 13); \

3793 
	`thumb_block_mem‹y
(
°‹e
, 
no_›
, 
up
, 0); \

3798 
	`thumb_block_mem‹y
(
°‹e
, 
no_›
, 
up
, 1); \

3803 
	`thumb_block_mem‹y
(
°‹e
, 
no_›
, 
up
, 2); \

3808 
	`thumb_block_mem‹y
(
°‹e
, 
no_›
, 
up
, 3); \

3813 
	`thumb_block_mem‹y
(
°‹e
, 
no_›
, 
up
, 4); \

3818 
	`thumb_block_mem‹y
(
°‹e
, 
no_›
, 
up
, 5); \

3823 
	`thumb_block_mem‹y
(
°‹e
, 
no_›
, 
up
, 6); \

3828 
	`thumb_block_mem‹y
(
°‹e
, 
no_›
, 
up
, 7); \

3833 
	`thumb_block_mem‹y
(
lﬂd
, 
no_›
, 
up
, 0); \

3838 
	`thumb_block_mem‹y
(
lﬂd
, 
no_›
, 
up
, 1); \

3843 
	`thumb_block_mem‹y
(
lﬂd
, 
no_›
, 
up
, 2); \

3848 
	`thumb_block_mem‹y
(
lﬂd
, 
no_›
, 
up
, 3); \

3853 
	`thumb_block_mem‹y
(
lﬂd
, 
no_›
, 
up
, 4); \

3858 
	`thumb_block_mem‹y
(
lﬂd
, 
no_›
, 
up
, 5); \

3863 
	`thumb_block_mem‹y
(
lﬂd
, 
no_›
, 
up
, 6); \

3868 
	`thumb_block_mem‹y
(
lﬂd
, 
no_›
, 
up
, 7); \

3873 
	`thumb_c⁄dôi⁄Æ_bønch
(
z_Êag
 == 1); \

3878 
	`thumb_c⁄dôi⁄Æ_bønch
(
z_Êag
 == 0); \

3883 
	`thumb_c⁄dôi⁄Æ_bønch
(
c_Êag
 == 1); \

3888 
	`thumb_c⁄dôi⁄Æ_bønch
(
c_Êag
 == 0); \

3893 
	`thumb_c⁄dôi⁄Æ_bønch
(
n_Êag
 == 1); \

3898 
	`thumb_c⁄dôi⁄Æ_bønch
(
n_Êag
 == 0); \

3903 
	`thumb_c⁄dôi⁄Æ_bønch
(
v_Êag
 == 1); \

3908 
	`thumb_c⁄dôi⁄Æ_bønch
(
v_Êag
 == 0); \

3913 
	`thumb_c⁄dôi⁄Æ_bønch
(
c_Êag
 & (
z_Êag
 ^ 1)); \

3918 
	`thumb_c⁄dôi⁄Æ_bønch
((
c_Êag
 =0Ë| 
z_Êag
); \

3923 
	`thumb_c⁄dôi⁄Æ_bønch
(
n_Êag
 =
v_Êag
); \

3928 
	`thumb_c⁄dôi⁄Æ_bønch
(
n_Êag
 !
v_Êag
); \

3933 
	`thumb_c⁄dôi⁄Æ_bønch
((
z_Êag
 =0Ë& (
n_Êag
 =
v_Êag
)); \

3938 
	`thumb_c⁄dôi⁄Æ_bønch
(
z_Êag
 | (
n_Êag
 !
v_Êag
)); \

3944 
u32
 
swi_commít
 = 
›code
 & 0xFF; \

3946 
swi_commít
) \

3949 
ªg_mode
[
MODE_SUPERVISOR
][6] = 
pc
 + 2; \

3950 
•§
[
MODE_SUPERVISOR
] = 
ªg
[
REG_CPSR
]; \

3951 
ªg
[
REG_PC
] = 0x00000008; \

3952 
	`thumb_upd©e_pc
(); \

3953 
ªg
[
REG_CPSR
] = (reg[REG_CPSR] & ~0x3F) | 0x13; \

3954 
	`£t_˝u_mode
(
MODE_SUPERVISOR
); \

3955 
	`cﬁœp£_Êags
(); \

3956 
¨m_lo›
; \

3964 
	`thumb_decode_bønch
(); \

3965 
	`thumb_pc_off£t_upd©e
(((
s32
)(
off£t
 << 21) >> 20) + 4); \

3972 
	`thumb_decode_bønch
(); \

3973 
ªg
[
REG_LR
] = 
pc
 + 4 + ((
s32
)(
off£t
 << 21) >> 9); \

3974 
	`thumb_pc_off£t
(2); \

3981 
	`thumb_decode_bønch
(); \

3982 
u32
 
Ã
 = (
pc
 + 2) | 0x01; \

3983 
pc
 = 
ªg
[
REG_LR
] + (
off£t
 * 2); \

3984 
ªg
[
REG_LR
] = 
Ã
; \

3985 
ªg
[
REG_PC
] = 
pc
; \

3989 

	)

3990 
	$¥öt_¨m_ªgi°îs
()

3992 
u32
 
i
, 
i2
, 
i3
;

3994 
i
 = 0, 
i3
 = 0; i < 4; i++)

3996 
	`debug_s¸ìn_¥ötf
(" ");

3997 
i2
 = 0; i2 < 4; i2++, 
i3
++)

3999 
	`debug_s¸ìn_¥ötf
("R%02d %08x ", 
i3
, 
ªg
[i3]);

4001 
	`debug_s¸ìn_√wlöe
(1);

4003 
	}
}

4005 
	$¥öt_thumb_ö°ru˘i⁄
()

4007 
	`debug_s¸ìn_¥ötf
("Thumb instructionát PC: %04x",

4008 
	`ªad_mem‹y16
(
ªg
[
REG_PC
]));

4009 
	`debug_s¸ìn_√wlöe
(1);

4010 
	}
}

4012 
	$¥öt_¨m_ö°ru˘i⁄
()

4014 
	`debug_s¸ìn_¥ötf
("ARM instructionát PC: %08x",

4015 
	`ªad_mem‹y32
(
ªg
[
REG_PC
]));

4016 
	`debug_s¸ìn_√wlöe
(1);

4017 
	}
}

4019 
	$¥öt_Êags
()

4021 
u32
 
˝§
 = 
ªg
[
REG_CPSR
];

4022 
	`debug_s¸ìn_√wlöe
(1);

4023 
	`debug_s¸ìn_¥ötf
(

4025 (
˝§
 >> 31) & 0x01, (cpsr >> 30) & 0x01, (cpsr >> 29) & 0x01,

4026 (
˝§
 >> 28Ë& 0x01, cp§, 
•§
[
ªg
[
CPU_MODE
]],

4027 
˝u_mode_«mes
[
ªg
[
CPU_MODE
]]);

4028 
	`debug_s¸ìn_√wlöe
(2);

4029 
	}
}

4031 c⁄° 
u32
 
	g°ack_¥öt_löes
 = 2;

4033 
	$¥öt_°ack
()

4035 
u32
 
i
, 
i2
, 
i3
;

4037 
	`debug_s¸ìn_¥ötf
("Stack:");

4038 
	`debug_s¸ìn_√wlöe
(1);

4040 
i
 = 0, 
i3
 = 
ªg
[
REG_SP
]; i < 
°ack_¥öt_löes
; i++)

4042 
i2
 = 0; i2 < 5; i2++, 
i3
 += 4)

4044 
	`debug_s¸ìn_¥ötf
(" %08x", 
	`ªad_mem‹y32
(
i3
));

4046 if(
i
 !
°ack_¥öt_löes
)

4047 
	`debug_s¸ìn_√wlöe
(1);

4050 
	`debug_s¸ìn_√wlöe
(1);

4051 
	}
}

4053 
u32
 
	gö°ru˘i⁄_cou¡
 = 0;

4055 
u32
 
	gouçut_fõld
 = 0;

4056 c⁄° 
u32
 
	gnum_ouçut_fõlds
 = 2;

4058 
u32
 
	gœ°_ö°ru˘i⁄
 = 0;

4060 
u32
 
	gö_öãºu±
 = 0;

4062 
u32
 
	$debug_⁄
()

4064 
cuºít_debug_°©e
 = 
STEP
;

4065 
	`debug_s¸ìn_°¨t
();

4066 
	}
}

4068 
u32
 
	$debug_off
(
debug_°©e
 
√w_debug_°©e
)

4070 
cuºít_debug_°©e
 = 
√w_debug_°©e
;

4071 
	`debug_s¸ìn_íd
();

4072 
	}
}

4074 
u32
 
fun˘i⁄_cc
 
	$°ï_debug
(
u32
 
pc
, u32 
cy˛es
)

4076 
u32
 
thumb
 = 0;

4078 
ªg
[
REG_PC
] = 
pc
;

4080 if(
ªg
[
REG_CPSR
] & 0x20)

4081 
thumb
 = 1;

4083 
ö°ru˘i⁄_cou¡
++;

4085 
cuºít_debug_°©e
)

4087 
PC_BREAKPOINT
:

4088 if(
ªg
[
REG_PC
] =
bªakpoöt_vÆue
)

4089 
	`debug_⁄
();

4093 
Z_BREAKPOINT
:

4094 if(
ªg
[
REG_Z_FLAG
] == 1)

4095 
	`debug_⁄
();

4099 
VCOUNT_BREAKPOINT
:

4100 if(
io_ªgi°îs
[
REG_VCOUNT
] =
bªakpoöt_vÆue
)

4101 
	`debug_⁄
();

4105 
COUNTDOWN_BREAKPOINT
:

4106 if(
bªakpoöt_vÆue
 == 0)

4107 
	`debug_⁄
();

4109 
bªakpoöt_vÆue
--;

4113 
COUNTDOWN_BREAKPOINT_B
:

4114 if(
bªakpoöt_vÆue
 =
ö°ru˘i⁄_cou¡
)

4115 
	`debug_⁄
();

4119 
COUNTDOWN_BREAKPOINT_C
:

4121 if(
pc
 == 0x18)

4122 
ö_öãºu±
++;

4124 if((
bªakpoöt_vÆue
 =0Ë&& (
ö_öãºu±
 == 0))

4126 
	`debug_⁄
();

4130 if(
ö_öãºu±
 == 0)

4131 
bªakpoöt_vÆue
--;

4133 if(
ö_öãºu±
 && (
pc
 == 0x13c))

4134 
ö_öãºu±
--;

4140 if((
cuºít_debug_°©e
 =
STEP
) ||

4141 (
cuºít_debug_°©e
 =
STEP_RUN
))

4143 
u32
 
key
 = 0;

4145 
	`SDL_LockMuãx
(
sound_muãx
);

4146 
	`SDL_Pau£Audio
(1);

4148 if(
ouçut_fõld
 >
num_ouçut_fõlds
)

4150 
ouçut_fõld
 = 0;

4151 
	`debug_s¸ìn_˛ór
();

4154 if(
thumb
)

4155 
	`¥öt_thumb_ö°ru˘i⁄
(
cy˛es
);

4157 
	`¥öt_¨m_ö°ru˘i⁄
(
cy˛es
);

4159 
	`¥öt_¨m_ªgi°îs
();

4160 
	`¥öt_Êags
();

4161 
	`¥öt_°ack
();

4164 
	`¥ötf
("%x instructions in, VCOUNT %d, cyclesÑemaining: %d \n",

4165 
ö°ru˘i⁄_cou¡
, 
io_ªgi°îs
[
REG_VCOUNT
], 
cy˛es
);

4167 
	`debug_s¸ìn_upd©e
();

4168 
ouçut_fõld
++;

4170 if(
cuºít_debug_°©e
 !
STEP_RUN
)

4173 #ifde‡
STDIO_DEBUG


4174 
key
 = 
	`gëch¨
();

4177 
gui_a˘i⁄_ty≥
 
√xt_öput
 = 
CURSOR_NONE
;

4178 
√xt_öput
 =
CURSOR_NONE
)

4180 
√xt_öput
 = 
	`gë_gui_öput
();

4182 
√xt_öput
)

4184 
CURSOR_BACK
:

4185 
key
 = 'b';

4188 
CURSOR_UP
:

4189 
key
 = 'r';

4192 
CURSOR_EXIT
:

4193 
key
 = 'q';

4197 
key
 = 'n';

4204 
key
)

4207 
	`dump_å™¶©i⁄_ˇche
();

4211 
	`debug_off
(
Z_BREAKPOINT
);

4214 #ifde‡
STDIO_DEBUG


4216 
	`¥ötf
("breakát PC (hex): ");

4217 
	`sˇnf
("%08x", &
bªakpoöt_vÆue
);

4218 
	`debug_off
(
PC_BREAKPOINT
);

4222 
	`¥ötf
("breakáfter N instructions (hex): ");

4223 
	`sˇnf
("%08x", &
bªakpoöt_vÆue
);

4224 
bªakpoöt_vÆue
 -= 1;

4225 
	`debug_off
(
COUNTDOWN_BREAKPOINT
);

4229 
	`¥ötf
("breakáfter N instructions, skip in IRQ (hex): ");

4230 
	`sˇnf
("%08x", &
bªakpoöt_vÆue
);

4231 
bªakpoöt_vÆue
 -= 1;

4232 
	`debug_off
(
COUNTDOWN_BREAKPOINT_C
);

4236 
	`¥ötf
("breakáfter N instructions (since start): ");

4237 
	`sˇnf
("%d", &
bªakpoöt_vÆue
);

4238 
	`debug_off
(
COUNTDOWN_BREAKPOINT_B
);

4242 
	`¥ötf
("breakát VCOUNT: ");

4243 
	`sˇnf
("%d", &
bªakpoöt_vÆue
);

4244 
	`debug_off
(
VCOUNT_BREAKPOINT
);

4249 
cuºít_debug_°©e
 = 
STEP_RUN
;

4253 
	`debug_off
(
RUN
);

4257 
	`debug_off
(
PC_BREAKPOINT
);

4261 
globÆ_cy˛es_≥r_ö°ru˘i⁄
 = 0;

4262 
	`debug_off
(
RUN
);

4267 
u8
 
cuºít_ßve°©e_fûíame
[512];

4268 
u16
 *
cuºít_s¸ìn
 = 
	`c›y_s¸ìn
();

4269 
	`gë_ßve°©e_fûíame_noshŸ
(
ßve°©e_¶Ÿ
,

4270 
cuºít_ßve°©e_fûíame
);

4271 
	`ßve_°©e
(
cuºít_ßve°©e_fûíame
, 
cuºít_s¸ìn
);

4272 
	`‰ì
(
cuºít_s¸ìn
);

4277 
	`quô
();

4280 
	`SDL_Pau£Audio
(0);

4281 
	`SDL_U∆ockMuãx
(
sound_muãx
);

4284 
œ°_ö°ru˘i⁄
 = 
ªg
[
REG_PC
];

4286 if(
thumb
)

4287 
ªg
[
REG_PC
] = 
pc
 + 2;

4289 
ªg
[
REG_PC
] = 
pc
 + 4;

4292 
	}
}

4294 
	$£t_˝u_mode
(
˝u_mode_ty≥
 
√w_mode
)

4296 
u32
 
i
;

4297 
˝u_mode_ty≥
 
˝u_mode
 = 
ªg
[
CPU_MODE
];

4299 if(
˝u_mode
 !
√w_mode
)

4301 if(
√w_mode
 =
MODE_FIQ
)

4303 
i
 = 8; i < 15; i++)

4305 
ªg_mode
[
˝u_mode
][
i
 - 8] = 
ªg
[i];

4310 
ªg_mode
[
˝u_mode
][5] = 
ªg
[
REG_SP
];

4311 
ªg_mode
[
˝u_mode
][6] = 
ªg
[
REG_LR
];

4314 if(
˝u_mode
 =
MODE_FIQ
)

4316 
i
 = 8; i < 15; i++)

4318 
ªg
[
i
] = 
ªg_mode
[
√w_mode
][i - 8];

4323 
ªg
[
REG_SP
] = 
ªg_mode
[
√w_mode
][5];

4324 
ªg
[
REG_LR
] = 
ªg_mode
[
√w_mode
][6];

4327 
ªg
[
CPU_MODE
] = 
√w_mode
;

4329 
	}
}

4331 
	$øi£_öãºu±
(
úq_ty≥
 
úq_øi£d
)

4335 
io_ªgi°îs
[
REG_IF
] |
úq_øi£d
;

4337 if((
io_ªgi°îs
[
REG_IE
] & 
úq_øi£d
Ë&& io_ªgi°îs[
REG_IME
] &&

4338 ((
ªg
[
REG_CPSR
] & 0x80) == 0))

4340 
bios_ªad_¥Ÿe˘
 = 0xe55ec002;

4343 
ªg_mode
[
MODE_IRQ
][6] = 
ªg
[
REG_PC
] + 4;

4344 
•§
[
MODE_IRQ
] = 
ªg
[
REG_CPSR
];

4345 
ªg
[
REG_CPSR
] = 0xD2;

4346 
ªg
[
REG_PC
] = 0x00000018;

4348 
	`bios_ªgi⁄_ªad_Ælow
();

4350 
	`£t_˝u_mode
(
MODE_IRQ
);

4351 
ªg
[
CPU_HALT_STATE
] = 
CPU_ACTIVE
;

4352 
ªg
[
CHANGED_PC_STATUS
] = 1;

4354 
	}
}

4356 
u32
 
	$execuã_¨m
(
u32
 
cy˛es
)

4358 
u32
 
pc
 = 
ªg
[
REG_PC
];

4359 
u32
 
›code
;

4360 
u32
 
c⁄dôi⁄
;

4361 
u32
 
n_Êag
, 
z_Êag
, 
c_Êag
, 
v_Êag
;

4362 
u32
 
pc_ªgi⁄
 = (
pc
 >> 15);

4363 
u8
 *
pc_addªss_block
 = 
mem‹y_m≠_ªad
[
pc_ªgi⁄
];

4364 
u32
 
√w_pc_ªgi⁄
;

4365 
s32
 
cy˛es_ªmaöög
;

4366 
u32
 
cy˛es_≥r_ö°ru˘i⁄
 = 
globÆ_cy˛es_≥r_ö°ru˘i⁄
;

4367 
˝u_Æît_ty≥
 
˝u_Æît
;

4369 
u32
 
ﬁd_pc
;

4371 if(
pc_addªss_block
 =
NULL
)

4372 
pc_addªss_block
 = 
	`lﬂd_gamïak_∑ge
(
pc_ªgi⁄
 & 0x3FF);

4376 
cy˛es_ªmaöög
 = 
cy˛es
;

4377 
pc
 = 
ªg
[
REG_PC
];

4378 
	`exåa˘_Êags
();

4380 if(
ªg
[
REG_CPSR
] & 0x20)

4381 
thumb_lo›
;

4385 
¨m_lo›
:

4387 
	`cﬁœp£_Êags
();

4388 
	`°ï_debug
(
pc
, 
cy˛es_ªmaöög
);

4389 
cy˛es_≥r_ö°ru˘i⁄
 = 
globÆ_cy˛es_≥r_ö°ru˘i⁄
;

4391 
ﬁd_pc
 = 
pc
;

4392 
	`execuã_¨m_ö°ru˘i⁄
();

4393 
cy˛es_ªmaöög
 -
cy˛es_≥r_ö°ru˘i⁄
;

4394 } 
cy˛es_ªmaöög
 > 0);

4396 
	`cﬁœp£_Êags
();

4397 
cy˛es
 = 
	`upd©e_gba
();

4402 
thumb_lo›
:

4404 
	`cﬁœp£_Êags
();

4405 
	`°ï_debug
(
pc
, 
cy˛es_ªmaöög
);

4407 
ﬁd_pc
 = 
pc
;

4408 
	`execuã_thumb_ö°ru˘i⁄
();

4409 
cy˛es_ªmaöög
 -
cy˛es_≥r_ö°ru˘i⁄
;

4410 } 
cy˛es_ªmaöög
 > 0);

4412 
	`cﬁœp£_Êags
();

4413 
cy˛es
 = 
	`upd©e_gba
();

4416 
Æît
:

4418 if(
˝u_Æît
 =
CPU_ALERT_IRQ
)

4420 
cy˛es
 = 
cy˛es_ªmaöög
;

4424 
	`cﬁœp£_Êags
();

4426 
ªg
[
CPU_HALT_STATE
] !
CPU_ACTIVE
)

4428 
cy˛es
 = 
	`upd©e_gba
();

4432 
	}
}

4434 
	$öô_˝u
()

4436 
u32
 
i
;

4438 
i
 = 0; i < 16; i++)

4440 
ªg
[
i
] = 0;

4443 
ªg
[
REG_SP
] = 0x03007F00;

4444 
ªg
[
REG_PC
] = 0x08000000;

4445 
ªg
[
REG_CPSR
] = 0x0000001F;

4446 
ªg
[
CPU_HALT_STATE
] = 
CPU_ACTIVE
;

4447 
ªg
[
CPU_MODE
] = 
MODE_USER
;

4448 
ªg
[
CHANGED_PC_STATUS
] = 0;

4450 
ªg_mode
[
MODE_USER
][5] = 0x03007F00;

4451 
ªg_mode
[
MODE_IRQ
][5] = 0x03007FA0;

4452 
ªg_mode
[
MODE_FIQ
][5] = 0x03007FA0;

4453 
ªg_mode
[
MODE_SUPERVISOR
][5] = 0x03007FE0;

4454 
	}
}

4456 
	$move_ªg
(
u32
 *
√w_ªg
)

4458 
u32
 
i
;

4460 
i
 = 0; i < 32; i++)

4462 
√w_ªg
[
i
] = 
ªg
[i];

4465 
ªg
 = 
√w_ªg
;

4466 
	}
}

4469 
	#˝u_ßve°©e_buûdî
(
ty≥
) \

4470 
˝u_
##
ty≥
##
	`_ßve°©e
(
fûe_èg_ty≥
 
ßve°©e_fûe
) \

4472 
fûe_
##
	`ty≥
(
ßve°©e_fûe
, 
ªg
, 0x100); \

4473 
fûe_
##
ty≥
##
	`_¨øy
(
ßve°©e_fûe
, 
•§
); \

4474 
fûe_
##
ty≥
##
	`_¨øy
(
ßve°©e_fûe
, 
ªg_mode
); \

4476 

	)

4477 
˝u_ßve°©e_buûdî
(
ªad
);

4478 
˝u_ßve°©e_buûdî
(
wrôe_mem
);

	@cpu.h

20 #i‚de‡
CPU_H


21 
	#CPU_H


	)

27 
	mMODE_USER
,

28 
	mMODE_IRQ
,

29 
	mMODE_FIQ
,

30 
	mMODE_SUPERVISOR
,

31 
	mMODE_ABORT
,

32 
	mMODE_UNDEFINED
,

33 
	mMODE_INVALID


34 } 
	t˝u_mode_ty≥
;

38 
	mCPU_ALERT_NONE
,

39 
	mCPU_ALERT_HALT
,

40 
	mCPU_ALERT_SMC
,

41 
	mCPU_ALERT_IRQ


42 } 
	t˝u_Æît_ty≥
;

46 
	mCPU_ACTIVE
,

47 
	mCPU_HALT
,

48 
	mCPU_STOP


49 } 
	t˝u_hÆt_ty≥
;

53 
	mIRQ_NONE
 = 0x0000,

54 
	mIRQ_VBLANK
 = 0x0001,

55 
	mIRQ_HBLANK
 = 0x0002,

56 
	mIRQ_VCOUNT
 = 0x0004,

57 
	mIRQ_TIMER0
 = 0x0008,

58 
	mIRQ_TIMER1
 = 0x0010,

59 
	mIRQ_TIMER2
 = 0x0020,

60 
	mIRQ_TIMER3
 = 0x0040,

61 
	mIRQ_SERIAL
 = 0x0080,

62 
	mIRQ_DMA0
 = 0x0100,

63 
	mIRQ_DMA1
 = 0x0200,

64 
	mIRQ_DMA2
 = 0x0400,

65 
	mIRQ_DMA3
 = 0x0800,

66 
	mIRQ_KEYPAD
 = 0x1000,

67 
	mIRQ_GAMEPAK
 = 0x2000,

68 } 
	túq_ty≥
;

72 
	mREG_SP
 = 13,

73 
	mREG_LR
 = 14,

74 
	mREG_PC
 = 15,

75 
	mREG_N_FLAG
 = 16,

76 
	mREG_Z_FLAG
 = 17,

77 
	mREG_C_FLAG
 = 18,

78 
	mREG_V_FLAG
 = 19,

79 
	mREG_CPSR
 = 20,

80 
	mREG_SAVE
 = 21,

81 
	mREG_SAVE2
 = 22,

82 
	mREG_SAVE3
 = 23,

83 
	mCPU_MODE
 = 29,

84 
	mCPU_HALT_STATE
 = 30,

85 
	mCHANGED_PC_STATUS
 = 31

86 } 
	text_ªg_numbîs
;

90 
	mSTEP
,

91 
	mPC_BREAKPOINT
,

92 
	mVCOUNT_BREAKPOINT
,

93 
	mZ_BREAKPOINT
,

94 
	mCOUNTDOWN_BREAKPOINT
,

95 
	mCOUNTDOWN_BREAKPOINT_B
,

96 
	mCOUNTDOWN_BREAKPOINT_C
,

97 
	mSTEP_RUN
,

98 
	mRUN


99 } 
	tdebug_°©e
;

103 
	mTRANSLATION_REGION_RAM
,

104 
	mTRANSLATION_REGION_ROM
,

105 
	mTRANSLATION_REGION_BIOS


106 } 
	tå™¶©i⁄_ªgi⁄_ty≥
;

108 
debug_°©e
 
cuºít_debug_°©e
;

109 
u32
 
ö°ru˘i⁄_cou¡
;

110 
u32
 
œ°_ö°ru˘i⁄
;

112 
u32
 
fun˘i⁄_cc
 
°ï_debug
(u32 
pc
, u32 
cy˛es
);

113 
u32
 
execuã_¨m
(u32 
cy˛es
);

114 
øi£_öãºu±
(
úq_ty≥
 
úq_øi£d
);

116 
u32
 
fun˘i⁄_cc
 
execuã_lﬂd_u8
(u32 
addªss
);

117 
u32
 
fun˘i⁄_cc
 
execuã_lﬂd_u16
(u32 
addªss
);

118 
u32
 
fun˘i⁄_cc
 
execuã_lﬂd_u32
(u32 
addªss
);

119 
u32
 
fun˘i⁄_cc
 
execuã_lﬂd_s8
(u32 
addªss
);

120 
u32
 
fun˘i⁄_cc
 
execuã_lﬂd_s16
(u32 
addªss
);

121 
fun˘i⁄_cc
 
execuã_°‹e_u8
(
u32
 
addªss
, u32 
sour˚
);

122 
fun˘i⁄_cc
 
execuã_°‹e_u16
(
u32
 
addªss
, u32 
sour˚
);

123 
fun˘i⁄_cc
 
execuã_°‹e_u32
(
u32
 
addªss
, u32 
sour˚
);

124 
u32
 
fun˘i⁄_cc
 
execuã_¨m_å™¶©e
(u32 
cy˛es
);

125 
öô_å™¶©î
();

126 
˝u_wrôe_mem_ßve°©e
(
fûe_èg_ty≥
 
ßve°©e_fûe
);

127 
˝u_ªad_ßve°©e
(
fûe_èg_ty≥
 
ßve°©e_fûe
);

129 
u8
 
fun˘i⁄_cc
 *
block_lookup_addªss_¨m
(
u32
 
pc
);

130 
u8
 
fun˘i⁄_cc
 *
block_lookup_addªss_thumb
(
u32
 
pc
);

131 
s32
 
å™¶©e_block_¨m
(
u32
 
pc
, 
å™¶©i⁄_ªgi⁄_ty≥
 
å™¶©i⁄_ªgi⁄
,

132 
u32
 
smc_íabÀ
);

133 
s32
 
å™¶©e_block_thumb
(
u32
 
pc
, 
å™¶©i⁄_ªgi⁄_ty≥
 
å™¶©i⁄_ªgi⁄
,

134 
u32
 
smc_íabÀ
);

136 #ifde‡
GP2X_BUILD


137 
	#ROM_TRANSLATION_CACHE_SIZE
 (1024 * 512 * 4 * 5)

	)

138 
	#RAM_TRANSLATION_CACHE_SIZE
 (1024 * 384 * 2)

	)

139 
	#BIOS_TRANSLATION_CACHE_SIZE
 (1024 * 128 * 2)

	)

140 
	#TRANSLATION_CACHE_LIMIT_THRESHOLD
 (1024 * 32)

	)

144 
	#ROM_TRANSLATION_CACHE_SIZE
 (1024 * 512 * 4)

	)

145 
	#RAM_TRANSLATION_CACHE_SIZE
 (1024 * 384)

	)

146 
	#BIOS_TRANSLATION_CACHE_SIZE
 (1024 * 128)

	)

147 
	#TRANSLATION_CACHE_LIMIT_THRESHOLD
 (1024)

	)

151 
u8
 
rom_å™¶©i⁄_ˇche
[
ROM_TRANSLATION_CACHE_SIZE
];

152 
u8
 
øm_å™¶©i⁄_ˇche
[
RAM_TRANSLATION_CACHE_SIZE
];

153 
u8
 
bios_å™¶©i⁄_ˇche
[
BIOS_TRANSLATION_CACHE_SIZE
];

154 
u8
 *
rom_å™¶©i⁄_±r
;

155 
u8
 *
øm_å™¶©i⁄_±r
;

156 
u8
 *
bios_å™¶©i⁄_±r
;

158 
	#MAX_TRANSLATION_GATES
 8

	)

160 
u32
 
idÀ_lo›_èrgë_pc
;

161 
u32
 
f‹˚_pc_upd©e_èrgë
;

162 
u32
 
iwøm_°ack_›timize
;

163 
u32
 
Ælow_smc_øm_u8
;

164 
u32
 
Ælow_smc_øm_u16
;

165 
u32
 
Ælow_smc_øm_u32
;

166 
u32
 
dúe˘_m≠_vøm
;

167 
u32
 
å™¶©i⁄_g©e_èrgës
;

168 
u32
 
å™¶©i⁄_g©e_èrgë_pc
[
MAX_TRANSLATION_GATES
];

170 
u32
 
ö_öãºu±
;

172 
	#ROM_BRANCH_HASH_SIZE
 (1024 * 64)

	)

175 
u32
 *
rom_bønch_hash
[
ROM_BRANCH_HASH_SIZE
];

177 
Êush_å™¶©i⁄_ˇche_rom
();

178 
Êush_å™¶©i⁄_ˇche_øm
();

179 
Êush_å™¶©i⁄_ˇche_bios
();

180 
dump_å™¶©i⁄_ˇche
();

182 
u32
 
ªg_mode
[7][7];

183 
u32
 
•§
[6];

185 
u32
 
˝u_modes
[32];

186 c⁄° 
u32
 
p§_masks
[16];

188 
u32
 
bªakpoöt_vÆue
;

190 
u32
 
mem‹y_ªgi⁄_ac˚ss_ªad_u8
[16];

191 
u32
 
mem‹y_ªgi⁄_ac˚ss_ªad_s8
[16];

192 
u32
 
mem‹y_ªgi⁄_ac˚ss_ªad_u16
[16];

193 
u32
 
mem‹y_ªgi⁄_ac˚ss_ªad_s16
[16];

194 
u32
 
mem‹y_ªgi⁄_ac˚ss_ªad_u32
[16];

195 
u32
 
mem‹y_ªgi⁄_ac˚ss_wrôe_u8
[16];

196 
u32
 
mem‹y_ªgi⁄_ac˚ss_wrôe_u16
[16];

197 
u32
 
mem‹y_ªgi⁄_ac˚ss_wrôe_u32
[16];

198 
u32
 
mem‹y_ªads_u8
;

199 
u32
 
mem‹y_ªads_s8
;

200 
u32
 
mem‹y_ªads_u16
;

201 
u32
 
mem‹y_ªads_s16
;

202 
u32
 
mem‹y_ªads_u32
;

203 
u32
 
mem‹y_wrôes_u8
;

204 
u32
 
mem‹y_wrôes_u16
;

205 
u32
 
mem‹y_wrôes_u32
;

207 
öô_˝u
();

208 
move_ªg
();

	@cpu_threaded.c

24 
	~<°dio.h
>

25 
	~"comm⁄.h
"

27 
u8
 
	grom_å™¶©i⁄_ˇche
[
ROM_TRANSLATION_CACHE_SIZE
];

28 
u8
 *
	grom_å™¶©i⁄_±r
 = 
rom_å™¶©i⁄_ˇche
;

30 
u8
 
	gøm_å™¶©i⁄_ˇche
[
RAM_TRANSLATION_CACHE_SIZE
];

31 
u8
 *
	gøm_å™¶©i⁄_±r
 = 
øm_å™¶©i⁄_ˇche
;

32 
u32
 
	giwøm_code_mö
 = 0xFFFFFFFF;

33 
u32
 
	giwøm_code_max
 = 0xFFFFFFFF;

34 
u32
 
	gewøm_code_mö
 = 0xFFFFFFFF;

35 
u32
 
	gewøm_code_max
 = 0xFFFFFFFF;

37 
u8
 
	gbios_å™¶©i⁄_ˇche
[
BIOS_TRANSLATION_CACHE_SIZE
];

38 
u8
 *
	gbios_å™¶©i⁄_±r
 = 
bios_å™¶©i⁄_ˇche
;

40 
u32
 *
	grom_bønch_hash
[
ROM_BRANCH_HASH_SIZE
];

43 
u32
 
	gidÀ_lo›_èrgë_pc
 = 0xFFFFFFFF;

44 
u32
 
	gf‹˚_pc_upd©e_èrgë
 = 0xFFFFFFFF;

45 
u32
 
	gå™¶©i⁄_g©e_èrgë_pc
[
MAX_TRANSLATION_GATES
];

46 
u32
 
	gå™¶©i⁄_g©e_èrgës
 = 0;

47 
u32
 
	giwøm_°ack_›timize
 = 1;

48 
u32
 
	gÆlow_smc_øm_u8
 = 1;

49 
u32
 
	gÆlow_smc_øm_u16
 = 1;

50 
u32
 
	gÆlow_smc_øm_u32
 = 1;

54 
u8
 *
	mblock_off£t
;

55 
u16
 
	mÊag_d©a
;

56 
u8
 
	mc⁄dôi⁄
;

57 
u8
 
	mupd©e_cy˛es
;

58 } 
	tblock_d©a_ty≥
;

62 
u32
 
	mbønch_èrgë
;

63 
u8
 *
	mbønch_sour˚
;

64 } 
	tblock_exô_ty≥
;

66 
u8
 
bô_cou¡
[256];

68 
	#¨m_decode_d©a_¥oc_ªg
() \

69 
u32
 
∫
 = (
›code
 >> 16) & 0x0F; \

70 
u32
 
rd
 = (
›code
 >> 12) & 0x0F; \

71 
u32
 
rm
 = 
›code
 & 0x0F \

72 

	)

73 
	#¨m_decode_d©a_¥oc_imm
() \

74 
u32
 
∫
 = (
›code
 >> 16) & 0x0F; \

75 
u32
 
rd
 = (
›code
 >> 12) & 0x0F; \

76 
u32
 
imm
 = 
›code
 & 0xFF; \

77 
u32
 
imm_r‹
 = ((
›code
 >> 8) & 0x0F) * 2 \

78 

	)

79 
	#¨m_decode_p§_ªg
() \

80 
u32
 
p§_fõld
 = (
›code
 >> 16) & 0x0F; \

81 
u32
 
rd
 = (
›code
 >> 12) & 0x0F; \

82 
u32
 
rm
 = 
›code
 & 0x0F \

83 

	)

84 
	#¨m_decode_p§_imm
() \

85 
u32
 
p§_fõld
 = (
›code
 >> 16) & 0x0F; \

86 
u32
 
rd
 = (
›code
 >> 12) & 0x0F; \

87 
u32
 
imm
 = 
›code
 & 0xFF; \

88 
u32
 
imm_r‹
 = ((
›code
 >> 8) & 0x0F) * 2 \

89 

	)

90 
	#¨m_decode_bønchx
() \

91 
u32
 
∫
 = 
›code
 & 0x0F \

92 

	)

93 
	#¨m_decode_mu…ùly
() \

94 
u32
 
rd
 = (
›code
 >> 16) & 0x0F; \

95 
u32
 
∫
 = (
›code
 >> 12) & 0x0F; \

96 
u32
 
rs
 = (
›code
 >> 8) & 0x0F; \

97 
u32
 
rm
 = 
›code
 & 0x0F \

98 

	)

99 
	#¨m_decode_mu…ùly_l⁄g
() \

100 
u32
 
rdhi
 = (
›code
 >> 16) & 0x0F; \

101 
u32
 
rdlo
 = (
›code
 >> 12) & 0x0F; \

102 
u32
 
rs
 = (
›code
 >> 8) & 0x0F; \

103 
u32
 
rm
 = 
›code
 & 0x0F \

104 

	)

105 
	#¨m_decode_sw≠
() \

106 
u32
 
∫
 = (
›code
 >> 16) & 0x0F; \

107 
u32
 
rd
 = (
›code
 >> 12) & 0x0F; \

108 
u32
 
rm
 = 
›code
 & 0x0F \

109 

	)

110 
	#¨m_decode_hÆf_å™s_r
() \

111 
u32
 
∫
 = (
›code
 >> 16) & 0x0F; \

112 
u32
 
rd
 = (
›code
 >> 12) & 0x0F; \

113 
u32
 
rm
 = 
›code
 & 0x0F \

114 

	)

115 
	#¨m_decode_hÆf_å™s_of
() \

116 
u32
 
∫
 = (
›code
 >> 16) & 0x0F; \

117 
u32
 
rd
 = (
›code
 >> 12) & 0x0F; \

118 
u32
 
off£t
 = ((
›code
 >> 4) & 0xF0) | (opcode & 0x0F) \

119 

	)

120 
	#¨m_decode_d©a_å™s_imm
() \

121 
u32
 
∫
 = (
›code
 >> 16) & 0x0F; \

122 
u32
 
rd
 = (
›code
 >> 12) & 0x0F; \

123 
u32
 
off£t
 = 
›code
 & 0x0FFF \

124 

	)

125 
	#¨m_decode_d©a_å™s_ªg
() \

126 
u32
 
∫
 = (
›code
 >> 16) & 0x0F; \

127 
u32
 
rd
 = (
›code
 >> 12) & 0x0F; \

128 
u32
 
rm
 = 
›code
 & 0x0F \

129 

	)

130 
	#¨m_decode_block_å™s
() \

131 
u32
 
∫
 = (
›code
 >> 16) & 0x0F; \

132 
u32
 
ªg_li°
 = 
›code
 & 0xFFFF \

133 

	)

134 
	#¨m_decode_bønch
() \

135 
s32
 
off£t
 = ((s32)(
›code
 & 0xFFFFFF) << 8) >> 6 \

136 

	)

137 
	#thumb_decode_shi·
() \

138 
u32
 
imm
 = (
›code
 >> 6) & 0x1F; \

139 
u32
 
rs
 = (
›code
 >> 3) & 0x07; \

140 
u32
 
rd
 = 
›code
 & 0x07 \

141 

	)

142 
	#thumb_decode_add_sub
() \

143 
u32
 
∫
 = (
›code
 >> 6) & 0x07; \

144 
u32
 
rs
 = (
›code
 >> 3) & 0x07; \

145 
u32
 
rd
 = 
›code
 & 0x07 \

146 

	)

147 
	#thumb_decode_add_sub_imm
() \

148 
u32
 
imm
 = (
›code
 >> 6) & 0x07; \

149 
u32
 
rs
 = (
›code
 >> 3) & 0x07; \

150 
u32
 
rd
 = 
›code
 & 0x07 \

151 

	)

152 
	#thumb_decode_imm
() \

153 
u32
 
imm
 = 
›code
 & 0xFF \

154 

	)

155 
	#thumb_decode_Æu_›
() \

156 
u32
 
rs
 = (
›code
 >> 3) & 0x07; \

157 
u32
 
rd
 = 
›code
 & 0x07 \

158 

	)

159 
	#thumb_decode_húeg_›
() \

160 
u32
 
rs
 = (
›code
 >> 3) & 0x0F; \

161 
u32
 
rd
 = ((
›code
 >> 4) & 0x08) | (opcode & 0x07) \

162 

	)

163 
	#thumb_decode_mem_ªg
() \

164 
u32
 
ro
 = (
›code
 >> 6) & 0x07; \

165 
u32
 
rb
 = (
›code
 >> 3) & 0x07; \

166 
u32
 
rd
 = 
›code
 & 0x07 \

167 

	)

168 
	#thumb_decode_mem_imm
() \

169 
u32
 
imm
 = (
›code
 >> 6) & 0x1F; \

170 
u32
 
rb
 = (
›code
 >> 3) & 0x07; \

171 
u32
 
rd
 = 
›code
 & 0x07 \

172 

	)

173 
	#thumb_decode_add_•
() \

174 
u32
 
imm
 = 
›code
 & 0x7F \

175 

	)

176 
	#thumb_decode_æi°
() \

177 
u32
 
ªg_li°
 = 
›code
 & 0xFF \

178 

	)

179 
	#thumb_decode_bønch_c⁄d
() \

180 
s32
 
off£t
 = (
s8
)(
›code
 & 0xFF) \

181 

	)

182 
	#thumb_decode_swi
() \

183 
u32
 
commít
 = 
›code
 & 0xFF \

184 

	)

185 
	#thumb_decode_bønch
() \

186 
u32
 
off£t
 = 
›code
 & 0x07FF \

187 

	)

189 #ifde‡
PSP_BUILD


191 
	~"p•/mùs_emô.h
"

193 #ñi‡
deföed
(
GP2X_BUILD
)

195 
	~"gp2x/¨m_emô.h
"

197 #ñi‡
deföed
(
GIZ_BUILD
)

199 
	~"giz/¨m_emô.h
"

203 
	~"x86/x86_emô.h
"

208 
	#check_pc_ªgi⁄
(
pc
) \

209 
√w_pc_ªgi⁄
 = (
pc
 >> 15); \

210 if(
√w_pc_ªgi⁄
 !
pc_ªgi⁄
) \

212 
pc_ªgi⁄
 = 
√w_pc_ªgi⁄
; \

213 
pc_addªss_block
 = 
mem‹y_m≠_ªad
[
√w_pc_ªgi⁄
]; \

215 if(
pc_addªss_block
 =
NULL
) \

216 
pc_addªss_block
 = 
	`lﬂd_gamïak_∑ge
(
pc_ªgi⁄
 & 0x3FF); \

218 

	)

219 
	#å™¶©e_¨m_ö°ru˘i⁄
() \

220 
	`check_pc_ªgi⁄
(
pc
); \

221 
›code
 = 
	`addªss32
(
pc_addªss_block
, (
pc
 & 0x7FFF)); \

222 
c⁄dôi⁄
 = 
block_d©a
[
block_d©a_posôi⁄
].condition; \

224 if((
c⁄dôi⁄
 !
œ°_c⁄dôi⁄
) || (condition >= 0x20)) \

226 if((
œ°_c⁄dôi⁄
 & 0x0F) != 0x0E) \

228 
	`gíî©e_bønch_∑tch_c⁄dôi⁄Æ
(
back∑tch_addªss
, 
å™¶©i⁄_±r
); \

231 
œ°_c⁄dôi⁄
 = 
c⁄dôi⁄
; \

233 
c⁄dôi⁄
 &= 0x0F; \

235 if(
c⁄dôi⁄
 != 0x0E) \

237 
	`¨m_c⁄dôi⁄Æ_block_hódî
(); \

241 (
›code
 >> 20) & 0xFF) \

244 if((
›code
 & 0x90) == 0x90) \

246 if(
›code
 & 0x20) \

249 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
down
, 
po°
, 
u16
, 
hÆf_ªg
); \

254 
	`¨m_mu…ùly
(
no
,Ço); \

260 
	`¨m_d©a_¥oc
(
™d
, 
ªg
, 
no_Êags
); \

265 if((
›code
 & 0x90) == 0x90) \

267 (
›code
 >> 5) & 0x03) \

271 
	`¨m_mu…ùly
(
no
, 
yes
); \

276 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
down
, 
po°
, 
u16
, 
hÆf_ªg
); \

281 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
down
, 
po°
, 
s8
, 
hÆf_ªg
); \

286 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
down
, 
po°
, 
s16
, 
hÆf_ªg
); \

293 
	`¨m_d©a_¥oc
(
™ds
, 
ªg_Êags
, 
Êags
); \

298 if((
›code
 & 0x90) == 0x90) \

300 if(
›code
 & 0x20) \

303 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
down
, 
po°
, 
u16
, 
hÆf_ªg
); \

308 
	`¨m_mu…ùly
(
yes
, 
no
); \

314 
	`¨m_d©a_¥oc
(
e‹
, 
ªg
, 
no_Êags
); \

319 if((
›code
 & 0x90) == 0x90) \

321 (
›code
 >> 5) & 0x03) \

325 
	`¨m_mu…ùly
(
yes
, yes); \

330 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
down
, 
po°
, 
u16
, 
hÆf_ªg
); \

335 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
down
, 
po°
, 
s8
, 
hÆf_ªg
); \

340 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
down
, 
po°
, 
s16
, 
hÆf_ªg
); \

347 
	`¨m_d©a_¥oc
(
e‹s
, 
ªg_Êags
, 
Êags
); \

352 if((
›code
 & 0x90) == 0x90) \

355 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
down
, 
po°
, 
u16
, 
hÆf_imm
); \

360 
	`¨m_d©a_¥oc
(
sub
, 
ªg
, 
no_Êags
); \

365 if((
›code
 & 0x90) == 0x90) \

367 (
›code
 >> 5) & 0x03) \

371 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
down
, 
po°
, 
u16
, 
hÆf_imm
); \

376 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
down
, 
po°
, 
s8
, 
hÆf_imm
); \

381 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
down
, 
po°
, 
s16
, 
hÆf_imm
); \

388 
	`¨m_d©a_¥oc
(
subs
, 
ªg
, 
Êags
); \

393 if((
›code
 & 0x90) == 0x90) \

396 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
down
, 
po°
, 
u16
, 
hÆf_imm
); \

401 
	`¨m_d©a_¥oc
(
rsb
, 
ªg
, 
no_Êags
); \

406 if((
›code
 & 0x90) == 0x90) \

408 (
›code
 >> 5) & 0x03) \

412 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
down
, 
po°
, 
u16
, 
hÆf_imm
); \

417 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
down
, 
po°
, 
s8
, 
hÆf_imm
); \

422 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
down
, 
po°
, 
s16
, 
hÆf_imm
); \

429 
	`¨m_d©a_¥oc
(
rsbs
, 
ªg
, 
Êags
); \

434 if((
›code
 & 0x90) == 0x90) \

436 if(
›code
 & 0x20) \

439 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
up
, 
po°
, 
u16
, 
hÆf_ªg
); \

444 
	`¨m_mu…ùly_l⁄g
(
u64
, 
no
,Ço); \

450 
	`¨m_d©a_¥oc
(
add
, 
ªg
, 
no_Êags
); \

455 if((
›code
 & 0x90) == 0x90) \

457 (
›code
 >> 5) & 0x03) \

461 
	`¨m_mu…ùly_l⁄g
(
u64
, 
no
, 
yes
); \

466 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
up
, 
po°
, 
u16
, 
hÆf_ªg
); \

471 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
up
, 
po°
, 
s8
, 
hÆf_ªg
); \

476 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
up
, 
po°
, 
s16
, 
hÆf_ªg
); \

483 
	`¨m_d©a_¥oc
(
adds
, 
ªg
, 
Êags
); \

488 if((
›code
 & 0x90) == 0x90) \

490 if(
›code
 & 0x20) \

493 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
up
, 
po°
, 
u16
, 
hÆf_ªg
); \

498 
	`¨m_mu…ùly_l⁄g
(
u64_add
, 
yes
, 
no
); \

504 
	`¨m_d©a_¥oc
(
adc
, 
ªg
, 
no_Êags
); \

509 if((
›code
 & 0x90) == 0x90) \

511 (
›code
 >> 5) & 0x03) \

515 
	`¨m_mu…ùly_l⁄g
(
u64_add
, 
yes
, yes); \

520 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
up
, 
po°
, 
u16
, 
hÆf_ªg
); \

525 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
up
, 
po°
, 
s8
, 
hÆf_ªg
); \

530 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
up
, 
po°
, 
s16
, 
hÆf_ªg
); \

537 
	`¨m_d©a_¥oc
(
adcs
, 
ªg
, 
Êags
); \

542 if((
›code
 & 0x90) == 0x90) \

544 if(
›code
 & 0x20) \

547 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
up
, 
po°
, 
u16
, 
hÆf_imm
); \

552 
	`¨m_mu…ùly_l⁄g
(
s64
, 
no
,Ço); \

558 
	`¨m_d©a_¥oc
(
sbc
, 
ªg
, 
no_Êags
); \

563 if((
›code
 & 0x90) == 0x90) \

565 (
›code
 >> 5) & 0x03) \

569 
	`¨m_mu…ùly_l⁄g
(
s64
, 
no
, 
yes
); \

574 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
up
, 
po°
, 
u16
, 
hÆf_imm
); \

579 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
up
, 
po°
, 
s8
, 
hÆf_imm
); \

584 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
up
, 
po°
, 
s16
, 
hÆf_imm
); \

591 
	`¨m_d©a_¥oc
(
sbcs
, 
ªg
, 
Êags
); \

596 if((
›code
 & 0x90) == 0x90) \

598 if(
›code
 & 0x20) \

601 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
up
, 
po°
, 
u16
, 
hÆf_imm
); \

606 
	`¨m_mu…ùly_l⁄g
(
s64_add
, 
yes
, 
no
); \

612 
	`¨m_d©a_¥oc
(
rsc
, 
ªg
, 
no_Êags
); \

617 if((
›code
 & 0x90) == 0x90) \

619 (
›code
 >> 5) & 0x03) \

623 
	`¨m_mu…ùly_l⁄g
(
s64_add
, 
yes
, yes); \

628 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
up
, 
po°
, 
u16
, 
hÆf_imm
); \

633 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
up
, 
po°
, 
s8
, 
hÆf_imm
); \

638 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
up
, 
po°
, 
s16
, 
hÆf_imm
); \

645 
	`¨m_d©a_¥oc
(
rscs
, 
ªg
, 
Êags
); \

650 if((
›code
 & 0x90) == 0x90) \

652 if(
›code
 & 0x20) \

655 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
down
, 
¥e
, 
u16
, 
hÆf_ªg
); \

660 
	`¨m_sw≠
(
u32
); \

666 
	`¨m_p§
(
ªg
, 
ªad
, 
˝§
); \

671 if((
›code
 & 0x90) == 0x90) \

673 (
›code
 >> 5) & 0x03) \

677 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
down
, 
¥e
, 
u16
, 
hÆf_ªg
); \

682 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
down
, 
¥e
, 
s8
, 
hÆf_ªg
); \

687 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
down
, 
¥e
, 
s16
, 
hÆf_ªg
); \

694 
	`¨m_d©a_¥oc_ã°
(
t°
, 
ªg_Êags
); \

699 if((
›code
 & 0x90) == 0x90) \

702 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
down
, 
¥e_wb
, 
u16
, 
hÆf_ªg
); \

706 if(
›code
 & 0x10) \

709 
	`¨m_bx
(); \

714 
	`¨m_p§
(
ªg
, 
°‹e
, 
˝§
); \

720 if((
›code
 & 0x90) == 0x90) \

722 (
›code
 >> 5) & 0x03) \

726 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
down
, 
¥e_wb
, 
u16
, 
hÆf_ªg
); \

731 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
down
, 
¥e_wb
, 
s8
, 
hÆf_ªg
); \

736 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
down
, 
¥e_wb
, 
s16
, 
hÆf_ªg
); \

743 
	`¨m_d©a_¥oc_ã°
(
ãq
, 
ªg_Êags
); \

748 if((
›code
 & 0x90) == 0x90) \

750 if(
›code
 & 0x20) \

753 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
down
, 
¥e
, 
u16
, 
hÆf_imm
); \

758 
	`¨m_sw≠
(
u8
); \

764 
	`¨m_p§
(
ªg
, 
ªad
, 
•§
); \

769 if((
›code
 & 0x90) == 0x90) \

771 (
›code
 >> 5) & 0x03) \

775 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
down
, 
¥e
, 
u16
, 
hÆf_imm
); \

780 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
down
, 
¥e
, 
s8
, 
hÆf_imm
); \

785 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
down
, 
¥e
, 
s16
, 
hÆf_imm
); \

792 
	`¨m_d©a_¥oc_ã°
(
cmp
, 
ªg
); \

797 if((
›code
 & 0x90) == 0x90) \

800 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
down
, 
¥e_wb
, 
u16
, 
hÆf_imm
); \

805 
	`¨m_p§
(
ªg
, 
°‹e
, 
•§
); \

810 if((
›code
 & 0x90) == 0x90) \

812 (
›code
 >> 5) & 0x03) \

816 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
down
, 
¥e_wb
, 
u16
, 
hÆf_imm
); \

821 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
down
, 
¥e_wb
, 
s8
, 
hÆf_imm
); \

826 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
down
, 
¥e_wb
, 
s16
, 
hÆf_imm
); \

833 
	`¨m_d©a_¥oc_ã°
(
cmn
, 
ªg
); \

838 if((
›code
 & 0x90) == 0x90) \

841 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
up
, 
¥e
, 
u16
, 
hÆf_ªg
); \

846 
	`¨m_d©a_¥oc
(
‹r
, 
ªg
, 
no_Êags
); \

851 if((
›code
 & 0x90) == 0x90) \

853 (
›code
 >> 5) & 0x03) \

857 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
up
, 
¥e
, 
u16
, 
hÆf_ªg
); \

862 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
up
, 
¥e
, 
s8
, 
hÆf_ªg
); \

867 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
up
, 
¥e
, 
s16
, 
hÆf_ªg
); \

874 
	`¨m_d©a_¥oc
(
‹rs
, 
ªg_Êags
, 
Êags
); \

879 if((
›code
 & 0x90) == 0x90) \

882 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
up
, 
¥e_wb
, 
u16
, 
hÆf_ªg
); \

887 
	`¨m_d©a_¥oc_u«ry
(
mov
, 
ªg
, 
no_Êags
); \

892 if((
›code
 & 0x90) == 0x90) \

894 (
›code
 >> 5) & 0x03) \

898 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
up
, 
¥e_wb
, 
u16
, 
hÆf_ªg
); \

903 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
up
, 
¥e_wb
, 
s8
, 
hÆf_ªg
); \

908 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
up
, 
¥e_wb
, 
s16
, 
hÆf_ªg
); \

915 
	`¨m_d©a_¥oc_u«ry
(
movs
, 
ªg_Êags
, 
Êags
); \

920 if((
›code
 & 0x90) == 0x90) \

923 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
up
, 
¥e
, 
u16
, 
hÆf_imm
); \

928 
	`¨m_d©a_¥oc
(
bic
, 
ªg
, 
no_Êags
); \

933 if((
›code
 & 0x90) == 0x90) \

935 (
›code
 >> 5) & 0x03) \

939 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
up
, 
¥e
, 
u16
, 
hÆf_imm
); \

944 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
up
, 
¥e
, 
s8
, 
hÆf_imm
); \

949 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
up
, 
¥e
, 
s16
, 
hÆf_imm
); \

956 
	`¨m_d©a_¥oc
(
bics
, 
ªg_Êags
, 
Êags
); \

961 if((
›code
 & 0x90) == 0x90) \

964 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
up
, 
¥e_wb
, 
u16
, 
hÆf_imm
); \

969 
	`¨m_d©a_¥oc_u«ry
(
mvn
, 
ªg
, 
no_Êags
); \

974 if((
›code
 & 0x90) == 0x90) \

976 (
›code
 >> 5) & 0x03) \

980 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
up
, 
¥e_wb
, 
u16
, 
hÆf_imm
); \

985 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
up
, 
¥e_wb
, 
s8
, 
hÆf_imm
); \

990 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
up
, 
¥e_wb
, 
s16
, 
hÆf_imm
); \

997 
	`¨m_d©a_¥oc_u«ry
(
mvns
, 
ªg_Êags
, 
Êags
); \

1003 
	`¨m_d©a_¥oc
(
™d
, 
imm
, 
no_Êags
); \

1008 
	`¨m_d©a_¥oc
(
™ds
, 
imm_Êags
, 
Êags
); \

1013 
	`¨m_d©a_¥oc
(
e‹
, 
imm
, 
no_Êags
); \

1018 
	`¨m_d©a_¥oc
(
e‹s
, 
imm_Êags
, 
Êags
); \

1023 
	`¨m_d©a_¥oc
(
sub
, 
imm
, 
no_Êags
); \

1028 
	`¨m_d©a_¥oc
(
subs
, 
imm
, 
Êags
); \

1033 
	`¨m_d©a_¥oc
(
rsb
, 
imm
, 
no_Êags
); \

1038 
	`¨m_d©a_¥oc
(
rsbs
, 
imm
, 
Êags
); \

1043 
	`¨m_d©a_¥oc
(
add
, 
imm
, 
no_Êags
); \

1048 
	`¨m_d©a_¥oc
(
adds
, 
imm
, 
Êags
); \

1053 
	`¨m_d©a_¥oc
(
adc
, 
imm
, 
no_Êags
); \

1058 
	`¨m_d©a_¥oc
(
adcs
, 
imm
, 
Êags
); \

1063 
	`¨m_d©a_¥oc
(
sbc
, 
imm
, 
no_Êags
); \

1068 
	`¨m_d©a_¥oc
(
sbcs
, 
imm
, 
Êags
); \

1073 
	`¨m_d©a_¥oc
(
rsc
, 
imm
, 
no_Êags
); \

1078 
	`¨m_d©a_¥oc
(
rscs
, 
imm
, 
Êags
); \

1083 
	`¨m_d©a_¥oc_ã°
(
t°
, 
imm
); \

1088 
	`¨m_p§
(
imm
, 
°‹e
, 
˝§
); \

1093 
	`¨m_d©a_¥oc_ã°
(
ãq
, 
imm
); \

1098 
	`¨m_d©a_¥oc_ã°
(
cmp
, 
imm
); \

1103 
	`¨m_p§
(
imm
, 
°‹e
, 
•§
); \

1108 
	`¨m_d©a_¥oc_ã°
(
cmn
, 
imm
); \

1113 
	`¨m_d©a_¥oc
(
‹r
, 
imm
, 
no_Êags
); \

1118 
	`¨m_d©a_¥oc
(
‹rs
, 
imm_Êags
, 
Êags
); \

1123 
	`¨m_d©a_¥oc_u«ry
(
mov
, 
imm
, 
no_Êags
); \

1128 
	`¨m_d©a_¥oc_u«ry
(
movs
, 
imm_Êags
, 
Êags
); \

1133 
	`¨m_d©a_¥oc
(
bic
, 
imm
, 
no_Êags
); \

1138 
	`¨m_d©a_¥oc
(
bics
, 
imm_Êags
, 
Êags
); \

1143 
	`¨m_d©a_¥oc_u«ry
(
mvn
, 
imm
, 
no_Êags
); \

1148 
	`¨m_d©a_¥oc_u«ry
(
mvns
, 
imm_Êags
, 
Êags
); \

1153 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
down
, 
po°
, 
u32
, 
imm
); \

1158 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
down
, 
po°
, 
u32
, 
imm
); \

1163 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
down
, 
po°
, 
u32
, 
imm
); \

1168 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
down
, 
po°
, 
u32
, 
imm
); \

1173 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
down
, 
po°
, 
u8
, 
imm
); \

1178 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
down
, 
po°
, 
u8
, 
imm
); \

1183 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
down
, 
po°
, 
u8
, 
imm
); \

1188 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
down
, 
po°
, 
u8
, 
imm
); \

1193 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
up
, 
po°
, 
u32
, 
imm
); \

1198 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
up
, 
po°
, 
u32
, 
imm
); \

1203 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
up
, 
po°
, 
u32
, 
imm
); \

1208 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
up
, 
po°
, 
u32
, 
imm
); \

1213 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
up
, 
po°
, 
u8
, 
imm
); \

1218 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
up
, 
po°
, 
u8
, 
imm
); \

1223 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
up
, 
po°
, 
u8
, 
imm
); \

1228 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
up
, 
po°
, 
u8
, 
imm
); \

1233 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
down
, 
¥e
, 
u32
, 
imm
); \

1238 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
down
, 
¥e
, 
u32
, 
imm
); \

1243 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
down
, 
¥e_wb
, 
u32
, 
imm
); \

1248 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
down
, 
¥e_wb
, 
u32
, 
imm
); \

1253 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
down
, 
¥e
, 
u8
, 
imm
); \

1258 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
down
, 
¥e
, 
u8
, 
imm
); \

1263 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
down
, 
¥e_wb
, 
u8
, 
imm
); \

1268 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
down
, 
¥e_wb
, 
u8
, 
imm
); \

1273 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
up
, 
¥e
, 
u32
, 
imm
); \

1278 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
up
, 
¥e
, 
u32
, 
imm
); \

1283 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
up
, 
¥e_wb
, 
u32
, 
imm
); \

1288 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
up
, 
¥e_wb
, 
u32
, 
imm
); \

1293 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
up
, 
¥e
, 
u8
, 
imm
); \

1298 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
up
, 
¥e
, 
u8
, 
imm
); \

1303 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
up
, 
¥e_wb
, 
u8
, 
imm
); \

1308 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
up
, 
¥e_wb
, 
u8
, 
imm
); \

1313 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
down
, 
po°
, 
u32
, 
ªg
); \

1318 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
down
, 
po°
, 
u32
, 
ªg
); \

1323 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
down
, 
po°
, 
u32
, 
ªg
); \

1328 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
down
, 
po°
, 
u32
, 
ªg
); \

1333 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
down
, 
po°
, 
u8
, 
ªg
); \

1338 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
down
, 
po°
, 
u8
, 
ªg
); \

1343 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
down
, 
po°
, 
u8
, 
ªg
); \

1348 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
down
, 
po°
, 
u8
, 
ªg
); \

1353 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
up
, 
po°
, 
u32
, 
ªg
); \

1358 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
up
, 
po°
, 
u32
, 
ªg
); \

1363 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
up
, 
po°
, 
u32
, 
ªg
); \

1368 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
up
, 
po°
, 
u32
, 
ªg
); \

1373 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
up
, 
po°
, 
u8
, 
ªg
); \

1378 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
up
, 
po°
, 
u8
, 
ªg
); \

1383 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
up
, 
po°
, 
u8
, 
ªg
); \

1388 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
up
, 
po°
, 
u8
, 
ªg
); \

1393 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
down
, 
¥e
, 
u32
, 
ªg
); \

1398 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
down
, 
¥e
, 
u32
, 
ªg
); \

1403 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
down
, 
¥e_wb
, 
u32
, 
ªg
); \

1408 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
down
, 
¥e_wb
, 
u32
, 
ªg
); \

1413 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
down
, 
¥e
, 
u8
, 
ªg
); \

1418 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
down
, 
¥e
, 
u8
, 
ªg
); \

1423 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
down
, 
¥e_wb
, 
u8
, 
ªg
); \

1428 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
down
, 
¥e_wb
, 
u8
, 
ªg
); \

1433 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
up
, 
¥e
, 
u32
, 
ªg
); \

1438 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
up
, 
¥e
, 
u32
, 
ªg
); \

1443 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
up
, 
¥e_wb
, 
u32
, 
ªg
); \

1448 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
up
, 
¥e_wb
, 
u32
, 
ªg
); \

1453 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
up
, 
¥e
, 
u8
, 
ªg
); \

1458 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
up
, 
¥e
, 
u8
, 
ªg
); \

1463 
	`¨m_ac˚ss_mem‹y
(
°‹e
, 
up
, 
¥e_wb
, 
u8
, 
ªg
); \

1468 
	`¨m_ac˚ss_mem‹y
(
lﬂd
, 
up
, 
¥e_wb
, 
u8
, 
ªg
); \

1473 
	`¨m_block_mem‹y
(
°‹e
, 
down_a
, 
no
,Ço); \

1478 
	`¨m_block_mem‹y
(
lﬂd
, 
down_a
, 
no
,Ço); \

1483 
	`¨m_block_mem‹y
(
°‹e
, 
down_a
, 
down
, 
no
); \

1488 
	`¨m_block_mem‹y
(
lﬂd
, 
down_a
, 
down
, 
no
); \

1493 
	`¨m_block_mem‹y
(
°‹e
, 
down_a
, 
no
, 
yes
); \

1498 
	`¨m_block_mem‹y
(
lﬂd
, 
down_a
, 
no
, 
yes
); \

1503 
	`¨m_block_mem‹y
(
°‹e
, 
down_a
, 
down
, 
yes
); \

1508 
	`¨m_block_mem‹y
(
lﬂd
, 
down_a
, 
down
, 
yes
); \

1513 
	`¨m_block_mem‹y
(
°‹e
, 
no
,Ço,Ço); \

1518 
	`¨m_block_mem‹y
(
lﬂd
, 
no
,Ço,Ço); \

1523 
	`¨m_block_mem‹y
(
°‹e
, 
no
, 
up
,Ço); \

1528 
	`¨m_block_mem‹y
(
lﬂd
, 
no
, 
up
,Ço); \

1533 
	`¨m_block_mem‹y
(
°‹e
, 
no
,Ço, 
yes
); \

1538 
	`¨m_block_mem‹y
(
lﬂd
, 
no
,Ço, 
yes
); \

1543 
	`¨m_block_mem‹y
(
°‹e
, 
no
, 
up
, 
yes
); \

1548 
	`¨m_block_mem‹y
(
lﬂd
, 
no
, 
up
, 
yes
); \

1553 
	`¨m_block_mem‹y
(
°‹e
, 
down_b
, 
no
,Ço); \

1558 
	`¨m_block_mem‹y
(
lﬂd
, 
down_b
, 
no
,Ço); \

1563 
	`¨m_block_mem‹y
(
°‹e
, 
down_b
, 
down
, 
no
); \

1568 
	`¨m_block_mem‹y
(
lﬂd
, 
down_b
, 
down
, 
no
); \

1573 
	`¨m_block_mem‹y
(
°‹e
, 
down_b
, 
no
, 
yes
); \

1578 
	`¨m_block_mem‹y
(
lﬂd
, 
down_b
, 
no
, 
yes
); \

1583 
	`¨m_block_mem‹y
(
°‹e
, 
down_b
, 
down
, 
yes
); \

1588 
	`¨m_block_mem‹y
(
lﬂd
, 
down_b
, 
down
, 
yes
); \

1593 
	`¨m_block_mem‹y
(
°‹e
, 
up
, 
no
,Ço); \

1598 
	`¨m_block_mem‹y
(
lﬂd
, 
up
, 
no
,Ço); \

1603 
	`¨m_block_mem‹y
(
°‹e
, 
up
, up, 
no
); \

1608 
	`¨m_block_mem‹y
(
lﬂd
, 
up
, up, 
no
); \

1613 
	`¨m_block_mem‹y
(
°‹e
, 
up
, 
no
, 
yes
); \

1618 
	`¨m_block_mem‹y
(
lﬂd
, 
up
, 
no
, 
yes
); \

1623 
	`¨m_block_mem‹y
(
°‹e
, 
up
, up, 
yes
); \

1628 
	`¨m_block_mem‹y
(
lﬂd
, 
up
, up, 
yes
); \

1634 
	`¨m_b
(); \

1641 
	`¨m_bl
(); \

1652 
	`¨m_swi
(); \

1657 
pc
 += 4 \

1658 

	)

1659 
	#¨m_Êag_°©us
() \

1660 

	)

1661 
	#å™¶©e_thumb_ö°ru˘i⁄
() \

1662 
Êag_°©us
 = 
block_d©a
[
block_d©a_posôi⁄
].
Êag_d©a
; \

1663 
	`check_pc_ªgi⁄
(
pc
); \

1664 
œ°_›code
 = 
›code
; \

1665 
›code
 = 
	`addªss16
(
pc_addªss_block
, (
pc
 & 0x7FFF)); \

1667 (
›code
 >> 8) & 0xFF) \

1671 
	`thumb_shi·
(
shi·
, 
l¶
, 
imm
); \

1676 
	`thumb_shi·
(
shi·
, 
l§
, 
imm
); \

1681 
	`thumb_shi·
(
shi·
, 
a§
, 
imm
); \

1686 
	`thumb_d©a_¥oc
(
add_sub
, 
adds
, 
ªg
, 
rd
, 
rs
, 
∫
); \

1691 
	`thumb_d©a_¥oc
(
add_sub
, 
subs
, 
ªg
, 
rd
, 
rs
, 
∫
); \

1696 
	`thumb_d©a_¥oc
(
add_sub_imm
, 
adds
, 
imm
, 
rd
, 
rs
, imm); \

1701 
	`thumb_d©a_¥oc
(
add_sub_imm
, 
subs
, 
imm
, 
rd
, 
rs
, imm); \

1706 
	`thumb_d©a_¥oc_u«ry
(
imm
, 
movs
, imm, 0, imm); \

1711 
	`thumb_d©a_¥oc_u«ry
(
imm
, 
movs
, imm, 1, imm); \

1716 
	`thumb_d©a_¥oc_u«ry
(
imm
, 
movs
, imm, 2, imm); \

1721 
	`thumb_d©a_¥oc_u«ry
(
imm
, 
movs
, imm, 3, imm); \

1726 
	`thumb_d©a_¥oc_u«ry
(
imm
, 
movs
, imm, 4, imm); \

1731 
	`thumb_d©a_¥oc_u«ry
(
imm
, 
movs
, imm, 5, imm); \

1736 
	`thumb_d©a_¥oc_u«ry
(
imm
, 
movs
, imm, 6, imm); \

1741 
	`thumb_d©a_¥oc_u«ry
(
imm
, 
movs
, imm, 7, imm); \

1746 
	`thumb_d©a_¥oc_ã°
(
imm
, 
cmp
, imm, 0, imm); \

1751 
	`thumb_d©a_¥oc_ã°
(
imm
, 
cmp
, imm, 1, imm); \

1756 
	`thumb_d©a_¥oc_ã°
(
imm
, 
cmp
, imm, 2, imm); \

1761 
	`thumb_d©a_¥oc_ã°
(
imm
, 
cmp
, imm, 3, imm); \

1766 
	`thumb_d©a_¥oc_ã°
(
imm
, 
cmp
, imm, 4, imm); \

1771 
	`thumb_d©a_¥oc_ã°
(
imm
, 
cmp
, imm, 5, imm); \

1776 
	`thumb_d©a_¥oc_ã°
(
imm
, 
cmp
, imm, 6, imm); \

1781 
	`thumb_d©a_¥oc_ã°
(
imm
, 
cmp
, imm, 7, imm); \

1786 
	`thumb_d©a_¥oc
(
imm
, 
adds
, imm, 0, 0, imm); \

1791 
	`thumb_d©a_¥oc
(
imm
, 
adds
, imm, 1, 1, imm); \

1796 
	`thumb_d©a_¥oc
(
imm
, 
adds
, imm, 2, 2, imm); \

1801 
	`thumb_d©a_¥oc
(
imm
, 
adds
, imm, 3, 3, imm); \

1806 
	`thumb_d©a_¥oc
(
imm
, 
adds
, imm, 4, 4, imm); \

1811 
	`thumb_d©a_¥oc
(
imm
, 
adds
, imm, 5, 5, imm); \

1816 
	`thumb_d©a_¥oc
(
imm
, 
adds
, imm, 6, 6, imm); \

1821 
	`thumb_d©a_¥oc
(
imm
, 
adds
, imm, 7, 7, imm); \

1826 
	`thumb_d©a_¥oc
(
imm
, 
subs
, imm, 0, 0, imm); \

1831 
	`thumb_d©a_¥oc
(
imm
, 
subs
, imm, 1, 1, imm); \

1836 
	`thumb_d©a_¥oc
(
imm
, 
subs
, imm, 2, 2, imm); \

1841 
	`thumb_d©a_¥oc
(
imm
, 
subs
, imm, 3, 3, imm); \

1846 
	`thumb_d©a_¥oc
(
imm
, 
subs
, imm, 4, 4, imm); \

1851 
	`thumb_d©a_¥oc
(
imm
, 
subs
, imm, 5, 5, imm); \

1856 
	`thumb_d©a_¥oc
(
imm
, 
subs
, imm, 6, 6, imm); \

1861 
	`thumb_d©a_¥oc
(
imm
, 
subs
, imm, 7, 7, imm); \

1865 (
›code
 >> 6) & 0x03) \

1869 
	`thumb_d©a_¥oc
(
Æu_›
, 
™ds
, 
ªg
, 
rd
,Ñd, 
rs
); \

1874 
	`thumb_d©a_¥oc
(
Æu_›
, 
e‹s
, 
ªg
, 
rd
,Ñd, 
rs
); \

1879 
	`thumb_shi·
(
Æu_›
, 
l¶
, 
ªg
); \

1884 
	`thumb_shi·
(
Æu_›
, 
l§
, 
ªg
); \

1890 (
›code
 >> 6) & 0x03) \

1894 
	`thumb_shi·
(
Æu_›
, 
a§
, 
ªg
); \

1899 
	`thumb_d©a_¥oc
(
Æu_›
, 
adcs
, 
ªg
, 
rd
,Ñd, 
rs
); \

1904 
	`thumb_d©a_¥oc
(
Æu_›
, 
sbcs
, 
ªg
, 
rd
,Ñd, 
rs
); \

1909 
	`thumb_shi·
(
Æu_›
, 
r‹
, 
ªg
); \

1915 (
›code
 >> 6) & 0x03) \

1919 
	`thumb_d©a_¥oc_ã°
(
Æu_›
, 
t°
, 
ªg
, 
rd
, 
rs
); \

1924 
	`thumb_d©a_¥oc_u«ry
(
Æu_›
, 
√g
, 
ªg
, 
rd
, 
rs
); \

1929 
	`thumb_d©a_¥oc_ã°
(
Æu_›
, 
cmp
, 
ªg
, 
rd
, 
rs
); \

1934 
	`thumb_d©a_¥oc_ã°
(
Æu_›
, 
cmn
, 
ªg
, 
rd
, 
rs
); \

1940 (
›code
 >> 6) & 0x03) \

1944 
	`thumb_d©a_¥oc
(
Æu_›
, 
‹rs
, 
ªg
, 
rd
,Ñd, 
rs
); \

1949 
	`thumb_d©a_¥oc
(
Æu_›
, 
muls
, 
ªg
, 
rd
,Ñd, 
rs
); \

1954 
	`thumb_d©a_¥oc
(
Æu_›
, 
bics
, 
ªg
, 
rd
,Ñd, 
rs
); \

1959 
	`thumb_d©a_¥oc_u«ry
(
Æu_›
, 
mvns
, 
ªg
, 
rd
, 
rs
); \

1966 
	`thumb_d©a_¥oc_hi
(
add
); \

1971 
	`thumb_d©a_¥oc_ã°_hi
(
cmp
); \

1976 
	`thumb_d©a_¥oc_mov_hi
(); \

1981 
	`thumb_bx
(); \

1986 
	`thumb_ac˚ss_mem‹y
(
lﬂd
, 
imm
, 0, 0, 0, 
pc_ªœtive
, \

1987 (
pc
 & ~2Ë+ (
imm
 * 4Ë+ 4, 
u32
); \

1992 
	`thumb_ac˚ss_mem‹y
(
lﬂd
, 
imm
, 1, 0, 0, 
pc_ªœtive
, \

1993 (
pc
 & ~2Ë+ (
imm
 * 4Ë+ 4, 
u32
); \

1998 
	`thumb_ac˚ss_mem‹y
(
lﬂd
, 
imm
, 2, 0, 0, 
pc_ªœtive
, \

1999 (
pc
 & ~2Ë+ (
imm
 * 4Ë+ 4, 
u32
); \

2004 
	`thumb_ac˚ss_mem‹y
(
lﬂd
, 
imm
, 3, 0, 0, 
pc_ªœtive
, \

2005 (
pc
 & ~2Ë+ (
imm
 * 4Ë+ 4, 
u32
); \

2010 
	`thumb_ac˚ss_mem‹y
(
lﬂd
, 
imm
, 4, 0, 0, 
pc_ªœtive
, \

2011 (
pc
 & ~2Ë+ (
imm
 * 4Ë+ 4, 
u32
); \

2016 
	`thumb_ac˚ss_mem‹y
(
lﬂd
, 
imm
, 5, 0, 0, 
pc_ªœtive
, \

2017 (
pc
 & ~2Ë+ (
imm
 * 4Ë+ 4, 
u32
); \

2022 
	`thumb_ac˚ss_mem‹y
(
lﬂd
, 
imm
, 6, 0, 0, 
pc_ªœtive
, \

2023 (
pc
 & ~2Ë+ (
imm
 * 4Ë+ 4, 
u32
); \

2028 
	`thumb_ac˚ss_mem‹y
(
lﬂd
, 
imm
, 7, 0, 0, 
pc_ªœtive
, \

2029 (
pc
 & ~2Ë+ (
imm
 * 4Ë+ 4, 
u32
); \

2034 
	`thumb_ac˚ss_mem‹y
(
°‹e
, 
mem_ªg
, 
rd
, 
rb
, 
ro
, 
ªg_ªg
, 0, 
u32
); \

2039 
	`thumb_ac˚ss_mem‹y
(
°‹e
, 
mem_ªg
, 
rd
, 
rb
, 
ro
, 
ªg_ªg
, 0, 
u16
); \

2044 
	`thumb_ac˚ss_mem‹y
(
°‹e
, 
mem_ªg
, 
rd
, 
rb
, 
ro
, 
ªg_ªg
, 0, 
u8
); \

2049 
	`thumb_ac˚ss_mem‹y
(
lﬂd
, 
mem_ªg
, 
rd
, 
rb
, 
ro
, 
ªg_ªg
, 0, 
s8
); \

2054 
	`thumb_ac˚ss_mem‹y
(
lﬂd
, 
mem_ªg
, 
rd
, 
rb
, 
ro
, 
ªg_ªg
, 0, 
u32
); \

2059 
	`thumb_ac˚ss_mem‹y
(
lﬂd
, 
mem_ªg
, 
rd
, 
rb
, 
ro
, 
ªg_ªg
, 0, 
u16
); \

2064 
	`thumb_ac˚ss_mem‹y
(
lﬂd
, 
mem_ªg
, 
rd
, 
rb
, 
ro
, 
ªg_ªg
, 0, 
u8
); \

2069 
	`thumb_ac˚ss_mem‹y
(
lﬂd
, 
mem_ªg
, 
rd
, 
rb
, 
ro
, 
ªg_ªg
, 0, 
s16
); \

2074 
	`thumb_ac˚ss_mem‹y
(
°‹e
, 
mem_imm
, 
rd
, 
rb
, 0, 
ªg_imm
, (
imm
 * 4), \

2075 
u32
); \

2080 
	`thumb_ac˚ss_mem‹y
(
lﬂd
, 
mem_imm
, 
rd
, 
rb
, 0, 
ªg_imm
, (
imm
 * 4), 
u32
); \

2085 
	`thumb_ac˚ss_mem‹y
(
°‹e
, 
mem_imm
, 
rd
, 
rb
, 0, 
ªg_imm
, 
imm
, 
u8
); \

2090 
	`thumb_ac˚ss_mem‹y
(
lﬂd
, 
mem_imm
, 
rd
, 
rb
, 0, 
ªg_imm
, 
imm
, 
u8
); \

2095 
	`thumb_ac˚ss_mem‹y
(
°‹e
, 
mem_imm
, 
rd
, 
rb
, 0, 
ªg_imm
, \

2096 (
imm
 * 2), 
u16
); \

2101 
	`thumb_ac˚ss_mem‹y
(
lﬂd
, 
mem_imm
, 
rd
, 
rb
, 0, 
ªg_imm
, (
imm
 * 2), 
u16
); \

2106 
	`thumb_ac˚ss_mem‹y
(
°‹e
, 
imm
, 0, 13, 0, 
ªg_imm_•
, imm, 
u32
); \

2111 
	`thumb_ac˚ss_mem‹y
(
°‹e
, 
imm
, 1, 13, 0, 
ªg_imm_•
, imm, 
u32
); \

2116 
	`thumb_ac˚ss_mem‹y
(
°‹e
, 
imm
, 2, 13, 0, 
ªg_imm_•
, imm, 
u32
); \

2121 
	`thumb_ac˚ss_mem‹y
(
°‹e
, 
imm
, 3, 13, 0, 
ªg_imm_•
, imm, 
u32
); \

2126 
	`thumb_ac˚ss_mem‹y
(
°‹e
, 
imm
, 4, 13, 0, 
ªg_imm_•
, imm, 
u32
); \

2131 
	`thumb_ac˚ss_mem‹y
(
°‹e
, 
imm
, 5, 13, 0, 
ªg_imm_•
, imm, 
u32
); \

2136 
	`thumb_ac˚ss_mem‹y
(
°‹e
, 
imm
, 6, 13, 0, 
ªg_imm_•
, imm, 
u32
); \

2141 
	`thumb_ac˚ss_mem‹y
(
°‹e
, 
imm
, 7, 13, 0, 
ªg_imm_•
, imm, 
u32
); \

2146 
	`thumb_ac˚ss_mem‹y
(
lﬂd
, 
imm
, 0, 13, 0, 
ªg_imm_•
, imm, 
u32
); \

2151 
	`thumb_ac˚ss_mem‹y
(
lﬂd
, 
imm
, 1, 13, 0, 
ªg_imm_•
, imm, 
u32
); \

2156 
	`thumb_ac˚ss_mem‹y
(
lﬂd
, 
imm
, 2, 13, 0, 
ªg_imm_•
, imm, 
u32
); \

2161 
	`thumb_ac˚ss_mem‹y
(
lﬂd
, 
imm
, 3, 13, 0, 
ªg_imm_•
, imm, 
u32
); \

2166 
	`thumb_ac˚ss_mem‹y
(
lﬂd
, 
imm
, 4, 13, 0, 
ªg_imm_•
, imm, 
u32
); \

2171 
	`thumb_ac˚ss_mem‹y
(
lﬂd
, 
imm
, 5, 13, 0, 
ªg_imm_•
, imm, 
u32
); \

2176 
	`thumb_ac˚ss_mem‹y
(
lﬂd
, 
imm
, 6, 13, 0, 
ªg_imm_•
, imm, 
u32
); \

2181 
	`thumb_ac˚ss_mem‹y
(
lﬂd
, 
imm
, 7, 13, 0, 
ªg_imm_•
, imm, 
u32
); \

2186 
	`thumb_lﬂd_pc
(0); \

2191 
	`thumb_lﬂd_pc
(1); \

2196 
	`thumb_lﬂd_pc
(2); \

2201 
	`thumb_lﬂd_pc
(3); \

2206 
	`thumb_lﬂd_pc
(4); \

2211 
	`thumb_lﬂd_pc
(5); \

2216 
	`thumb_lﬂd_pc
(6); \

2221 
	`thumb_lﬂd_pc
(7); \

2226 
	`thumb_lﬂd_•
(0); \

2231 
	`thumb_lﬂd_•
(1); \

2236 
	`thumb_lﬂd_•
(2); \

2241 
	`thumb_lﬂd_•
(3); \

2246 
	`thumb_lﬂd_•
(4); \

2251 
	`thumb_lﬂd_•
(5); \

2256 
	`thumb_lﬂd_•
(6); \

2261 
	`thumb_lﬂd_•
(7); \

2265 if((
›code
 >> 7) & 0x01) \

2268 
	`thumb_adju°_•
(
down
); \

2273 
	`thumb_adju°_•
(
up
); \

2279 
	`thumb_block_mem‹y
(
°‹e
, 
down
, 
no
, 13); \

2284 
	`thumb_block_mem‹y
(
°‹e
, 
push_Ã
,Öush_lr, 13); \

2289 
	`thumb_block_mem‹y
(
lﬂd
, 
no
, 
up
, 13); \

2294 
	`thumb_block_mem‹y
(
lﬂd
, 
no
, 
p›_pc
, 13); \

2299 
	`thumb_block_mem‹y
(
°‹e
, 
no
, 
up
, 0); \

2304 
	`thumb_block_mem‹y
(
°‹e
, 
no
, 
up
, 1); \

2309 
	`thumb_block_mem‹y
(
°‹e
, 
no
, 
up
, 2); \

2314 
	`thumb_block_mem‹y
(
°‹e
, 
no
, 
up
, 3); \

2319 
	`thumb_block_mem‹y
(
°‹e
, 
no
, 
up
, 4); \

2324 
	`thumb_block_mem‹y
(
°‹e
, 
no
, 
up
, 5); \

2329 
	`thumb_block_mem‹y
(
°‹e
, 
no
, 
up
, 6); \

2334 
	`thumb_block_mem‹y
(
°‹e
, 
no
, 
up
, 7); \

2339 
	`thumb_block_mem‹y
(
lﬂd
, 
no
, 
up
, 0); \

2344 
	`thumb_block_mem‹y
(
lﬂd
, 
no
, 
up
, 1); \

2349 
	`thumb_block_mem‹y
(
lﬂd
, 
no
, 
up
, 2); \

2354 
	`thumb_block_mem‹y
(
lﬂd
, 
no
, 
up
, 3); \

2359 
	`thumb_block_mem‹y
(
lﬂd
, 
no
, 
up
, 4); \

2364 
	`thumb_block_mem‹y
(
lﬂd
, 
no
, 
up
, 5); \

2369 
	`thumb_block_mem‹y
(
lﬂd
, 
no
, 
up
, 6); \

2374 
	`thumb_block_mem‹y
(
lﬂd
, 
no
, 
up
, 7); \

2379 
	`thumb_c⁄dôi⁄Æ_bønch
(
eq
); \

2384 
	`thumb_c⁄dôi⁄Æ_bønch
(
√
); \

2389 
	`thumb_c⁄dôi⁄Æ_bønch
(
cs
); \

2394 
	`thumb_c⁄dôi⁄Æ_bønch
(
cc
); \

2399 
	`thumb_c⁄dôi⁄Æ_bønch
(
mi
); \

2404 
	`thumb_c⁄dôi⁄Æ_bønch
(
∂
); \

2409 
	`thumb_c⁄dôi⁄Æ_bønch
(
vs
); \

2414 
	`thumb_c⁄dôi⁄Æ_bønch
(
vc
); \

2419 
	`thumb_c⁄dôi⁄Æ_bønch
(
hi
); \

2424 
	`thumb_c⁄dôi⁄Æ_bønch
(
ls
); \

2429 
	`thumb_c⁄dôi⁄Æ_bønch
(
ge
); \

2434 
	`thumb_c⁄dôi⁄Æ_bønch
(
…
); \

2439 
	`thumb_c⁄dôi⁄Æ_bønch
(
gt
); \

2444 
	`thumb_c⁄dôi⁄Æ_bønch
(
À
); \

2450 
	`thumb_swi
(); \

2457 
	`thumb_b
(); \

2474 if((
œ°_›code
 >= 0xF000) && (last_opcode < 0xF800)) \

2476 
	`thumb_bl
(); \

2480 
	`thumb_blh
(); \

2486 
pc
 += 2 \

2487 

	)

2488 
	#thumb_Êag_modifõs_Æl
() \

2489 
Êag_°©us
 |= 0xFF \

2490 

	)

2491 
	#thumb_Êag_modifõs_zn
() \

2492 
Êag_°©us
 |= 0xCC \

2493 

	)

2494 
	#thumb_Êag_modifõs_znc
() \

2495 
Êag_°©us
 |= 0xEE \

2496 

	)

2497 
	#thumb_Êag_modifõs_zn_maybe_c
() \

2498 
Êag_°©us
 |= 0xCE \

2499 

	)

2500 
	#thumb_Êag_modifõs_c
() \

2501 
Êag_°©us
 |= 0x22 \

2502 

	)

2503 
	#thumb_Êag_ªquúes_c
() \

2504 
Êag_°©us
 |= 0x200 \

2505 

	)

2506 
	#thumb_Êag_ªquúes_Æl
() \

2507 
Êag_°©us
 |= 0xF00 \

2508 

	)

2509 
	#thumb_Êag_°©us
() \

2511 
u16
 
Êag_°©us
 = 0; \

2512 (
›code
 >> 8) & 0xFF) \

2516 
	`thumb_Êag_modifõs_zn
(); \

2517 if(((
›code
 >> 6) & 0x1F) != 0) \

2519 
	`thumb_Êag_modifõs_c
(); \

2525 
	`thumb_Êag_modifõs_znc
(); \

2530 
	`thumb_Êag_modifõs_Æl
(); \

2535 
	`thumb_Êag_modifõs_zn
(); \

2540 
	`thumb_Êag_modifõs_Æl
(); \

2544 (
›code
 >> 6) & 0x03) \

2548 
	`thumb_Êag_modifõs_zn
(); \

2553 
	`thumb_Êag_modifõs_zn
(); \

2558 
	`thumb_Êag_modifõs_zn_maybe_c
(); \

2563 
	`thumb_Êag_modifõs_zn_maybe_c
(); \

2569 (
›code
 >> 6) & 0x03) \

2573 
	`thumb_Êag_modifõs_zn_maybe_c
(); \

2578 
	`thumb_Êag_modifõs_Æl
(); \

2579 
	`thumb_Êag_ªquúes_c
(); \

2584 
	`thumb_Êag_modifõs_Æl
(); \

2585 
	`thumb_Êag_ªquúes_c
(); \

2590 
	`thumb_Êag_modifõs_zn_maybe_c
(); \

2597 
	`thumb_Êag_modifõs_Æl
(); \

2602 
	`thumb_Êag_modifõs_zn
(); \

2607 
	`thumb_Êag_modifõs_Æl
(); \

2612 if((
›code
 & 0xFF87) != 0x4687) \

2620 
	`thumb_Êag_ªquúes_Æl
(); \

2623 
block_d©a
[
block_d©a_posôi⁄
].
Êag_d©a
 = 
Êag_°©us
; \

2625 

	)

2626 
u8
 *
	gøm_block_±rs
[1024 * 64];

2627 
u32
 
	gøm_block_èg_t›
 = 0x0101;

2629 
u8
 *
	gbios_block_±rs
[1024 * 8];

2630 
u32
 
	gbios_block_èg_t›
 = 0x0101;

2639 
	#block_lookup_addªss_pc_¨m
() \

2640 
pc
 &~0x03

	)

2642 
	#block_lookup_addªss_pc_thumb
() \

2643 
pc
 &= ~0x01 \

2644 

	)

2645 
	#block_lookup_addªss_pc_duÆ
() \

2646 
u32
 
thumb
 = 
pc
 & 0x01; \

2648 if(
thumb
) \

2650 
pc
--; \

2651 
ªg
[
REG_CPSR
] |= 0x20; \

2655 
pc
 = (pc + 2) & ~0x03; \

2656 
ªg
[
REG_CPSR
] &= ~0x20; \

2658 

	)

2659 
	#øm_å™¶©i⁄_ªgi⁄
 
TRANSLATION_REGION_RAM


	)

2660 
	#rom_å™¶©i⁄_ªgi⁄
 
TRANSLATION_REGION_ROM


	)

2661 
	#bios_å™¶©i⁄_ªgi⁄
 
TRANSLATION_REGION_BIOS


	)

2663 
	#block_lookup_å™¶©e_¨m
(
mem_ty≥
, 
smc_íabÀ
) \

2664 
å™¶©i⁄_ªsu…
 = 
	`å™¶©e_block_¨m
(
pc
, 
mem_ty≥
##
_å™¶©i⁄_ªgi⁄
, \

2665 
smc_íabÀ
) \

2666 

	)

2667 
	#block_lookup_å™¶©e_thumb
(
mem_ty≥
, 
smc_íabÀ
) \

2668 
å™¶©i⁄_ªsu…
 = 
	`å™¶©e_block_thumb
(
pc
, \

2669 
mem_ty≥
##
_å™¶©i⁄_ªgi⁄
, 
smc_íabÀ
) \

2670 

	)

2671 
	#block_lookup_å™¶©e_duÆ
(
mem_ty≥
, 
smc_íabÀ
) \

2672 if(
thumb
) \

2674 
å™¶©i⁄_ªsu…
 = 
	`å™¶©e_block_thumb
(
pc
, \

2675 
mem_ty≥
##
_å™¶©i⁄_ªgi⁄
, 
smc_íabÀ
); \

2679 
å™¶©i⁄_ªsu…
 = 
	`å™¶©e_block_¨m
(
pc
, \

2680 
mem_ty≥
##
_å™¶©i⁄_ªgi⁄
, 
smc_íabÀ
); \

2682 

	)

2689 
	#fûl_èg_¨m
(
mem_ty≥
) \

2690 
loˇti⁄
[0] = 
mem_ty≥
##
_block_èg_t›
; \

2691 
loˇti⁄
[1] = 0xFFFF \

2692 

	)

2693 
	#fûl_èg_thumb
(
mem_ty≥
) \

2694 *
loˇti⁄
 = 
mem_ty≥
##
_block_èg_t›
 \

2695 

	)

2696 
	#fûl_èg_duÆ
(
mem_ty≥
) \

2697 if(
thumb
) \

2698 
	`fûl_èg_thumb
(
mem_ty≥
); \

2700 
	`fûl_èg_¨m
(
mem_ty≥
) \

2701 

	)

2702 
	#block_lookup_å™¶©e
(
ö°ru˘i⁄_ty≥
, 
mem_ty≥
, 
smc_íabÀ
) \

2703 
block_èg
 = *
loˇti⁄
; \

2704 if((
block_èg
 < 0x0101) || (block_tag == 0xFFFF)) \

2706 
__œbñ__
 
ªdo
; \

2707 
s32
 
å™¶©i⁄_ªsu…
; \

2709 
ªdo
: \

2711 
å™¶©i⁄_ªcursi⁄_Àvñ
++; \

2712 
block_addªss
 = 
mem_ty≥
##
_å™¶©i⁄_±r
 + 
block_¥ﬁogue_size
; \

2713 
mem_ty≥
##
_block_±rs
[mem_ty≥##
_block_èg_t›
] = 
block_addªss
; \

2714 
fûl_èg_
##
	`ö°ru˘i⁄_ty≥
(
mem_ty≥
); \

2715 
mem_ty≥
##
_block_èg_t›
++; \

2717 
block_lookup_å™¶©e_
##
	`ö°ru˘i⁄_ty≥
(
mem_ty≥
, 
smc_íabÀ
); \

2718 
å™¶©i⁄_ªcursi⁄_Àvñ
--; \

2722 if(
å™¶©i⁄_ªsu…
 == -1) \

2724 if(
å™¶©i⁄_ªcursi⁄_Àvñ
) \

2725  
NULL
; \

2727 
ªdo
; \

2730 if(
å™¶©i⁄_ªcursi⁄_Àvñ
 == 0) \

2731 
	`å™¶©e_övÆid©e_dˇche
(); \

2735 
block_addªss
 = 
mem_ty≥
##
_block_±rs
[
block_èg
]; \

2737 

	)

2738 
u32
 
	gå™¶©i⁄_ªcursi⁄_Àvñ
 = 0;

2739 
u32
 
	gå™¶©i⁄_Êush_cou¡
 = 0;

2742 
	#block_lookup_addªss_buûdî
(
ty≥
) \

2743 
u8
 
fun˘i⁄_cc
 *
block_lookup_addªss_
##
	`ty≥
(
u32
 
pc
) \

2745 
u16
 *
loˇti⁄
; \

2746 
u32
 
block_èg
; \

2747 
u8
 *
block_addªss
; \

2750 if(
å™¶©i⁄_ªcursi⁄_Àvñ
 == 0) \

2751 
å™¶©i⁄_Êush_cou¡
 = 0; \

2752 
block_lookup_addªss_pc_
##
	`ty≥
(); \

2754 
pc
 >> 24) \

2757 
	`bios_ªgi⁄_ªad_Ælow
(); \

2758 
loˇti⁄
 = (
u16
 *)(
bios_rom
 + 
pc
 + 0x4000); \

2759 
	`block_lookup_å™¶©e
(
ty≥
, 
bios
, 0); \

2760 if(
å™¶©i⁄_ªcursi⁄_Àvñ
 == 0) \

2761 
	`bios_ªgi⁄_ªad_Ælow
(); \

2765 
loˇti⁄
 = (
u16
 *)(
ewøm
 + (
pc
 & 0x7FFF) + ((pc & 0x38000) * 2)); \

2766 
	`block_lookup_å™¶©e
(
ty≥
, 
øm
, 1); \

2767 if(
å™¶©i⁄_ªcursi⁄_Àvñ
 == 0) \

2768 
	`bios_ªgi⁄_ªad_¥Ÿe˘
(); \

2772 
loˇti⁄
 = (
u16
 *)(
iwøm
 + (
pc
 & 0x7FFF)); \

2773 
	`block_lookup_å™¶©e
(
ty≥
, 
øm
, 1); \

2774 if(
å™¶©i⁄_ªcursi⁄_Àvñ
 == 0) \

2775 
	`bios_ªgi⁄_ªad_¥Ÿe˘
(); \

2780 
u32
 
hash_èrgë
 = ((
pc
 * 2654435761U) >> 16) & \

2781 (
ROM_BRANCH_HASH_SIZE
 - 1); \

2782 
u32
 *
block_±r
 = 
rom_bønch_hash
[
hash_èrgë
]; \

2783 
u32
 **
block_±r_addªss
 = 
rom_bønch_hash
 + 
hash_èrgë
; \

2785 
block_±r
) \

2787 if(
block_±r
[0] =
pc
) \

2789 
block_addªss
 = (
u8
 *)(
block_±r
 + 2Ë+ 
block_¥ﬁogue_size
; \

2793 
block_±r_addªss
 = (
u32
 **)(
block_±r
 + 1); \

2794 
block_±r
 = (
u32
 *)block_ptr[1]; \

2797 if(
block_±r
 =
NULL
) \

2799 
__œbñ__
 
ªdo
; \

2800 
s32
 
å™¶©i⁄_ªsu…
; \

2802 
ªdo
: \

2804 
å™¶©i⁄_ªcursi⁄_Àvñ
++; \

2805 ((
u32
 *)
rom_å™¶©i⁄_±r
)[0] = 
pc
; \

2806 ((
u32
 **)
rom_å™¶©i⁄_±r
)[1] = 
NULL
; \

2807 *
block_±r_addªss
 = (
u32
 *)
rom_å™¶©i⁄_±r
; \

2808 
rom_å™¶©i⁄_±r
 += 8; \

2809 
block_addªss
 = 
rom_å™¶©i⁄_±r
 + 
block_¥ﬁogue_size
; \

2810 
block_lookup_å™¶©e_
##
	`ty≥
(
rom
, 0); \

2811 
å™¶©i⁄_ªcursi⁄_Àvñ
--; \

2815 if(
å™¶©i⁄_ªsu…
 == -1) \

2817 if(
å™¶©i⁄_ªcursi⁄_Àvñ
) \

2818  
NULL
; \

2820 
ªdo
; \

2823 if(
å™¶©i⁄_ªcursi⁄_Àvñ
 == 0) \

2824 
	`å™¶©e_övÆid©e_dˇche
(); \

2826 if(
å™¶©i⁄_ªcursi⁄_Àvñ
 == 0) \

2827 
	`bios_ªgi⁄_ªad_¥Ÿe˘
(); \

2839 if(
å™¶©i⁄_ªcursi⁄_Àvñ
 == 0) \

2841 
buf„r
[256]; \

2842 
	`•rötf
(
buf„r
, "bad jum∞%x (%xË(%x)\n", 
pc
, 
ªg
[
REG_PC
], \

2843 
œ°_ö°ru˘i⁄
); \

2844 
	`¥ötf
(
buf„r
); \

2845 
	`quô
(); \

2847 
block_addªss
 = (
u8
 *)(-1); \

2851  
block_addªss
; \

2853 

	)

2854 
block_lookup_addªss_buûdî
(
¨m
);

2855 
block_lookup_addªss_buûdî
(
thumb
);

2856 
block_lookup_addªss_buûdî
(
duÆ
);

2867 
	#¨m_exô_poöt
 \

2868 (((
›code
 < 0x8000000) && ((opcode & 0x000F000) == 0x000F000) && \

2869 ((
›code
 & 0xDB0F000) != 0x120F000)) || \

2870 ((
›code
 & 0x12FFF10) == 0x12FFF10) || \

2871 ((
›code
 & 0x8108000) == 0x8108000) || \

2872 ((
›code
 >= 0xA000000) && (opcode < 0xF000000)) || \

2873 ((
›code
 > 0xF000000Ë&& (!
swi_hÀ_h™dÀ
[((opcode >> 16) & 0xFF)]))) \

2874 

	)

2875 
	#¨m_›code_bønch
 \

2876 ((
›code
 & 0xE000000) == 0xA000000) \

2877 

	)

2878 
	#¨m_›code_swi
 \

2879 ((
›code
 & 0xF000000) == 0xF000000) \

2880 

	)

2881 
	#¨m_›code_unc⁄dôi⁄Æ_bønch
 \

2882 (
c⁄dôi⁄
 == 0x0E) \

2883 

	)

2884 
	#¨m_lﬂd_›code
() \

2885 
›code
 = 
	`addªss32
(
pc_addªss_block
, (
block_íd_pc
 & 0x7FFF)); \

2886 
c⁄dôi⁄
 = 
›code
 >> 28; \

2888 
›code
 &= 0xFFFFFFF; \

2890 
block_íd_pc
 += 4 \

2891 

	)

2892 
	#¨m_bønch_èrgë
() \

2893 
bønch_èrgë
 = (
block_íd_pc
 + 4 + (((
s32
)(
›code
 & 0xFFFFFF) << 8) >> 6)) \

2894 

	)

2899 
	#¨m_£t_c⁄dôi⁄
(
_c⁄dôi⁄
) \

2900 
block_d©a
[
block_d©a_posôi⁄
].
c⁄dôi⁄
 = 
_c⁄dôi⁄
; \

2901 (
›code
 >> 20) & 0xFF) \

2909 if((((
›code
 >> 5) & 0x03) == 0) || ((opcode & 0x90) != 0x90)) \

2910 
block_d©a
[
block_d©a_posôi⁄
].
c⁄dôi⁄
 |= 0x20; \

2922 if((
›code
 & 0x90) != 0x90) \

2923 
block_d©a
[
block_d©a_posôi⁄
].
c⁄dôi⁄
 |= 0x20; \

2927 if(((
›code
 & 0x90) != 0x90) && !(opcode & 0x10)) \

2928 
block_d©a
[
block_d©a_posôi⁄
].
c⁄dôi⁄
 |= 0x20; \

2943 
block_d©a
[
block_d©a_posôi⁄
].
c⁄dôi⁄
 |= 0x20; \

2946 

	)

2947 
	#¨m_lök_block
() \

2948 
å™¶©i⁄_èrgë
 = 
	`block_lookup_addªss_¨m
(
bønch_èrgë
) \

2949 

	)

2950 
	#¨m_ö°ru˘i⁄_width
 4

	)

2952 
	#¨m_ba£_cy˛es
() \

2953 
cy˛e_cou¡
 +
waô°©e_cy˛es_£quítül
[
pc
 >> 24][2] \

2954 

	)

2958 
	#¨m_dód_Êag_ñimö©e
() \

2959 
Êag_°©us
 = 0xF \

2960 

	)

2965 
	#thumb_exô_poöt
 \

2966 (((
›code
 >= 0xD000) && (opcode < 0xDF00)) || \

2967 (((
›code
 & 0xFF00) == 0xDF00) && \

2968 (!
swi_hÀ_h™dÀ
[
›code
 & 0xFF])) || \

2969 ((
›code
 >= 0xE000) && (opcode < 0xE800)) || \

2970 ((
›code
 & 0xFF00) == 0x4700) || \

2971 ((
›code
 & 0xFF00) == 0xBD00) || \

2972 ((
›code
 & 0xFF87) == 0x4687) || \

2973 ((
›code
 >= 0xF800))) \

2974 

	)

2975 
	#thumb_›code_bønch
 \

2976 (((
›code
 >= 0xD000) && (opcode < 0xDF00)) || \

2977 ((
›code
 >= 0xE000) && (opcode < 0xE800)) || \

2978 (
›code
 >= 0xF800)) \

2979 

	)

2980 
	#thumb_›code_swi
 \

2981 ((
›code
 & 0xFF00) == 0xDF00) \

2982 

	)

2983 
	#thumb_›code_unc⁄dôi⁄Æ_bønch
 \

2984 ((
›code
 < 0xD000) || (opcode >= 0xDF00)) \

2985 

	)

2986 
	#thumb_lﬂd_›code
() \

2987 
œ°_›code
 = 
›code
; \

2988 
›code
 = 
	`addªss16
(
pc_addªss_block
, (
block_íd_pc
 & 0x7FFF)); \

2990 
block_íd_pc
 += 2 \

2991 

	)

2992 
	#thumb_bønch_èrgë
() \

2993 if(
›code
 < 0xE000) \

2995 
bønch_èrgë
 = 
block_íd_pc
 + 2 + ((
s8
)(
›code
 & 0xFF) * 2); \

2999 if(
›code
 < 0xF800) \

3001 
bønch_èrgë
 = 
block_íd_pc
 + 2 + ((
s32
)((
›code
 & 0x7FF) << 21) >> 20); \

3005 if((
œ°_›code
 >= 0xF000) && (last_opcode < 0xF800)) \

3007 
bønch_èrgë
 = \

3008 (
block_íd_pc
 + ((
s32
)((
œ°_›code
 & 0x07FF) << 21) >> 9) + \

3009 ((
›code
 & 0x07FF) * 2)); \

3013 
no_dúe˘_bønch
; \

3016 

	)

3017 
	#thumb_£t_c⁄dôi⁄
(
_c⁄dôi⁄
) \

3018 

	)

3019 
	#thumb_lök_block
() \

3020 if(
bønch_èrgë
 != 0x00000008) \

3021 
å™¶©i⁄_èrgë
 = 
	`block_lookup_addªss_thumb
(
bønch_èrgë
); \

3023 
å™¶©i⁄_èrgë
 = 
	`block_lookup_addªss_¨m
(
bønch_èrgë
) \

3024 

	)

3025 
	#thumb_ö°ru˘i⁄_width
 2

	)

3027 
	#thumb_ba£_cy˛es
() \

3028 
cy˛e_cou¡
 +
waô°©e_cy˛es_£quítül
[
pc
 >> 24][1] \

3029 

	)

3057 
	#thumb_dód_Êag_ñimö©e
() \

3059 
u32
 
√eded_mask
; \

3060 
√eded_mask
 = 
block_d©a
[
block_d©a_posôi⁄
].
Êag_d©a
 >> 8; \

3062 
block_d©a_posôi⁄
--; \

3063 
block_d©a_posôi⁄
 >= 0) \

3065 
Êag_°©us
 = 
block_d©a
[
block_d©a_posôi⁄
].
Êag_d©a
; \

3066 
block_d©a
[
block_d©a_posôi⁄
].
Êag_d©a
 = \

3067 (
Êag_°©us
 & 
√eded_mask
); \

3068 
√eded_mask
 &~((
Êag_°©us
 >> 4) & 0x0F); \

3069 
√eded_mask
 |
Êag_°©us
 >> 8; \

3070 
block_d©a_posôi⁄
--; \

3073 

	)

3074 
	#MAX_BLOCK_SIZE
 8192

	)

3075 
	#MAX_EXITS
 256

	)

3077 
block_d©a_ty≥
 
	gblock_d©a
[
MAX_BLOCK_SIZE
];

3078 
block_exô_ty≥
 
	gblock_exôs
[
MAX_EXITS
];

3080 
	#smc_wrôe_¨m_yes
() \

3081 if(
	`addªss32
(
pc_addªss_block
, (
block_íd_pc
 & 0x7FFF) - 0x8000) == 0x0000) \

3083 
	`addªss32
(
pc_addªss_block
, (
block_íd_pc
 & 0x7FFF) - 0x8000) = \

3086 

	)

3087 
	#smc_wrôe_thumb_yes
() \

3088 if(
	`addªss16
(
pc_addªss_block
, (
block_íd_pc
 & 0x7FFF) - 0x8000) == 0x0000) \

3090 
	`addªss16
(
pc_addªss_block
, (
block_íd_pc
 & 0x7FFF) - 0x8000) = 0xFFFF; \

3092 

	)

3093 
	#smc_wrôe_¨m_no
() \

3094 

	)

3095 
	#smc_wrôe_thumb_no
() \

3096 

	)

3097 
	#sˇn_block
(
ty≥
, 
smc_wrôe_›
) \

3099 
__œbñ__
 
block_íd
; \

3103 
	`check_pc_ªgi⁄
(
block_íd_pc
); \

3104 
smc_wrôe_
##
ty≥
##
_
##
	`smc_wrôe_›
(); \

3105 
ty≥
##
	`_lﬂd_›code
(); \

3106 
ty≥
##
	`_Êag_°©us
(); \

3108 if(
ty≥
##
_exô_poöt
) \

3111 if(
ty≥
##
_›code_bønch
) \

3113 
__œbñ__
 
no_dúe˘_bønch
; \

3114 
ty≥
##
	`_bønch_èrgë
(); \

3115 
block_exôs
[
block_exô_posôi⁄
].
bønch_èrgë
 = branch_target; \

3116 
block_exô_posôi⁄
++; \

3120 
no_dúe˘_bønch
:; \

3125 if(
ty≥
##
_›code_swi
) \

3127 
block_exôs
[
block_exô_posôi⁄
].
bønch_èrgë
 = 0x00000008; \

3128 
block_exô_posôi⁄
++; \

3131 
ty≥
##
	`_£t_c⁄dôi⁄
(
c⁄dôi⁄
 | 0x10); \

3134 if(
ty≥
##
_›code_unc⁄dôi⁄Æ_bønch
) \

3140 
i
 = 
block_exô_posôi⁄
 - 2; i >= 0; i--) \

3142 if(
block_exôs
[
i
].
bønch_èrgë
 =
block_íd_pc
) \

3146 if(
i
 < 0) \

3149 if(
block_exô_posôi⁄
 =
MAX_EXITS
) \

3154 
ty≥
##
	`_£t_c⁄dôi⁄
(
c⁄dôi⁄
); \

3157 
i
 = 0; i < 
å™¶©i⁄_g©e_èrgës
; i++) \

3159 if(
block_íd_pc
 =
å™¶©i⁄_g©e_èrgë_pc
[
i
]) \

3160 
block_íd
; \

3163 
block_d©a
[
block_d©a_posôi⁄
].
upd©e_cy˛es
 = 0; \

3164 
block_d©a_posôi⁄
++; \

3165 if((
block_d©a_posôi⁄
 =
MAX_BLOCK_SIZE
) || \

3166 (
block_íd_pc
 == 0x3007FF0) || (block_end_pc == 0x203FFFF0)) \

3172 
block_íd
:; \

3174 

	)

3175 
	#¨m_fix_pc
() \

3176 
pc
 &= ~0x03 \

3177 

	)

3178 
	#thumb_fix_pc
() \

3179 
pc
 &= ~0x01 \

3180 

	)

3181 
	#å™¶©e_block_buûdî
(
ty≥
) \

3182 
s32
 
å™¶©e_block_
##
	`ty≥
(
u32
 
pc
, 
å™¶©i⁄_ªgi⁄_ty≥
 \

3183 
å™¶©i⁄_ªgi⁄
, 
u32
 
smc_íabÀ
) \

3185 
u32
 
›code
; \

3186 
u32
 
œ°_›code
; \

3187 
u32
 
c⁄dôi⁄
; \

3188 
u32
 
œ°_c⁄dôi⁄
; \

3189 
u32
 
pc_ªgi⁄
 = (
pc
 >> 15); \

3190 
u32
 
√w_pc_ªgi⁄
; \

3191 
u8
 *
pc_addªss_block
 = 
mem‹y_m≠_ªad
[
pc_ªgi⁄
]; \

3192 
u32
 
block_°¨t_pc
 = 
pc
; \

3193 
u32
 
block_íd_pc
 = 
pc
; \

3194 
u32
 
block_exô_posôi⁄
 = 0; \

3195 
s32
 
block_d©a_posôi⁄
 = 0; \

3196 
u32
 
exã∫Æ_block_exô_posôi⁄
 = 0; \

3197 
u32
 
bønch_èrgë
; \

3198 
u32
 
cy˛e_cou¡
 = 0; \

3199 
u8
 *
å™¶©i⁄_èrgë
; \

3200 
u8
 *
back∑tch_addªss
; \

3201 
u8
 *
å™¶©i⁄_±r
; \

3202 
u8
 *
å™¶©i⁄_ˇche_limô
; \

3203 
s32
 
i
; \

3204 
u32
 
Êag_°©us
; \

3205 
block_exô_ty≥
 
exã∫Æ_block_exôs
[
MAX_EXITS
]; \

3206 
gíî©e_block_exåa_v¨s_
##
	`ty≥
(); \

3207 
ty≥
##
	`_fix_pc
(); \

3209 if(
pc_addªss_block
 =
NULL
) \

3210 
pc_addªss_block
 = 
	`lﬂd_gamïak_∑ge
(
pc_ªgi⁄
 & 0x3FF); \

3212 
å™¶©i⁄_ªgi⁄
) \

3214 
TRANSLATION_REGION_RAM
: \

3215 if(
pc
 >= 0x3000000) \

3217 if((
pc
 < 
iwøm_code_mö
) || (iwram_code_min == 0xFFFFFFFF)) \

3218 
iwøm_code_mö
 = 
pc
; \

3222 if(
pc
 >= 0x2000000) \

3224 if((
pc
 < 
ewøm_code_mö
) || (ewram_code_min == 0xFFFFFFFF)) \

3225 
ewøm_code_mö
 = 
pc
; \

3228 
å™¶©i⁄_±r
 = 
øm_å™¶©i⁄_±r
; \

3229 
å™¶©i⁄_ˇche_limô
 = \

3230 
øm_å™¶©i⁄_ˇche
 + 
RAM_TRANSLATION_CACHE_SIZE
 - \

3231 
TRANSLATION_CACHE_LIMIT_THRESHOLD
; \

3234 
TRANSLATION_REGION_ROM
: \

3235 
å™¶©i⁄_±r
 = 
rom_å™¶©i⁄_±r
; \

3236 
å™¶©i⁄_ˇche_limô
 = \

3237 
rom_å™¶©i⁄_ˇche
 + 
ROM_TRANSLATION_CACHE_SIZE
 - \

3238 
TRANSLATION_CACHE_LIMIT_THRESHOLD
; \

3241 
TRANSLATION_REGION_BIOS
: \

3242 
å™¶©i⁄_±r
 = 
bios_å™¶©i⁄_±r
; \

3243 
å™¶©i⁄_ˇche_limô
 = 
bios_å™¶©i⁄_ˇche
 + \

3244 
BIOS_TRANSLATION_CACHE_SIZE
; \

3248 
	`gíî©e_block_¥ﬁogue
(); \

3254 if(
smc_íabÀ
) \

3256 
	`sˇn_block
(
ty≥
, 
yes
); \

3260 
	`sˇn_block
(
ty≥
, 
no
); \

3263 
i
 = 0; i < 
block_exô_posôi⁄
; i++) \

3265 
bønch_èrgë
 = 
block_exôs
[
i
].branch_target; \

3267 if((
bønch_èrgë
 > 
block_°¨t_pc
) && \

3268 (
bønch_èrgë
 < 
block_íd_pc
)) \

3270 
block_d©a
[(
bønch_èrgë
 - 
block_°¨t_pc
) / \

3271 
ty≥
##
_ö°ru˘i⁄_width
].
upd©e_cy˛es
 = 1; \

3275 
ty≥
##
	`_dód_Êag_ñimö©e
(); \

3277 
block_exô_posôi⁄
 = 0; \

3278 
block_d©a_posôi⁄
 = 0; \

3280 
œ°_c⁄dôi⁄
 = 0x0E; \

3282 
pc
 !
block_íd_pc
) \

3284 
block_d©a
[
block_d©a_posôi⁄
].
block_off£t
 = 
å™¶©i⁄_±r
; \

3285 
ty≥
##
	`_ba£_cy˛es
(); \

3288 
å™¶©e_
##
ty≥
##
	`_ö°ru˘i⁄
(); \

3289 
block_d©a_posôi⁄
++; \

3296 if(
å™¶©i⁄_±r
 > 
å™¶©i⁄_ˇche_limô
) \

3298 
å™¶©i⁄_Êush_cou¡
++; \

3300 
å™¶©i⁄_ªgi⁄
) \

3302 
TRANSLATION_REGION_RAM
: \

3303 
	`Êush_å™¶©i⁄_ˇche_øm
(); \

3306 
TRANSLATION_REGION_ROM
: \

3307 
	`Êush_å™¶©i⁄_ˇche_rom
(); \

3310 
TRANSLATION_REGION_BIOS
: \

3311 
	`Êush_å™¶©i⁄_ˇche_bios
(); \

3320 if(
block_d©a
[
block_d©a_posôi⁄
].
upd©e_cy˛es
 == 1) \

3322 
	`gíî©e_cy˛e_upd©e
(); \

3325 
i
 = 0; i < 
å™¶©i⁄_g©e_èrgës
; i++) \

3327 if(
pc
 =
å™¶©i⁄_g©e_èrgë_pc
[
i
]) \

3329 
	`gíî©e_å™¶©i⁄_g©e
(
ty≥
); \

3334 
i
 = 0; i < 
block_exô_posôi⁄
; i++) \

3336 
bønch_èrgë
 = 
block_exôs
[
i
].branch_target; \

3338 if((
bønch_èrgë
 >
block_°¨t_pc
Ë&& (bønch_èrgë < 
block_íd_pc
)) \

3341 
å™¶©i⁄_èrgë
 = \

3342 
block_d©a
[(
bønch_èrgë
 - 
block_°¨t_pc
) / \

3343 
ty≥
##
_ö°ru˘i⁄_width
].
block_off£t
; \

3345 
	`gíî©e_bønch_∑tch_unc⁄dôi⁄Æ
(
block_exôs
[
i
].
bønch_sour˚
, \

3346 
å™¶©i⁄_èrgë
); \

3351 
exã∫Æ_block_exôs
[
exã∫Æ_block_exô_posôi⁄
].
bønch_èrgë
 = \

3352 
bønch_èrgë
; \

3353 
exã∫Æ_block_exôs
[
exã∫Æ_block_exô_posôi⁄
].
bønch_sour˚
 = \

3354 
block_exôs
[
i
].
bønch_sour˚
; \

3355 
exã∫Æ_block_exô_posôi⁄
++; \

3359 
å™¶©i⁄_ªgi⁄
) \

3361 
TRANSLATION_REGION_RAM
: \

3362 if(
pc
 >= 0x3000000) \

3364 if((
pc
 > 
iwøm_code_max
) || (iwram_code_max == 0xFFFFFFFF)) \

3365 
iwøm_code_max
 = 
pc
; \

3369 if(
pc
 >= 0x2000000) \

3371 if((
pc
 > 
ewøm_code_max
) || (ewram_code_max == 0xFFFFFFFF)) \

3372 
ewøm_code_max
 = 
pc
; \

3375 
øm_å™¶©i⁄_±r
 = 
å™¶©i⁄_±r
; \

3378 
TRANSLATION_REGION_ROM
: \

3379 
rom_å™¶©i⁄_±r
 = 
å™¶©i⁄_±r
; \

3382 
TRANSLATION_REGION_BIOS
: \

3383 
bios_å™¶©i⁄_±r
 = 
å™¶©i⁄_±r
; \

3387 
i
 = 0; i < 
exã∫Æ_block_exô_posôi⁄
; i++) \

3389 
bønch_èrgë
 = 
exã∫Æ_block_exôs
[
i
].branch_target; \

3390 
ty≥
##
	`_lök_block
(); \

3391 if(
å™¶©i⁄_èrgë
 =
NULL
) \

3393 
	`gíî©e_bønch_∑tch_unc⁄dôi⁄Æ
( \

3394 
exã∫Æ_block_exôs
[
i
].
bønch_sour˚
, 
å™¶©i⁄_èrgë
); \

3399 

	)

3400 
å™¶©e_block_buûdî
(
¨m
);

3401 
å™¶©e_block_buûdî
(
thumb
);

3403 
	$Êush_å™¶©i⁄_ˇche_øm
()

3405 
Êush_øm_cou¡
++;

3410 #i‚de‡
PC_BUILD


3411 
	`övÆid©e_iˇche_ªgi⁄
(
øm_å™¶©i⁄_ˇche
,

3412 (
øm_å™¶©i⁄_±r
 - 
øm_å™¶©i⁄_ˇche
) + 0x100);

3414 
øm_å™¶©i⁄_±r
 = 
øm_å™¶©i⁄_ˇche
;

3415 
øm_block_èg_t›
 = 0x0101;

3416 if(
iwøm_code_mö
 != 0xFFFFFFFF)

3418 
iwøm_code_mö
 &= 0x7FFF;

3419 
iwøm_code_max
 &= 0x7FFF;

3420 
	`mem£t
(
iwøm
 + 
iwøm_code_mö
, 0, 
iwøm_code_max
 - iwram_code_min);

3423 if(
ewøm_code_mö
 != 0xFFFFFFFF)

3425 
u32
 
ewøm_code_mö_∑ge
;

3426 
u32
 
ewøm_code_max_∑ge
;

3427 
u32
 
ewøm_code_mö_off£t
;

3428 
u32
 
ewøm_code_max_off£t
;

3429 
u32
 
i
;

3431 
ewøm_code_mö
 &= 0x3FFFF;

3432 
ewøm_code_max
 &= 0x3FFFF;

3434 
ewøm_code_mö_∑ge
 = 
ewøm_code_mö
 >> 15;

3435 
ewøm_code_max_∑ge
 = 
ewøm_code_max
 >> 15;

3436 
ewøm_code_mö_off£t
 = 
ewøm_code_mö
 & 0x7FFF;

3437 
ewøm_code_max_off£t
 = 
ewøm_code_max
 & 0x7FFF;

3439 if(
ewøm_code_mö_∑ge
 =
ewøm_code_max_∑ge
)

3441 
	`mem£t
(
ewøm
 + (
ewøm_code_mö_∑ge
 * 0x10000) +

3442 
ewøm_code_mö_off£t
, 0,

3443 
ewøm_code_max_off£t
 - 
ewøm_code_mö_off£t
);

3447 
i
 = 
ewøm_code_mö_∑ge
 + 1; i < 
ewøm_code_max_∑ge
; i++)

3449 
	`mem£t
(
ewøm
 + (
i
 * 0x10000), 0, 0x8000);

3452 
	`mem£t
(
ewøm
, 0, 
ewøm_code_max_off£t
);

3456 
iwøm_code_mö
 = 0xFFFFFFFF;

3457 
iwøm_code_max
 = 0xFFFFFFFF;

3458 
ewøm_code_mö
 = 0xFFFFFFFF;

3459 
ewøm_code_max
 = 0xFFFFFFFF;

3460 
	}
}

3462 
	$Êush_å™¶©i⁄_ˇche_rom
()

3464 #i‚de‡
PC_BUILD


3465 
	`övÆid©e_iˇche_ªgi⁄
(
rom_å™¶©i⁄_ˇche
,

3466 
rom_å™¶©i⁄_±r
 - 
rom_å™¶©i⁄_ˇche
 + 0x100);

3469 
rom_å™¶©i⁄_±r
 = 
rom_å™¶©i⁄_ˇche
;

3470 
	`mem£t
(
rom_bønch_hash
, 0, (rom_branch_hash));

3471 
	}
}

3473 
	$Êush_å™¶©i⁄_ˇche_bios
()

3475 #i‚de‡
PC_BUILD


3476 
	`övÆid©e_iˇche_ªgi⁄
(
bios_å™¶©i⁄_ˇche
,

3477 
bios_å™¶©i⁄_±r
 - 
bios_å™¶©i⁄_ˇche
 + 0x100);

3480 
bios_block_èg_t›
 = 0x0101;

3481 
bios_å™¶©i⁄_±r
 = 
bios_å™¶©i⁄_ˇche
;

3482 
	`mem£t
(
bios_rom
 + 0x4000, 0, 0x4000);

3483 
	}
}

3485 #ifde‡
GP2X_BUILD


3486 
	#ˇche_dump_¥efix
 "/m¡/«nd/"

	)

3488 
	#ˇche_dump_¥efix
 ""

	)

3491 
	$dump_å™¶©i⁄_ˇche
()

3493 
	`fûe_›í
(
øm_ˇche
, 
ˇche_dump_¥efix
 "øm_ˇche.bö", 
wrôe
);

3494 
	`fûe_wrôe
(
øm_ˇche
, 
øm_å™¶©i⁄_ˇche
,

3495 
øm_å™¶©i⁄_±r
 - 
øm_å™¶©i⁄_ˇche
);

3496 
	`fûe_˛o£
(
øm_ˇche
);

3498 
	`fûe_›í
(
rom_ˇche
, 
ˇche_dump_¥efix
 "rom_ˇche.bö", 
wrôe
);

3499 
	`fûe_wrôe
(
rom_ˇche
, 
rom_å™¶©i⁄_ˇche
,

3500 
rom_å™¶©i⁄_±r
 - 
rom_å™¶©i⁄_ˇche
);

3501 
	`fûe_˛o£
(
rom_ˇche
);

3503 
	`fûe_›í
(
bios_ˇche
, 
ˇche_dump_¥efix
 "bios_ˇche.bö", 
wrôe
);

3504 
	`fûe_wrôe
(
bios_ˇche
, 
bios_å™¶©i⁄_ˇche
,

3505 
bios_å™¶©i⁄_±r
 - 
bios_å™¶©i⁄_ˇche
);

3506 
	`fûe_˛o£
(
bios_ˇche
);

3507 
	}
}

	@disasm.c

21 
	#¨m_decode_d©a_¥oc_ªg
() \

22 
u32
 
∫
 = (
›code
 >> 16) & 0x0F; \

23 
u32
 
rd
 = (
›code
 >> 12) & 0x0F; \

24 
u32
 
rm
 = 
›code
 & 0x0F \

25 

	)

26 
	#¨m_decode_d©a_¥oc_imm
() \

27 
u32
 
∫
 = (
›code
 >> 16) & 0x0F; \

28 
u32
 
rd
 = (
›code
 >> 12) & 0x0F; \

29 
u32
 
imm
; \

30 
	`r‹
(
imm
, 
›code
 & 0xFF, ((opcode >> 8) & 0x0F) * 2) \

31 

	)

32 
	#¨m_decode_p§_ªg
() \

33 
u32
 
p§_fõld
 = (
›code
 >> 16) & 0x0F; \

34 
u32
 
rd
 = (
›code
 >> 12) & 0x0F; \

35 
u32
 
rm
 = 
›code
 & 0x0F \

36 

	)

37 
	#¨m_decode_p§_imm
() \

38 
u32
 
p§_fõld
 = (
›code
 >> 16) & 0x0F; \

39 
u32
 
rd
 = (
›code
 >> 12) & 0x0F; \

40 
u32
 
imm
; \

41 
	`r‹
(
imm
, 
›code
 & 0xFF, ((opcode >> 8) & 0x0F) * 2) \

42 

	)

43 
	#¨m_decode_bønchx
() \

44 
u32
 
∫
 = 
›code
 & 0x0F \

45 

	)

46 
	#¨m_decode_mu…ùly
() \

47 
u32
 
rd
 = (
›code
 >> 16) & 0x0F; \

48 
u32
 
∫
 = (
›code
 >> 12) & 0x0F; \

49 
u32
 
rs
 = (
›code
 >> 8) & 0x0F; \

50 
u32
 
rm
 = 
›code
 & 0x0F \

51 

	)

52 
	#¨m_decode_mu…ùly_l⁄g
() \

53 
u32
 
rdhi
 = (
›code
 >> 16) & 0x0F; \

54 
u32
 
rdlo
 = (
›code
 >> 12) & 0x0F; \

55 
u32
 
∫
 = (
›code
 >> 8) & 0x0F; \

56 
u32
 
rm
 = 
›code
 & 0x0F \

57 

	)

58 
	#¨m_decode_sw≠
() \

59 
u32
 
∫
 = (
›code
 >> 16) & 0x0F; \

60 
u32
 
rd
 = (
›code
 >> 12) & 0x0F; \

61 
u32
 
rm
 = 
›code
 & 0x0F \

62 

	)

63 
	#¨m_decode_hÆf_å™s_r
() \

64 
u32
 
∫
 = (
›code
 >> 16) & 0x0F; \

65 
u32
 
rd
 = (
›code
 >> 12) & 0x0F; \

66 
u32
 
rm
 = 
›code
 & 0x0F \

67 

	)

68 
	#¨m_decode_hÆf_å™s_of
() \

69 
u32
 
∫
 = (
›code
 >> 16) & 0x0F; \

70 
u32
 
rd
 = (
›code
 >> 12) & 0x0F; \

71 
u32
 
off£t
 = ((
›code
 >> 4) & 0xF0) | (opcode & 0x0F) \

72 

	)

73 
	#¨m_decode_d©a_å™s_imm
() \

74 
u32
 
∫
 = (
›code
 >> 16) & 0x0F; \

75 
u32
 
rd
 = (
›code
 >> 12) & 0x0F; \

76 
u32
 
off£t
 = 
›code
 & 0x0FFF \

77 

	)

78 
	#¨m_decode_d©a_å™s_ªg
() \

79 
u32
 
∫
 = (
›code
 >> 16) & 0x0F; \

80 
u32
 
rd
 = (
›code
 >> 12) & 0x0F; \

81 
u32
 
rm
 = 
›code
 & 0x0F \

82 

	)

83 
	#¨m_decode_block_å™s
() \

84 
u32
 
∫
 = (
›code
 >> 16) & 0x0F; \

85 
u32
 
ªg_li°
 = 
›code
 & 0xFFFF \

86 

	)

87 
	#¨m_decode_bønch
() \

88 
s32
 
off£t
 = ((s32)(
›code
 & 0xFFFFFF) << 8) >> 6 \

89 

	)

90 
	#thumb_decode_shi·
() \

91 
u32
 
imm
 = (
›code
 >> 6) & 0x1F; \

92 
u32
 
rs
 = (
›code
 >> 3) & 0x07; \

93 
u32
 
rd
 = 
›code
 & 0x07 \

94 

	)

95 
	#thumb_decode_add_sub
() \

96 
u32
 
∫
 = (
›code
 >> 6) & 0x07; \

97 
u32
 
rs
 = (
›code
 >> 3) & 0x07; \

98 
u32
 
rd
 = 
›code
 & 0x07 \

99 

	)

100 
	#thumb_decode_add_sub_imm
() \

101 
u32
 
imm
 = (
›code
 >> 6) & 0x07; \

102 
u32
 
rs
 = (
›code
 >> 3) & 0x07; \

103 
u32
 
rd
 = 
›code
 & 0x07 \

104 

	)

105 
	#thumb_decode_imm
() \

106 
u32
 
imm
 = 
›code
 & 0xFF \

107 

	)

108 
	#thumb_decode_Æu_›
() \

109 
u32
 
rs
 = (
›code
 >> 3) & 0x07; \

110 
u32
 
rd
 = 
›code
 & 0x07 \

111 

	)

112 
	#thumb_decode_húeg_›
() \

113 
u32
 
rs
 = (
›code
 >> 3) & 0x0F; \

114 
u32
 
rd
 = ((
›code
 >> 4) & 0x08) | (opcode & 0x07) \

115 

	)

116 
	#thumb_decode_mem_ªg
() \

117 
u32
 
ro
 = (
›code
 >> 6) & 0x07; \

118 
u32
 
rb
 = (
›code
 >> 3) & 0x07; \

119 
u32
 
rd
 = 
›code
 & 0x07 \

120 

	)

121 
	#thumb_decode_mem_imm
() \

122 
u32
 
imm
 = (
›code
 >> 6) & 0x1F; \

123 
u32
 
rb
 = (
›code
 >> 3) & 0x07; \

124 
u32
 
rd
 = 
›code
 & 0x07 \

125 

	)

126 
	#thumb_decode_add_•
() \

127 
u32
 
imm
 = 
›code
 & 0x7F \

128 

	)

129 
	#thumb_decode_æi°
() \

130 
u32
 
ªg_li°
 = 
›code
 & 0xFF \

131 

	)

132 
	#thumb_decode_bønch_c⁄d
() \

133 
s32
 
off£t
 = (
s8
)(
›code
 & 0xFF) \

134 

	)

135 
	#thumb_decode_swi
() \

136 
u32
 
commít
 = 
›code
 & 0xFF \

137 

	)

138 
	#thumb_decode_bønch
() \

139 
u32
 
off£t
 = 
›code
 & 0x07FF \

140 

	)

141 c⁄° *
	gc⁄dôi⁄_èbÀ
[] =

147 c⁄° *
	gd©a_¥oc_›code_èbÀ
[] =

154 
u32
 
	$¥öt_dißsm_¨m_ö°ru˘i⁄
(
u32
 
›code
)

156 
u32
 
c⁄dôi⁄
 = 
›code
 >> 28;

158 (
›code
 >> 25) & 0x07)

	@font.h

23 
	#FONT_WIDTH
 6

	)

24 
	#FONT_HEIGHT
 10

	)

41 
u16
 
	g_f⁄t_bôs
[2230] =

5620 
	g_f⁄t_off£t
[256] =

	@gp2x/align_test.c

2 
	~<°dio.h
>

4 
	$maö
()

6 
ªad_16
 = 0xF1F2;

7 
ªad_32
 = 0xF1F2F3F4;

9 
wrôe_16
 = 0xF00D;

10 
wrôe_32
 = 0xF00DFEED;

12 
	`Ârötf
(
°dîr
, "%04x %04x\n",

13 *((*)((*)&
ªad_16
)),

14 *((*)((*)&
ªad_16
 + 1)));

17 
	`Ârötf
(
°dîr
, "%04x %04x\n",

18 *((*)((*)&
ªad_16
)),

19 *((*)((*)&
ªad_16
 + 1)));

24 
	`Ârötf
(
°dîr
, "%08x %08x %08x %08x\n",

25 *((*)((*)&
ªad_32
)),

26 *((*)((*)&
ªad_32
 + 1)),

27 *((*)((*)&
ªad_32
 + 2)),

28 *((*)((*)&
ªad_32
 + 3)));

32 *((*)((*)&
wrôe_16
)) = 0xF00D;

33 *((*)((*)&
wrôe_16
) + 1) = 0xF00D;

35 
	`Ârötf
(
°dîr
, "%04x\n", 
wrôe_16
);

39 *((*)((*)&
wrôe_16
)) = 0xF00DFEED;

40 *((*)((*)&
wrôe_16
) + 1) = 0xF00DFEED;

41 *((*)((*)&
wrôe_16
) + 2) = 0xF00DFEED;

42 *((*)((*)&
wrôe_16
) + 3) = 0xF00DFEED;

44 
	`Ârötf
(
°dîr
, "%08x\n", 
wrôe_32
);

47 
	}
}

	@gp2x/arm_codegen.h

29 #i‚de‡
ARM_CG_H


30 
	#ARM_CG_H


	)

32 
	t¨mö°r_t
;

33 
	t¨mw‹d_t
;

50 
wrôe_to_fûe
(
u32
 
vÆ
);

58 
	#ARM_EMIT
(
p
, 
i
Ë
	`wrôe32
(i);

	)

62 #i‡
deföed
(
GIZMONDO
Ë|| deföed(
POCKETPC
)

70 
	#CACHE_SYNC_DISCARD
 0x001

	)

71 
	#CACHE_SYNC_INSTRUCTIONS
 0x002

	)

72 
	#CACHE_SYNC_WRITEBACK
 0x004

	)

73 
	#CACHE_SYNC_FLUSH_I_TLB
 0x008

	)

74 
	#CACHE_SYNC_FLUSH_D_TLB
 0x010

	)

75 
	#CACHE_SYNC_FLUSH_TLB
 (
CACHE_SYNC_FLUSH_I_TLB
|
CACHE_SYNC_FLUSH_D_TLB
Ë

	)

76 
	#CACHE_SYNC_L2_WRITEBACK
 0x020

	)

77 
	#CACHE_SYNC_L2_DISCARD
 0x040

	)

79 
	#CACHE_SYNC_ALL
 0x07F

	)

82 
CacheSync
(
Êags
);

84 
	#CLEAR_INSN_CACHE
(
BEG
, 
END
Ë
	`CacheSync
(
CACHE_SYNC_INSTRUCTIONS
 | 
CACHE_SYNC_WRITEBACK
);

	)

89 
	#CLEAR_INSN_CACHE
(
BEG
, 
END
) \

91 
_beg
 
	`__asm
 ("a1"Ë(Ë(
BEG
); \

92 
_íd
 
	`__asm
 ("a2"Ë(Ë(
END
); \

93 
_Êg
 
	`__asm
 ("a3") = 0; \

94 
_s˙o
 
	`__asm
 ("r7") = 0xf0002; \

95 
__asm
 
	`__vﬁ©ûe
 ("swi 0x9f0002 @ sys_cacheflush" \

96 : "Ù" (
_beg
) \

97 : "0" (
_beg
), "r" (
_íd
), "r" (
_Êg
), "r" (
_s˙o
)); \

98 }

	)

104 #i‡
deföed
(
_MSC_VER
Ë&& !deföed(
ARM_NOIASM
)

105 
	#ARM_IASM
(
_ex¥
Ë
	`__ósfdmô
 (_ex¥)

	)

107 
	#ARM_IASM
(
_ex¥
)

	)

111 
	#ARM_SCALE
(
imm8
, 
eví_sˇÀ
Ë–((imm8Ë>> (eví_sˇÀ)Ë| ((imm8Ë<< (32 -Éví_sˇÀ)Ë)

	)

116 
	mARMREG_R0
 = 0,

117 
	mARMREG_R1
,

118 
	mARMREG_R2
,

119 
	mARMREG_R3
,

120 
	mARMREG_R4
,

121 
	mARMREG_R5
,

122 
	mARMREG_R6
,

123 
	mARMREG_R7
,

124 
	mARMREG_R8
,

125 
	mARMREG_R9
,

126 
	mARMREG_R10
,

127 
	mARMREG_R11
,

128 
	mARMREG_R12
,

129 
	mARMREG_R13
,

130 
	mARMREG_R14
,

131 
	mARMREG_R15
,

136 
	mARMREG_A1
 = 
ARMREG_R0
,

137 
	mARMREG_A2
 = 
ARMREG_R1
,

138 
	mARMREG_A3
 = 
ARMREG_R2
,

139 
	mARMREG_A4
 = 
ARMREG_R3
,

142 
	mARMREG_V1
 = 
ARMREG_R4
,

143 
	mARMREG_V2
 = 
ARMREG_R5
,

144 
	mARMREG_V3
 = 
ARMREG_R6
,

145 
	mARMREG_V4
 = 
ARMREG_R7
,

146 
	mARMREG_V5
 = 
ARMREG_R8
,

147 
	mARMREG_V6
 = 
ARMREG_R9
,

148 
	mARMREG_V7
 = 
ARMREG_R10
,

150 
	mARMREG_FP
 = 
ARMREG_R11
,

151 
	mARMREG_IP
 = 
ARMREG_R12
,

152 
	mARMREG_SP
 = 
ARMREG_R13
,

153 
	mARMREG_LR
 = 
ARMREG_R14
,

154 
	mARMREG_PC
 = 
ARMREG_R15
,

157 
	mARMREG_F0
 = 0,

158 
	mARMREG_F1
,

159 
	mARMREG_F2
,

160 
	mARMREG_F3
,

161 
	mARMREG_F4
,

162 
	mARMREG_F5
,

163 
	mARMREG_F6
,

164 
	mARMREG_F7
,

167 
	mARMREG_CR0
 = 0,

168 
	mARMREG_CR1
,

169 
	mARMREG_CR2
,

170 
	mARMREG_CR3
,

171 
	mARMREG_CR4
,

172 
	mARMREG_CR5
,

173 
	mARMREG_CR6
,

174 
	mARMREG_CR7
,

175 
	mARMREG_CR8
,

176 
	mARMREG_CR9
,

177 
	mARMREG_CR10
,

178 
	mARMREG_CR11
,

179 
	mARMREG_CR12
,

180 
	mARMREG_CR13
,

181 
	mARMREG_CR14
,

182 
	mARMREG_CR15
,

185 
	mARMREG_ACC0
 = 
ARMREG_CR0
,

187 
	mARMREG_MAX
 = 
ARMREG_R15
,

190 
	mARMREG_CPSR
 = 0,

191 
	mARMREG_SPSR
 = 1

192 } 
	tARMReg
;

195 
	mARM_FCONST_0_0
 = 8,

196 
	mARM_FCONST_1_0
,

197 
	mARM_FCONST_2_0
,

198 
	mARM_FCONST_3_0
,

199 
	mARM_FCONST_4_0
,

200 
	mARM_FCONST_5_0
,

201 
	mARM_FCONST_0_5
,

202 
	mARM_FCONST_10_0


203 } 
	tARMFPUC⁄°
;

206 
	#ARM_NUM_ARG_REGS
 4

	)

209 
	#ARM_NUM_VARIABLE_REGS
 7

	)

212 
	#ARM_NUM_GLOBAL_REGS
 5

	)

215 
	#ARM_ALL_ARG_REGS
 \

216 (1 << 
ARMREG_A1
Ë| (1 << 
ARMREG_A2
Ë| (1 << 
ARMREG_A3
Ë| (1 << 
ARMREG_A4
)

	)

220 
	mARMCOND_EQ
 = 0x0,

221 
	mARMCOND_NE
 = 0x1,

222 
	mARMCOND_CS
 = 0x2,

223 
	mARMCOND_HS
 = 
ARMCOND_CS
,

224 
	mARMCOND_CC
 = 0x3,

225 
	mARMCOND_LO
 = 
ARMCOND_CC
,

226 
	mARMCOND_MI
 = 0x4,

227 
	mARMCOND_PL
 = 0x5,

228 
	mARMCOND_VS
 = 0x6,

229 
	mARMCOND_VC
 = 0x7,

230 
	mARMCOND_HI
 = 0x8,

231 
	mARMCOND_LS
 = 0x9,

232 
	mARMCOND_GE
 = 0xA,

233 
	mARMCOND_LT
 = 0xB,

234 
	mARMCOND_GT
 = 0xC,

235 
	mARMCOND_LE
 = 0xD,

236 
	mARMCOND_AL
 = 0xE,

237 
	mARMCOND_NV
 = 0xF,

239 
	mARMCOND_SHIFT
 = 28

240 } 
	tARMC⁄d
;

242 
	#ARMCOND_MASK
 (
ARMCOND_NV
 << 
ARMCOND_SHIFT
)

	)

244 
	#ARM_DEF_COND
(
c⁄d
Ë(((c⁄dË& 0xFË<< 
ARMCOND_SHIFT
)

	)

249 
	mARMSHIFT_LSL
 = 0,

250 
	mARMSHIFT_LSR
 = 1,

251 
	mARMSHIFT_ASR
 = 2,

252 
	mARMSHIFT_ROR
 = 3,

254 
	mARMSHIFT_ASL
 = 
ARMSHIFT_LSL


256 } 
	tARMShi·Ty≥
;

260 
¨mw‹d_t
 
	mPSR_c
 : 8;

261 
¨mw‹d_t
 
	mPSR_x
 : 8;

262 
¨mw‹d_t
 
	mPSR_s
 : 8;

263 
¨mw‹d_t
 
	mPSR_f
 : 8;

264 } 
	tARMPSR
;

267 
	mARMOP_AND
 = 0x0,

268 
	mARMOP_EOR
 = 0x1,

269 
	mARMOP_SUB
 = 0x2,

270 
	mARMOP_RSB
 = 0x3,

271 
	mARMOP_ADD
 = 0x4,

272 
	mARMOP_ADC
 = 0x5,

273 
	mARMOP_SBC
 = 0x6,

274 
	mARMOP_RSC
 = 0x7,

275 
	mARMOP_TST
 = 0x8,

276 
	mARMOP_TEQ
 = 0x9,

277 
	mARMOP_CMP
 = 0xa,

278 
	mARMOP_CMN
 = 0xb,

279 
	mARMOP_ORR
 = 0xc,

280 
	mARMOP_MOV
 = 0xd,

281 
	mARMOP_BIC
 = 0xe,

282 
	mARMOP_MVN
 = 0xf,

287 
	mARMOP_STR
 = 0x0,

288 
	mARMOP_LDR
 = 0x1,

291 
	mARMOP_MUL
 = 0x0,

292 
	mARMOP_MLA
 = 0x1,

295 
	mARMOP_UMULL
 = 0x4,

296 
	mARMOP_UMLAL
 = 0x5,

297 
	mARMOP_SMULL
 = 0x6,

298 
	mARMOP_SMLAL
 = 0x7,

301 
	mARM_UP
 = 1,

302 
	mARM_DOWN
 = 0

303 } 
	tARMOpcode
;

306 
	mTHUMBOP_AND
 = 0,

307 
	mTHUMBOP_EOR
 = 1,

308 
	mTHUMBOP_LSL
 = 2,

309 
	mTHUMBOP_LSR
 = 3,

310 
	mTHUMBOP_ASR
 = 4,

311 
	mTHUMBOP_ADC
 = 5,

312 
	mTHUMBOP_SBC
 = 6,

313 
	mTHUMBOP_ROR
 = 7,

314 
	mTHUMBOP_TST
 = 8,

315 
	mTHUMBOP_NEG
 = 9,

316 
	mTHUMBOP_CMP
 = 10,

317 
	mTHUMBOP_CMN
 = 11,

318 
	mTHUMBOP_ORR
 = 12,

319 
	mTHUMBOP_MUL
 = 13,

320 
	mTHUMBOP_BIC
 = 14,

321 
	mTHUMBOP_MVN
 = 15,

322 
	mTHUMBOP_MOV
 = 16,

323 
	mTHUMBOP_CMPI
 = 17,

324 
	mTHUMBOP_ADD
 = 18,

325 
	mTHUMBOP_SUB
 = 19,

326 
	mTHUMBOP_CMPH
 = 19,

327 
	mTHUMBOP_MOVH
 = 20

328 } 
	tThumbOpcode
;

333 
¨mö°r_t
 
	micode
 : 28;

334 
¨mö°r_t
 
	mc⁄d
 : 4;

335 } 
	tARMIn°rGíîic
;

341 
¨mö°r_t
 
	moff£t
 : 24;

342 
¨mö°r_t
 
	mlök
 : 1;

343 
¨mö°r_t
 
	mèg
 : 3;

344 
¨mö°r_t
 
	mc⁄d
 : 4;

345 } 
	tARMIn°rBR
;

347 
	#ARM_BR_ID
 5

	)

348 
	#ARM_BR_MASK
 7 << 25

	)

349 
	#ARM_BR_TAG
 
ARM_BR_ID
 << 25

	)

351 
	#ARM_DEF_BR
(
offs
, 
l
, 
c⁄d
Ë((offsË| (÷Ë<< 24Ë| (
ARM_BR_TAG
Ë| (c⁄d << 
ARMCOND_SHIFT
))

	)

354 
	#ARM_B_COND
(
p
, 
c⁄d
, 
off£t
Ë
	`ARM_EMIT
’, 
	`ARM_DEF_BR
(off£t, 0, c⁄d))

	)

355 
	#ARM_B
(
p
, 
offs
Ë
	`ARM_B_COND
(’), 
ARMCOND_AL
, (offs))

	)

357 
	#ARM_BL_COND
(
p
, 
c⁄d
, 
off£t
Ë
	`ARM_EMIT
’, 
	`ARM_DEF_BR
(off£t, 1, c⁄d))

	)

358 
	#ARM_BL
(
p
, 
offs
Ë
	`ARM_BL_COND
(’), 
ARMCOND_AL
, (offs))

	)

361 
	#ARM_BX_COND
(
p
, 
c⁄d
, 
ªg
Ë
	`ARM_EMIT
’, ((c⁄d << 
ARMCOND_SHIFT
Ë| (ªgË| 0x12FFF10))

	)

362 
	#ARM_BX
(
p
, 
ªg
Ë
	`ARM_BX_COND
(’), 
ARMCOND_AL
, (ªg))

	)

365 
	#ARM_BLX_COND
(
p
, 
c⁄d
, 
ªg
Ë
	`ARM_EMIT
’, ((c⁄d << 
ARMCOND_SHIFT
Ë| (ªgË| 0x12FFF30))

	)

366 
	#ARM_BLX
(
p
, 
ªg
Ë
	`ARM_BLX_COND
(’), 
ARMCOND_AL
, (ªg))

	)

372 
¨mö°r_t
 
	mimm
 : 8;

373 
¨mö°r_t
 
	mrŸ
 : 4;

374 } 
	tARMDPI_›2_imm
;

377 
¨mö°r_t
 
	mrm
 : 4;

378 
¨mö°r_t
 
	mèg
 : 1;

379 
¨mö°r_t
 
	mty≥
 : 2;

380 } 
	tARMDPI_›2_ªg_shi·
;

385 
ARMDPI_›2_ªg_shi·
 
	mr2
;

387 
¨mö°r_t
 
	m_dummy_r2
 : 7;

388 
¨mö°r_t
 
	mshi·
 : 5;

389 } 
	mimm
;

390 } 
	tARMDPI_›2_ªg_imm
;

394 
ARMDPI_›2_ªg_shi·
 
	mr2
;

396 
¨mö°r_t
 
	m_dummy_r2
 : 7;

397 
¨mö°r_t
 
	m∑d
 : 1;

398 
¨mö°r_t
 
	mrs
 : 4;

399 } 
	mªg
;

400 } 
	tARMDPI_›2_ªg_ªg
;

404 
ARMDPI_›2_imm
 
	m›2_imm
;

406 
ARMDPI_›2_ªg_shi·
 
	m›2_ªg
;

407 
ARMDPI_›2_ªg_imm
 
	m›2_ªg_imm
;

408 
ARMDPI_›2_ªg_ªg
 
	m›2_ªg_ªg
;

411 
¨mö°r_t
 
	m›2
 : 12;

412 
¨mö°r_t
 
	mrd
 : 4;

413 
¨mö°r_t
 
	m∫
 : 4;

414 
¨mö°r_t
 
	ms
 : 1;

415 
¨mö°r_t
 
	m›code
 : 4;

416 
¨mö°r_t
 
	mty≥
 : 1;

417 
¨mö°r_t
 
	mèg
 : 2;

418 
¨mö°r_t
 
	mc⁄d
 : 4;

419 } 
	mÆl
;

420 } 
	tARMIn°rDPI
;

422 
	#ARM_DPI_ID
 0

	)

423 
	#ARM_DPI_MASK
 3 << 26

	)

424 
	#ARM_DPI_TAG
 
ARM_DPI_ID
 << 26

	)

426 
	#ARM_DEF_DPI_IMM_COND
(
imm8
, 
rŸ
, 
rd
, 
∫
, 
s
, 
›
, 
c⁄d
) \

427 ((
imm8
) & 0xFF) | \

428 (((
rŸ
) & 0xF) << 8) | \

429 ((
rd
) << 12) | \

430 ((
∫
) << 16) | \

431 ((
s
) << 20) | \

432 ((
›
) << 21) | \

434 (
ARM_DPI_TAG
) | \

435 
	`ARM_DEF_COND
(
c⁄d
)

	)

438 
	#ARM_DEF_DPI_IMM
(
imm8
, 
rŸ
, 
rd
, 
∫
, 
s
, 
›
) \

439 
	`ARM_DEF_DPI_IMM_COND
(
imm8
, 
rŸ
, 
rd
, 
∫
, 
s
, 
›
, 
ARMCOND_AL
)

	)

442 
	#ARM_DPIOP_REG_IMM8ROT_COND
(
p
, 
›
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
) \

443 
	`ARM_EMIT
(
p
, 
	`ARM_DEF_DPI_IMM_COND
((
imm8
), ((
rŸ
Ë>> 1), (
rd
), (
∫
), 0, (
›
), 
c⁄d
))

	)

444 
	#ARM_DPIOP_S_REG_IMM8ROT_COND
(
p
, 
›
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
) \

445 
	`ARM_EMIT
(
p
, 
	`ARM_DEF_DPI_IMM_COND
((
imm8
), ((
rŸ
Ë>> 1), (
rd
), (
∫
), 1, (
›
), 
c⁄d
))

	)

448 
	#ARM_IASM_DPIOP_REG_IMM8ROT_COND
(
p
, 
›
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
) \

449 
	`ARM_IASM
(
	`ARM_DEF_DPI_IMM_COND
((
imm8
), ((
rŸ
Ë>> 1), (
rd
), (
∫
), 0, (
›
), 
c⁄d
))

	)

450 
	#ARM_IASM_DPIOP_S_REG_IMM8ROT_COND
(
p
, 
›
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
) \

451 
	`ARM_IASM
(
	`ARM_DEF_DPI_IMM_COND
((
imm8
), ((
rŸ
Ë>> 1), (
rd
), (
∫
), 1, (
›
), 
c⁄d
))

	)

455 
	#ARM_DEF_DPI_REG_IMMSHIFT_COND
(
rm
, 
shi·_ty≥
, 
imm_shi·
, 
rd
, 
∫
, 
s
, 
›
, 
c⁄d
) \

456 (
rm
) | \

457 ((
shi·_ty≥
 & 3) << 5) | \

458 (((
imm_shi·
) & 0x1F) << 7) | \

459 ((
rd
) << 12) | \

460 ((
∫
) << 16) | \

461 ((
s
) << 20) | \

462 ((
›
) << 21) | \

463 (
ARM_DPI_TAG
) | \

464 
	`ARM_DEF_COND
(
c⁄d
)

	)

467 
	#ARM_DPIOP_REG_IMMSHIFT_COND
(
p
, 
›
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
) \

468 
	`ARM_EMIT
(
p
, 
	`ARM_DEF_DPI_REG_IMMSHIFT_COND
((
rm
), 
shi·_ty≥
, 
imm_shi·
, (
rd
), (
∫
), 0, (
›
), 
c⁄d
))

	)

470 
	#ARM_DPIOP_S_REG_IMMSHIFT_COND
(
p
, 
›
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
) \

471 
	`ARM_EMIT
(
p
, 
	`ARM_DEF_DPI_REG_IMMSHIFT_COND
((
rm
), 
shi·_ty≥
, 
imm_shi·
, (
rd
), (
∫
), 1, (
›
), 
c⁄d
))

	)

473 
	#ARM_DPIOP_REG_REG_COND
(
p
, 
›
, 
rd
, 
∫
, 
rm
, 
c⁄d
) \

474 
	`ARM_EMIT
(
p
, 
	`ARM_DEF_DPI_REG_IMMSHIFT_COND
((
rm
), 
ARMSHIFT_LSL
, 0, (
rd
), (
∫
), 0, (
›
), 
c⁄d
))

	)

476 
	#ARM_DPIOP_S_REG_REG_COND
(
p
, 
›
, 
rd
, 
∫
, 
rm
, 
c⁄d
) \

477 
	`ARM_EMIT
(
p
, 
	`ARM_DEF_DPI_REG_IMMSHIFT_COND
((
rm
), 
ARMSHIFT_LSL
, 0, (
rd
), (
∫
), 1, (
›
), 
c⁄d
))

	)

480 
	#ARM_IASM_DPIOP_REG_IMMSHIFT_COND
(
p
, 
›
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
) \

481 
	`ARM_IASM
(
	`ARM_DEF_DPI_REG_IMMSHIFT_COND
((
rm
), 
shi·_ty≥
, 
imm_shi·
, (
rd
), (
∫
), 0, (
›
), 
c⁄d
))

	)

483 
	#ARM_IASM_DPIOP_S_REG_IMMSHIFT_COND
(
p
, 
›
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
) \

484 
	`ARM_IASM
(
	`ARM_DEF_DPI_REG_IMMSHIFT_COND
((
rm
), 
shi·_ty≥
, 
imm_shi·
, (
rd
), (
∫
), 1, (
›
), 
c⁄d
))

	)

486 
	#ARM_IASM_DPIOP_REG_REG_COND
(
p
, 
›
, 
rd
, 
∫
, 
rm
, 
c⁄d
) \

487 
	`ARM_IASM
(
	`ARM_DEF_DPI_REG_IMMSHIFT_COND
((
rm
), 
ARMSHIFT_LSL
, 0, (
rd
), (
∫
), 0, (
›
), 
c⁄d
))

	)

489 
	#ARM_IASM_DPIOP_S_REG_REG_COND
(
p
, 
›
, 
rd
, 
∫
, 
rm
, 
c⁄d
) \

490 
	`ARM_IASM_EMIT
(
	`ARM_DEF_DPI_REG_IMMSHIFT_COND
((
rm
), 
ARMSHIFT_LSL
, 0, (
rd
), (
∫
), 1, (
›
), 
c⁄d
))

	)

494 
	#ARM_DEF_DPI_REG_REGSHIFT_COND
(
rm
, 
shi·_ty≥
, 
rs
, 
rd
, 
∫
, 
s
, 
›
, 
c⁄d
) \

495 (
rm
) | \

497 ((
shi·_ty≥
 & 3) << 5) | \

498 ((
rs
) << 8) | \

499 ((
rd
) << 12) | \

500 ((
∫
) << 16) | \

501 ((
s
) << 20) | \

502 ((
›
) << 21) | \

503 (
ARM_DPI_TAG
) | \

504 
	`ARM_DEF_COND
(
c⁄d
)

	)

507 
	#ARM_DPIOP_REG_REGSHIFT_COND
(
p
, 
›
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
) \

508 
	`ARM_EMIT
(
p
, 
	`ARM_DEF_DPI_REG_REGSHIFT_COND
((
rm
), 
shi·_ty≥
, (
rs
), (
rd
), (
∫
), 0, (
›
), 
c⁄d
))

	)

510 
	#ARM_DPIOP_S_REG_REGSHIFT_COND
(
p
, 
›
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
) \

511 
	`ARM_EMIT
(
p
, 
	`ARM_DEF_DPI_REG_REGSHIFT_COND
((
rm
), 
shi·_ty≥
, (
rs
), (
rd
), (
∫
), 1, (
›
), 
c⁄d
))

	)

514 
	#ARM_IASM_DPIOP_REG_REGSHIFT_COND
(
p
, 
›
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
) \

515 
	`ARM_IASM
(
	`ARM_DEF_DPI_REG_REGSHIFT_COND
((
rm
), 
shi·_ty≥
, (
rs
), (
rd
), (
∫
), 0, (
›
), 
c⁄d
))

	)

517 
	#ARM_IASM_DPIOP_S_REG_REGSHIFT_COND
(
p
, 
›
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
) \

518 
	`ARM_IASM
(
	`ARM_DEF_DPI_REG_REGSHIFT_COND
((
rm
), 
shi·_ty≥
, (
rs
), (
rd
), (
∫
), 1, (
›
), 
c⁄d
))

	)

524 
¨mö°r_t
 
	mªg_li°
 : 16;

525 
¨mö°r_t
 
	m∫
 : 4;

526 
¨mö°r_t
 
	mls
 : 1;

527 
¨mö°r_t
 
	mwb
 : 1;

528 
¨mö°r_t
 
	ms
 : 1;

529 
¨mö°r_t
 
	mu
 : 1;

530 
¨mö°r_t
 
	mp
 : 1;

531 
¨mö°r_t
 
	mèg
 : 3;

532 
¨mö°r_t
 
	mc⁄d
 : 4;

533 } 
	tARMIn°rMRT
;

535 
	#ARM_MRT_ID
 4

	)

536 
	#ARM_MRT_MASK
 7 << 25

	)

537 
	#ARM_MRT_TAG
 
ARM_MRT_ID
 << 25

	)

539 
	#ARM_DEF_MRT
(
ªgs
, 
∫
, 
l
, 
w
, 
s
, 
u
, 
p
, 
c⁄d
) \

540 (
ªgs
) | \

541 (
∫
 << 16) | \

542 (
l
 << 20) | \

543 (
w
 << 21) | \

544 (
s
 << 22) | \

545 (
u
 << 23) | \

546 (
p
 << 24) | \

547 (
ARM_MRT_TAG
) | \

548 
	`ARM_DEF_COND
(
c⁄d
)

	)

550 
	#ARM_STMDB
(
p
, 
rba£
, 
ªgs
Ë
	`ARM_EMIT
’, 
	`ARM_DEF_MRT
‘egs,Ñba£, 0, 0, 0, 0, 1, 
ARMCOND_AL
))

	)

551 
	#ARM_LDMDB
(
p
, 
rba£
, 
ªgs
Ë
	`ARM_EMIT
’, 
	`ARM_DEF_MRT
‘egs,Ñba£, 1, 0, 0, 0, 1, 
ARMCOND_AL
))

	)

552 
	#ARM_STMDB_WB
(
p
, 
rba£
, 
ªgs
Ë
	`ARM_EMIT
’, 
	`ARM_DEF_MRT
‘egs,Ñba£, 0, 1, 0, 0, 1, 
ARMCOND_AL
))

	)

553 
	#ARM_LDMIA_WB
(
p
, 
rba£
, 
ªgs
Ë
	`ARM_EMIT
’, 
	`ARM_DEF_MRT
‘egs,Ñba£, 1, 1, 0, 1, 0, 
ARMCOND_AL
))

	)

554 
	#ARM_LDMIA
(
p
, 
rba£
, 
ªgs
Ë
	`ARM_EMIT
’, 
	`ARM_DEF_MRT
‘egs,Ñba£, 1, 0, 0, 1, 0, 
ARMCOND_AL
))

	)

555 
	#ARM_STMIA
(
p
, 
rba£
, 
ªgs
Ë
	`ARM_EMIT
’, 
	`ARM_DEF_MRT
‘egs,Ñba£, 0, 0, 0, 1, 0, 
ARMCOND_AL
))

	)

556 
	#ARM_STMIA_WB
(
p
, 
rba£
, 
ªgs
Ë
	`ARM_EMIT
’, 
	`ARM_DEF_MRT
‘egs,Ñba£, 0, 1, 0, 1, 0, 
ARMCOND_AL
))

	)

558 
	#ARM_LDMIA_WB_PC_S
(
p
, 
rba£
, 
ªgs
Ë
	`ARM_EMIT
’, 
	`ARM_DEF_MRT
‘egs,Ñba£, 1, 1, 1, 1, 0, 
ARMCOND_AL
))

	)

566 
	#ARM_PUSH
(
p
, 
ªgs
Ë
	`ARM_EMIT
’, 
	`ARM_DEF_MRT
‘egs, 
ARMREG_SP
, 0, 1, 0, 0, 1, 
ARMCOND_AL
))

	)

567 
	#ARM_IASM_PUSH
(
ªgs
Ë
	`ARM_IASM
(
	`ARM_DEF_MRT
‘egs, 
ARMREG_SP
, 0, 1, 0, 0, 1, 
ARMCOND_AL
))

	)

570 
	#ARM_POP
(
p
, 
ªgs
Ë
	`ARM_EMIT
’, 
	`ARM_DEF_MRT
‘egs, 
ARMREG_SP
, 1, 1, 0, 1, 0, 
ARMCOND_AL
))

	)

571 
	#ARM_IASM_POP
(
ªgs
Ë
	`ARM_IASM_EMIT
(
	`ARM_DEF_MRT
‘egs, 
ARMREG_SP
, 1, 1, 0, 1, 0, 
ARMCOND_AL
))

	)

574 
	#ARM_POP_NWB
(
p
, 
ªgs
Ë
	`ARM_EMIT
’, 
	`ARM_DEF_MRT
‘egs, 
ARMREG_SP
, 1, 0, 0, 1, 0, 
ARMCOND_AL
))

	)

575 
	#ARM_IASM_POP_NWB
(
ªgs
Ë
	`ARM_IASM_EMIT
(
	`ARM_DEF_MRT
‘egs, 
ARMREG_SP
, 1, 0, 0, 1, 0, 
ARMCOND_AL
))

	)

577 
	#ARM_PUSH1
(
p
, 
r1
Ë
	`ARM_PUSH
’, (1 <<Ñ1))

	)

578 
	#ARM_PUSH2
(
p
, 
r1
, 
r2
Ë
	`ARM_PUSH
’, (1 <<Ñ1Ë| (1 <<Ñ2))

	)

579 
	#ARM_PUSH3
(
p
, 
r1
, 
r2
, 
r3
Ë
	`ARM_PUSH
’, (1 <<Ñ1Ë| (1 <<Ñ2Ë| (1 <<Ñ3))

	)

580 
	#ARM_PUSH4
(
p
, 
r1
, 
r2
, 
r3
, 
r4
Ë
	`ARM_PUSH
’, (1 <<Ñ1Ë| (1 <<Ñ2Ë| (1 <<Ñ3Ë| (1 <<Ñ4))

	)

581 
	#ARM_PUSH5
(
p
, 
r1
, 
r2
, 
r3
, 
r4
, 
r5
Ë
	`ARM_PUSH
’, (1 <<Ñ1Ë| (1 <<Ñ2Ë| (1 <<Ñ3Ë| (1 <<Ñ4Ë| (1 <<Ñ5))

	)

582 
	#ARM_PUSH6
(
p
, 
r1
, 
r2
, 
r3
, 
r4
, 
r5
, 
r6
Ë
	`ARM_PUSH
’, (1 <<Ñ1Ë| (1 <<Ñ2Ë| (1 <<Ñ3Ë| (1 <<Ñ4Ë| (1 <<Ñ5Ë| (1 <<Ñ6))

	)

583 
	#ARM_PUSH7
(
p
, 
r1
, 
r2
, 
r3
, 
r4
, 
r5
, 
r6
, 
r7
Ë
	`ARM_PUSH
’, (1 <<Ñ1Ë| (1 <<Ñ2Ë| (1 <<Ñ3Ë| (1 <<Ñ4Ë| (1 <<Ñ5Ë| (1 <<Ñ6Ë| (1 <<Ñ7))

	)

584 
	#ARM_PUSH8
(
p
, 
r1
, 
r2
, 
r3
, 
r4
, 
r5
, 
r6
, 
r7
, 
r8
Ë
	`ARM_PUSH
’, (1 <<Ñ1Ë| (1 <<Ñ2Ë| (1 <<Ñ3Ë| (1 <<Ñ4Ë| (1 <<Ñ5Ë| (1 <<Ñ6Ë| (1 <<Ñ7Ë| (1 <<Ñ8))

	)

585 
	#ARM_PUSH9
(
p
, 
r1
, 
r2
, 
r3
, 
r4
, 
r5
, 
r6
, 
r7
, 
r8
, 
r9
Ë
	`ARM_PUSH
’, (1 <<Ñ1Ë| (1 <<Ñ2Ë| (1 <<Ñ3Ë| (1 <<Ñ4Ë| (1 <<Ñ5Ë| (1 <<Ñ6Ë| (1 <<Ñ7Ë| (1 <<Ñ8Ë| (1 <<Ñ9))

	)

587 
	#ARM_POP9
(
p
, 
r1
, 
r2
, 
r3
, 
r4
, 
r5
, 
r6
, 
r7
, 
r8
, 
r9
Ë
	`ARM_POP
’, (1 <<Ñ1Ë| (1 <<Ñ2Ë| (1 <<Ñ3Ë| (1 <<Ñ4Ë| (1 <<Ñ5Ë| (1 <<Ñ6Ë| (1 <<Ñ7Ë| (1 <<Ñ8Ë| (1 <<Ñ9))

	)

588 
	#ARM_POP8
(
p
, 
r1
, 
r2
, 
r3
, 
r4
, 
r5
, 
r6
, 
r7
, 
r8
Ë
	`ARM_POP
’, (1 <<Ñ1Ë| (1 <<Ñ2Ë| (1 <<Ñ3Ë| (1 <<Ñ4Ë| (1 <<Ñ5Ë| (1 <<Ñ6Ë| (1 <<Ñ7Ë| (1 <<Ñ8))

	)

589 
	#ARM_POP7
(
p
, 
r1
, 
r2
, 
r3
, 
r4
, 
r5
, 
r6
, 
r7
Ë
	`ARM_POP
’, (1 <<Ñ1Ë| (1 <<Ñ2Ë| (1 <<Ñ3Ë| (1 <<Ñ4Ë| (1 <<Ñ5Ë| (1 <<Ñ6Ë| (1 <<Ñ7))

	)

590 
	#ARM_POP6
(
p
, 
r1
, 
r2
, 
r3
, 
r4
, 
r5
, 
r6
Ë
	`ARM_POP
’, (1 <<Ñ1Ë| (1 <<Ñ2Ë| (1 <<Ñ3Ë| (1 <<Ñ4Ë| (1 <<Ñ5Ë| (1 <<Ñ6))

	)

591 
	#ARM_POP5
(
p
, 
r1
, 
r2
, 
r3
, 
r4
, 
r5
Ë
	`ARM_POP
’, (1 <<Ñ1Ë| (1 <<Ñ2Ë| (1 <<Ñ3Ë| (1 <<Ñ4Ë| (1 <<Ñ5))

	)

592 
	#ARM_POP4
(
p
, 
r1
, 
r2
, 
r3
, 
r4
Ë
	`ARM_POP
’, (1 <<Ñ1Ë| (1 <<Ñ2Ë| (1 <<Ñ3Ë| (1 <<Ñ4))

	)

593 
	#ARM_POP3
(
p
, 
r1
, 
r2
, 
r3
Ë
	`ARM_POP
’, (1 <<Ñ1Ë| (1 <<Ñ2Ë| (1 <<Ñ3))

	)

594 
	#ARM_POP2
(
p
, 
r1
, 
r2
Ë
	`ARM_POP
’, (1 <<Ñ1Ë| (1 <<Ñ2))

	)

595 
	#ARM_POP1
(
p
, 
r1
Ë
	`ARM_POP
’, (1 <<Ñ1))

	)

600 
¨mö°r_t
 
	mrm
 : 4;

601 
¨mö°r_t
 
	mèg2
 : 4;

602 
¨mö°r_t
 
	mrs
 : 4;

603 
¨mö°r_t
 
	m∫
 : 4;

604 
¨mö°r_t
 
	mrd
 : 4;

605 
¨mö°r_t
 
	ms
 : 1;

606 
¨mö°r_t
 
	m›code
 : 3;

607 
¨mö°r_t
 
	mèg
 : 4;

608 
¨mö°r_t
 
	mc⁄d
 : 4;

609 } 
	tARMIn°rMul
;

611 
	#ARM_MUL_ID
 0

	)

612 
	#ARM_MUL_ID2
 9

	)

613 
	#ARM_MUL_MASK
 ((0xF << 24Ë| (0xF << 4))

	)

614 
	#ARM_MUL_TAG
 ((
ARM_MUL_ID
 << 24Ë| (
ARM_MUL_ID2
 << 4))

	)

616 
	#ARM_DEF_MUL_COND
(
›
, 
rd
, 
rm
, 
rs
, 
∫
, 
s
, 
c⁄d
) \

617 (
rm
) | \

618 ((
rs
) << 8) | \

619 ((
∫
) << 12) | \

620 ((
rd
) << 16) | \

621 (((
s
) & 1) << 20) | \

622 (((
›
) & 7) << 21) | \

623 
ARM_MUL_TAG
 | \

624 
	`ARM_DEF_COND
(
c⁄d
)

	)

627 
	#ARM_MUL_COND
(
p
, 
rd
, 
rm
, 
rs
, 
c⁄d
) \

628 
	`ARM_EMIT
(
p
, 
	`ARM_DEF_MUL_COND
(
ARMOP_MUL
, 
rd
, 
rm
, 
rs
, 0, 0, 
c⁄d
))

	)

629 
	#ARM_MUL
(
p
, 
rd
, 
rm
, 
rs
) \

630 
	`ARM_MUL_COND
(
p
, 
rd
, 
rm
, 
rs
, 
ARMCOND_AL
)

	)

631 
	#ARM_MULS_COND
(
p
, 
rd
, 
rm
, 
rs
, 
c⁄d
) \

632 
	`ARM_EMIT
(
p
, 
	`ARM_DEF_MUL_COND
(
ARMOP_MUL
, 
rd
, 
rm
, 
rs
, 0, 1, 
c⁄d
))

	)

633 
	#ARM_MULS
(
p
, 
rd
, 
rm
, 
rs
) \

634 
	`ARM_MULS_COND
(
p
, 
rd
, 
rm
, 
rs
, 
ARMCOND_AL
)

	)

635 
	#ARM_MUL_REG_REG
(
p
, 
rd
, 
rm
, 
rs
Ë
	`ARM_MUL
’,Ñd,Ñm,Ñs)

	)

636 
	#ARM_MULS_REG_REG
(
p
, 
rd
, 
rm
, 
rs
Ë
	`ARM_MULS
’,Ñd,Ñm,Ñs)

	)

639 
	#ARM_IASM_MUL_COND
(
rd
, 
rm
, 
rs
, 
c⁄d
) \

640 
	`ARM_IASM_EMIT
(
	`ARM_DEF_MUL_COND
(
ARMOP_MUL
, 
rd
, 
rm
, 
rs
, 0, 0, 
c⁄d
))

	)

641 
	#ARM_IASM_MUL
(
rd
, 
rm
, 
rs
) \

642 
	`ARM_IASM_MUL_COND
(
rd
, 
rm
, 
rs
, 
ARMCOND_AL
)

	)

643 
	#ARM_IASM_MULS_COND
(
rd
, 
rm
, 
rs
, 
c⁄d
) \

644 
	`ARM_IASM_EMIT
(
	`ARM_DEF_MUL_COND
(
ARMOP_MUL
, 
rd
, 
rm
, 
rs
, 0, 1, 
c⁄d
))

	)

645 
	#ARM_IASM_MULS
(
rd
, 
rm
, 
rs
) \

646 
	`ARM_IASM_MULS_COND
(
rd
, 
rm
, 
rs
, 
ARMCOND_AL
)

	)

650 
	#ARM_MLA_COND
(
p
, 
rd
, 
rm
, 
rs
, 
∫
, 
c⁄d
) \

651 
	`ARM_EMIT
(
p
, 
	`ARM_DEF_MUL_COND
(
ARMOP_MLA
, 
rd
, 
rm
, 
rs
, 
∫
, 0, 
c⁄d
))

	)

652 
	#ARM_MLA
(
p
, 
rd
, 
rm
, 
rs
, 
∫
) \

653 
	`ARM_MLA_COND
(
p
, 
rd
, 
rm
, 
rs
, 
∫
, 
ARMCOND_AL
)

	)

654 
	#ARM_MLAS_COND
(
p
, 
rd
, 
rm
, 
rs
, 
∫
, 
c⁄d
) \

655 
	`ARM_EMIT
(
p
, 
	`ARM_DEF_MUL_COND
(
ARMOP_MLA
, 
rd
, 
rm
, 
rs
, 
∫
, 1, 
c⁄d
))

	)

656 
	#ARM_MLAS
(
p
, 
rd
, 
rm
, 
rs
, 
∫
) \

657 
	`ARM_MLAS_COND
(
p
, 
rd
, 
rm
, 
rs
, 
∫
, 
ARMCOND_AL
)

	)

660 
	#ARM_IASM_MLA_COND
(
rd
, 
rm
, 
rs
, 
∫
, 
c⁄d
) \

661 
	`ARM_IASM_EMIT
(
	`ARM_DEF_MUL_COND
(
ARMOP_MLA
, 
rd
, 
rm
, 
rs
, 
∫
, 0, 
c⁄d
))

	)

662 
	#ARM_IASM_MLA
(
rd
, 
rm
, 
rs
, 
∫
) \

663 
	`ARM_IASM_MLA_COND
(
rd
, 
rm
, 
rs
, 
∫
, 
ARMCOND_AL
)

	)

664 
	#ARM_IASM_MLAS_COND
(
rd
, 
rm
, 
rs
, 
∫
, 
c⁄d
) \

665 
	`ARM_IASM_EMIT
(
	`ARM_DEF_MUL_COND
(
ARMOP_MLA
, 
rd
, 
rm
, 
rs
, 
∫
, 1, 
c⁄d
))

	)

666 
	#ARM_IASM_MLAS
(
rd
, 
rm
, 
rs
, 
∫
) \

667 
	`ARM_IASM_MLAS_COND
(
rd
, 
rm
, 
rs
, 
∫
, 
ARMCOND_AL
)

	)

670 
	#ARM_SMULL_COND
(
p
, 
∫
, 
rd
, 
rm
, 
rs
, 
c⁄d
) \

671 
	`ARM_EMIT
(
p
, 
	`ARM_DEF_MUL_COND
(
ARMOP_SMULL
, 
rd
, 
rm
, 
rs
, 
∫
, 0, 
c⁄d
))

	)

672 
	#ARM_SMULL
(
p
, 
∫
, 
rd
, 
rm
, 
rs
) \

673 
	`ARM_SMULL_COND
(
p
, 
∫
, 
rd
, 
rm
, 
rs
, 
ARMCOND_AL
)

	)

675 
	#ARM_SMLAL_COND
(
p
, 
∫
, 
rd
, 
rm
, 
rs
, 
c⁄d
) \

676 
	`ARM_EMIT
(
p
, 
	`ARM_DEF_MUL_COND
(
ARMOP_SMLAL
, 
rd
, 
rm
, 
rs
, 
∫
, 0, 
c⁄d
))

	)

677 
	#ARM_SMLAL
(
p
, 
∫
, 
rd
, 
rm
, 
rs
) \

678 
	`ARM_SMLAL_COND
(
p
, 
∫
, 
rd
, 
rm
, 
rs
, 
ARMCOND_AL
)

	)

680 
	#ARM_UMULL_COND
(
p
, 
∫
, 
rd
, 
rm
, 
rs
, 
c⁄d
) \

681 
	`ARM_EMIT
(
p
, 
	`ARM_DEF_MUL_COND
(
ARMOP_UMULL
, 
rd
, 
rm
, 
rs
, 
∫
, 0, 
c⁄d
))

	)

682 
	#ARM_UMULL
(
p
, 
∫
, 
rd
, 
rm
, 
rs
) \

683 
	`ARM_UMULL_COND
(
p
, 
∫
, 
rd
, 
rm
, 
rs
, 
ARMCOND_AL
)

	)

685 
	#ARM_UMLAL_COND
(
p
, 
∫
, 
rd
, 
rm
, 
rs
, 
c⁄d
) \

686 
	`ARM_EMIT
(
p
, 
	`ARM_DEF_MUL_COND
(
ARMOP_UMLAL
, 
rd
, 
rm
, 
rs
, 
∫
, 0, 
c⁄d
))

	)

687 
	#ARM_UMLAL
(
p
, 
∫
, 
rd
, 
rm
, 
rs
) \

688 
	`ARM_UMLAL_COND
(
p
, 
∫
, 
rd
, 
rm
, 
rs
, 
ARMCOND_AL
)

	)

691 
	#ARM_SMULLS_COND
(
p
, 
∫
, 
rd
, 
rm
, 
rs
, 
c⁄d
) \

692 
	`ARM_EMIT
(
p
, 
	`ARM_DEF_MUL_COND
(
ARMOP_SMULL
, 
rd
, 
rm
, 
rs
, 
∫
, 1, 
c⁄d
))

	)

693 
	#ARM_SMULLS
(
p
, 
∫
, 
rd
, 
rm
, 
rs
) \

694 
	`ARM_SMULLS_COND
(
p
, 
∫
, 
rd
, 
rm
, 
rs
, 
ARMCOND_AL
)

	)

696 
	#ARM_SMLALS_COND
(
p
, 
∫
, 
rd
, 
rm
, 
rs
, 
c⁄d
) \

697 
	`ARM_EMIT
(
p
, 
	`ARM_DEF_MUL_COND
(
ARMOP_SMLAL
, 
rd
, 
rm
, 
rs
, 
∫
, 1, 
c⁄d
))

	)

698 
	#ARM_SMLALS
(
p
, 
∫
, 
rd
, 
rm
, 
rs
) \

699 
	`ARM_SMLALS_COND
(
p
, 
∫
, 
rd
, 
rm
, 
rs
, 
ARMCOND_AL
)

	)

701 
	#ARM_UMULLS_COND
(
p
, 
∫
, 
rd
, 
rm
, 
rs
, 
c⁄d
) \

702 
	`ARM_EMIT
(
p
, 
	`ARM_DEF_MUL_COND
(
ARMOP_UMULL
, 
rd
, 
rm
, 
rs
, 
∫
, 1, 
c⁄d
))

	)

703 
	#ARM_UMULLS
(
p
, 
∫
, 
rd
, 
rm
, 
rs
) \

704 
	`ARM_UMULLS_COND
(
p
, 
∫
, 
rd
, 
rm
, 
rs
, 
ARMCOND_AL
)

	)

706 
	#ARM_UMLALS_COND
(
p
, 
∫
, 
rd
, 
rm
, 
rs
, 
c⁄d
) \

707 
	`ARM_EMIT
(
p
, 
	`ARM_DEF_MUL_COND
(
ARMOP_UMLAL
, 
rd
, 
rm
, 
rs
, 
∫
, 1, 
c⁄d
))

	)

708 
	#ARM_UMLALS
(
p
, 
∫
, 
rd
, 
rm
, 
rs
) \

709 
	`ARM_UMLALS_COND
(
p
, 
∫
, 
rd
, 
rm
, 
rs
, 
ARMCOND_AL
)

	)

715 
ARMDPI_›2_ªg_imm
 
	m›2_ªg_imm
;

717 
¨mö°r_t
 
	m›2_imm
 : 12;

718 
¨mö°r_t
 
	mrd
 : 4;

719 
¨mö°r_t
 
	m∫
 : 4;

720 
¨mö°r_t
 
	mls
 : 1;

721 
¨mö°r_t
 
	mwb
 : 1;

722 
¨mö°r_t
 
	mb
 : 1;

723 
¨mö°r_t
 
	mu
 : 1;

724 
¨mö°r_t
 
	mp
 : 1;

725 
¨mö°r_t
 
	mty≥
 : 1;

726 
¨mö°r_t
 
	mèg
 : 2;

727 
¨mö°r_t
 
	mc⁄d
 : 4;

728 } 
	mÆl
;

729 } 
	tARMIn°rWX„r
;

731 
	#ARM_WXFER_ID
 1

	)

732 
	#ARM_WXFER_MASK
 3 << 26

	)

733 
	#ARM_WXFER_TAG
 
ARM_WXFER_ID
 << 26

	)

743 
	#ARM_DEF_WXFER_IMM
(
imm12
, 
rd
, 
∫
, 
ls
, 
wb
, 
b
, 
p
, 
c⁄d
) \

744 (((()(
imm12
)) < 0) ? -(()(imm12)) : (imm12)) | \

745 ((
rd
) << 12) | \

746 ((
∫
) << 16) | \

747 ((
ls
) << 20) | \

748 ((
wb
) << 21) | \

749 ((
b
) << 22) | \

750 ((()(
imm12
) >= 0) << 23) | \

751 ((
p
) << 24) | \

752 
ARM_WXFER_TAG
 | \

753 
	`ARM_DEF_COND
(
c⁄d
)

	)

755 
	#ARM_WXFER_MAX_OFFS
 0xFFF

	)

758 
	#ARM_EMIT_WXFER_IMM
(
±r
, 
imm12
, 
rd
, 
∫
, 
ls
, 
wb
, 
b
, 
p
, 
c⁄d
) \

760 
_imm12
 = ()(
imm12
Ë< -
ARM_WXFER_MAX_OFFS
 \

761 ? -
ARM_WXFER_MAX_OFFS
 \

762 : ()(
imm12
Ë> 
ARM_WXFER_MAX_OFFS
 \

763 ? 
ARM_WXFER_MAX_OFFS
 \

764 : ()(
imm12
); \

765 
	`ARM_EMIT
((
±r
), \

766 
	`ARM_DEF_WXFER_IMM
(
_imm12
, (
rd
), (
∫
), (
ls
), (
wb
), (
b
), (
p
), (
c⁄d
))); \

767 } 0)

	)

772 
	#ARM_LDR_IMM_POST_COND
(
p
, 
rd
, 
∫
, 
imm
, 
c⁄d
) \

773 
	`ARM_EMIT
(
p
, 
	`ARM_DEF_WXFER_IMM
(
imm
, 
rd
, 
∫
, 
ARMOP_LDR
, 0, 0, 0, 
c⁄d
))

	)

775 
	#ARM_LDR_IMM_POST
(
p
, 
rd
, 
∫
, 
imm
Ë
	`ARM_LDR_IMM_POST_COND
’,Ñd,Ñn, imm, 
ARMCOND_AL
)

	)

777 
	#ARM_LDRB_IMM_POST_COND
(
p
, 
rd
, 
∫
, 
imm
, 
c⁄d
) \

778 
	`ARM_EMIT
(
p
, 
	`ARM_DEF_WXFER_IMM
(
imm
, 
rd
, 
∫
, 
ARMOP_LDR
, 0, 1, 0, 
c⁄d
))

	)

780 
	#ARM_LDRB_IMM_POST
(
p
, 
rd
, 
∫
, 
imm
Ë
	`ARM_LDRB_IMM_POST_COND
’,Ñd,Ñn, imm, 
ARMCOND_AL
)

	)

783 
	#ARM_LDR_IMM_COND
(
p
, 
rd
, 
∫
, 
imm
, 
c⁄d
) \

784 
	`ARM_EMIT
(
p
, 
	`ARM_DEF_WXFER_IMM
(
imm
, 
rd
, 
∫
, 
ARMOP_LDR
, 0, 0, 1, 
c⁄d
))

	)

786 
	#ARM_LDR_IMM
(
p
, 
rd
, 
∫
, 
imm
Ë
	`ARM_LDR_IMM_COND
’,Ñd,Ñn, imm, 
ARMCOND_AL
)

	)

788 
	#ARM_LDRB_IMM_COND
(
p
, 
rd
, 
∫
, 
imm
, 
c⁄d
) \

789 
	`ARM_EMIT
(
p
, 
	`ARM_DEF_WXFER_IMM
(
imm
, 
rd
, 
∫
, 
ARMOP_LDR
, 0, 1, 1, 
c⁄d
))

	)

791 
	#ARM_LDRB_IMM
(
p
, 
rd
, 
∫
, 
imm
Ë
	`ARM_LDRB_IMM_COND
’,Ñd,Ñn, imm, 
ARMCOND_AL
)

	)

796 
	#ARM_STR_IMM_POST_COND
(
p
, 
rd
, 
∫
, 
imm
, 
c⁄d
) \

797 
	`ARM_EMIT
(
p
, 
	`ARM_DEF_WXFER_IMM
(
imm
, 
rd
, 
∫
, 
ARMOP_STR
, 0, 0, 0, 
c⁄d
))

	)

799 
	#ARM_STR_IMM_POST
(
p
, 
rd
, 
∫
, 
imm
Ë
	`ARM_STR_IMM_POST_COND
’,Ñd,Ñn, imm, 
ARMCOND_AL
)

	)

801 
	#ARM_STRB_IMM_POST_COND
(
p
, 
rd
, 
∫
, 
imm
, 
c⁄d
) \

802 
	`ARM_EMIT
(
p
, 
	`ARM_DEF_WXFER_IMM
(
imm
, 
rd
, 
∫
, 
ARMOP_STR
, 0, 1, 0, 
c⁄d
))

	)

804 
	#ARM_STRB_IMM_POST
(
p
, 
rd
, 
∫
, 
imm
Ë
	`ARM_STRB_IMM_POST_COND
’,Ñd,Ñn, imm, 
ARMCOND_AL
)

	)

807 
	#ARM_STR_IMM_COND
(
p
, 
rd
, 
∫
, 
imm
, 
c⁄d
) \

808 
	`ARM_EMIT_WXFER_IMM
(
p
, 
imm
, 
rd
, 
∫
, 
ARMOP_STR
, 0, 0, 1, 
c⁄d
)

	)

813 
	#ARM_STR_IMM
(
p
, 
rd
, 
∫
, 
imm
Ë
	`ARM_STR_IMM_COND
’,Ñd,Ñn, imm, 
ARMCOND_AL
)

	)

815 
	#ARM_STRB_IMM_COND
(
p
, 
rd
, 
∫
, 
imm
, 
c⁄d
) \

816 
	`ARM_EMIT
(
p
, 
	`ARM_DEF_WXFER_IMM
(
imm
, 
rd
, 
∫
, 
ARMOP_STR
, 0, 1, 1, 
c⁄d
))

	)

818 
	#ARM_STRB_IMM
(
p
, 
rd
, 
∫
, 
imm
Ë
	`ARM_STRB_IMM_COND
’,Ñd,Ñn, imm, 
ARMCOND_AL
)

	)

821 
	#ARM_STR_IMM_WB_COND
(
p
, 
rd
, 
∫
, 
imm
, 
c⁄d
) \

822 
	`ARM_EMIT_WXFER_IMM
(
p
, 
imm
, 
rd
, 
∫
, 
ARMOP_STR
, 1, 0, 1, 
c⁄d
)

	)

823 
	#ARM_STR_IMM_WB
(
p
, 
rd
, 
∫
, 
imm
Ë
	`ARM_STR_IMM_WB_COND
’,Ñd,Ñn, imm, 
ARMCOND_AL
)

	)

831 
	#ARM_DEF_WXFER_REG_REG_UPDOWN_COND
(
rm
, 
shi·_ty≥
, 
shi·
, 
rd
, 
∫
, 
ls
, 
wb
, 
b
, 
u
, 
p
, 
c⁄d
) \

832 (
rm
) | \

833 ((
shi·_ty≥
) << 5) | \

834 ((
shi·
) << 7) | \

835 ((
rd
) << 12) | \

836 ((
∫
) << 16) | \

837 ((
ls
) << 20) | \

838 ((
wb
) << 21) | \

839 ((
b
) << 22) | \

840 ((
u
) << 23) | \

841 ((
p
) << 24) | \

843 
ARM_WXFER_TAG
 | \

844 
	`ARM_DEF_COND
(
c⁄d
)

	)

846 
	#ARM_DEF_WXFER_REG_REG_COND
(
rm
, 
shi·_ty≥
, 
shi·
, 
rd
, 
∫
, 
ls
, 
wb
, 
b
, 
p
, 
c⁄d
) \

847 
	`ARM_DEF_WXFER_REG_REG_UPDOWN_COND
(
rm
, 
shi·_ty≥
, 
shi·
, 
rd
, 
∫
, 
ls
, 
wb
, 
b
, 
ARM_UP
, 
p
, 
c⁄d
)

	)

848 
	#ARM_DEF_WXFER_REG_MINUS_REG_COND
(
rm
, 
shi·_ty≥
, 
shi·
, 
rd
, 
∫
, 
ls
, 
wb
, 
b
, 
p
, 
c⁄d
) \

849 
	`ARM_DEF_WXFER_REG_REG_UPDOWN_COND
(
rm
, 
shi·_ty≥
, 
shi·
, 
rd
, 
∫
, 
ls
, 
wb
, 
b
, 
ARM_DOWN
, 
p
, 
c⁄d
)

	)

852 
	#ARM_LDR_REG_REG_SHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
shi·
, 
c⁄d
) \

853 
	`ARM_EMIT
(
p
, 
	`ARM_DEF_WXFER_REG_REG_COND
(
rm
, 
shi·_ty≥
, 
shi·
, 
rd
, 
∫
, 
ARMOP_LDR
, 0, 0, 1, 
c⁄d
))

	)

854 
	#ARM_LDR_REG_REG_SHIFT
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
shi·
) \

855 
	`ARM_LDR_REG_REG_SHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
shi·
, 
ARMCOND_AL
)

	)

856 
	#ARM_LDR_REG_REG
(
p
, 
rd
, 
∫
, 
rm
) \

857 
	`ARM_LDR_REG_REG_SHIFT
(
p
, 
rd
, 
∫
, 
rm
, 
ARMSHIFT_LSL
, 0)

	)

859 
	#ARM_LDRB_REG_REG_SHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
shi·
, 
c⁄d
) \

860 
	`ARM_EMIT
(
p
, 
	`ARM_DEF_WXFER_REG_REG_COND
(
rm
, 
shi·_ty≥
, 
shi·
, 
rd
, 
∫
, 
ARMOP_LDR
, 0, 1, 1, 
c⁄d
))

	)

861 
	#ARM_LDRB_REG_REG_SHIFT
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
shi·
) \

862 
	`ARM_LDRB_REG_REG_SHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
shi·
, 
ARMCOND_AL
)

	)

863 
	#ARM_LDRB_REG_REG
(
p
, 
rd
, 
∫
, 
rm
) \

864 
	`ARM_LDRB_REG_REG_SHIFT
(
p
, 
rd
, 
∫
, 
rm
, 
ARMSHIFT_LSL
, 0)

	)

866 
	#ARM_STR_REG_REG_SHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
shi·
, 
c⁄d
) \

867 
	`ARM_EMIT
(
p
, 
	`ARM_DEF_WXFER_REG_REG_COND
(
rm
, 
shi·_ty≥
, 
shi·
, 
rd
, 
∫
, 
ARMOP_STR
, 0, 0, 1, 
c⁄d
))

	)

868 
	#ARM_STR_REG_REG_SHIFT
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
shi·
) \

869 
	`ARM_STR_REG_REG_SHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
shi·
, 
ARMCOND_AL
)

	)

870 
	#ARM_STR_REG_REG
(
p
, 
rd
, 
∫
, 
rm
) \

871 
	`ARM_STR_REG_REG_SHIFT
(
p
, 
rd
, 
∫
, 
rm
, 
ARMSHIFT_LSL
, 0)

	)

874 
	#ARM_STR_REG_REG_SHIFT_POST_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
shi·
, 
c⁄d
) \

875 
	`ARM_EMIT
(
p
, 
	`ARM_DEF_WXFER_REG_REG_COND
(
rm
, 
shi·_ty≥
, 
shi·
, 
rd
, 
∫
, 
ARMOP_STR
, 0, 0, 0, 
c⁄d
))

	)

876 
	#ARM_STR_REG_REG_SHIFT_POST
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
shi·
) \

877 
	`ARM_STR_REG_REG_SHIFT_POST_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
shi·
, 
ARMCOND_AL
)

	)

878 
	#ARM_STR_REG_REG_POST
(
p
, 
rd
, 
∫
, 
rm
) \

879 
	`ARM_STR_REG_REG_SHIFT_POST
(
p
, 
rd
, 
∫
, 
rm
, 
ARMSHIFT_LSL
, 0)

	)

882 
	#ARM_STRB_REG_REG_SHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
shi·
, 
c⁄d
) \

883 
	`ARM_EMIT
(
p
, 
	`ARM_DEF_WXFER_REG_REG_COND
(
rm
, 
shi·_ty≥
, 
shi·
, 
rd
, 
∫
, 
ARMOP_STR
, 0, 1, 1, 
c⁄d
))

	)

884 
	#ARM_STRB_REG_REG_SHIFT
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
shi·
) \

885 
	`ARM_STRB_REG_REG_SHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
shi·
, 
ARMCOND_AL
)

	)

886 
	#ARM_STRB_REG_REG
(
p
, 
rd
, 
∫
, 
rm
) \

887 
	`ARM_STRB_REG_REG_SHIFT
(
p
, 
rd
, 
∫
, 
rm
, 
ARMSHIFT_LSL
, 0)

	)

893 
¨mö°r_t
 
	mrm
 : 4;

894 
¨mö°r_t
 
	mèg3
 : 1;

895 
¨mö°r_t
 
	mh
 : 1;

896 
¨mö°r_t
 
	ms
 : 1;

897 
¨mö°r_t
 
	mèg2
 : 1;

898 
¨mö°r_t
 
	mimm_hi
 : 4;

899 
¨mö°r_t
 
	mrd
 : 4;

900 
¨mö°r_t
 
	m∫
 : 4;

901 
¨mö°r_t
 
	mls
 : 1;

902 
¨mö°r_t
 
	mwb
 : 1;

903 
¨mö°r_t
 
	mty≥
 : 1;

904 
¨mö°r_t
 
	mu
 : 1;

905 
¨mö°r_t
 
	mp
 : 1;

906 
¨mö°r_t
 
	mèg
 : 3;

907 
¨mö°r_t
 
	mc⁄d
 : 4;

908 } 
	tARMIn°rHX„r
;

910 
	#ARM_HXFER_ID
 0

	)

911 
	#ARM_HXFER_ID2
 1

	)

912 
	#ARM_HXFER_ID3
 1

	)

913 
	#ARM_HXFER_MASK
 ((0x7 << 25Ë| (0x9 << 4))

	)

914 
	#ARM_HXFER_TAG
 ((
ARM_HXFER_ID
 << 25Ë| (
ARM_HXFER_ID2
 << 7Ë| (
ARM_HXFER_ID3
 << 4))

	)

916 
	#ARM_DEF_HXFER_IMM_COND
(
imm
, 
h
, 
s
, 
rd
, 
∫
, 
ls
, 
wb
, 
p
, 
c⁄d
) \

917 ((()(
imm
) >= 0 ? (imm) : -()(imm)) & 0xF) | \

918 ((
h
) << 5) | \

919 ((
s
) << 6) | \

920 (((()(
imm
) >= 0 ? (imm) : -()(imm)) << 4) & (0xF << 8)) | \

921 ((
rd
) << 12) | \

922 ((
∫
) << 16) | \

923 ((
ls
) << 20) | \

924 ((
wb
) << 21) | \

926 ((()(
imm
) >= 0) << 23) | \

927 ((
p
) << 24) | \

928 
ARM_HXFER_TAG
 | \

929 
	`ARM_DEF_COND
(
c⁄d
)

	)

931 
	#ARM_LDRH_IMM_COND
(
p
, 
rd
, 
∫
, 
imm
, 
c⁄d
) \

932 
	`ARM_EMIT
(
p
, 
	`ARM_DEF_HXFER_IMM_COND
(
imm
, 1, 0, 
rd
, 
∫
, 
ARMOP_LDR
, 0, 1, 
c⁄d
))

	)

933 
	#ARM_LDRH_IMM
(
p
, 
rd
, 
∫
, 
imm
) \

934 
	`ARM_LDRH_IMM_COND
(
p
, 
rd
, 
∫
, 
imm
, 
ARMCOND_AL
)

	)

935 
	#ARM_LDRSH_IMM_COND
(
p
, 
rd
, 
∫
, 
imm
, 
c⁄d
) \

936 
	`ARM_EMIT
(
p
, 
	`ARM_DEF_HXFER_IMM_COND
(
imm
, 1, 1, 
rd
, 
∫
, 
ARMOP_LDR
, 0, 1, 
c⁄d
))

	)

937 
	#ARM_LDRSH_IMM
(
p
, 
rd
, 
∫
, 
imm
) \

938 
	`ARM_LDRSH_IMM_COND
(
p
, 
rd
, 
∫
, 
imm
, 
ARMCOND_AL
)

	)

939 
	#ARM_LDRSB_IMM_COND
(
p
, 
rd
, 
∫
, 
imm
, 
c⁄d
) \

940 
	`ARM_EMIT
(
p
, 
	`ARM_DEF_HXFER_IMM_COND
(
imm
, 0, 1, 
rd
, 
∫
, 
ARMOP_LDR
, 0, 1, 
c⁄d
))

	)

941 
	#ARM_LDRSB_IMM
(
p
, 
rd
, 
∫
, 
imm
) \

942 
	`ARM_LDRSB_IMM_COND
(
p
, 
rd
, 
∫
, 
imm
, 
ARMCOND_AL
)

	)

945 
	#ARM_STRH_IMM_COND
(
p
, 
rd
, 
∫
, 
imm
, 
c⁄d
) \

946 
	`ARM_EMIT
(
p
, 
	`ARM_DEF_HXFER_IMM_COND
(
imm
, 1, 0, 
rd
, 
∫
, 
ARMOP_STR
, 0, 1, 
c⁄d
))

	)

947 
	#ARM_STRH_IMM
(
p
, 
rd
, 
∫
, 
imm
) \

948 
	`ARM_STRH_IMM_COND
(
p
, 
rd
, 
∫
, 
imm
, 
ARMCOND_AL
)

	)

950 
	#ARM_STRH_IMM_POST_COND
(
p
, 
rd
, 
∫
, 
imm
, 
c⁄d
) \

951 
	`ARM_EMIT
(
p
, 
	`ARM_DEF_HXFER_IMM_COND
(
imm
, 1, 0, 
rd
, 
∫
, 
ARMOP_STR
, 0, 0, 
c⁄d
))

	)

952 
	#ARM_STRH_IMM_POST
(
p
, 
rd
, 
∫
, 
imm
) \

953 
	`ARM_STRH_IMM_POST_COND
(
p
, 
rd
, 
∫
, 
imm
, 
ARMCOND_AL
)

	)

956 
	#ARM_DEF_HXFER_REG_REG_UPDOWN_COND
(
rm
, 
h
, 
s
, 
rd
, 
∫
, 
ls
, 
wb
, 
u
, 
p
, 
c⁄d
) \

957 ((
rm
) & 0xF) | \

958 ((
h
) << 5) | \

959 ((
s
) << 6) | \

960 ((
rd
) << 12) | \

961 ((
∫
) << 16) | \

962 ((
ls
) << 20) | \

963 ((
wb
) << 21) | \

965 ((
u
) << 23) | \

966 ((
p
) << 24) | \

967 
ARM_HXFER_TAG
 | \

968 
	`ARM_DEF_COND
(
c⁄d
)

	)

970 
	#ARM_DEF_HXFER_REG_REG_COND
(
rm
, 
h
, 
s
, 
rd
, 
∫
, 
ls
, 
wb
, 
p
, 
c⁄d
) \

971 
	`ARM_DEF_HXFER_REG_REG_UPDOWN_COND
(
rm
, 
h
, 
s
, 
rd
, 
∫
, 
ls
, 
wb
, 
ARM_UP
, 
p
, 
c⁄d
)

	)

972 
	#ARM_DEF_HXFER_REG_MINUS_REG_COND
(
rm
, 
h
, 
s
, 
rd
, 
∫
, 
ls
, 
wb
, 
p
, 
c⁄d
) \

973 
	`ARM_DEF_HXFER_REG_REG_UPDOWN_COND
(
rm
, 
h
, 
s
, 
rd
, 
∫
, 
ls
, 
wb
, 
ARM_DOWN
, 
p
, 
c⁄d
)

	)

975 
	#ARM_LDRH_REG_REG_COND
(
p
, 
rd
, 
∫
, 
rm
, 
c⁄d
) \

976 
	`ARM_EMIT
(
p
, 
	`ARM_DEF_HXFER_REG_REG_COND
(
rm
, 1, 0, 
rd
, 
∫
, 
ARMOP_LDR
, 0, 1, 
c⁄d
))

	)

977 
	#ARM_LDRH_REG_REG
(
p
, 
rd
, 
∫
, 
rm
) \

978 
	`ARM_LDRH_REG_REG_COND
(
p
, 
rd
, 
∫
, 
rm
, 
ARMCOND_AL
)

	)

979 
	#ARM_LDRSH_REG_REG_COND
(
p
, 
rd
, 
∫
, 
rm
, 
c⁄d
) \

980 
	`ARM_EMIT
(
p
, 
	`ARM_DEF_HXFER_REG_REG_COND
(
rm
, 1, 1, 
rd
, 
∫
, 
ARMOP_LDR
, 0, 1, 
c⁄d
))

	)

981 
	#ARM_LDRSH_REG_REG
(
p
, 
rd
, 
∫
, 
rm
) \

982 
	`ARM_LDRSH_REG_REG_COND
(
p
, 
rd
, 
∫
, 
rm
, 
ARMCOND_AL
)

	)

983 
	#ARM_LDRSB_REG_REG_COND
(
p
, 
rd
, 
∫
, 
rm
, 
c⁄d
) \

984 
	`ARM_EMIT
(
p
, 
	`ARM_DEF_HXFER_REG_REG_COND
(
rm
, 0, 1, 
rd
, 
∫
, 
ARMOP_LDR
, 0, 1, 
c⁄d
))

	)

985 
	#ARM_LDRSB_REG_REG
(
p
, 
rd
, 
∫
, 
rm
Ë
	`ARM_LDRSB_REG_REG_COND
’,Ñd,Ñn,Ñm, 
ARMCOND_AL
)

	)

987 
	#ARM_STRH_REG_REG_COND
(
p
, 
rd
, 
∫
, 
rm
, 
c⁄d
) \

988 
	`ARM_EMIT
(
p
, 
	`ARM_DEF_HXFER_REG_REG_COND
(
rm
, 1, 0, 
rd
, 
∫
, 
ARMOP_STR
, 0, 1, 
c⁄d
))

	)

989 
	#ARM_STRH_REG_REG
(
p
, 
rd
, 
∫
, 
rm
) \

990 
	`ARM_STRH_REG_REG_COND
(
p
, 
rd
, 
∫
, 
rm
, 
ARMCOND_AL
)

	)

992 
	#ARM_STRH_REG_REG_POST_COND
(
p
, 
rd
, 
∫
, 
rm
, 
c⁄d
) \

993 
	`ARM_EMIT
(
p
, 
	`ARM_DEF_HXFER_REG_REG_COND
(
rm
, 1, 0, 
rd
, 
∫
, 
ARMOP_STR
, 0, 0, 
c⁄d
))

	)

994 
	#ARM_STRH_REG_REG_POST
(
p
, 
rd
, 
∫
, 
rm
) \

995 
	`ARM_STRH_REG_REG_POST_COND
(
p
, 
rd
, 
∫
, 
rm
, 
ARMCOND_AL
)

	)

1001 
¨mö°r_t
 
	mrm
 : 4;

1002 
¨mö°r_t
 
	mèg3
 : 8;

1003 
¨mö°r_t
 
	mrd
 : 4;

1004 
¨mö°r_t
 
	m∫
 : 4;

1005 
¨mö°r_t
 
	mèg2
 : 2;

1006 
¨mö°r_t
 
	mb
 : 1;

1007 
¨mö°r_t
 
	mèg
 : 5;

1008 
¨mö°r_t
 
	mc⁄d
 : 4;

1009 } 
	tARMIn°rSw≠
;

1011 
	#ARM_SWP_ID
 2

	)

1012 
	#ARM_SWP_ID2
 9

	)

1013 
	#ARM_SWP_MASK
 ((0x1F << 23Ë| (3 << 20Ë| (0xFF << 4))

	)

1014 
	#ARM_SWP_TAG
 ((
ARM_SWP_ID
 << 23Ë| (
ARM_SWP_ID2
 << 4))

	)

1020 
¨mö°r_t
 
	mnum
 : 24;

1021 
¨mö°r_t
 
	mèg
 : 4;

1022 
¨mö°r_t
 
	mc⁄d
 : 4;

1023 } 
	tARMIn°rSWI
;

1025 
	#ARM_SWI_ID
 0xF

	)

1026 
	#ARM_SWI_MASK
 (0xF << 24)

	)

1027 
	#ARM_SWI_TAG
 (
ARM_SWI_ID
 << 24)

	)

1033 
¨mö°r_t
 
	m¸m
 : 4;

1034 
¨mö°r_t
 
	mèg2
 : 1;

1035 
¨mö°r_t
 
	m›2
 : 3;

1036 
¨mö°r_t
 
	m˝n
 : 4;

1037 
¨mö°r_t
 
	m¸d
 : 4;

1038 
¨mö°r_t
 
	m¸n
 : 4;

1039 
¨mö°r_t
 
	m›
 : 4;

1040 
¨mö°r_t
 
	mèg
 : 4;

1041 
¨mö°r_t
 
	mc⁄d
 : 4;

1042 } 
	tARMIn°rCDP
;

1044 
	#ARM_CDP_ID
 0xE

	)

1045 
	#ARM_CDP_ID2
 0

	)

1046 
	#ARM_CDP_MASK
 ((0xF << 24Ë| (1 << 4))

	)

1047 
	#ARM_CDP_TAG
 ((
ARM_CDP_ID
 << 24Ë| (
ARM_CDP_ID2
 << 4))

	)

1052 
¨mö°r_t
 
	moffs
 : 8;

1053 
¨mö°r_t
 
	m˝n
 : 4;

1054 
¨mö°r_t
 
	m¸d
 : 4;

1055 
¨mö°r_t
 
	m∫
 : 4;

1056 
¨mö°r_t
 
	mls
 : 1;

1057 
¨mö°r_t
 
	mwb
 : 1;

1058 
¨mö°r_t
 
	mn
 : 1;

1059 
¨mö°r_t
 
	mu
 : 1;

1060 
¨mö°r_t
 
	mp
 : 1;

1061 
¨mö°r_t
 
	mèg
 : 3;

1062 
¨mö°r_t
 
	mc⁄d
 : 4;

1063 } 
	tARMIn°rCDT
;

1065 
	#ARM_CDT_ID
 6

	)

1066 
	#ARM_CDT_MASK
 (7 << 25)

	)

1067 
	#ARM_CDT_TAG
 (
ARM_CDT_ID
 << 25)

	)

1072 
¨mö°r_t
 
	m¸m
 : 4;

1073 
¨mö°r_t
 
	mèg2
 : 1;

1074 
¨mö°r_t
 
	m›2
 : 3;

1075 
¨mö°r_t
 
	m˝n
 : 4;

1076 
¨mö°r_t
 
	mrd
 : 4;

1077 
¨mö°r_t
 
	m¸n
 : 4;

1078 
¨mö°r_t
 
	mls
 : 1;

1079 
¨mö°r_t
 
	m›1
 : 3;

1080 
¨mö°r_t
 
	mèg
 : 4;

1081 
¨mö°r_t
 
	mc⁄d
 : 4;

1082 } 
	tARMIn°rCRT
;

1084 
	#ARM_CRT_ID
 0xE

	)

1085 
	#ARM_CRT_ID2
 0x1

	)

1086 
	#ARM_CRT_MASK
 ((0xF << 24Ë| (1 << 4))

	)

1087 
	#ARM_CRT_TAG
 ((
ARM_CRT_ID
 << 24Ë| (
ARM_CRT_ID2
 << 4))

	)

1094 
	#ARM_DEF_MRC_COND
(
˝n
, 
˝›
, 
rd
, 
¸n
, 
¸m
, 
˝›2
, 
c⁄d
) \

1095 ((
¸m
) & 0xF) |\

1096 ((
˝›2
) << 5) |\

1097 ((
˝n
) << 8) |\

1098 ((
rd
) << 12) |\

1099 ((
¸n
) << 16) |\

1100 ((
ARMOP_LDR
) << 20) |\

1101 ((
˝›
) << 21) |\

1102 
ARM_CRT_TAG
 |\

1103 
	`ARM_DEF_COND
(
c⁄d
)

	)

1105 
	#ARM_MRC_COND
(
p
, 
˝n
, 
˝›
, 
rd
, 
¸n
, 
¸m
, 
˝›2
, 
c⁄d
) \

1106 
	`ARM_EMIT
(
p
, 
	`ARM_DEF_MRC_COND
(
˝n
, 
˝›
, 
rd
, 
¸n
, 
¸m
, 
˝›2
, 
c⁄d
))

	)

1107 
	#ARM_MRC
(
p
, 
˝n
, 
˝›
, 
rd
, 
¸n
, 
¸m
, 
˝›2
) \

1108 
	`ARM_MRC_COND
(
p
, 
˝n
, 
˝›
, 
rd
, 
¸n
, 
¸m
, 
˝›2
, 
ARMCOND_AL
)

	)

1114 
ARMDPI_›2_imm
 
	m›2_imm
;

1116 
¨mö°r_t
 
	mrm
 : 4;

1117 
¨mö°r_t
 
	m∑d
 : 8;

1118 
¨mö°r_t
 
	mèg4
 : 4;

1119 
¨mö°r_t
 
	mÊd
 : 4;

1120 
¨mö°r_t
 
	mèg3
 : 2;

1121 
¨mö°r_t
 
	m£l
 : 1;

1122 
¨mö°r_t
 
	mèg2
 : 2;

1123 
¨mö°r_t
 
	mty≥
 : 1;

1124 
¨mö°r_t
 
	mèg
 : 2;

1125 
¨mö°r_t
 
	mc⁄d
 : 4;

1126 } 
	mÆl
;

1127 } 
	tARMIn°rMSR
;

1129 
	#ARM_MSR_ID
 0

	)

1130 
	#ARM_MSR_ID2
 2

	)

1131 
	#ARM_MSR_ID3
 2

	)

1132 
	#ARM_MSR_ID4
 0xF

	)

1133 
	#ARM_MSR_MASK
 ((3 << 26) | \

1136 (0xF << 12))

	)

1137 
	#ARM_MSR_TAG
 ((
ARM_MSR_ID
 << 26) | \

1138 (
ARM_MSR_ID2
 << 23) | \

1139 (
ARM_MSR_ID3
 << 20) | \

1140 (
ARM_MSR_ID4
 << 12))

	)

1142 
	#ARM_DEF_MSR_REG_COND
(
mask
, 
rm
, 
r
, 
c⁄d
) \

1143 
ARM_MSR_TAG
 | \

1144 
	`ARM_DEF_COND
(
c⁄d
) | \

1145 ((
rm
) & 0xf) | \

1146 (((
r
) & 1) << 22) | \

1147 (((
mask
Ë& 0xfË<< 16)

	)

1149 
	#ARM_MSR_REG_COND
(
p
, 
mask
, 
rm
, 
r
, 
c⁄d
) \

1150 
	`ARM_EMIT
(
p
, 
	`ARM_DEF_MSR_REG_COND
(
mask
, 
rm
, 
r
, 
c⁄d
))

	)

1152 
	#ARM_MSR_REG
(
p
, 
mask
, 
rm
, 
r
) \

1153 
	`ARM_MSR_REG_COND
(
p
, 
mask
, 
rm
, 
r
, 
ARMCOND_AL
)

	)

1155 
	#ARM_PSR_C
 1

	)

1156 
	#ARM_PSR_X
 2

	)

1157 
	#ARM_PSR_S
 4

	)

1158 
	#ARM_PSR_F
 8

	)

1160 
	#ARM_CPSR
 0

	)

1161 
	#ARM_SPSR
 1

	)

1165 
¨mö°r_t
 
	mèg3
 : 12;

1166 
¨mö°r_t
 
	mrd
 : 4;

1167 
¨mö°r_t
 
	mèg2
 : 6;

1168 
¨mö°r_t
 
	m£l
 : 1;

1169 
¨mö°r_t
 
	mèg
 : 5;

1170 
¨mö°r_t
 
	mc⁄d
 : 4;

1171 } 
	tARMIn°rMRS
;

1173 
	#ARM_MRS_ID
 2

	)

1174 
	#ARM_MRS_ID2
 0xF

	)

1175 
	#ARM_MRS_ID3
 0

	)

1176 
	#ARM_MRS_MASK
 ((0x1F << 23Ë| (0x3F << 16Ë| 0xFFF)

	)

1177 
	#ARM_MRS_TAG
 ((
ARM_MRS_ID
 << 23Ë| (
ARM_MRS_ID2
 << 16Ë| 
ARM_MRS_ID3
)

	)

1179 
	#ARM_DEF_MRS_COND
(
rd
, 
r
, 
c⁄d
) \

1180 
ARM_MRS_TAG
 | \

1181 
	`ARM_DEF_COND
(
c⁄d
) | \

1182 (((
r
) & 1) << 22) | \

1183 ((
rd
)& 0xfË<< 12

	)

1185 
	#ARM_MRS_COND
(
p
, 
rd
, 
r
, 
c⁄d
) \

1186 
	`ARM_EMIT
(
p
, 
	`ARM_DEF_MRS_COND
(
rd
, 
r
, 
c⁄d
))

	)

1188 
	#ARM_MRS_CPSR_COND
(
p
, 
rd
, 
c⁄d
) \

1189 
	`ARM_MRS_COND
(
p
, 
rd
, 
ARM_CPSR
, 
c⁄d
)

	)

1191 
	#ARM_MRS_CPSR
(
p
, 
rd
) \

1192 
	`ARM_MRS_CPSR_COND
(
p
, 
rd
, 
ARMCOND_AL
)

	)

1194 
	#ARM_MRS_SPSR_COND
(
p
, 
rd
, 
c⁄d
) \

1195 
	`ARM_MRS_COND
(
p
, 
rd
, 
ARM_SPSR
, 
c⁄d
)

	)

1197 
	#ARM_MRS_SPSR
(
p
, 
rd
) \

1198 
	`ARM_MRS_SPSR_COND
(
p
, 
rd
, 
ARMCOND_AL
)

	)

1201 
	~"¨m_dpima¸os.h
"

1203 
	#ARM_NOP
(
p
Ë
	`ARM_MOV_REG_REG
’, 
ARMREG_R0
, ARMREG_R0)

	)

1206 
	#ARM_SHL_IMM_COND
(
p
, 
rd
, 
rm
, 
imm
, 
c⁄d
) \

1207 
	`ARM_MOV_REG_IMMSHIFT_COND
(
p
, 
rd
, 
rm
, 
ARMSHIFT_LSL
, 
imm
, 
c⁄d
)

	)

1208 
	#ARM_SHL_IMM
(
p
, 
rd
, 
rm
, 
imm
) \

1209 
	`ARM_SHL_IMM_COND
(
p
, 
rd
, 
rm
, 
imm
, 
ARMCOND_AL
)

	)

1210 
	#ARM_SHLS_IMM_COND
(
p
, 
rd
, 
rm
, 
imm
, 
c⁄d
) \

1211 
	`ARM_MOVS_REG_IMMSHIFT_COND
(
p
, 
rd
, 
rm
, 
ARMSHIFT_LSL
, 
imm
, 
c⁄d
)

	)

1212 
	#ARM_SHLS_IMM
(
p
, 
rd
, 
rm
, 
imm
) \

1213 
	`ARM_SHLS_IMM_COND
(
p
, 
rd
, 
rm
, 
imm
, 
ARMCOND_AL
)

	)

1215 
	#ARM_SHR_IMM_COND
(
p
, 
rd
, 
rm
, 
imm
, 
c⁄d
) \

1216 
	`ARM_MOV_REG_IMMSHIFT_COND
(
p
, 
rd
, 
rm
, 
ARMSHIFT_LSR
, 
imm
, 
c⁄d
)

	)

1217 
	#ARM_SHR_IMM
(
p
, 
rd
, 
rm
, 
imm
) \

1218 
	`ARM_SHR_IMM_COND
(
p
, 
rd
, 
rm
, 
imm
, 
ARMCOND_AL
)

	)

1219 
	#ARM_SHRS_IMM_COND
(
p
, 
rd
, 
rm
, 
imm
, 
c⁄d
) \

1220 
	`ARM_MOVS_REG_IMMSHIFT_COND
(
p
, 
rd
, 
rm
, 
ARMSHIFT_LSR
, 
imm
, 
c⁄d
)

	)

1221 
	#ARM_SHRS_IMM
(
p
, 
rd
, 
rm
, 
imm
) \

1222 
	`ARM_SHRS_IMM_COND
(
p
, 
rd
, 
rm
, 
imm
, 
ARMCOND_AL
)

	)

1224 
	#ARM_SAR_IMM_COND
(
p
, 
rd
, 
rm
, 
imm
, 
c⁄d
) \

1225 
	`ARM_MOV_REG_IMMSHIFT_COND
(
p
, 
rd
, 
rm
, 
ARMSHIFT_ASR
, 
imm
, 
c⁄d
)

	)

1226 
	#ARM_SAR_IMM
(
p
, 
rd
, 
rm
, 
imm
) \

1227 
	`ARM_SAR_IMM_COND
(
p
, 
rd
, 
rm
, 
imm
, 
ARMCOND_AL
)

	)

1228 
	#ARM_SARS_IMM_COND
(
p
, 
rd
, 
rm
, 
imm
, 
c⁄d
) \

1229 
	`ARM_MOVS_REG_IMMSHIFT_COND
(
p
, 
rd
, 
rm
, 
ARMSHIFT_ASR
, 
imm
, 
c⁄d
)

	)

1230 
	#ARM_SARS_IMM
(
p
, 
rd
, 
rm
, 
imm
) \

1231 
	`ARM_SARS_IMM_COND
(
p
, 
rd
, 
rm
, 
imm
, 
ARMCOND_AL
)

	)

1233 
	#ARM_ROR_IMM_COND
(
p
, 
rd
, 
rm
, 
imm
, 
c⁄d
) \

1234 
	`ARM_MOV_REG_IMMSHIFT_COND
(
p
, 
rd
, 
rm
, 
ARMSHIFT_ROR
, 
imm
, 
c⁄d
)

	)

1235 
	#ARM_ROR_IMM
(
p
, 
rd
, 
rm
, 
imm
) \

1236 
	`ARM_ROR_IMM_COND
(
p
, 
rd
, 
rm
, 
imm
, 
ARMCOND_AL
)

	)

1237 
	#ARM_RORS_IMM_COND
(
p
, 
rd
, 
rm
, 
imm
, 
c⁄d
) \

1238 
	`ARM_MOVS_REG_IMMSHIFT_COND
(
p
, 
rd
, 
rm
, 
ARMSHIFT_ROR
, 
imm
, 
c⁄d
)

	)

1239 
	#ARM_RORS_IMM
(
p
, 
rd
, 
rm
, 
imm
) \

1240 
	`ARM_RORS_IMM_COND
(
p
, 
rd
, 
rm
, 
imm
, 
ARMCOND_AL
)

	)

1242 
	#ARM_SHL_REG_COND
(
p
, 
rd
, 
rm
, 
rs
, 
c⁄d
) \

1243 
	`ARM_MOV_REG_REGSHIFT_COND
(
p
, 
rd
, 
rm
, 
ARMSHIFT_LSL
, 
rs
, 
c⁄d
)

	)

1244 
	#ARM_SHL_REG
(
p
, 
rd
, 
rm
, 
rs
) \

1245 
	`ARM_SHL_REG_COND
(
p
, 
rd
, 
rm
, 
rs
, 
ARMCOND_AL
)

	)

1246 
	#ARM_SHLS_REG_COND
(
p
, 
rd
, 
rm
, 
rs
, 
c⁄d
) \

1247 
	`ARM_MOVS_REG_REGSHIFT_COND
(
p
, 
rd
, 
rm
, 
ARMSHIFT_LSL
, 
rs
, 
c⁄d
)

	)

1248 
	#ARM_SHLS_REG
(
p
, 
rd
, 
rm
, 
rs
) \

1249 
	`ARM_SHLS_REG_COND
(
p
, 
rd
, 
rm
, 
rs
, 
ARMCOND_AL
)

	)

1250 
	#ARM_SHLS_REG_REG
(
p
, 
rd
, 
rm
, 
rs
Ë
	`ARM_SHLS_REG
’,Ñd,Ñm,Ñs)

	)

1252 
	#ARM_SHR_REG_COND
(
p
, 
rd
, 
rm
, 
rs
, 
c⁄d
) \

1253 
	`ARM_MOV_REG_REGSHIFT_COND
(
p
, 
rd
, 
rm
, 
ARMSHIFT_LSR
, 
rs
, 
c⁄d
)

	)

1254 
	#ARM_SHR_REG
(
p
, 
rd
, 
rm
, 
rs
) \

1255 
	`ARM_SHR_REG_COND
(
p
, 
rd
, 
rm
, 
rs
, 
ARMCOND_AL
)

	)

1256 
	#ARM_SHRS_REG_COND
(
p
, 
rd
, 
rm
, 
rs
, 
c⁄d
) \

1257 
	`ARM_MOVS_REG_REGSHIFT_COND
(
p
, 
rd
, 
rm
, 
ARMSHIFT_LSR
, 
rs
, 
c⁄d
)

	)

1258 
	#ARM_SHRS_REG
(
p
, 
rd
, 
rm
, 
rs
) \

1259 
	`ARM_SHRS_REG_COND
(
p
, 
rd
, 
rm
, 
rs
, 
ARMCOND_AL
)

	)

1260 
	#ARM_SHRS_REG_REG
(
p
, 
rd
, 
rm
, 
rs
Ë
	`ARM_SHRS_REG
’,Ñd,Ñm,Ñs)

	)

1262 
	#ARM_SAR_REG_COND
(
p
, 
rd
, 
rm
, 
rs
, 
c⁄d
) \

1263 
	`ARM_MOV_REG_REGSHIFT_COND
(
p
, 
rd
, 
rm
, 
ARMSHIFT_ASR
, 
rs
, 
c⁄d
)

	)

1264 
	#ARM_SAR_REG
(
p
, 
rd
, 
rm
, 
rs
) \

1265 
	`ARM_SAR_REG_COND
(
p
, 
rd
, 
rm
, 
rs
, 
ARMCOND_AL
)

	)

1266 
	#ARM_SARS_REG_COND
(
p
, 
rd
, 
rm
, 
rs
, 
c⁄d
) \

1267 
	`ARM_MOVS_REG_REGSHIFT_COND
(
p
, 
rd
, 
rm
, 
ARMSHIFT_ASR
, 
rs
, 
c⁄d
)

	)

1268 
	#ARM_SARS_REG
(
p
, 
rd
, 
rm
, 
rs
) \

1269 
	`ARM_SARS_REG_COND
(
p
, 
rd
, 
rm
, 
rs
, 
ARMCOND_AL
)

	)

1270 
	#ARM_SARS_REG_REG
(
p
, 
rd
, 
rm
, 
rs
Ë
	`ARM_SARS_REG
’,Ñd,Ñm,Ñs)

	)

1272 
	#ARM_ROR_REG_COND
(
p
, 
rd
, 
rm
, 
rs
, 
c⁄d
) \

1273 
	`ARM_MOV_REG_REGSHIFT_COND
(
p
, 
rd
, 
rm
, 
ARMSHIFT_ROR
, 
rs
, 
c⁄d
)

	)

1274 
	#ARM_ROR_REG
(
p
, 
rd
, 
rm
, 
rs
) \

1275 
	`ARM_ROR_REG_COND
(
p
, 
rd
, 
rm
, 
rs
, 
ARMCOND_AL
)

	)

1276 
	#ARM_RORS_REG_COND
(
p
, 
rd
, 
rm
, 
rs
, 
c⁄d
) \

1277 
	`ARM_MOVS_REG_REGSHIFT_COND
(
p
, 
rd
, 
rm
, 
ARMSHIFT_ROR
, 
rs
, 
c⁄d
)

	)

1278 
	#ARM_RORS_REG
(
p
, 
rd
, 
rm
, 
rs
) \

1279 
	`ARM_RORS_REG_COND
(
p
, 
rd
, 
rm
, 
rs
, 
ARMCOND_AL
)

	)

1280 
	#ARM_RORS_REG_REG
(
p
, 
rd
, 
rm
, 
rs
Ë
	`ARM_RORS_REG
’,Ñd,Ñm,Ñs)

	)

1282 
	#ARM_DBRK
(
p
Ë
	`ARM_EMIT
’, 0xE6000010)

	)

1283 
	#ARM_IASM_DBRK
(Ë
	`ARM_IASM_EMIT
(0xE6000010)

	)

1285 
	#ARM_INC
(
p
, 
ªg
Ë
	`ARM_ADD_REG_IMM8
’,Ñeg,Ñeg, 1)

	)

1286 
	#ARM_DEC
(
p
, 
ªg
Ë
	`ARM_SUB_REG_IMM8
’,Ñeg,Ñeg, 1)

	)

1293 
¨mö°r_t
 
	mrm
 : 4;

1294 
¨mö°r_t
 
	mèg2
 : 8;

1295 
¨mö°r_t
 
	mrd
 : 4;

1296 
¨mö°r_t
 
	mèg
 : 12;

1297 
¨mö°r_t
 
	mc⁄d
 : 4;

1298 } 
	tARMIn°rCLZ
;

1300 
	#ARM_CLZ_ID
 0x16F

	)

1301 
	#ARM_CLZ_ID2
 0xF1

	)

1302 
	#ARM_CLZ_MASK
 ((0xFFF << 16Ë| (0xFF < 4))

	)

1303 
	#ARM_CLZ_TAG
 ((
ARM_CLZ_ID
 << 16Ë| (
ARM_CLZ_ID2
 << 4))

	)

1305 
	#ARM_DEF_CLZ_COND
(
rd
, 
rm
, 
c⁄d
) \

1306 
ARM_CLZ_TAG
 | \

1307 
	`ARM_DEF_COND
(
c⁄d
) | \

1308 (((
rm
) & 0xf)) | \

1309 ((
rd
Ë& 0xfË<< 12

	)

1311 
	#ARM_CLZ_COND
(
p
, 
rd
, 
rm
, 
c⁄d
) \

1312 
	`ARM_EMIT
(
p
, 
	`ARM_DEF_CLZ_COND
(
rd
, 
rm
, 
c⁄d
))

	)

1314 
	#ARM_CLZ
(
p
, 
rd
, 
rm
) \

1315 
	`ARM_EMIT
(
p
, 
	`ARM_DEF_CLZ_COND
(
rd
, 
rm
, 
ARMCOND_AL
))

	)

1321 
	#ARM_PLD_ID
 0xF45

	)

1322 
	#ARM_PLD_ID2
 0xF

	)

1323 
	#ARM_PLD_MASK
 ((0xFC7 << 20Ë| (0xF << 12))

	)

1324 
	#ARM_PLD_TAG
 ((
ARM_PLD_ID
 << 20Ë| (
ARM_PLD_ID2
 << 12))

	)

1325 
	#ARM_DEF_PLD_IMM
(
imm12
, 
∫
) \

1326 (((()
imm12
) < 0) ? -()(imm12) : (imm12)) | \

1328 ((
∫
) << 16) | \

1332 ((()(
imm12
) >= 0) << 23) | \

1335 
	`ARM_DEF_COND
(
ARMCOND_NV
)

	)

1337 
	#ARM_PLD_IMM
(
p
, 
∫
, 
imm12
Ë
	`ARM_EMIT
’, 
	`ARM_DEF_PLD_IMM
(imm12,Ñn))

	)

1339 
	#ARM_DEF_PLD_REG_REG_UPDOWN_SHIFT
(
∫
, 
shi·_ty≥
, 
shi·
, 
rm
, 
u
) \

1340 (
rm
) | \

1341 ((
shi·_ty≥
) << 5) | \

1342 ((
shi·
) << 7) | \

1344 ((
∫
) << 16) | \

1348 ((
u
) << 23) | \

1351 
	`ARM_DEF_COND
(
ARMCOND_NV
)

	)

1353 
	#ARM_PLD_REG_REG_UPDOWN_SHIFT
(
p
, 
rm
, 
∫
, 
u
, 
shi·_ty≥
, 
shi·
) \

1354 
	`ARM_EMIT
(
p
, 
	`ARM_DEF_PLD_REG_REG_UPDOWN_SHIFT
(
rm
, 
shi·_ty≥
, 
shi·
, 
∫
, 
u
))

	)

1356 
	#ARM_PLD_REG_PLUS_REG
(
p
, 
rm
, 
∫
) \

1357 
	`ARM_PLD_REG_REG_UPDOWN_SHIFT
(
p
, 
rm
, 
∫
, 
ARM_UP
, 
ARMSHIFT_LSL
, 0)

	)

1359 
	#ARM_PLD_REG_MINUS_REG
(
p
, 
rm
, 
∫
) \

1360 
	`ARM_PLD_REG_REG_UPDOWN_SHIFT
(
p
, 
rm
, 
∫
, 
ARM_DOWN
, 
ARMSHIFT_LSL
, 0)

	)

1363 
	#ARM_DEF_STF_IMM_COND
(
p
, 
¥ec
, 
‰eg_c⁄°
, 
rd
, 
imm8
, 
rŸ
, 
c⁄d
) \

1364 ((
imm8
) & 0xFF) | \

1365 (((
rŸ
) & 0xF) << 8) | \

1366 ((
‰eg_c⁄°
) << 12) | \

1368 
	`ARM_DEF_COND
(
c⁄d
)

	)

1372 
ARMIn°rBR
 
	mbr
;

1373 
ARMIn°rDPI
 
	mdpi
;

1374 
ARMIn°rMRT
 
	mmπ
;

1375 
ARMIn°rMul
 
	mmul
;

1376 
ARMIn°rWX„r
 
	mwx„r
;

1377 
ARMIn°rHX„r
 
	mhx„r
;

1378 
ARMIn°rSw≠
 
	mswp
;

1379 
ARMIn°rCDP
 
	mcdp
;

1380 
ARMIn°rCDT
 
	mcdt
;

1381 
ARMIn°rCRT
 
	m¸t
;

1382 
ARMIn°rSWI
 
	mswi
;

1383 
ARMIn°rMSR
 
	mm§
;

1384 
ARMIn°rMRS
 
	mmrs
;

1385 
ARMIn°rCLZ
 
	m˛z
;

1387 
ARMIn°rGíîic
 
	mgíîic
;

1388 
¨mö°r_t
 
	møw
;

1389 } 
	tARMIn°r
;

	@gp2x/arm_dpimacros.h

31 
	#ARM_MOV_REG_IMM_COND
(
p
, 
ªg
, 
imm8
, 
rŸ
, 
c⁄d
) \

32 
	`ARM_DPIOP_REG_IMM8ROT_COND
(
p
, 
ARMOP_MOV
, 
ªg
, 0, 
imm8
, 
rŸ
, 
c⁄d
)

	)

33 
	#ARM_MOV_REG_IMM
(
p
, 
ªg
, 
imm8
, 
rŸ
) \

34 
	`ARM_MOV_REG_IMM_COND
(
p
, 
ªg
, 
imm8
, 
rŸ
, 
ARMCOND_AL
)

	)

36 
	#ARM_MOVS_REG_IMM_COND
(
p
, 
ªg
, 
imm8
, 
rŸ
, 
c⁄d
) \

37 
	`ARM_DPIOP_S_REG_IMM8ROT_COND
(
p
, 
ARMOP_MOV
, 
ªg
, 0, 
imm8
, 
rŸ
, 
c⁄d
)

	)

38 
	#ARM_MOVS_REG_IMM
(
p
, 
ªg
, 
imm8
, 
rŸ
) \

39 
	`ARM_MOVS_REG_IMM_COND
(
p
, 
ªg
, 
imm8
, 
rŸ
, 
ARMCOND_AL
)

	)

41 #i‚de‡
ARM_NOIASM


42 
	#_MOV_REG_IMM_COND
(
ªg
, 
imm8
, 
rŸ
, 
c⁄d
) \

43 
	`ARM_IASM_DPIOP_REG_IMM8ROT_COND
(
ARMOP_MOV
, 
ªg
, 0, 
imm8
, 
rŸ
, 
c⁄d
)

	)

44 
	#_MOV_REG_IMM
(
ªg
, 
imm8
, 
rŸ
) \

45 
	`_MOV_REG_IMM_COND
(
ªg
, 
imm8
, 
rŸ
, 
ARMCOND_AL
)

	)

47 
	#_MOVS_REG_IMM_COND
(
ªg
, 
imm8
, 
rŸ
, 
c⁄d
) \

48 
	`ARM_IASM_DPIOP_S_REG_IMM8ROT_COND
(
ARMOP_MOV
, 
ªg
, 0, 
imm8
, 
rŸ
, 
c⁄d
)

	)

49 
	#_MOVS_REG_IMM
(
ªg
, 
imm8
, 
rŸ
) \

50 
	`_MOVS_REG_IMM_COND
(
ªg
, 
imm8
, 
rŸ
, 
ARMCOND_AL
)

	)

55 
	#ARM_MOV_REG_IMM8_COND
(
p
, 
ªg
, 
imm8
, 
c⁄d
) \

56 
	`ARM_DPIOP_REG_IMM8ROT_COND
(
p
, 
ARMOP_MOV
, 
ªg
, 0, 
imm8
, 0, 
c⁄d
)

	)

57 
	#ARM_MOV_REG_IMM8
(
p
, 
ªg
, 
imm8
) \

58 
	`ARM_MOV_REG_IMM8_COND
(
p
, 
ªg
, 
imm8
, 
ARMCOND_AL
)

	)

60 
	#ARM_MOVS_REG_IMM8_COND
(
p
, 
ªg
, 
imm8
, 
c⁄d
) \

61 
	`ARM_DPIOP_S_REG_IMM8ROT_COND
(
p
, 
ARMOP_MOV
, 
ªg
, 0, 
imm8
, 0, 
c⁄d
)

	)

62 
	#ARM_MOVS_REG_IMM8
(
p
, 
ªg
, 
imm8
) \

63 
	`ARM_MOVS_REG_IMM8_COND
(
p
, 
ªg
, 
imm8
, 
ARMCOND_AL
)

	)

65 #i‚de‡
ARM_NOIASM


66 
	#_MOV_REG_IMM8_COND
(
ªg
, 
imm8
, 
c⁄d
) \

67 
	`ARM_IASM_DPIOP_REG_IMM8ROT_COND
(
ARMOP_MOV
, 
ªg
, 0, 
imm8
, 0, 
c⁄d
)

	)

68 
	#_MOV_REG_IMM8
(
ªg
, 
imm8
) \

69 
	`_MOV_REG_IMM8_COND
(
ªg
, 
imm8
, 
ARMCOND_AL
)

	)

71 
	#_MOVS_REG_IMM8_COND
(
ªg
, 
imm8
, 
c⁄d
) \

72 
	`ARM_IASM_DPIOP_S_REG_IMM8ROT_COND
(
ARMOP_MOV
, 
ªg
, 0, 
imm8
, 0, 
c⁄d
)

	)

73 
	#_MOVS_REG_IMM8
(
ªg
, 
imm8
) \

74 
	`_MOVS_REG_IMM8_COND
(
ªg
, 
imm8
, 
ARMCOND_AL
)

	)

79 
	#ARM_MOV_REG_REG_COND
(
p
, 
rd
, 
rm
, 
c⁄d
) \

80 
	`ARM_DPIOP_REG_REG_COND
(
p
, 
ARMOP_MOV
, 
rd
, 0, 
rm
, 
c⁄d
)

	)

81 
	#ARM_MOV_REG_REG
(
p
, 
rd
, 
rm
) \

82 
	`ARM_MOV_REG_REG_COND
(
p
, 
rd
, 
rm
, 
ARMCOND_AL
)

	)

84 
	#ARM_MOVS_REG_REG_COND
(
p
, 
rd
, 
rm
, 
c⁄d
) \

85 
	`ARM_DPIOP_S_REG_REG_COND
(
p
, 
ARMOP_MOV
, 
rd
, 0, 
rm
, 
c⁄d
)

	)

86 
	#ARM_MOVS_REG_REG
(
p
, 
rd
, 
rm
) \

87 
	`ARM_MOVS_REG_REG_COND
(
p
, 
rd
, 
rm
, 
ARMCOND_AL
)

	)

89 #i‚de‡
ARM_NOIASM


90 
	#_MOV_REG_REG_COND
(
rd
, 
rm
, 
c⁄d
) \

91 
	`ARM_IASM_DPIOP_REG_REG_COND
(
ARMOP_MOV
, 
rd
, 0, 
rm
, 
c⁄d
)

	)

92 
	#_MOV_REG_REG
(
rd
, 
rm
) \

93 
	`_MOV_REG_REG_COND
(
rd
, 
rm
, 
ARMCOND_AL
)

	)

95 
	#_MOVS_REG_REG_COND
(
rd
, 
rm
, 
c⁄d
) \

96 
	`ARM_IASM_DPIOP_S_REG_REG_COND
(
ARMOP_MOV
, 
rd
, 0, 
rm
, 
c⁄d
)

	)

97 
	#_MOVS_REG_REG
(
rd
, 
rm
) \

98 
	`_MOVS_REG_REG_COND
(
rd
, 
rm
, 
ARMCOND_AL
)

	)

103 
	#ARM_MOV_REG_IMMSHIFT_COND
(
p
, 
rd
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
) \

104 
	`ARM_DPIOP_REG_IMMSHIFT_COND
(
p
, 
ARMOP_MOV
, 
rd
, 0, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
)

	)

105 
	#ARM_MOV_REG_IMMSHIFT
(
p
, 
rd
, 
rm
, 
shi·_ty≥
, 
imm_shi·
) \

106 
	`ARM_MOV_REG_IMMSHIFT_COND
(
p
, 
rd
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
ARMCOND_AL
)

	)

108 
	#ARM_MOVS_REG_IMMSHIFT_COND
(
p
, 
rd
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
) \

109 
	`ARM_DPIOP_S_REG_IMMSHIFT_COND
(
p
, 
ARMOP_MOV
, 
rd
, 0, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
)

	)

110 
	#ARM_MOVS_REG_IMMSHIFT
(
p
, 
rd
, 
rm
, 
shi·_ty≥
, 
imm_shi·
) \

111 
	`ARM_MOVS_REG_IMMSHIFT_COND
(
p
, 
rd
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
ARMCOND_AL
)

	)

113 #i‚de‡
ARM_NOIASM


114 
	#_MOV_REG_IMMSHIFT_COND
(
rd
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
) \

115 
	`ARM_IASM_DPIOP_REG_IMMSHIFT_COND
(
ARMOP_MOV
, 
rd
, 0, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
)

	)

116 
	#_MOV_REG_IMMSHIFT
(
rd
, 
rm
, 
shi·_ty≥
, 
imm_shi·
) \

117 
	`_MOV_REG_IMMSHIFT_COND
(
rd
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
ARMCOND_AL
)

	)

119 
	#_MOVS_REG_IMMSHIFT_COND
(
rd
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
) \

120 
	`ARM_IASM_DPIOP_S_REG_IMMSHIFT_COND
(
ARMOP_MOV
, 
rd
, 0, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
)

	)

121 
	#_MOVS_REG_IMMSHIFT
(
rd
, 
rm
, 
shi·_ty≥
, 
imm_shi·
) \

122 
	`_MOVS_REG_IMMSHIFT_COND
(
rd
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
ARMCOND_AL
)

	)

128 
	#ARM_MOV_REG_REGSHIFT_COND
(
p
, 
rd
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
) \

129 
	`ARM_DPIOP_REG_REGSHIFT_COND
(
p
, 
ARMOP_MOV
, 
rd
, 0, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
)

	)

130 
	#ARM_MOV_REG_REGSHIFT
(
p
, 
rd
, 
rm
, 
shi·_ty≥
, 
rs
) \

131 
	`ARM_MOV_REG_REGSHIFT_COND
(
p
, 
rd
, 
rm
, 
shi·_ty≥
, 
rs
, 
ARMCOND_AL
)

	)

133 
	#ARM_MOVS_REG_REGSHIFT_COND
(
p
, 
rd
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
) \

134 
	`ARM_DPIOP_S_REG_REGSHIFT_COND
(
p
, 
ARMOP_MOV
, 
rd
, 0, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
)

	)

135 
	#ARM_MOVS_REG_REGSHIFT
(
p
, 
rd
, 
rm
, 
shi·_ty≥
, 
rs
) \

136 
	`ARM_MOVS_REG_REGSHIFT_COND
(
p
, 
rd
, 
rm
, 
shi·_ty≥
, 
rs
, 
ARMCOND_AL
)

	)

138 #i‚de‡
ARM_NOIASM


139 
	#_MOV_REG_REGSHIFT_COND
(
rd
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
) \

140 
	`ARM_IASM_DPIOP_REG_REGSHIFT_COND
(
ARMOP_MOV
, 
rd
, 0, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
)

	)

141 
	#_MOV_REG_REGSHIFT
(
rd
, 
rm
, 
shi·_ty≥
, 
rs
) \

142 
	`_MOV_REG_REGSHIFT_COND
(
rd
, 
rm
, 
shi·_ty≥
, 
rs
, 
ARMCOND_AL
)

	)

144 
	#_MOVS_REG_REGSHIFT_COND
(
rd
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
) \

145 
	`ARM_IASM_DPIOP_S_REG_REGSHIFT_COND
(
ARMOP_MOV
, 
rd
, 0, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
)

	)

146 
	#_MOVS_REG_REGSHIFT
(
rd
, 
rm
, 
shi·_ty≥
, 
rs
) \

147 
	`_MOVS_REG_REGSHIFT_COND
(
rd
, 
rm
, 
shi·_ty≥
, 
rs
, 
ARMCOND_AL
)

	)

152 
	#ARM_MVN_REG_IMM_COND
(
p
, 
ªg
, 
imm8
, 
rŸ
, 
c⁄d
) \

153 
	`ARM_DPIOP_REG_IMM8ROT_COND
(
p
, 
ARMOP_MVN
, 
ªg
, 0, 
imm8
, 
rŸ
, 
c⁄d
)

	)

154 
	#ARM_MVN_REG_IMM
(
p
, 
ªg
, 
imm8
, 
rŸ
) \

155 
	`ARM_MVN_REG_IMM_COND
(
p
, 
ªg
, 
imm8
, 
rŸ
, 
ARMCOND_AL
)

	)

157 
	#ARM_MVNS_REG_IMM_COND
(
p
, 
ªg
, 
imm8
, 
rŸ
, 
c⁄d
) \

158 
	`ARM_DPIOP_S_REG_IMM8ROT_COND
(
p
, 
ARMOP_MVN
, 
ªg
, 0, 
imm8
, 
rŸ
, 
c⁄d
)

	)

159 
	#ARM_MVNS_REG_IMM
(
p
, 
ªg
, 
imm8
, 
rŸ
) \

160 
	`ARM_MVNS_REG_IMM_COND
(
p
, 
ªg
, 
imm8
, 
rŸ
, 
ARMCOND_AL
)

	)

162 #i‚de‡
ARM_NOIASM


163 
	#_MVN_REG_IMM_COND
(
ªg
, 
imm8
, 
rŸ
, 
c⁄d
) \

164 
	`ARM_IASM_DPIOP_REG_IMM8ROT_COND
(
ARMOP_MVN
, 
ªg
, 0, 
imm8
, 
rŸ
, 
c⁄d
)

	)

165 
	#_MVN_REG_IMM
(
ªg
, 
imm8
, 
rŸ
) \

166 
	`_MVN_REG_IMM_COND
(
ªg
, 
imm8
, 
rŸ
, 
ARMCOND_AL
)

	)

168 
	#_MVNS_REG_IMM_COND
(
ªg
, 
imm8
, 
rŸ
, 
c⁄d
) \

169 
	`ARM_IASM_DPIOP_S_REG_IMM8ROT_COND
(
ARMOP_MVN
, 
ªg
, 0, 
imm8
, 
rŸ
, 
c⁄d
)

	)

170 
	#_MVNS_REG_IMM
(
ªg
, 
imm8
, 
rŸ
) \

171 
	`_MVNS_REG_IMM_COND
(
ªg
, 
imm8
, 
rŸ
, 
ARMCOND_AL
)

	)

176 
	#ARM_MVN_REG_IMM8_COND
(
p
, 
ªg
, 
imm8
, 
c⁄d
) \

177 
	`ARM_DPIOP_REG_IMM8ROT_COND
(
p
, 
ARMOP_MVN
, 
ªg
, 0, 
imm8
, 0, 
c⁄d
)

	)

178 
	#ARM_MVN_REG_IMM8
(
p
, 
ªg
, 
imm8
) \

179 
	`ARM_MVN_REG_IMM8_COND
(
p
, 
ªg
, 
imm8
, 
ARMCOND_AL
)

	)

181 
	#ARM_MVNS_REG_IMM8_COND
(
p
, 
ªg
, 
imm8
, 
c⁄d
) \

182 
	`ARM_DPIOP_S_REG_IMM8ROT_COND
(
p
, 
ARMOP_MVN
, 
ªg
, 0, 
imm8
, 0, 
c⁄d
)

	)

183 
	#ARM_MVNS_REG_IMM8
(
p
, 
ªg
, 
imm8
) \

184 
	`ARM_MVNS_REG_IMM8_COND
(
p
, 
ªg
, 
imm8
, 
ARMCOND_AL
)

	)

186 #i‚de‡
ARM_NOIASM


187 
	#_MVN_REG_IMM8_COND
(
ªg
, 
imm8
, 
c⁄d
) \

188 
	`ARM_IASM_DPIOP_REG_IMM8ROT_COND
(
ARMOP_MVN
, 
ªg
, 0, 
imm8
, 0, 
c⁄d
)

	)

189 
	#_MVN_REG_IMM8
(
ªg
, 
imm8
) \

190 
	`_MVN_REG_IMM8_COND
(
ªg
, 
imm8
, 
ARMCOND_AL
)

	)

192 
	#_MVNS_REG_IMM8_COND
(
ªg
, 
imm8
, 
c⁄d
) \

193 
	`ARM_IASM_DPIOP_S_REG_IMM8ROT_COND
(
ARMOP_MVN
, 
ªg
, 0, 
imm8
, 0, 
c⁄d
)

	)

194 
	#_MVNS_REG_IMM8
(
ªg
, 
imm8
) \

195 
	`_MVNS_REG_IMM8_COND
(
ªg
, 
imm8
, 
ARMCOND_AL
)

	)

200 
	#ARM_MVN_REG_REG_COND
(
p
, 
rd
, 
rm
, 
c⁄d
) \

201 
	`ARM_DPIOP_REG_REG_COND
(
p
, 
ARMOP_MVN
, 
rd
, 0, 
rm
, 
c⁄d
)

	)

202 
	#ARM_MVN_REG_REG
(
p
, 
rd
, 
rm
) \

203 
	`ARM_MVN_REG_REG_COND
(
p
, 
rd
, 
rm
, 
ARMCOND_AL
)

	)

205 
	#ARM_MVNS_REG_REG_COND
(
p
, 
rd
, 
rm
, 
c⁄d
) \

206 
	`ARM_DPIOP_S_REG_REG_COND
(
p
, 
ARMOP_MVN
, 
rd
, 0, 
rm
, 
c⁄d
)

	)

207 
	#ARM_MVNS_REG_REG
(
p
, 
rd
, 
rm
) \

208 
	`ARM_MVNS_REG_REG_COND
(
p
, 
rd
, 
rm
, 
ARMCOND_AL
)

	)

210 #i‚de‡
ARM_NOIASM


211 
	#_MVN_REG_REG_COND
(
rd
, 
rm
, 
c⁄d
) \

212 
	`ARM_IASM_DPIOP_REG_REG_COND
(
ARMOP_MVN
, 
rd
, 0, 
rm
, 
c⁄d
)

	)

213 
	#_MVN_REG_REG
(
rd
, 
rm
) \

214 
	`_MVN_REG_REG_COND
(
rd
, 
rm
, 
ARMCOND_AL
)

	)

216 
	#_MVNS_REG_REG_COND
(
rd
, 
rm
, 
c⁄d
) \

217 
	`ARM_IASM_DPIOP_S_REG_REG_COND
(
ARMOP_MVN
, 
rd
, 0, 
rm
, 
c⁄d
)

	)

218 
	#_MVNS_REG_REG
(
rd
, 
rm
) \

219 
	`_MVNS_REG_REG_COND
(
rd
, 
rm
, 
ARMCOND_AL
)

	)

224 
	#ARM_MVN_REG_IMMSHIFT_COND
(
p
, 
rd
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
) \

225 
	`ARM_DPIOP_REG_IMMSHIFT_COND
(
p
, 
ARMOP_MVN
, 
rd
, 0, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
)

	)

226 
	#ARM_MVN_REG_IMMSHIFT
(
p
, 
rd
, 
rm
, 
shi·_ty≥
, 
imm_shi·
) \

227 
	`ARM_MVN_REG_IMMSHIFT_COND
(
p
, 
rd
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
ARMCOND_AL
)

	)

229 
	#ARM_MVNS_REG_IMMSHIFT_COND
(
p
, 
rd
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
) \

230 
	`ARM_DPIOP_S_REG_IMMSHIFT_COND
(
p
, 
ARMOP_MVN
, 
rd
, 0, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
)

	)

231 
	#ARM_MVNS_REG_IMMSHIFT
(
p
, 
rd
, 
rm
, 
shi·_ty≥
, 
imm_shi·
) \

232 
	`ARM_MVNS_REG_IMMSHIFT_COND
(
p
, 
rd
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
ARMCOND_AL
)

	)

234 #i‚de‡
ARM_NOIASM


235 
	#_MVN_REG_IMMSHIFT_COND
(
rd
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
) \

236 
	`ARM_IASM_DPIOP_REG_IMMSHIFT_COND
(
ARMOP_MVN
, 
rd
, 0, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
)

	)

237 
	#_MVN_REG_IMMSHIFT
(
rd
, 
rm
, 
shi·_ty≥
, 
imm_shi·
) \

238 
	`_MVN_REG_IMMSHIFT_COND
(
rd
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
ARMCOND_AL
)

	)

240 
	#_MVNS_REG_IMMSHIFT_COND
(
rd
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
) \

241 
	`ARM_IASM_DPIOP_S_REG_IMMSHIFT_COND
(
ARMOP_MVN
, 
rd
, 0, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
)

	)

242 
	#_MVNS_REG_IMMSHIFT
(
rd
, 
rm
, 
shi·_ty≥
, 
imm_shi·
) \

243 
	`_MVNS_REG_IMMSHIFT_COND
(
rd
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
ARMCOND_AL
)

	)

249 
	#ARM_MVN_REG_REGSHIFT_COND
(
p
, 
rd
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
) \

250 
	`ARM_DPIOP_REG_REGSHIFT_COND
(
p
, 
ARMOP_MVN
, 
rd
, 0, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
)

	)

251 
	#ARM_MVN_REG_REGSHIFT
(
p
, 
rd
, 
rm
, 
shi·_ty≥
, 
rs
) \

252 
	`ARM_MVN_REG_REGSHIFT_COND
(
p
, 
rd
, 
rm
, 
shi·_ty≥
, 
rs
, 
ARMCOND_AL
)

	)

254 
	#ARM_MVNS_REG_REGSHIFT_COND
(
p
, 
rd
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
) \

255 
	`ARM_DPIOP_S_REG_REGSHIFT_COND
(
p
, 
ARMOP_MVN
, 
rd
, 0, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
)

	)

256 
	#ARM_MVNS_REG_REGSHIFT
(
p
, 
rd
, 
rm
, 
shi·_ty≥
, 
rs
) \

257 
	`ARM_MVNS_REG_REGSHIFT_COND
(
p
, 
rd
, 
rm
, 
shi·_ty≥
, 
rs
, 
ARMCOND_AL
)

	)

259 #i‚de‡
ARM_NOIASM


260 
	#_MVN_REG_REGSHIFT_COND
(
rd
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
) \

261 
	`ARM_IASM_DPIOP_REG_REGSHIFT_COND
(
ARMOP_MVN
, 
rd
, 0, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
)

	)

262 
	#_MVN_REG_REGSHIFT
(
rd
, 
rm
, 
shi·_ty≥
, 
rs
) \

263 
	`_MVN_REG_REGSHIFT_COND
(
rd
, 
rm
, 
shi·_ty≥
, 
rs
, 
ARMCOND_AL
)

	)

265 
	#_MVNS_REG_REGSHIFT_COND
(
rd
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
) \

266 
	`ARM_IASM_DPIOP_S_REG_REGSHIFT_COND
(
ARMOP_MVN
, 
rd
, 0, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
)

	)

267 
	#_MVNS_REG_REGSHIFT
(
rd
, 
rm
, 
shi·_ty≥
, 
rs
) \

268 
	`_MVNS_REG_REGSHIFT_COND
(
rd
, 
rm
, 
shi·_ty≥
, 
rs
, 
ARMCOND_AL
)

	)

278 
	#ARM_AND_REG_IMM_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
) \

279 
	`ARM_DPIOP_REG_IMM8ROT_COND
(
p
, 
ARMOP_AND
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
)

	)

280 
	#ARM_AND_REG_IMM
(
p
, 
rd
, 
∫
, 
imm8
, 
rŸ
) \

281 
	`ARM_AND_REG_IMM_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
ARMCOND_AL
)

	)

282 
	#ARM_ANDS_REG_IMM_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
) \

283 
	`ARM_DPIOP_S_REG_IMM8ROT_COND
(
p
, 
ARMOP_AND
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
)

	)

284 
	#ARM_ANDS_REG_IMM
(
p
, 
rd
, 
∫
, 
imm8
, 
rŸ
) \

285 
	`ARM_ANDS_REG_IMM_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
ARMCOND_AL
)

	)

287 #i‚de‡
ARM_NOIASM


288 
	#_AND_REG_IMM_COND
(
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
) \

289 
	`ARM_IASM_DPIOP_REG_IMM8ROT_COND
(
ARMOP_AND
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
)

	)

290 
	#_AND_REG_IMM
(
rd
, 
∫
, 
imm8
, 
rŸ
) \

291 
	`_AND_REG_IMM_COND
(
rd
, 
∫
, 
imm8
, 
rŸ
, 
ARMCOND_AL
)

	)

292 
	#_ANDS_REG_IMM_COND
(
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
) \

293 
	`ARM_IASM_DPIOP_S_REG_IMM8ROT_COND
(
ARMOP_AND
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
)

	)

294 
	#_ANDS_REG_IMM
(
rd
, 
∫
, 
imm8
, 
rŸ
) \

295 
	`_ANDS_REG_IMM_COND
(
rd
, 
∫
, 
imm8
, 
rŸ
, 
ARMCOND_AL
)

	)

300 
	#ARM_AND_REG_IMM8_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
c⁄d
) \

301 
	`ARM_AND_REG_IMM_COND
(
p
, 
rd
, 
∫
, 
imm8
, 0, 
c⁄d
)

	)

302 
	#ARM_AND_REG_IMM8
(
p
, 
rd
, 
∫
, 
imm8
) \

303 
	`ARM_AND_REG_IMM8_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
ARMCOND_AL
)

	)

304 
	#ARM_ANDS_REG_IMM8_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
c⁄d
) \

305 
	`ARM_ANDS_REG_IMM_COND
(
p
, 
rd
, 
∫
, 
imm8
, 0, 
c⁄d
)

	)

306 
	#ARM_ANDS_REG_IMM8
(
p
, 
rd
, 
∫
, 
imm8
) \

307 
	`ARM_ANDS_REG_IMM8_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
ARMCOND_AL
)

	)

309 #i‚de‡
ARM_NOIASM


310 
	#_AND_REG_IMM8_COND
(
rd
, 
∫
, 
imm8
, 
c⁄d
) \

311 
	`_AND_REG_IMM_COND
(
rd
, 
∫
, 
imm8
, 0, 
c⁄d
)

	)

312 
	#_AND_REG_IMM8
(
rd
, 
∫
, 
imm8
) \

313 
	`_AND_REG_IMM8_COND
(
rd
, 
∫
, 
imm8
, 
ARMCOND_AL
)

	)

314 
	#_ANDS_REG_IMM8_COND
(
rd
, 
∫
, 
imm8
, 
c⁄d
) \

315 
	`_ANDS_REG_IMM_COND
(
rd
, 
∫
, 
imm8
, 0, 
c⁄d
)

	)

316 
	#_ANDS_REG_IMM8
(
rd
, 
∫
, 
imm8
) \

317 
	`_ANDS_REG_IMM8_COND
(
rd
, 
∫
, 
imm8
, 
ARMCOND_AL
)

	)

322 
	#ARM_AND_REG_REG_COND
(
p
, 
rd
, 
∫
, 
rm
, 
c⁄d
) \

323 
	`ARM_DPIOP_REG_REG_COND
(
p
, 
ARMOP_AND
, 
rd
, 
∫
, 
rm
, 
c⁄d
)

	)

324 
	#ARM_AND_REG_REG
(
p
, 
rd
, 
∫
, 
rm
) \

325 
	`ARM_AND_REG_REG_COND
(
p
, 
rd
, 
∫
, 
rm
, 
ARMCOND_AL
)

	)

326 
	#ARM_ANDS_REG_REG_COND
(
p
, 
rd
, 
∫
, 
rm
, 
c⁄d
) \

327 
	`ARM_DPIOP_S_REG_REG_COND
(
p
, 
ARMOP_AND
, 
rd
, 
∫
, 
rm
, 
c⁄d
)

	)

328 
	#ARM_ANDS_REG_REG
(
p
, 
rd
, 
∫
, 
rm
) \

329 
	`ARM_ANDS_REG_REG_COND
(
p
, 
rd
, 
∫
, 
rm
, 
ARMCOND_AL
)

	)

331 #i‚de‡
ARM_NOIASM


332 
	#_AND_REG_REG_COND
(
rd
, 
∫
, 
rm
, 
c⁄d
) \

333 
	`ARM_IASM_DPIOP_REG_REG_COND
(
ARMOP_AND
, 
rd
, 
∫
, 
rm
, 
c⁄d
)

	)

334 
	#_AND_REG_REG
(
rd
, 
∫
, 
rm
) \

335 
	`_AND_REG_REG_COND
(
rd
, 
∫
, 
rm
, 
ARMCOND_AL
)

	)

336 
	#_ANDS_REG_REG_COND
(
rd
, 
∫
, 
rm
, 
c⁄d
) \

337 
	`ARM_IASM_DPIOP_S_REG_REG_COND
(
ARMOP_AND
, 
rd
, 
∫
, 
rm
, 
c⁄d
)

	)

338 
	#_ANDS_REG_REG
(
rd
, 
∫
, 
rm
) \

339 
	`_ANDS_REG_REG_COND
(
rd
, 
∫
, 
rm
, 
ARMCOND_AL
)

	)

344 
	#ARM_AND_REG_IMMSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
) \

345 
	`ARM_DPIOP_REG_IMMSHIFT_COND
(
p
, 
ARMOP_AND
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
)

	)

346 
	#ARM_AND_REG_IMMSHIFT
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
) \

347 
	`ARM_AND_REG_IMMSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
ARMCOND_AL
)

	)

348 
	#ARM_ANDS_REG_IMMSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
) \

349 
	`ARM_DPIOP_S_REG_IMMSHIFT_COND
(
p
, 
ARMOP_AND
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
)

	)

350 
	#ARM_ANDS_REG_IMMSHIFT
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
) \

351 
	`ARM_ANDS_REG_IMMSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
ARMCOND_AL
)

	)

353 #i‚de‡
ARM_NOIASM


354 
	#_AND_REG_IMMSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
) \

355 
	`ARM_IASM_DPIOP_REG_IMMSHIFT_COND
(
ARMOP_AND
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
)

	)

356 
	#_AND_REG_IMMSHIFT
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
) \

357 
	`_AND_REG_IMMSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
ARMCOND_AL
)

	)

358 
	#_ANDS_REG_IMMSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
) \

359 
	`ARM_IASM_DPIOP_S_REG_IMMSHIFT_COND
(
ARMOP_AND
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
)

	)

360 
	#_ANDS_REG_IMMSHIFT
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
) \

361 
	`_ANDS_REG_IMMSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
ARMCOND_AL
)

	)

366 
	#ARM_AND_REG_REGSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
) \

367 
	`ARM_DPIOP_REG_REGSHIFT_COND
(
p
, 
ARMOP_AND
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
)

	)

368 
	#ARM_AND_REG_REGSHIFT
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
) \

369 
	`ARM_AND_REG_REGSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
ARMCOND_AL
)

	)

370 
	#ARM_ANDS_REG_REGSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
) \

371 
	`ARM_DPIOP_S_REG_REGSHIFT_COND
(
p
, 
ARMOP_AND
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
)

	)

372 
	#ARM_ANDS_REG_REGSHIFT
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
) \

373 
	`ARM_ANDS_REG_REGSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
ARMCOND_AL
)

	)

375 #i‚de‡
ARM_NOIASM


376 
	#_AND_REG_REGSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
) \

377 
	`ARM_IASM_DPIOP_REG_REGSHIFT_COND
(
ARMOP_AND
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
)

	)

378 
	#_AND_REG_REGSHIFT
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
) \

379 
	`_AND_REG_REGSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
ARMCOND_AL
)

	)

380 
	#_ANDS_REG_REGSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
) \

381 
	`ARM_IASM_DPIOP_S_REG_REGSHIFT_COND
(
ARMOP_AND
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
)

	)

382 
	#_ANDS_REG_REGSHIFT
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
) \

383 
	`_ANDS_REG_REGSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
ARMCOND_AL
)

	)

390 
	#ARM_EOR_REG_IMM_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
) \

391 
	`ARM_DPIOP_REG_IMM8ROT_COND
(
p
, 
ARMOP_EOR
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
)

	)

392 
	#ARM_EOR_REG_IMM
(
p
, 
rd
, 
∫
, 
imm8
, 
rŸ
) \

393 
	`ARM_EOR_REG_IMM_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
ARMCOND_AL
)

	)

394 
	#ARM_EORS_REG_IMM_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
) \

395 
	`ARM_DPIOP_S_REG_IMM8ROT_COND
(
p
, 
ARMOP_EOR
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
)

	)

396 
	#ARM_EORS_REG_IMM
(
p
, 
rd
, 
∫
, 
imm8
, 
rŸ
) \

397 
	`ARM_EORS_REG_IMM_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
ARMCOND_AL
)

	)

399 #i‚de‡
ARM_NOIASM


400 
	#_EOR_REG_IMM_COND
(
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
) \

401 
	`ARM_IASM_DPIOP_REG_IMM8ROT_COND
(
ARMOP_EOR
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
)

	)

402 
	#_EOR_REG_IMM
(
rd
, 
∫
, 
imm8
, 
rŸ
) \

403 
	`_EOR_REG_IMM_COND
(
rd
, 
∫
, 
imm8
, 
rŸ
, 
ARMCOND_AL
)

	)

404 
	#_EORS_REG_IMM_COND
(
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
) \

405 
	`ARM_IASM_DPIOP_S_REG_IMM8ROT_COND
(
ARMOP_EOR
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
)

	)

406 
	#_EORS_REG_IMM
(
rd
, 
∫
, 
imm8
, 
rŸ
) \

407 
	`_EORS_REG_IMM_COND
(
rd
, 
∫
, 
imm8
, 
rŸ
, 
ARMCOND_AL
)

	)

412 
	#ARM_EOR_REG_IMM8_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
c⁄d
) \

413 
	`ARM_EOR_REG_IMM_COND
(
p
, 
rd
, 
∫
, 
imm8
, 0, 
c⁄d
)

	)

414 
	#ARM_EOR_REG_IMM8
(
p
, 
rd
, 
∫
, 
imm8
) \

415 
	`ARM_EOR_REG_IMM8_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
ARMCOND_AL
)

	)

416 
	#ARM_EORS_REG_IMM8_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
c⁄d
) \

417 
	`ARM_EORS_REG_IMM_COND
(
p
, 
rd
, 
∫
, 
imm8
, 0, 
c⁄d
)

	)

418 
	#ARM_EORS_REG_IMM8
(
p
, 
rd
, 
∫
, 
imm8
) \

419 
	`ARM_EORS_REG_IMM8_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
ARMCOND_AL
)

	)

421 #i‚de‡
ARM_NOIASM


422 
	#_EOR_REG_IMM8_COND
(
rd
, 
∫
, 
imm8
, 
c⁄d
) \

423 
	`_EOR_REG_IMM_COND
(
rd
, 
∫
, 
imm8
, 0, 
c⁄d
)

	)

424 
	#_EOR_REG_IMM8
(
rd
, 
∫
, 
imm8
) \

425 
	`_EOR_REG_IMM8_COND
(
rd
, 
∫
, 
imm8
, 
ARMCOND_AL
)

	)

426 
	#_EORS_REG_IMM8_COND
(
rd
, 
∫
, 
imm8
, 
c⁄d
) \

427 
	`_EORS_REG_IMM_COND
(
rd
, 
∫
, 
imm8
, 0, 
c⁄d
)

	)

428 
	#_EORS_REG_IMM8
(
rd
, 
∫
, 
imm8
) \

429 
	`_EORS_REG_IMM8_COND
(
rd
, 
∫
, 
imm8
, 
ARMCOND_AL
)

	)

434 
	#ARM_EOR_REG_REG_COND
(
p
, 
rd
, 
∫
, 
rm
, 
c⁄d
) \

435 
	`ARM_DPIOP_REG_REG_COND
(
p
, 
ARMOP_EOR
, 
rd
, 
∫
, 
rm
, 
c⁄d
)

	)

436 
	#ARM_EOR_REG_REG
(
p
, 
rd
, 
∫
, 
rm
) \

437 
	`ARM_EOR_REG_REG_COND
(
p
, 
rd
, 
∫
, 
rm
, 
ARMCOND_AL
)

	)

438 
	#ARM_EORS_REG_REG_COND
(
p
, 
rd
, 
∫
, 
rm
, 
c⁄d
) \

439 
	`ARM_DPIOP_S_REG_REG_COND
(
p
, 
ARMOP_EOR
, 
rd
, 
∫
, 
rm
, 
c⁄d
)

	)

440 
	#ARM_EORS_REG_REG
(
p
, 
rd
, 
∫
, 
rm
) \

441 
	`ARM_EORS_REG_REG_COND
(
p
, 
rd
, 
∫
, 
rm
, 
ARMCOND_AL
)

	)

443 #i‚de‡
ARM_NOIASM


444 
	#_EOR_REG_REG_COND
(
rd
, 
∫
, 
rm
, 
c⁄d
) \

445 
	`ARM_IASM_DPIOP_REG_REG_COND
(
ARMOP_EOR
, 
rd
, 
∫
, 
rm
, 
c⁄d
)

	)

446 
	#_EOR_REG_REG
(
rd
, 
∫
, 
rm
) \

447 
	`_EOR_REG_REG_COND
(
rd
, 
∫
, 
rm
, 
ARMCOND_AL
)

	)

448 
	#_EORS_REG_REG_COND
(
rd
, 
∫
, 
rm
, 
c⁄d
) \

449 
	`ARM_IASM_DPIOP_S_REG_REG_COND
(
ARMOP_EOR
, 
rd
, 
∫
, 
rm
, 
c⁄d
)

	)

450 
	#_EORS_REG_REG
(
rd
, 
∫
, 
rm
) \

451 
	`_EORS_REG_REG_COND
(
rd
, 
∫
, 
rm
, 
ARMCOND_AL
)

	)

456 
	#ARM_EOR_REG_IMMSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
) \

457 
	`ARM_DPIOP_REG_IMMSHIFT_COND
(
p
, 
ARMOP_EOR
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
)

	)

458 
	#ARM_EOR_REG_IMMSHIFT
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
) \

459 
	`ARM_EOR_REG_IMMSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
ARMCOND_AL
)

	)

460 
	#ARM_EORS_REG_IMMSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
) \

461 
	`ARM_DPIOP_S_REG_IMMSHIFT_COND
(
p
, 
ARMOP_EOR
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
)

	)

462 
	#ARM_EORS_REG_IMMSHIFT
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
) \

463 
	`ARM_EORS_REG_IMMSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
ARMCOND_AL
)

	)

465 #i‚de‡
ARM_NOIASM


466 
	#_EOR_REG_IMMSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
) \

467 
	`ARM_IASM_DPIOP_REG_IMMSHIFT_COND
(
ARMOP_EOR
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
)

	)

468 
	#_EOR_REG_IMMSHIFT
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
) \

469 
	`_EOR_REG_IMMSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
ARMCOND_AL
)

	)

470 
	#_EORS_REG_IMMSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
) \

471 
	`ARM_IASM_DPIOP_S_REG_IMMSHIFT_COND
(
ARMOP_EOR
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
)

	)

472 
	#_EORS_REG_IMMSHIFT
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
) \

473 
	`_EORS_REG_IMMSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
ARMCOND_AL
)

	)

478 
	#ARM_EOR_REG_REGSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
) \

479 
	`ARM_DPIOP_REG_REGSHIFT_COND
(
p
, 
ARMOP_EOR
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
)

	)

480 
	#ARM_EOR_REG_REGSHIFT
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
) \

481 
	`ARM_EOR_REG_REGSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
ARMCOND_AL
)

	)

482 
	#ARM_EORS_REG_REGSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
) \

483 
	`ARM_DPIOP_S_REG_REGSHIFT_COND
(
p
, 
ARMOP_EOR
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
)

	)

484 
	#ARM_EORS_REG_REGSHIFT
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
) \

485 
	`ARM_EORS_REG_REGSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
ARMCOND_AL
)

	)

487 #i‚de‡
ARM_NOIASM


488 
	#_EOR_REG_REGSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
) \

489 
	`ARM_IASM_DPIOP_REG_REGSHIFT_COND
(
ARMOP_EOR
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
)

	)

490 
	#_EOR_REG_REGSHIFT
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
) \

491 
	`_EOR_REG_REGSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
ARMCOND_AL
)

	)

492 
	#_EORS_REG_REGSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
) \

493 
	`ARM_IASM_DPIOP_S_REG_REGSHIFT_COND
(
ARMOP_EOR
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
)

	)

494 
	#_EORS_REG_REGSHIFT
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
) \

495 
	`_EORS_REG_REGSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
ARMCOND_AL
)

	)

502 
	#ARM_SUB_REG_IMM_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
) \

503 
	`ARM_DPIOP_REG_IMM8ROT_COND
(
p
, 
ARMOP_SUB
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
)

	)

504 
	#ARM_SUB_REG_IMM
(
p
, 
rd
, 
∫
, 
imm8
, 
rŸ
) \

505 
	`ARM_SUB_REG_IMM_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
ARMCOND_AL
)

	)

506 
	#ARM_SUBS_REG_IMM_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
) \

507 
	`ARM_DPIOP_S_REG_IMM8ROT_COND
(
p
, 
ARMOP_SUB
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
)

	)

508 
	#ARM_SUBS_REG_IMM
(
p
, 
rd
, 
∫
, 
imm8
, 
rŸ
) \

509 
	`ARM_SUBS_REG_IMM_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
ARMCOND_AL
)

	)

511 #i‚de‡
ARM_NOIASM


512 
	#_SUB_REG_IMM_COND
(
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
) \

513 
	`ARM_IASM_DPIOP_REG_IMM8ROT_COND
(
ARMOP_SUB
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
)

	)

514 
	#_SUB_REG_IMM
(
rd
, 
∫
, 
imm8
, 
rŸ
) \

515 
	`_SUB_REG_IMM_COND
(
rd
, 
∫
, 
imm8
, 
rŸ
, 
ARMCOND_AL
)

	)

516 
	#_SUBS_REG_IMM_COND
(
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
) \

517 
	`ARM_IASM_DPIOP_S_REG_IMM8ROT_COND
(
ARMOP_SUB
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
)

	)

518 
	#_SUBS_REG_IMM
(
rd
, 
∫
, 
imm8
, 
rŸ
) \

519 
	`_SUBS_REG_IMM_COND
(
rd
, 
∫
, 
imm8
, 
rŸ
, 
ARMCOND_AL
)

	)

524 
	#ARM_SUB_REG_IMM8_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
c⁄d
) \

525 
	`ARM_SUB_REG_IMM_COND
(
p
, 
rd
, 
∫
, 
imm8
, 0, 
c⁄d
)

	)

526 
	#ARM_SUB_REG_IMM8
(
p
, 
rd
, 
∫
, 
imm8
) \

527 
	`ARM_SUB_REG_IMM8_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
ARMCOND_AL
)

	)

528 
	#ARM_SUBS_REG_IMM8_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
c⁄d
) \

529 
	`ARM_SUBS_REG_IMM_COND
(
p
, 
rd
, 
∫
, 
imm8
, 0, 
c⁄d
)

	)

530 
	#ARM_SUBS_REG_IMM8
(
p
, 
rd
, 
∫
, 
imm8
) \

531 
	`ARM_SUBS_REG_IMM8_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
ARMCOND_AL
)

	)

533 #i‚de‡
ARM_NOIASM


534 
	#_SUB_REG_IMM8_COND
(
rd
, 
∫
, 
imm8
, 
c⁄d
) \

535 
	`_SUB_REG_IMM_COND
(
rd
, 
∫
, 
imm8
, 0, 
c⁄d
)

	)

536 
	#_SUB_REG_IMM8
(
rd
, 
∫
, 
imm8
) \

537 
	`_SUB_REG_IMM8_COND
(
rd
, 
∫
, 
imm8
, 
ARMCOND_AL
)

	)

538 
	#_SUBS_REG_IMM8_COND
(
rd
, 
∫
, 
imm8
, 
c⁄d
) \

539 
	`_SUBS_REG_IMM_COND
(
rd
, 
∫
, 
imm8
, 0, 
c⁄d
)

	)

540 
	#_SUBS_REG_IMM8
(
rd
, 
∫
, 
imm8
) \

541 
	`_SUBS_REG_IMM8_COND
(
rd
, 
∫
, 
imm8
, 
ARMCOND_AL
)

	)

546 
	#ARM_SUB_REG_REG_COND
(
p
, 
rd
, 
∫
, 
rm
, 
c⁄d
) \

547 
	`ARM_DPIOP_REG_REG_COND
(
p
, 
ARMOP_SUB
, 
rd
, 
∫
, 
rm
, 
c⁄d
)

	)

548 
	#ARM_SUB_REG_REG
(
p
, 
rd
, 
∫
, 
rm
) \

549 
	`ARM_SUB_REG_REG_COND
(
p
, 
rd
, 
∫
, 
rm
, 
ARMCOND_AL
)

	)

550 
	#ARM_SUBS_REG_REG_COND
(
p
, 
rd
, 
∫
, 
rm
, 
c⁄d
) \

551 
	`ARM_DPIOP_S_REG_REG_COND
(
p
, 
ARMOP_SUB
, 
rd
, 
∫
, 
rm
, 
c⁄d
)

	)

552 
	#ARM_SUBS_REG_REG
(
p
, 
rd
, 
∫
, 
rm
) \

553 
	`ARM_SUBS_REG_REG_COND
(
p
, 
rd
, 
∫
, 
rm
, 
ARMCOND_AL
)

	)

555 #i‚de‡
ARM_NOIASM


556 
	#_SUB_REG_REG_COND
(
rd
, 
∫
, 
rm
, 
c⁄d
) \

557 
	`ARM_IASM_DPIOP_REG_REG_COND
(
ARMOP_SUB
, 
rd
, 
∫
, 
rm
, 
c⁄d
)

	)

558 
	#_SUB_REG_REG
(
rd
, 
∫
, 
rm
) \

559 
	`_SUB_REG_REG_COND
(
rd
, 
∫
, 
rm
, 
ARMCOND_AL
)

	)

560 
	#_SUBS_REG_REG_COND
(
rd
, 
∫
, 
rm
, 
c⁄d
) \

561 
	`ARM_IASM_DPIOP_S_REG_REG_COND
(
ARMOP_SUB
, 
rd
, 
∫
, 
rm
, 
c⁄d
)

	)

562 
	#_SUBS_REG_REG
(
rd
, 
∫
, 
rm
) \

563 
	`_SUBS_REG_REG_COND
(
rd
, 
∫
, 
rm
, 
ARMCOND_AL
)

	)

568 
	#ARM_SUB_REG_IMMSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
) \

569 
	`ARM_DPIOP_REG_IMMSHIFT_COND
(
p
, 
ARMOP_SUB
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
)

	)

570 
	#ARM_SUB_REG_IMMSHIFT
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
) \

571 
	`ARM_SUB_REG_IMMSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
ARMCOND_AL
)

	)

572 
	#ARM_SUBS_REG_IMMSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
) \

573 
	`ARM_DPIOP_S_REG_IMMSHIFT_COND
(
p
, 
ARMOP_SUB
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
)

	)

574 
	#ARM_SUBS_REG_IMMSHIFT
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
) \

575 
	`ARM_SUBS_REG_IMMSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
ARMCOND_AL
)

	)

577 #i‚de‡
ARM_NOIASM


578 
	#_SUB_REG_IMMSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
) \

579 
	`ARM_IASM_DPIOP_REG_IMMSHIFT_COND
(
ARMOP_SUB
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
)

	)

580 
	#_SUB_REG_IMMSHIFT
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
) \

581 
	`_SUB_REG_IMMSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
ARMCOND_AL
)

	)

582 
	#_SUBS_REG_IMMSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
) \

583 
	`ARM_IASM_DPIOP_S_REG_IMMSHIFT_COND
(
ARMOP_SUB
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
)

	)

584 
	#_SUBS_REG_IMMSHIFT
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
) \

585 
	`_SUBS_REG_IMMSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
ARMCOND_AL
)

	)

590 
	#ARM_SUB_REG_REGSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
) \

591 
	`ARM_DPIOP_REG_REGSHIFT_COND
(
p
, 
ARMOP_SUB
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
)

	)

592 
	#ARM_SUB_REG_REGSHIFT
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
) \

593 
	`ARM_SUB_REG_REGSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
ARMCOND_AL
)

	)

594 
	#ARM_SUBS_REG_REGSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
) \

595 
	`ARM_DPIOP_S_REG_REGSHIFT_COND
(
p
, 
ARMOP_SUB
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
)

	)

596 
	#ARM_SUBS_REG_REGSHIFT
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
) \

597 
	`ARM_SUBS_REG_REGSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
ARMCOND_AL
)

	)

599 #i‚de‡
ARM_NOIASM


600 
	#_SUB_REG_REGSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
) \

601 
	`ARM_IASM_DPIOP_REG_REGSHIFT_COND
(
ARMOP_SUB
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
)

	)

602 
	#_SUB_REG_REGSHIFT
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
) \

603 
	`_SUB_REG_REGSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
ARMCOND_AL
)

	)

604 
	#_SUBS_REG_REGSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
) \

605 
	`ARM_IASM_DPIOP_S_REG_REGSHIFT_COND
(
ARMOP_SUB
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
)

	)

606 
	#_SUBS_REG_REGSHIFT
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
) \

607 
	`_SUBS_REG_REGSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
ARMCOND_AL
)

	)

614 
	#ARM_RSB_REG_IMM_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
) \

615 
	`ARM_DPIOP_REG_IMM8ROT_COND
(
p
, 
ARMOP_RSB
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
)

	)

616 
	#ARM_RSB_REG_IMM
(
p
, 
rd
, 
∫
, 
imm8
, 
rŸ
) \

617 
	`ARM_RSB_REG_IMM_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
ARMCOND_AL
)

	)

618 
	#ARM_RSBS_REG_IMM_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
) \

619 
	`ARM_DPIOP_S_REG_IMM8ROT_COND
(
p
, 
ARMOP_RSB
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
)

	)

620 
	#ARM_RSBS_REG_IMM
(
p
, 
rd
, 
∫
, 
imm8
, 
rŸ
) \

621 
	`ARM_RSBS_REG_IMM_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
ARMCOND_AL
)

	)

623 #i‚de‡
ARM_NOIASM


624 
	#_RSB_REG_IMM_COND
(
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
) \

625 
	`ARM_IASM_DPIOP_REG_IMM8ROT_COND
(
ARMOP_RSB
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
)

	)

626 
	#_RSB_REG_IMM
(
rd
, 
∫
, 
imm8
, 
rŸ
) \

627 
	`_RSB_REG_IMM_COND
(
rd
, 
∫
, 
imm8
, 
rŸ
, 
ARMCOND_AL
)

	)

628 
	#_RSBS_REG_IMM_COND
(
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
) \

629 
	`ARM_IASM_DPIOP_S_REG_IMM8ROT_COND
(
ARMOP_RSB
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
)

	)

630 
	#_RSBS_REG_IMM
(
rd
, 
∫
, 
imm8
, 
rŸ
) \

631 
	`_RSBS_REG_IMM_COND
(
rd
, 
∫
, 
imm8
, 
rŸ
, 
ARMCOND_AL
)

	)

636 
	#ARM_RSB_REG_IMM8_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
c⁄d
) \

637 
	`ARM_RSB_REG_IMM_COND
(
p
, 
rd
, 
∫
, 
imm8
, 0, 
c⁄d
)

	)

638 
	#ARM_RSB_REG_IMM8
(
p
, 
rd
, 
∫
, 
imm8
) \

639 
	`ARM_RSB_REG_IMM8_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
ARMCOND_AL
)

	)

640 
	#ARM_RSBS_REG_IMM8_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
c⁄d
) \

641 
	`ARM_RSBS_REG_IMM_COND
(
p
, 
rd
, 
∫
, 
imm8
, 0, 
c⁄d
)

	)

642 
	#ARM_RSBS_REG_IMM8
(
p
, 
rd
, 
∫
, 
imm8
) \

643 
	`ARM_RSBS_REG_IMM8_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
ARMCOND_AL
)

	)

645 #i‚de‡
ARM_NOIASM


646 
	#_RSB_REG_IMM8_COND
(
rd
, 
∫
, 
imm8
, 
c⁄d
) \

647 
	`_RSB_REG_IMM_COND
(
rd
, 
∫
, 
imm8
, 0, 
c⁄d
)

	)

648 
	#_RSB_REG_IMM8
(
rd
, 
∫
, 
imm8
) \

649 
	`_RSB_REG_IMM8_COND
(
rd
, 
∫
, 
imm8
, 
ARMCOND_AL
)

	)

650 
	#_RSBS_REG_IMM8_COND
(
rd
, 
∫
, 
imm8
, 
c⁄d
) \

651 
	`_RSBS_REG_IMM_COND
(
rd
, 
∫
, 
imm8
, 0, 
c⁄d
)

	)

652 
	#_RSBS_REG_IMM8
(
rd
, 
∫
, 
imm8
) \

653 
	`_RSBS_REG_IMM8_COND
(
rd
, 
∫
, 
imm8
, 
ARMCOND_AL
)

	)

658 
	#ARM_RSB_REG_REG_COND
(
p
, 
rd
, 
∫
, 
rm
, 
c⁄d
) \

659 
	`ARM_DPIOP_REG_REG_COND
(
p
, 
ARMOP_RSB
, 
rd
, 
∫
, 
rm
, 
c⁄d
)

	)

660 
	#ARM_RSB_REG_REG
(
p
, 
rd
, 
∫
, 
rm
) \

661 
	`ARM_RSB_REG_REG_COND
(
p
, 
rd
, 
∫
, 
rm
, 
ARMCOND_AL
)

	)

662 
	#ARM_RSBS_REG_REG_COND
(
p
, 
rd
, 
∫
, 
rm
, 
c⁄d
) \

663 
	`ARM_DPIOP_S_REG_REG_COND
(
p
, 
ARMOP_RSB
, 
rd
, 
∫
, 
rm
, 
c⁄d
)

	)

664 
	#ARM_RSBS_REG_REG
(
p
, 
rd
, 
∫
, 
rm
) \

665 
	`ARM_RSBS_REG_REG_COND
(
p
, 
rd
, 
∫
, 
rm
, 
ARMCOND_AL
)

	)

667 #i‚de‡
ARM_NOIASM


668 
	#_RSB_REG_REG_COND
(
rd
, 
∫
, 
rm
, 
c⁄d
) \

669 
	`ARM_IASM_DPIOP_REG_REG_COND
(
ARMOP_RSB
, 
rd
, 
∫
, 
rm
, 
c⁄d
)

	)

670 
	#_RSB_REG_REG
(
rd
, 
∫
, 
rm
) \

671 
	`_RSB_REG_REG_COND
(
rd
, 
∫
, 
rm
, 
ARMCOND_AL
)

	)

672 
	#_RSBS_REG_REG_COND
(
rd
, 
∫
, 
rm
, 
c⁄d
) \

673 
	`ARM_IASM_DPIOP_S_REG_REG_COND
(
ARMOP_RSB
, 
rd
, 
∫
, 
rm
, 
c⁄d
)

	)

674 
	#_RSBS_REG_REG
(
rd
, 
∫
, 
rm
) \

675 
	`_RSBS_REG_REG_COND
(
rd
, 
∫
, 
rm
, 
ARMCOND_AL
)

	)

680 
	#ARM_RSB_REG_IMMSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
) \

681 
	`ARM_DPIOP_REG_IMMSHIFT_COND
(
p
, 
ARMOP_RSB
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
)

	)

682 
	#ARM_RSB_REG_IMMSHIFT
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
) \

683 
	`ARM_RSB_REG_IMMSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
ARMCOND_AL
)

	)

684 
	#ARM_RSBS_REG_IMMSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
) \

685 
	`ARM_DPIOP_S_REG_IMMSHIFT_COND
(
p
, 
ARMOP_RSB
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
)

	)

686 
	#ARM_RSBS_REG_IMMSHIFT
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
) \

687 
	`ARM_RSBS_REG_IMMSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
ARMCOND_AL
)

	)

689 #i‚de‡
ARM_NOIASM


690 
	#_RSB_REG_IMMSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
) \

691 
	`ARM_IASM_DPIOP_REG_IMMSHIFT_COND
(
ARMOP_RSB
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
)

	)

692 
	#_RSB_REG_IMMSHIFT
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
) \

693 
	`_RSB_REG_IMMSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
ARMCOND_AL
)

	)

694 
	#_RSBS_REG_IMMSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
) \

695 
	`ARM_IASM_DPIOP_S_REG_IMMSHIFT_COND
(
ARMOP_RSB
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
)

	)

696 
	#_RSBS_REG_IMMSHIFT
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
) \

697 
	`_RSBS_REG_IMMSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
ARMCOND_AL
)

	)

702 
	#ARM_RSB_REG_REGSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
) \

703 
	`ARM_DPIOP_REG_REGSHIFT_COND
(
p
, 
ARMOP_RSB
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
)

	)

704 
	#ARM_RSB_REG_REGSHIFT
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
) \

705 
	`ARM_RSB_REG_REGSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
ARMCOND_AL
)

	)

706 
	#ARM_RSBS_REG_REGSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
) \

707 
	`ARM_DPIOP_S_REG_REGSHIFT_COND
(
p
, 
ARMOP_RSB
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
)

	)

708 
	#ARM_RSBS_REG_REGSHIFT
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
) \

709 
	`ARM_RSBS_REG_REGSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
ARMCOND_AL
)

	)

711 #i‚de‡
ARM_NOIASM


712 
	#_RSB_REG_REGSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
) \

713 
	`ARM_IASM_DPIOP_REG_REGSHIFT_COND
(
ARMOP_RSB
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
)

	)

714 
	#_RSB_REG_REGSHIFT
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
) \

715 
	`_RSB_REG_REGSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
ARMCOND_AL
)

	)

716 
	#_RSBS_REG_REGSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
) \

717 
	`ARM_IASM_DPIOP_S_REG_REGSHIFT_COND
(
ARMOP_RSB
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
)

	)

718 
	#_RSBS_REG_REGSHIFT
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
) \

719 
	`_RSBS_REG_REGSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
ARMCOND_AL
)

	)

726 
	#ARM_ADD_REG_IMM_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
) \

727 
	`ARM_DPIOP_REG_IMM8ROT_COND
(
p
, 
ARMOP_ADD
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
)

	)

728 
	#ARM_ADD_REG_IMM
(
p
, 
rd
, 
∫
, 
imm8
, 
rŸ
) \

729 
	`ARM_ADD_REG_IMM_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
ARMCOND_AL
)

	)

730 
	#ARM_ADDS_REG_IMM_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
) \

731 
	`ARM_DPIOP_S_REG_IMM8ROT_COND
(
p
, 
ARMOP_ADD
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
)

	)

732 
	#ARM_ADDS_REG_IMM
(
p
, 
rd
, 
∫
, 
imm8
, 
rŸ
) \

733 
	`ARM_ADDS_REG_IMM_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
ARMCOND_AL
)

	)

735 #i‚de‡
ARM_NOIASM


736 
	#_ADD_REG_IMM_COND
(
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
) \

737 
	`ARM_IASM_DPIOP_REG_IMM8ROT_COND
(
ARMOP_ADD
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
)

	)

738 
	#_ADD_REG_IMM
(
rd
, 
∫
, 
imm8
, 
rŸ
) \

739 
	`_ADD_REG_IMM_COND
(
rd
, 
∫
, 
imm8
, 
rŸ
, 
ARMCOND_AL
)

	)

740 
	#_ADDS_REG_IMM_COND
(
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
) \

741 
	`ARM_IASM_DPIOP_S_REG_IMM8ROT_COND
(
ARMOP_ADD
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
)

	)

742 
	#_ADDS_REG_IMM
(
rd
, 
∫
, 
imm8
, 
rŸ
) \

743 
	`_ADDS_REG_IMM_COND
(
rd
, 
∫
, 
imm8
, 
rŸ
, 
ARMCOND_AL
)

	)

748 
	#ARM_ADD_REG_IMM8_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
c⁄d
) \

749 
	`ARM_ADD_REG_IMM_COND
(
p
, 
rd
, 
∫
, 
imm8
, 0, 
c⁄d
)

	)

750 
	#ARM_ADD_REG_IMM8
(
p
, 
rd
, 
∫
, 
imm8
) \

751 
	`ARM_ADD_REG_IMM8_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
ARMCOND_AL
)

	)

752 
	#ARM_ADDS_REG_IMM8_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
c⁄d
) \

753 
	`ARM_ADDS_REG_IMM_COND
(
p
, 
rd
, 
∫
, 
imm8
, 0, 
c⁄d
)

	)

754 
	#ARM_ADDS_REG_IMM8
(
p
, 
rd
, 
∫
, 
imm8
) \

755 
	`ARM_ADDS_REG_IMM8_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
ARMCOND_AL
)

	)

757 #i‚de‡
ARM_NOIASM


758 
	#_ADD_REG_IMM8_COND
(
rd
, 
∫
, 
imm8
, 
c⁄d
) \

759 
	`_ADD_REG_IMM_COND
(
rd
, 
∫
, 
imm8
, 0, 
c⁄d
)

	)

760 
	#_ADD_REG_IMM8
(
rd
, 
∫
, 
imm8
) \

761 
	`_ADD_REG_IMM8_COND
(
rd
, 
∫
, 
imm8
, 
ARMCOND_AL
)

	)

762 
	#_ADDS_REG_IMM8_COND
(
rd
, 
∫
, 
imm8
, 
c⁄d
) \

763 
	`_ADDS_REG_IMM_COND
(
rd
, 
∫
, 
imm8
, 0, 
c⁄d
)

	)

764 
	#_ADDS_REG_IMM8
(
rd
, 
∫
, 
imm8
) \

765 
	`_ADDS_REG_IMM8_COND
(
rd
, 
∫
, 
imm8
, 
ARMCOND_AL
)

	)

770 
	#ARM_ADD_REG_REG_COND
(
p
, 
rd
, 
∫
, 
rm
, 
c⁄d
) \

771 
	`ARM_DPIOP_REG_REG_COND
(
p
, 
ARMOP_ADD
, 
rd
, 
∫
, 
rm
, 
c⁄d
)

	)

772 
	#ARM_ADD_REG_REG
(
p
, 
rd
, 
∫
, 
rm
) \

773 
	`ARM_ADD_REG_REG_COND
(
p
, 
rd
, 
∫
, 
rm
, 
ARMCOND_AL
)

	)

774 
	#ARM_ADDS_REG_REG_COND
(
p
, 
rd
, 
∫
, 
rm
, 
c⁄d
) \

775 
	`ARM_DPIOP_S_REG_REG_COND
(
p
, 
ARMOP_ADD
, 
rd
, 
∫
, 
rm
, 
c⁄d
)

	)

776 
	#ARM_ADDS_REG_REG
(
p
, 
rd
, 
∫
, 
rm
) \

777 
	`ARM_ADDS_REG_REG_COND
(
p
, 
rd
, 
∫
, 
rm
, 
ARMCOND_AL
)

	)

779 #i‚de‡
ARM_NOIASM


780 
	#_ADD_REG_REG_COND
(
rd
, 
∫
, 
rm
, 
c⁄d
) \

781 
	`ARM_IASM_DPIOP_REG_REG_COND
(
ARMOP_ADD
, 
rd
, 
∫
, 
rm
, 
c⁄d
)

	)

782 
	#_ADD_REG_REG
(
rd
, 
∫
, 
rm
) \

783 
	`_ADD_REG_REG_COND
(
rd
, 
∫
, 
rm
, 
ARMCOND_AL
)

	)

784 
	#_ADDS_REG_REG_COND
(
rd
, 
∫
, 
rm
, 
c⁄d
) \

785 
	`ARM_IASM_DPIOP_S_REG_REG_COND
(
ARMOP_ADD
, 
rd
, 
∫
, 
rm
, 
c⁄d
)

	)

786 
	#_ADDS_REG_REG
(
rd
, 
∫
, 
rm
) \

787 
	`_ADDS_REG_REG_COND
(
rd
, 
∫
, 
rm
, 
ARMCOND_AL
)

	)

792 
	#ARM_ADD_REG_IMMSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
) \

793 
	`ARM_DPIOP_REG_IMMSHIFT_COND
(
p
, 
ARMOP_ADD
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
)

	)

794 
	#ARM_ADD_REG_IMMSHIFT
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
) \

795 
	`ARM_ADD_REG_IMMSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
ARMCOND_AL
)

	)

796 
	#ARM_ADDS_REG_IMMSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
) \

797 
	`ARM_DPIOP_S_REG_IMMSHIFT_COND
(
p
, 
ARMOP_ADD
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
)

	)

798 
	#ARM_ADDS_REG_IMMSHIFT
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
) \

799 
	`ARM_ADDS_REG_IMMSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
ARMCOND_AL
)

	)

801 #i‚de‡
ARM_NOIASM


802 
	#_ADD_REG_IMMSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
) \

803 
	`ARM_IASM_DPIOP_REG_IMMSHIFT_COND
(
ARMOP_ADD
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
)

	)

804 
	#_ADD_REG_IMMSHIFT
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
) \

805 
	`_ADD_REG_IMMSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
ARMCOND_AL
)

	)

806 
	#_ADDS_REG_IMMSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
) \

807 
	`ARM_IASM_DPIOP_S_REG_IMMSHIFT_COND
(
ARMOP_ADD
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
)

	)

808 
	#_ADDS_REG_IMMSHIFT
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
) \

809 
	`_ADDS_REG_IMMSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
ARMCOND_AL
)

	)

814 
	#ARM_ADD_REG_REGSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
) \

815 
	`ARM_DPIOP_REG_REGSHIFT_COND
(
p
, 
ARMOP_ADD
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
)

	)

816 
	#ARM_ADD_REG_REGSHIFT
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
) \

817 
	`ARM_ADD_REG_REGSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
ARMCOND_AL
)

	)

818 
	#ARM_ADDS_REG_REGSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
) \

819 
	`ARM_DPIOP_S_REG_REGSHIFT_COND
(
p
, 
ARMOP_ADD
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
)

	)

820 
	#ARM_ADDS_REG_REGSHIFT
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
) \

821 
	`ARM_ADDS_REG_REGSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
ARMCOND_AL
)

	)

823 #i‚de‡
ARM_NOIASM


824 
	#_ADD_REG_REGSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
) \

825 
	`ARM_IASM_DPIOP_REG_REGSHIFT_COND
(
ARMOP_ADD
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
)

	)

826 
	#_ADD_REG_REGSHIFT
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
) \

827 
	`_ADD_REG_REGSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
ARMCOND_AL
)

	)

828 
	#_ADDS_REG_REGSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
) \

829 
	`ARM_IASM_DPIOP_S_REG_REGSHIFT_COND
(
ARMOP_ADD
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
)

	)

830 
	#_ADDS_REG_REGSHIFT
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
) \

831 
	`_ADDS_REG_REGSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
ARMCOND_AL
)

	)

838 
	#ARM_ADC_REG_IMM_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
) \

839 
	`ARM_DPIOP_REG_IMM8ROT_COND
(
p
, 
ARMOP_ADC
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
)

	)

840 
	#ARM_ADC_REG_IMM
(
p
, 
rd
, 
∫
, 
imm8
, 
rŸ
) \

841 
	`ARM_ADC_REG_IMM_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
ARMCOND_AL
)

	)

842 
	#ARM_ADCS_REG_IMM_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
) \

843 
	`ARM_DPIOP_S_REG_IMM8ROT_COND
(
p
, 
ARMOP_ADC
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
)

	)

844 
	#ARM_ADCS_REG_IMM
(
p
, 
rd
, 
∫
, 
imm8
, 
rŸ
) \

845 
	`ARM_ADCS_REG_IMM_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
ARMCOND_AL
)

	)

847 #i‚de‡
ARM_NOIASM


848 
	#_ADC_REG_IMM_COND
(
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
) \

849 
	`ARM_IASM_DPIOP_REG_IMM8ROT_COND
(
ARMOP_ADC
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
)

	)

850 
	#_ADC_REG_IMM
(
rd
, 
∫
, 
imm8
, 
rŸ
) \

851 
	`_ADC_REG_IMM_COND
(
rd
, 
∫
, 
imm8
, 
rŸ
, 
ARMCOND_AL
)

	)

852 
	#_ADCS_REG_IMM_COND
(
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
) \

853 
	`ARM_IASM_DPIOP_S_REG_IMM8ROT_COND
(
ARMOP_ADC
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
)

	)

854 
	#_ADCS_REG_IMM
(
rd
, 
∫
, 
imm8
, 
rŸ
) \

855 
	`_ADCS_REG_IMM_COND
(
rd
, 
∫
, 
imm8
, 
rŸ
, 
ARMCOND_AL
)

	)

860 
	#ARM_ADC_REG_IMM8_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
c⁄d
) \

861 
	`ARM_ADC_REG_IMM_COND
(
p
, 
rd
, 
∫
, 
imm8
, 0, 
c⁄d
)

	)

862 
	#ARM_ADC_REG_IMM8
(
p
, 
rd
, 
∫
, 
imm8
) \

863 
	`ARM_ADC_REG_IMM8_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
ARMCOND_AL
)

	)

864 
	#ARM_ADCS_REG_IMM8_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
c⁄d
) \

865 
	`ARM_ADCS_REG_IMM_COND
(
p
, 
rd
, 
∫
, 
imm8
, 0, 
c⁄d
)

	)

866 
	#ARM_ADCS_REG_IMM8
(
p
, 
rd
, 
∫
, 
imm8
) \

867 
	`ARM_ADCS_REG_IMM8_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
ARMCOND_AL
)

	)

869 #i‚de‡
ARM_NOIASM


870 
	#_ADC_REG_IMM8_COND
(
rd
, 
∫
, 
imm8
, 
c⁄d
) \

871 
	`_ADC_REG_IMM_COND
(
rd
, 
∫
, 
imm8
, 0, 
c⁄d
)

	)

872 
	#_ADC_REG_IMM8
(
rd
, 
∫
, 
imm8
) \

873 
	`_ADC_REG_IMM8_COND
(
rd
, 
∫
, 
imm8
, 
ARMCOND_AL
)

	)

874 
	#_ADCS_REG_IMM8_COND
(
rd
, 
∫
, 
imm8
, 
c⁄d
) \

875 
	`_ADCS_REG_IMM_COND
(
rd
, 
∫
, 
imm8
, 0, 
c⁄d
)

	)

876 
	#_ADCS_REG_IMM8
(
rd
, 
∫
, 
imm8
) \

877 
	`_ADCS_REG_IMM8_COND
(
rd
, 
∫
, 
imm8
, 
ARMCOND_AL
)

	)

882 
	#ARM_ADC_REG_REG_COND
(
p
, 
rd
, 
∫
, 
rm
, 
c⁄d
) \

883 
	`ARM_DPIOP_REG_REG_COND
(
p
, 
ARMOP_ADC
, 
rd
, 
∫
, 
rm
, 
c⁄d
)

	)

884 
	#ARM_ADC_REG_REG
(
p
, 
rd
, 
∫
, 
rm
) \

885 
	`ARM_ADC_REG_REG_COND
(
p
, 
rd
, 
∫
, 
rm
, 
ARMCOND_AL
)

	)

886 
	#ARM_ADCS_REG_REG_COND
(
p
, 
rd
, 
∫
, 
rm
, 
c⁄d
) \

887 
	`ARM_DPIOP_S_REG_REG_COND
(
p
, 
ARMOP_ADC
, 
rd
, 
∫
, 
rm
, 
c⁄d
)

	)

888 
	#ARM_ADCS_REG_REG
(
p
, 
rd
, 
∫
, 
rm
) \

889 
	`ARM_ADCS_REG_REG_COND
(
p
, 
rd
, 
∫
, 
rm
, 
ARMCOND_AL
)

	)

891 #i‚de‡
ARM_NOIASM


892 
	#_ADC_REG_REG_COND
(
rd
, 
∫
, 
rm
, 
c⁄d
) \

893 
	`ARM_IASM_DPIOP_REG_REG_COND
(
ARMOP_ADC
, 
rd
, 
∫
, 
rm
, 
c⁄d
)

	)

894 
	#_ADC_REG_REG
(
rd
, 
∫
, 
rm
) \

895 
	`_ADC_REG_REG_COND
(
rd
, 
∫
, 
rm
, 
ARMCOND_AL
)

	)

896 
	#_ADCS_REG_REG_COND
(
rd
, 
∫
, 
rm
, 
c⁄d
) \

897 
	`ARM_IASM_DPIOP_S_REG_REG_COND
(
ARMOP_ADC
, 
rd
, 
∫
, 
rm
, 
c⁄d
)

	)

898 
	#_ADCS_REG_REG
(
rd
, 
∫
, 
rm
) \

899 
	`_ADCS_REG_REG_COND
(
rd
, 
∫
, 
rm
, 
ARMCOND_AL
)

	)

904 
	#ARM_ADC_REG_IMMSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
) \

905 
	`ARM_DPIOP_REG_IMMSHIFT_COND
(
p
, 
ARMOP_ADC
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
)

	)

906 
	#ARM_ADC_REG_IMMSHIFT
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
) \

907 
	`ARM_ADC_REG_IMMSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
ARMCOND_AL
)

	)

908 
	#ARM_ADCS_REG_IMMSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
) \

909 
	`ARM_DPIOP_S_REG_IMMSHIFT_COND
(
p
, 
ARMOP_ADC
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
)

	)

910 
	#ARM_ADCS_REG_IMMSHIFT
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
) \

911 
	`ARM_ADCS_REG_IMMSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
ARMCOND_AL
)

	)

913 #i‚de‡
ARM_NOIASM


914 
	#_ADC_REG_IMMSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
) \

915 
	`ARM_IASM_DPIOP_REG_IMMSHIFT_COND
(
ARMOP_ADC
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
)

	)

916 
	#_ADC_REG_IMMSHIFT
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
) \

917 
	`_ADC_REG_IMMSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
ARMCOND_AL
)

	)

918 
	#_ADCS_REG_IMMSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
) \

919 
	`ARM_IASM_DPIOP_S_REG_IMMSHIFT_COND
(
ARMOP_ADC
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
)

	)

920 
	#_ADCS_REG_IMMSHIFT
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
) \

921 
	`_ADCS_REG_IMMSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
ARMCOND_AL
)

	)

926 
	#ARM_ADC_REG_REGSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
) \

927 
	`ARM_DPIOP_REG_REGSHIFT_COND
(
p
, 
ARMOP_ADC
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
)

	)

928 
	#ARM_ADC_REG_REGSHIFT
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
) \

929 
	`ARM_ADC_REG_REGSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
ARMCOND_AL
)

	)

930 
	#ARM_ADCS_REG_REGSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
) \

931 
	`ARM_DPIOP_S_REG_REGSHIFT_COND
(
p
, 
ARMOP_ADC
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
)

	)

932 
	#ARM_ADCS_REG_REGSHIFT
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
) \

933 
	`ARM_ADCS_REG_REGSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
ARMCOND_AL
)

	)

935 #i‚de‡
ARM_NOIASM


936 
	#_ADC_REG_REGSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
) \

937 
	`ARM_IASM_DPIOP_REG_REGSHIFT_COND
(
ARMOP_ADC
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
)

	)

938 
	#_ADC_REG_REGSHIFT
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
) \

939 
	`_ADC_REG_REGSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
ARMCOND_AL
)

	)

940 
	#_ADCS_REG_REGSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
) \

941 
	`ARM_IASM_DPIOP_S_REG_REGSHIFT_COND
(
ARMOP_ADC
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
)

	)

942 
	#_ADCS_REG_REGSHIFT
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
) \

943 
	`_ADCS_REG_REGSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
ARMCOND_AL
)

	)

950 
	#ARM_SBC_REG_IMM_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
) \

951 
	`ARM_DPIOP_REG_IMM8ROT_COND
(
p
, 
ARMOP_SBC
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
)

	)

952 
	#ARM_SBC_REG_IMM
(
p
, 
rd
, 
∫
, 
imm8
, 
rŸ
) \

953 
	`ARM_SBC_REG_IMM_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
ARMCOND_AL
)

	)

954 
	#ARM_SBCS_REG_IMM_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
) \

955 
	`ARM_DPIOP_S_REG_IMM8ROT_COND
(
p
, 
ARMOP_SBC
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
)

	)

956 
	#ARM_SBCS_REG_IMM
(
p
, 
rd
, 
∫
, 
imm8
, 
rŸ
) \

957 
	`ARM_SBCS_REG_IMM_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
ARMCOND_AL
)

	)

959 #i‚de‡
ARM_NOIASM


960 
	#_SBC_REG_IMM_COND
(
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
) \

961 
	`ARM_IASM_DPIOP_REG_IMM8ROT_COND
(
ARMOP_SBC
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
)

	)

962 
	#_SBC_REG_IMM
(
rd
, 
∫
, 
imm8
, 
rŸ
) \

963 
	`_SBC_REG_IMM_COND
(
rd
, 
∫
, 
imm8
, 
rŸ
, 
ARMCOND_AL
)

	)

964 
	#_SBCS_REG_IMM_COND
(
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
) \

965 
	`ARM_IASM_DPIOP_S_REG_IMM8ROT_COND
(
ARMOP_SBC
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
)

	)

966 
	#_SBCS_REG_IMM
(
rd
, 
∫
, 
imm8
, 
rŸ
) \

967 
	`_SBCS_REG_IMM_COND
(
rd
, 
∫
, 
imm8
, 
rŸ
, 
ARMCOND_AL
)

	)

972 
	#ARM_SBC_REG_IMM8_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
c⁄d
) \

973 
	`ARM_SBC_REG_IMM_COND
(
p
, 
rd
, 
∫
, 
imm8
, 0, 
c⁄d
)

	)

974 
	#ARM_SBC_REG_IMM8
(
p
, 
rd
, 
∫
, 
imm8
) \

975 
	`ARM_SBC_REG_IMM8_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
ARMCOND_AL
)

	)

976 
	#ARM_SBCS_REG_IMM8_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
c⁄d
) \

977 
	`ARM_SBCS_REG_IMM_COND
(
p
, 
rd
, 
∫
, 
imm8
, 0, 
c⁄d
)

	)

978 
	#ARM_SBCS_REG_IMM8
(
p
, 
rd
, 
∫
, 
imm8
) \

979 
	`ARM_SBCS_REG_IMM8_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
ARMCOND_AL
)

	)

981 #i‚de‡
ARM_NOIASM


982 
	#_SBC_REG_IMM8_COND
(
rd
, 
∫
, 
imm8
, 
c⁄d
) \

983 
	`_SBC_REG_IMM_COND
(
rd
, 
∫
, 
imm8
, 0, 
c⁄d
)

	)

984 
	#_SBC_REG_IMM8
(
rd
, 
∫
, 
imm8
) \

985 
	`_SBC_REG_IMM8_COND
(
rd
, 
∫
, 
imm8
, 
ARMCOND_AL
)

	)

986 
	#_SBCS_REG_IMM8_COND
(
rd
, 
∫
, 
imm8
, 
c⁄d
) \

987 
	`_SBCS_REG_IMM_COND
(
rd
, 
∫
, 
imm8
, 0, 
c⁄d
)

	)

988 
	#_SBCS_REG_IMM8
(
rd
, 
∫
, 
imm8
) \

989 
	`_SBCS_REG_IMM8_COND
(
rd
, 
∫
, 
imm8
, 
ARMCOND_AL
)

	)

994 
	#ARM_SBC_REG_REG_COND
(
p
, 
rd
, 
∫
, 
rm
, 
c⁄d
) \

995 
	`ARM_DPIOP_REG_REG_COND
(
p
, 
ARMOP_SBC
, 
rd
, 
∫
, 
rm
, 
c⁄d
)

	)

996 
	#ARM_SBC_REG_REG
(
p
, 
rd
, 
∫
, 
rm
) \

997 
	`ARM_SBC_REG_REG_COND
(
p
, 
rd
, 
∫
, 
rm
, 
ARMCOND_AL
)

	)

998 
	#ARM_SBCS_REG_REG_COND
(
p
, 
rd
, 
∫
, 
rm
, 
c⁄d
) \

999 
	`ARM_DPIOP_S_REG_REG_COND
(
p
, 
ARMOP_SBC
, 
rd
, 
∫
, 
rm
, 
c⁄d
)

	)

1000 
	#ARM_SBCS_REG_REG
(
p
, 
rd
, 
∫
, 
rm
) \

1001 
	`ARM_SBCS_REG_REG_COND
(
p
, 
rd
, 
∫
, 
rm
, 
ARMCOND_AL
)

	)

1003 #i‚de‡
ARM_NOIASM


1004 
	#_SBC_REG_REG_COND
(
rd
, 
∫
, 
rm
, 
c⁄d
) \

1005 
	`ARM_IASM_DPIOP_REG_REG_COND
(
ARMOP_SBC
, 
rd
, 
∫
, 
rm
, 
c⁄d
)

	)

1006 
	#_SBC_REG_REG
(
rd
, 
∫
, 
rm
) \

1007 
	`_SBC_REG_REG_COND
(
rd
, 
∫
, 
rm
, 
ARMCOND_AL
)

	)

1008 
	#_SBCS_REG_REG_COND
(
rd
, 
∫
, 
rm
, 
c⁄d
) \

1009 
	`ARM_IASM_DPIOP_S_REG_REG_COND
(
ARMOP_SBC
, 
rd
, 
∫
, 
rm
, 
c⁄d
)

	)

1010 
	#_SBCS_REG_REG
(
rd
, 
∫
, 
rm
) \

1011 
	`_SBCS_REG_REG_COND
(
rd
, 
∫
, 
rm
, 
ARMCOND_AL
)

	)

1016 
	#ARM_SBC_REG_IMMSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
) \

1017 
	`ARM_DPIOP_REG_IMMSHIFT_COND
(
p
, 
ARMOP_SBC
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
)

	)

1018 
	#ARM_SBC_REG_IMMSHIFT
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
) \

1019 
	`ARM_SBC_REG_IMMSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
ARMCOND_AL
)

	)

1020 
	#ARM_SBCS_REG_IMMSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
) \

1021 
	`ARM_DPIOP_S_REG_IMMSHIFT_COND
(
p
, 
ARMOP_SBC
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
)

	)

1022 
	#ARM_SBCS_REG_IMMSHIFT
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
) \

1023 
	`ARM_SBCS_REG_IMMSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
ARMCOND_AL
)

	)

1025 #i‚de‡
ARM_NOIASM


1026 
	#_SBC_REG_IMMSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
) \

1027 
	`ARM_IASM_DPIOP_REG_IMMSHIFT_COND
(
ARMOP_SBC
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
)

	)

1028 
	#_SBC_REG_IMMSHIFT
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
) \

1029 
	`_SBC_REG_IMMSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
ARMCOND_AL
)

	)

1030 
	#_SBCS_REG_IMMSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
) \

1031 
	`ARM_IASM_DPIOP_S_REG_IMMSHIFT_COND
(
ARMOP_SBC
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
)

	)

1032 
	#_SBCS_REG_IMMSHIFT
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
) \

1033 
	`_SBCS_REG_IMMSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
ARMCOND_AL
)

	)

1038 
	#ARM_SBC_REG_REGSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
) \

1039 
	`ARM_DPIOP_REG_REGSHIFT_COND
(
p
, 
ARMOP_SBC
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
)

	)

1040 
	#ARM_SBC_REG_REGSHIFT
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
) \

1041 
	`ARM_SBC_REG_REGSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
ARMCOND_AL
)

	)

1042 
	#ARM_SBCS_REG_REGSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
) \

1043 
	`ARM_DPIOP_S_REG_REGSHIFT_COND
(
p
, 
ARMOP_SBC
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
)

	)

1044 
	#ARM_SBCS_REG_REGSHIFT
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
) \

1045 
	`ARM_SBCS_REG_REGSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
ARMCOND_AL
)

	)

1047 #i‚de‡
ARM_NOIASM


1048 
	#_SBC_REG_REGSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
) \

1049 
	`ARM_IASM_DPIOP_REG_REGSHIFT_COND
(
ARMOP_SBC
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
)

	)

1050 
	#_SBC_REG_REGSHIFT
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
) \

1051 
	`_SBC_REG_REGSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
ARMCOND_AL
)

	)

1052 
	#_SBCS_REG_REGSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
) \

1053 
	`ARM_IASM_DPIOP_S_REG_REGSHIFT_COND
(
ARMOP_SBC
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
)

	)

1054 
	#_SBCS_REG_REGSHIFT
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
) \

1055 
	`_SBCS_REG_REGSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
ARMCOND_AL
)

	)

1062 
	#ARM_RSC_REG_IMM_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
) \

1063 
	`ARM_DPIOP_REG_IMM8ROT_COND
(
p
, 
ARMOP_RSC
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
)

	)

1064 
	#ARM_RSC_REG_IMM
(
p
, 
rd
, 
∫
, 
imm8
, 
rŸ
) \

1065 
	`ARM_RSC_REG_IMM_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
ARMCOND_AL
)

	)

1066 
	#ARM_RSCS_REG_IMM_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
) \

1067 
	`ARM_DPIOP_S_REG_IMM8ROT_COND
(
p
, 
ARMOP_RSC
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
)

	)

1068 
	#ARM_RSCS_REG_IMM
(
p
, 
rd
, 
∫
, 
imm8
, 
rŸ
) \

1069 
	`ARM_RSCS_REG_IMM_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
ARMCOND_AL
)

	)

1071 #i‚de‡
ARM_NOIASM


1072 
	#_RSC_REG_IMM_COND
(
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
) \

1073 
	`ARM_IASM_DPIOP_REG_IMM8ROT_COND
(
ARMOP_RSC
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
)

	)

1074 
	#_RSC_REG_IMM
(
rd
, 
∫
, 
imm8
, 
rŸ
) \

1075 
	`_RSC_REG_IMM_COND
(
rd
, 
∫
, 
imm8
, 
rŸ
, 
ARMCOND_AL
)

	)

1076 
	#_RSCS_REG_IMM_COND
(
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
) \

1077 
	`ARM_IASM_DPIOP_S_REG_IMM8ROT_COND
(
ARMOP_RSC
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
)

	)

1078 
	#_RSCS_REG_IMM
(
rd
, 
∫
, 
imm8
, 
rŸ
) \

1079 
	`_RSCS_REG_IMM_COND
(
rd
, 
∫
, 
imm8
, 
rŸ
, 
ARMCOND_AL
)

	)

1084 
	#ARM_RSC_REG_IMM8_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
c⁄d
) \

1085 
	`ARM_RSC_REG_IMM_COND
(
p
, 
rd
, 
∫
, 
imm8
, 0, 
c⁄d
)

	)

1086 
	#ARM_RSC_REG_IMM8
(
p
, 
rd
, 
∫
, 
imm8
) \

1087 
	`ARM_RSC_REG_IMM8_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
ARMCOND_AL
)

	)

1088 
	#ARM_RSCS_REG_IMM8_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
c⁄d
) \

1089 
	`ARM_RSCS_REG_IMM_COND
(
p
, 
rd
, 
∫
, 
imm8
, 0, 
c⁄d
)

	)

1090 
	#ARM_RSCS_REG_IMM8
(
p
, 
rd
, 
∫
, 
imm8
) \

1091 
	`ARM_RSCS_REG_IMM8_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
ARMCOND_AL
)

	)

1093 #i‚de‡
ARM_NOIASM


1094 
	#_RSC_REG_IMM8_COND
(
rd
, 
∫
, 
imm8
, 
c⁄d
) \

1095 
	`_RSC_REG_IMM_COND
(
rd
, 
∫
, 
imm8
, 0, 
c⁄d
)

	)

1096 
	#_RSC_REG_IMM8
(
rd
, 
∫
, 
imm8
) \

1097 
	`_RSC_REG_IMM8_COND
(
rd
, 
∫
, 
imm8
, 
ARMCOND_AL
)

	)

1098 
	#_RSCS_REG_IMM8_COND
(
rd
, 
∫
, 
imm8
, 
c⁄d
) \

1099 
	`_RSCS_REG_IMM_COND
(
rd
, 
∫
, 
imm8
, 0, 
c⁄d
)

	)

1100 
	#_RSCS_REG_IMM8
(
rd
, 
∫
, 
imm8
) \

1101 
	`_RSCS_REG_IMM8_COND
(
rd
, 
∫
, 
imm8
, 
ARMCOND_AL
)

	)

1106 
	#ARM_RSC_REG_REG_COND
(
p
, 
rd
, 
∫
, 
rm
, 
c⁄d
) \

1107 
	`ARM_DPIOP_REG_REG_COND
(
p
, 
ARMOP_RSC
, 
rd
, 
∫
, 
rm
, 
c⁄d
)

	)

1108 
	#ARM_RSC_REG_REG
(
p
, 
rd
, 
∫
, 
rm
) \

1109 
	`ARM_RSC_REG_REG_COND
(
p
, 
rd
, 
∫
, 
rm
, 
ARMCOND_AL
)

	)

1110 
	#ARM_RSCS_REG_REG_COND
(
p
, 
rd
, 
∫
, 
rm
, 
c⁄d
) \

1111 
	`ARM_DPIOP_S_REG_REG_COND
(
p
, 
ARMOP_RSC
, 
rd
, 
∫
, 
rm
, 
c⁄d
)

	)

1112 
	#ARM_RSCS_REG_REG
(
p
, 
rd
, 
∫
, 
rm
) \

1113 
	`ARM_RSCS_REG_REG_COND
(
p
, 
rd
, 
∫
, 
rm
, 
ARMCOND_AL
)

	)

1115 #i‚de‡
ARM_NOIASM


1116 
	#_RSC_REG_REG_COND
(
rd
, 
∫
, 
rm
, 
c⁄d
) \

1117 
	`ARM_IASM_DPIOP_REG_REG_COND
(
ARMOP_RSC
, 
rd
, 
∫
, 
rm
, 
c⁄d
)

	)

1118 
	#_RSC_REG_REG
(
rd
, 
∫
, 
rm
) \

1119 
	`_RSC_REG_REG_COND
(
rd
, 
∫
, 
rm
, 
ARMCOND_AL
)

	)

1120 
	#_RSCS_REG_REG_COND
(
rd
, 
∫
, 
rm
, 
c⁄d
) \

1121 
	`ARM_IASM_DPIOP_S_REG_REG_COND
(
ARMOP_RSC
, 
rd
, 
∫
, 
rm
, 
c⁄d
)

	)

1122 
	#_RSCS_REG_REG
(
rd
, 
∫
, 
rm
) \

1123 
	`_RSCS_REG_REG_COND
(
rd
, 
∫
, 
rm
, 
ARMCOND_AL
)

	)

1128 
	#ARM_RSC_REG_IMMSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
) \

1129 
	`ARM_DPIOP_REG_IMMSHIFT_COND
(
p
, 
ARMOP_RSC
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
)

	)

1130 
	#ARM_RSC_REG_IMMSHIFT
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
) \

1131 
	`ARM_RSC_REG_IMMSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
ARMCOND_AL
)

	)

1132 
	#ARM_RSCS_REG_IMMSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
) \

1133 
	`ARM_DPIOP_S_REG_IMMSHIFT_COND
(
p
, 
ARMOP_RSC
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
)

	)

1134 
	#ARM_RSCS_REG_IMMSHIFT
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
) \

1135 
	`ARM_RSCS_REG_IMMSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
ARMCOND_AL
)

	)

1137 #i‚de‡
ARM_NOIASM


1138 
	#_RSC_REG_IMMSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
) \

1139 
	`ARM_IASM_DPIOP_REG_IMMSHIFT_COND
(
ARMOP_RSC
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
)

	)

1140 
	#_RSC_REG_IMMSHIFT
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
) \

1141 
	`_RSC_REG_IMMSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
ARMCOND_AL
)

	)

1142 
	#_RSCS_REG_IMMSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
) \

1143 
	`ARM_IASM_DPIOP_S_REG_IMMSHIFT_COND
(
ARMOP_RSC
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
)

	)

1144 
	#_RSCS_REG_IMMSHIFT
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
) \

1145 
	`_RSCS_REG_IMMSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
ARMCOND_AL
)

	)

1150 
	#ARM_RSC_REG_REGSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
) \

1151 
	`ARM_DPIOP_REG_REGSHIFT_COND
(
p
, 
ARMOP_RSC
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
)

	)

1152 
	#ARM_RSC_REG_REGSHIFT
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
) \

1153 
	`ARM_RSC_REG_REGSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
ARMCOND_AL
)

	)

1154 
	#ARM_RSCS_REG_REGSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
) \

1155 
	`ARM_DPIOP_S_REG_REGSHIFT_COND
(
p
, 
ARMOP_RSC
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
)

	)

1156 
	#ARM_RSCS_REG_REGSHIFT
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
) \

1157 
	`ARM_RSCS_REG_REGSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
ARMCOND_AL
)

	)

1159 #i‚de‡
ARM_NOIASM


1160 
	#_RSC_REG_REGSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
) \

1161 
	`ARM_IASM_DPIOP_REG_REGSHIFT_COND
(
ARMOP_RSC
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
)

	)

1162 
	#_RSC_REG_REGSHIFT
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
) \

1163 
	`_RSC_REG_REGSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
ARMCOND_AL
)

	)

1164 
	#_RSCS_REG_REGSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
) \

1165 
	`ARM_IASM_DPIOP_S_REG_REGSHIFT_COND
(
ARMOP_RSC
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
)

	)

1166 
	#_RSCS_REG_REGSHIFT
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
) \

1167 
	`_RSCS_REG_REGSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
ARMCOND_AL
)

	)

1174 
	#ARM_ORR_REG_IMM_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
) \

1175 
	`ARM_DPIOP_REG_IMM8ROT_COND
(
p
, 
ARMOP_ORR
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
)

	)

1176 
	#ARM_ORR_REG_IMM
(
p
, 
rd
, 
∫
, 
imm8
, 
rŸ
) \

1177 
	`ARM_ORR_REG_IMM_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
ARMCOND_AL
)

	)

1178 
	#ARM_ORRS_REG_IMM_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
) \

1179 
	`ARM_DPIOP_S_REG_IMM8ROT_COND
(
p
, 
ARMOP_ORR
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
)

	)

1180 
	#ARM_ORRS_REG_IMM
(
p
, 
rd
, 
∫
, 
imm8
, 
rŸ
) \

1181 
	`ARM_ORRS_REG_IMM_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
ARMCOND_AL
)

	)

1183 #i‚de‡
ARM_NOIASM


1184 
	#_ORR_REG_IMM_COND
(
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
) \

1185 
	`ARM_IASM_DPIOP_REG_IMM8ROT_COND
(
ARMOP_ORR
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
)

	)

1186 
	#_ORR_REG_IMM
(
rd
, 
∫
, 
imm8
, 
rŸ
) \

1187 
	`_ORR_REG_IMM_COND
(
rd
, 
∫
, 
imm8
, 
rŸ
, 
ARMCOND_AL
)

	)

1188 
	#_ORRS_REG_IMM_COND
(
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
) \

1189 
	`ARM_IASM_DPIOP_S_REG_IMM8ROT_COND
(
ARMOP_ORR
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
)

	)

1190 
	#_ORRS_REG_IMM
(
rd
, 
∫
, 
imm8
, 
rŸ
) \

1191 
	`_ORRS_REG_IMM_COND
(
rd
, 
∫
, 
imm8
, 
rŸ
, 
ARMCOND_AL
)

	)

1196 
	#ARM_ORR_REG_IMM8_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
c⁄d
) \

1197 
	`ARM_ORR_REG_IMM_COND
(
p
, 
rd
, 
∫
, 
imm8
, 0, 
c⁄d
)

	)

1198 
	#ARM_ORR_REG_IMM8
(
p
, 
rd
, 
∫
, 
imm8
) \

1199 
	`ARM_ORR_REG_IMM8_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
ARMCOND_AL
)

	)

1200 
	#ARM_ORRS_REG_IMM8_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
c⁄d
) \

1201 
	`ARM_ORRS_REG_IMM_COND
(
p
, 
rd
, 
∫
, 
imm8
, 0, 
c⁄d
)

	)

1202 
	#ARM_ORRS_REG_IMM8
(
p
, 
rd
, 
∫
, 
imm8
) \

1203 
	`ARM_ORRS_REG_IMM8_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
ARMCOND_AL
)

	)

1205 #i‚de‡
ARM_NOIASM


1206 
	#_ORR_REG_IMM8_COND
(
rd
, 
∫
, 
imm8
, 
c⁄d
) \

1207 
	`_ORR_REG_IMM_COND
(
rd
, 
∫
, 
imm8
, 0, 
c⁄d
)

	)

1208 
	#_ORR_REG_IMM8
(
rd
, 
∫
, 
imm8
) \

1209 
	`_ORR_REG_IMM8_COND
(
rd
, 
∫
, 
imm8
, 
ARMCOND_AL
)

	)

1210 
	#_ORRS_REG_IMM8_COND
(
rd
, 
∫
, 
imm8
, 
c⁄d
) \

1211 
	`_ORRS_REG_IMM_COND
(
rd
, 
∫
, 
imm8
, 0, 
c⁄d
)

	)

1212 
	#_ORRS_REG_IMM8
(
rd
, 
∫
, 
imm8
) \

1213 
	`_ORRS_REG_IMM8_COND
(
rd
, 
∫
, 
imm8
, 
ARMCOND_AL
)

	)

1218 
	#ARM_ORR_REG_REG_COND
(
p
, 
rd
, 
∫
, 
rm
, 
c⁄d
) \

1219 
	`ARM_DPIOP_REG_REG_COND
(
p
, 
ARMOP_ORR
, 
rd
, 
∫
, 
rm
, 
c⁄d
)

	)

1220 
	#ARM_ORR_REG_REG
(
p
, 
rd
, 
∫
, 
rm
) \

1221 
	`ARM_ORR_REG_REG_COND
(
p
, 
rd
, 
∫
, 
rm
, 
ARMCOND_AL
)

	)

1222 
	#ARM_ORRS_REG_REG_COND
(
p
, 
rd
, 
∫
, 
rm
, 
c⁄d
) \

1223 
	`ARM_DPIOP_S_REG_REG_COND
(
p
, 
ARMOP_ORR
, 
rd
, 
∫
, 
rm
, 
c⁄d
)

	)

1224 
	#ARM_ORRS_REG_REG
(
p
, 
rd
, 
∫
, 
rm
) \

1225 
	`ARM_ORRS_REG_REG_COND
(
p
, 
rd
, 
∫
, 
rm
, 
ARMCOND_AL
)

	)

1227 #i‚de‡
ARM_NOIASM


1228 
	#_ORR_REG_REG_COND
(
rd
, 
∫
, 
rm
, 
c⁄d
) \

1229 
	`ARM_IASM_DPIOP_REG_REG_COND
(
ARMOP_ORR
, 
rd
, 
∫
, 
rm
, 
c⁄d
)

	)

1230 
	#_ORR_REG_REG
(
rd
, 
∫
, 
rm
) \

1231 
	`_ORR_REG_REG_COND
(
rd
, 
∫
, 
rm
, 
ARMCOND_AL
)

	)

1232 
	#_ORRS_REG_REG_COND
(
rd
, 
∫
, 
rm
, 
c⁄d
) \

1233 
	`ARM_IASM_DPIOP_S_REG_REG_COND
(
ARMOP_ORR
, 
rd
, 
∫
, 
rm
, 
c⁄d
)

	)

1234 
	#_ORRS_REG_REG
(
rd
, 
∫
, 
rm
) \

1235 
	`_ORRS_REG_REG_COND
(
rd
, 
∫
, 
rm
, 
ARMCOND_AL
)

	)

1240 
	#ARM_ORR_REG_IMMSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
) \

1241 
	`ARM_DPIOP_REG_IMMSHIFT_COND
(
p
, 
ARMOP_ORR
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
)

	)

1242 
	#ARM_ORR_REG_IMMSHIFT
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
) \

1243 
	`ARM_ORR_REG_IMMSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
ARMCOND_AL
)

	)

1244 
	#ARM_ORRS_REG_IMMSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
) \

1245 
	`ARM_DPIOP_S_REG_IMMSHIFT_COND
(
p
, 
ARMOP_ORR
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
)

	)

1246 
	#ARM_ORRS_REG_IMMSHIFT
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
) \

1247 
	`ARM_ORRS_REG_IMMSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
ARMCOND_AL
)

	)

1249 #i‚de‡
ARM_NOIASM


1250 
	#_ORR_REG_IMMSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
) \

1251 
	`ARM_IASM_DPIOP_REG_IMMSHIFT_COND
(
ARMOP_ORR
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
)

	)

1252 
	#_ORR_REG_IMMSHIFT
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
) \

1253 
	`_ORR_REG_IMMSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
ARMCOND_AL
)

	)

1254 
	#_ORRS_REG_IMMSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
) \

1255 
	`ARM_IASM_DPIOP_S_REG_IMMSHIFT_COND
(
ARMOP_ORR
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
)

	)

1256 
	#_ORRS_REG_IMMSHIFT
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
) \

1257 
	`_ORRS_REG_IMMSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
ARMCOND_AL
)

	)

1262 
	#ARM_ORR_REG_REGSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
) \

1263 
	`ARM_DPIOP_REG_REGSHIFT_COND
(
p
, 
ARMOP_ORR
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
)

	)

1264 
	#ARM_ORR_REG_REGSHIFT
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
) \

1265 
	`ARM_ORR_REG_REGSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
ARMCOND_AL
)

	)

1266 
	#ARM_ORRS_REG_REGSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
) \

1267 
	`ARM_DPIOP_S_REG_REGSHIFT_COND
(
p
, 
ARMOP_ORR
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
)

	)

1268 
	#ARM_ORRS_REG_REGSHIFT
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
) \

1269 
	`ARM_ORRS_REG_REGSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
ARMCOND_AL
)

	)

1271 #i‚de‡
ARM_NOIASM


1272 
	#_ORR_REG_REGSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
) \

1273 
	`ARM_IASM_DPIOP_REG_REGSHIFT_COND
(
ARMOP_ORR
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
)

	)

1274 
	#_ORR_REG_REGSHIFT
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
) \

1275 
	`_ORR_REG_REGSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
ARMCOND_AL
)

	)

1276 
	#_ORRS_REG_REGSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
) \

1277 
	`ARM_IASM_DPIOP_S_REG_REGSHIFT_COND
(
ARMOP_ORR
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
)

	)

1278 
	#_ORRS_REG_REGSHIFT
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
) \

1279 
	`_ORRS_REG_REGSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
ARMCOND_AL
)

	)

1286 
	#ARM_BIC_REG_IMM_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
) \

1287 
	`ARM_DPIOP_REG_IMM8ROT_COND
(
p
, 
ARMOP_BIC
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
)

	)

1288 
	#ARM_BIC_REG_IMM
(
p
, 
rd
, 
∫
, 
imm8
, 
rŸ
) \

1289 
	`ARM_BIC_REG_IMM_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
ARMCOND_AL
)

	)

1290 
	#ARM_BICS_REG_IMM_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
) \

1291 
	`ARM_DPIOP_S_REG_IMM8ROT_COND
(
p
, 
ARMOP_BIC
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
)

	)

1292 
	#ARM_BICS_REG_IMM
(
p
, 
rd
, 
∫
, 
imm8
, 
rŸ
) \

1293 
	`ARM_BICS_REG_IMM_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
ARMCOND_AL
)

	)

1295 #i‚de‡
ARM_NOIASM


1296 
	#_BIC_REG_IMM_COND
(
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
) \

1297 
	`ARM_IASM_DPIOP_REG_IMM8ROT_COND
(
ARMOP_BIC
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
)

	)

1298 
	#_BIC_REG_IMM
(
rd
, 
∫
, 
imm8
, 
rŸ
) \

1299 
	`_BIC_REG_IMM_COND
(
rd
, 
∫
, 
imm8
, 
rŸ
, 
ARMCOND_AL
)

	)

1300 
	#_BICS_REG_IMM_COND
(
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
) \

1301 
	`ARM_IASM_DPIOP_S_REG_IMM8ROT_COND
(
ARMOP_BIC
, 
rd
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
)

	)

1302 
	#_BICS_REG_IMM
(
rd
, 
∫
, 
imm8
, 
rŸ
) \

1303 
	`_BICS_REG_IMM_COND
(
rd
, 
∫
, 
imm8
, 
rŸ
, 
ARMCOND_AL
)

	)

1308 
	#ARM_BIC_REG_IMM8_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
c⁄d
) \

1309 
	`ARM_BIC_REG_IMM_COND
(
p
, 
rd
, 
∫
, 
imm8
, 0, 
c⁄d
)

	)

1310 
	#ARM_BIC_REG_IMM8
(
p
, 
rd
, 
∫
, 
imm8
) \

1311 
	`ARM_BIC_REG_IMM8_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
ARMCOND_AL
)

	)

1312 
	#ARM_BICS_REG_IMM8_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
c⁄d
) \

1313 
	`ARM_BICS_REG_IMM_COND
(
p
, 
rd
, 
∫
, 
imm8
, 0, 
c⁄d
)

	)

1314 
	#ARM_BICS_REG_IMM8
(
p
, 
rd
, 
∫
, 
imm8
) \

1315 
	`ARM_BICS_REG_IMM8_COND
(
p
, 
rd
, 
∫
, 
imm8
, 
ARMCOND_AL
)

	)

1317 #i‚de‡
ARM_NOIASM


1318 
	#_BIC_REG_IMM8_COND
(
rd
, 
∫
, 
imm8
, 
c⁄d
) \

1319 
	`_BIC_REG_IMM_COND
(
rd
, 
∫
, 
imm8
, 0, 
c⁄d
)

	)

1320 
	#_BIC_REG_IMM8
(
rd
, 
∫
, 
imm8
) \

1321 
	`_BIC_REG_IMM8_COND
(
rd
, 
∫
, 
imm8
, 
ARMCOND_AL
)

	)

1322 
	#_BICS_REG_IMM8_COND
(
rd
, 
∫
, 
imm8
, 
c⁄d
) \

1323 
	`_BICS_REG_IMM_COND
(
rd
, 
∫
, 
imm8
, 0, 
c⁄d
)

	)

1324 
	#_BICS_REG_IMM8
(
rd
, 
∫
, 
imm8
) \

1325 
	`_BICS_REG_IMM8_COND
(
rd
, 
∫
, 
imm8
, 
ARMCOND_AL
)

	)

1330 
	#ARM_BIC_REG_REG_COND
(
p
, 
rd
, 
∫
, 
rm
, 
c⁄d
) \

1331 
	`ARM_DPIOP_REG_REG_COND
(
p
, 
ARMOP_BIC
, 
rd
, 
∫
, 
rm
, 
c⁄d
)

	)

1332 
	#ARM_BIC_REG_REG
(
p
, 
rd
, 
∫
, 
rm
) \

1333 
	`ARM_BIC_REG_REG_COND
(
p
, 
rd
, 
∫
, 
rm
, 
ARMCOND_AL
)

	)

1334 
	#ARM_BICS_REG_REG_COND
(
p
, 
rd
, 
∫
, 
rm
, 
c⁄d
) \

1335 
	`ARM_DPIOP_S_REG_REG_COND
(
p
, 
ARMOP_BIC
, 
rd
, 
∫
, 
rm
, 
c⁄d
)

	)

1336 
	#ARM_BICS_REG_REG
(
p
, 
rd
, 
∫
, 
rm
) \

1337 
	`ARM_BICS_REG_REG_COND
(
p
, 
rd
, 
∫
, 
rm
, 
ARMCOND_AL
)

	)

1339 #i‚de‡
ARM_NOIASM


1340 
	#_BIC_REG_REG_COND
(
rd
, 
∫
, 
rm
, 
c⁄d
) \

1341 
	`ARM_IASM_DPIOP_REG_REG_COND
(
ARMOP_BIC
, 
rd
, 
∫
, 
rm
, 
c⁄d
)

	)

1342 
	#_BIC_REG_REG
(
rd
, 
∫
, 
rm
) \

1343 
	`_BIC_REG_REG_COND
(
rd
, 
∫
, 
rm
, 
ARMCOND_AL
)

	)

1344 
	#_BICS_REG_REG_COND
(
rd
, 
∫
, 
rm
, 
c⁄d
) \

1345 
	`ARM_IASM_DPIOP_S_REG_REG_COND
(
ARMOP_BIC
, 
rd
, 
∫
, 
rm
, 
c⁄d
)

	)

1346 
	#_BICS_REG_REG
(
rd
, 
∫
, 
rm
) \

1347 
	`_BICS_REG_REG_COND
(
rd
, 
∫
, 
rm
, 
ARMCOND_AL
)

	)

1352 
	#ARM_BIC_REG_IMMSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
) \

1353 
	`ARM_DPIOP_REG_IMMSHIFT_COND
(
p
, 
ARMOP_BIC
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
)

	)

1354 
	#ARM_BIC_REG_IMMSHIFT
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
) \

1355 
	`ARM_BIC_REG_IMMSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
ARMCOND_AL
)

	)

1356 
	#ARM_BICS_REG_IMMSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
) \

1357 
	`ARM_DPIOP_S_REG_IMMSHIFT_COND
(
p
, 
ARMOP_BIC
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
)

	)

1358 
	#ARM_BICS_REG_IMMSHIFT
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
) \

1359 
	`ARM_BICS_REG_IMMSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
ARMCOND_AL
)

	)

1361 #i‚de‡
ARM_NOIASM


1362 
	#_BIC_REG_IMMSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
) \

1363 
	`ARM_IASM_DPIOP_REG_IMMSHIFT_COND
(
ARMOP_BIC
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
)

	)

1364 
	#_BIC_REG_IMMSHIFT
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
) \

1365 
	`_BIC_REG_IMMSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
ARMCOND_AL
)

	)

1366 
	#_BICS_REG_IMMSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
) \

1367 
	`ARM_IASM_DPIOP_S_REG_IMMSHIFT_COND
(
ARMOP_BIC
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
)

	)

1368 
	#_BICS_REG_IMMSHIFT
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
) \

1369 
	`_BICS_REG_IMMSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
ARMCOND_AL
)

	)

1374 
	#ARM_BIC_REG_REGSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
) \

1375 
	`ARM_DPIOP_REG_REGSHIFT_COND
(
p
, 
ARMOP_BIC
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
)

	)

1376 
	#ARM_BIC_REG_REGSHIFT
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
) \

1377 
	`ARM_BIC_REG_REGSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
ARMCOND_AL
)

	)

1378 
	#ARM_BICS_REG_REGSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
) \

1379 
	`ARM_DPIOP_S_REG_REGSHIFT_COND
(
p
, 
ARMOP_BIC
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
)

	)

1380 
	#ARM_BICS_REG_REGSHIFT
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
) \

1381 
	`ARM_BICS_REG_REGSHIFT_COND
(
p
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
ARMCOND_AL
)

	)

1383 #i‚de‡
ARM_NOIASM


1384 
	#_BIC_REG_REGSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
) \

1385 
	`ARM_IASM_DPIOP_REG_REGSHIFT_COND
(
ARMOP_BIC
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
)

	)

1386 
	#_BIC_REG_REGSHIFT
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
) \

1387 
	`_BIC_REG_REGSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
ARMCOND_AL
)

	)

1388 
	#_BICS_REG_REGSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
) \

1389 
	`ARM_IASM_DPIOP_S_REG_REGSHIFT_COND
(
ARMOP_BIC
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
)

	)

1390 
	#_BICS_REG_REGSHIFT
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
) \

1391 
	`_BICS_REG_REGSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
ARMCOND_AL
)

	)

1402 
	#ARM_TST_REG_IMM_COND
(
p
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
) \

1403 
	`ARM_DPIOP_S_REG_IMM8ROT_COND
(
p
, 
ARMOP_TST
, 0, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
)

	)

1404 
	#ARM_TST_REG_IMM
(
p
, 
∫
, 
imm8
, 
rŸ
) \

1405 
	`ARM_TST_REG_IMM_COND
(
p
, 
∫
, 
imm8
, 
rŸ
, 
ARMCOND_AL
)

	)

1407 #i‚de‡
ARM_NOIASM


1408 
	#_TST_REG_IMM_COND
(
∫
, 
imm8
, 
rŸ
, 
c⁄d
) \

1409 
	`ARM_IASM_DPIOP_S_REG_IMM8ROT_COND
(
ARMOP_TST
, 0, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
)

	)

1410 
	#_TST_REG_IMM
(
∫
, 
imm8
, 
rŸ
) \

1411 
	`_TST_REG_IMM_COND
(
∫
, 
imm8
, 
rŸ
, 
ARMCOND_AL
)

	)

1416 
	#ARM_TST_REG_IMM8_COND
(
p
, 
∫
, 
imm8
, 
c⁄d
) \

1417 
	`ARM_TST_REG_IMM_COND
(
p
, 
∫
, 
imm8
, 0, 
c⁄d
)

	)

1418 
	#ARM_TST_REG_IMM8
(
p
, 
∫
, 
imm8
) \

1419 
	`ARM_TST_REG_IMM8_COND
(
p
, 
∫
, 
imm8
, 
ARMCOND_AL
)

	)

1421 #i‚de‡
ARM_NOIASM


1422 
	#_TST_REG_IMM8_COND
(
∫
, 
imm8
, 
c⁄d
) \

1423 
	`_TST_REG_IMM_COND
(
∫
, 
imm8
, 0, 
c⁄d
)

	)

1424 
	#_TST_REG_IMM8
(
∫
, 
imm8
) \

1425 
	`_TST_REG_IMM8_COND
(
∫
, 
imm8
, 
ARMCOND_AL
)

	)

1430 
	#ARM_TST_REG_REG_COND
(
p
, 
∫
, 
rm
, 
c⁄d
) \

1431 
	`ARM_DPIOP_S_REG_REG_COND
(
p
, 
ARMOP_TST
, 0, 
∫
, 
rm
, 
c⁄d
)

	)

1432 
	#ARM_TST_REG_REG
(
p
, 
∫
, 
rm
) \

1433 
	`ARM_TST_REG_REG_COND
(
p
, 
∫
, 
rm
, 
ARMCOND_AL
)

	)

1435 #i‚de‡
ARM_NOIASM


1436 
	#_TST_REG_REG_COND
(
∫
, 
rm
, 
c⁄d
) \

1437 
	`ARM_IASM_DPIOP_S_REG_REG_COND
(
ARMOP_TST
, 0, 
∫
, 
rm
, 
c⁄d
)

	)

1438 
	#_TST_REG_REG
(
∫
, 
rm
) \

1439 
	`_TST_REG_REG_COND
(
∫
, 
rm
, 
ARMCOND_AL
)

	)

1444 
	#ARM_TST_REG_IMMSHIFT_COND
(
p
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
) \

1445 
	`ARM_DPIOP_S_REG_IMMSHIFT_COND
(
p
, 
ARMOP_TST
, 0, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
)

	)

1446 
	#ARM_TST_REG_IMMSHIFT
(
p
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
) \

1447 
	`ARM_TST_REG_IMMSHIFT_COND
(
p
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
ARMCOND_AL
)

	)

1449 #i‚de‡
ARM_NOIASM


1450 
	#_TST_REG_IMMSHIFT_COND
(
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
) \

1451 
	`ARM_IASM_DPIOP_S_REG_IMMSHIFT_COND
(
ARMOP_TST
, 0, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
)

	)

1452 
	#_TST_REG_IMMSHIFT
(
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
) \

1453 
	`_TST_REG_IMMSHIFT_COND
(
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
ARMCOND_AL
)

	)

1458 
	#ARM_TEQ_REG_IMM_COND
(
p
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
) \

1459 
	`ARM_DPIOP_S_REG_IMM8ROT_COND
(
p
, 
ARMOP_TEQ
, 0, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
)

	)

1460 
	#ARM_TEQ_REG_IMM
(
p
, 
∫
, 
imm8
, 
rŸ
) \

1461 
	`ARM_TEQ_REG_IMM_COND
(
p
, 
∫
, 
imm8
, 
rŸ
, 
ARMCOND_AL
)

	)

1463 #i‚de‡
ARM_NOIASM


1464 
	#_TEQ_REG_IMM_COND
(
∫
, 
imm8
, 
rŸ
, 
c⁄d
) \

1465 
	`ARM_IASM_DPIOP_S_REG_IMM8ROT_COND
(
ARMOP_TEQ
, 0, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
)

	)

1466 
	#_TEQ_REG_IMM
(
∫
, 
imm8
, 
rŸ
) \

1467 
	`_TEQ_REG_IMM_COND
(
∫
, 
imm8
, 
rŸ
, 
ARMCOND_AL
)

	)

1472 
	#ARM_TEQ_REG_IMM8_COND
(
p
, 
∫
, 
imm8
, 
c⁄d
) \

1473 
	`ARM_TEQ_REG_IMM_COND
(
p
, 
∫
, 
imm8
, 0, 
c⁄d
)

	)

1474 
	#ARM_TEQ_REG_IMM8
(
p
, 
∫
, 
imm8
) \

1475 
	`ARM_TEQ_REG_IMM8_COND
(
p
, 
∫
, 
imm8
, 
ARMCOND_AL
)

	)

1477 #i‚de‡
ARM_NOIASM


1478 
	#_TEQ_REG_IMM8_COND
(
∫
, 
imm8
, 
c⁄d
) \

1479 
	`_TEQ_REG_IMM_COND
(
∫
, 
imm8
, 0, 
c⁄d
)

	)

1480 
	#_TEQ_REG_IMM8
(
∫
, 
imm8
) \

1481 
	`_TEQ_REG_IMM8_COND
(
∫
, 
imm8
, 
ARMCOND_AL
)

	)

1486 
	#ARM_TEQ_REG_REG_COND
(
p
, 
∫
, 
rm
, 
c⁄d
) \

1487 
	`ARM_DPIOP_S_REG_REG_COND
(
p
, 
ARMOP_TEQ
, 0, 
∫
, 
rm
, 
c⁄d
)

	)

1488 
	#ARM_TEQ_REG_REG
(
p
, 
∫
, 
rm
) \

1489 
	`ARM_TEQ_REG_REG_COND
(
p
, 
∫
, 
rm
, 
ARMCOND_AL
)

	)

1491 #i‚de‡
ARM_NOIASM


1492 
	#_TEQ_REG_REG_COND
(
∫
, 
rm
, 
c⁄d
) \

1493 
	`ARM_IASM_DPIOP_S_REG_REG_COND
(
ARMOP_TEQ
, 0, 
∫
, 
rm
, 
c⁄d
)

	)

1494 
	#_TEQ_REG_REG
(
∫
, 
rm
) \

1495 
	`_TEQ_REG_REG_COND
(
∫
, 
rm
, 
ARMCOND_AL
)

	)

1500 
	#ARM_TEQ_REG_IMMSHIFT_COND
(
p
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
) \

1501 
	`ARM_DPIOP_S_REG_IMMSHIFT_COND
(
p
, 
ARMOP_TEQ
, 0, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
)

	)

1502 
	#ARM_TEQ_REG_IMMSHIFT
(
p
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
) \

1503 
	`ARM_TEQ_REG_IMMSHIFT_COND
(
p
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
ARMCOND_AL
)

	)

1505 #i‚de‡
ARM_NOIASM


1506 
	#_TEQ_REG_IMMSHIFT_COND
(
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
) \

1507 
	`ARM_IASM_DPIOP_S_REG_IMMSHIFT_COND
(
ARMOP_TEQ
, 0, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
)

	)

1508 
	#_TEQ_REG_IMMSHIFT
(
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
) \

1509 
	`_TEQ_REG_IMMSHIFT_COND
(
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
ARMCOND_AL
)

	)

1514 
	#ARM_CMP_REG_IMM_COND
(
p
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
) \

1515 
	`ARM_DPIOP_S_REG_IMM8ROT_COND
(
p
, 
ARMOP_CMP
, 0, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
)

	)

1516 
	#ARM_CMP_REG_IMM
(
p
, 
∫
, 
imm8
, 
rŸ
) \

1517 
	`ARM_CMP_REG_IMM_COND
(
p
, 
∫
, 
imm8
, 
rŸ
, 
ARMCOND_AL
)

	)

1519 #i‚de‡
ARM_NOIASM


1520 
	#_CMP_REG_IMM_COND
(
∫
, 
imm8
, 
rŸ
, 
c⁄d
) \

1521 
	`ARM_IASM_DPIOP_S_REG_IMM8ROT_COND
(
ARMOP_CMP
, 0, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
)

	)

1522 
	#_CMP_REG_IMM
(
∫
, 
imm8
, 
rŸ
) \

1523 
	`_CMP_REG_IMM_COND
(
∫
, 
imm8
, 
rŸ
, 
ARMCOND_AL
)

	)

1528 
	#ARM_CMP_REG_IMM8_COND
(
p
, 
∫
, 
imm8
, 
c⁄d
) \

1529 
	`ARM_CMP_REG_IMM_COND
(
p
, 
∫
, 
imm8
, 0, 
c⁄d
)

	)

1530 
	#ARM_CMP_REG_IMM8
(
p
, 
∫
, 
imm8
) \

1531 
	`ARM_CMP_REG_IMM8_COND
(
p
, 
∫
, 
imm8
, 
ARMCOND_AL
)

	)

1533 #i‚de‡
ARM_NOIASM


1534 
	#_CMP_REG_IMM8_COND
(
∫
, 
imm8
, 
c⁄d
) \

1535 
	`_CMP_REG_IMM_COND
(
∫
, 
imm8
, 0, 
c⁄d
)

	)

1536 
	#_CMP_REG_IMM8
(
∫
, 
imm8
) \

1537 
	`_CMP_REG_IMM8_COND
(
∫
, 
imm8
, 
ARMCOND_AL
)

	)

1542 
	#ARM_CMP_REG_REG_COND
(
p
, 
∫
, 
rm
, 
c⁄d
) \

1543 
	`ARM_DPIOP_S_REG_REG_COND
(
p
, 
ARMOP_CMP
, 0, 
∫
, 
rm
, 
c⁄d
)

	)

1544 
	#ARM_CMP_REG_REG
(
p
, 
∫
, 
rm
) \

1545 
	`ARM_CMP_REG_REG_COND
(
p
, 
∫
, 
rm
, 
ARMCOND_AL
)

	)

1547 #i‚de‡
ARM_NOIASM


1548 
	#_CMP_REG_REG_COND
(
∫
, 
rm
, 
c⁄d
) \

1549 
	`ARM_IASM_DPIOP_S_REG_REG_COND
(
ARMOP_CMP
, 0, 
∫
, 
rm
, 
c⁄d
)

	)

1550 
	#_CMP_REG_REG
(
∫
, 
rm
) \

1551 
	`_CMP_REG_REG_COND
(
∫
, 
rm
, 
ARMCOND_AL
)

	)

1556 
	#ARM_CMP_REG_IMMSHIFT_COND
(
p
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
) \

1557 
	`ARM_DPIOP_S_REG_IMMSHIFT_COND
(
p
, 
ARMOP_CMP
, 0, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
)

	)

1558 
	#ARM_CMP_REG_IMMSHIFT
(
p
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
) \

1559 
	`ARM_CMP_REG_IMMSHIFT_COND
(
p
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
ARMCOND_AL
)

	)

1561 #i‚de‡
ARM_NOIASM


1562 
	#_CMP_REG_IMMSHIFT_COND
(
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
) \

1563 
	`ARM_IASM_DPIOP_S_REG_IMMSHIFT_COND
(
ARMOP_CMP
, 0, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
)

	)

1564 
	#_CMP_REG_IMMSHIFT
(
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
) \

1565 
	`_CMP_REG_IMMSHIFT_COND
(
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
ARMCOND_AL
)

	)

1570 
	#ARM_CMP_REG_REGSHIFT_COND
(
p
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
) \

1571 
	`ARM_DPIOP_S_REG_REGSHIFT_COND
(
p
, 
ARMOP_CMP
, 0, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
)

	)

1572 
	#ARM_CMP_REG_REGSHIFT
(
p
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
) \

1573 
	`ARM_CMP_REG_REGSHIFT_COND
(
p
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
ARMCOND_AL
)

	)

1576 
	#ARM_CMN_REG_REGSHIFT_COND
(
p
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
) \

1577 
	`ARM_DPIOP_S_REG_REGSHIFT_COND
(
p
, 
ARMOP_CMN
, 0, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
)

	)

1578 
	#ARM_CMN_REG_REGSHIFT
(
p
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
) \

1579 
	`ARM_CMN_REG_REGSHIFT_COND
(
p
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
ARMCOND_AL
)

	)

1582 
	#ARM_TST_REG_REGSHIFT_COND
(
p
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
) \

1583 
	`ARM_DPIOP_S_REG_REGSHIFT_COND
(
p
, 
ARMOP_TST
, 0, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
)

	)

1584 
	#ARM_TST_REG_REGSHIFT
(
p
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
) \

1585 
	`ARM_CMN_REG_REGSHIFT_COND
(
p
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
ARMCOND_AL
)

	)

1588 
	#ARM_TEQ_REG_REGSHIFT_COND
(
p
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
) \

1589 
	`ARM_DPIOP_S_REG_REGSHIFT_COND
(
p
, 
ARMOP_TEQ
, 0, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
)

	)

1590 
	#ARM_TEQ_REG_REGSHIFT
(
p
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
) \

1591 
	`ARM_CMN_REG_REGSHIFT_COND
(
p
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
ARMCOND_AL
)

	)

1595 #i‚de‡
ARM_NOIASM


1596 
	#_CMP_REG_REGSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
) \

1597 
	`ARM_IASM_DPIOP_S_REG_REGSHIFT_COND
(
ARMOP_CMP
, 
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
c⁄d
)

	)

1598 
	#_CMP_REG_REGSHIFT
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
) \

1599 
	`_CMP_REG_REGSHIFT_COND
(
rd
, 
∫
, 
rm
, 
shi·_ty≥
, 
rs
, 
ARMCOND_AL
)

	)

1604 
	#ARM_CMN_REG_IMM_COND
(
p
, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
) \

1605 
	`ARM_DPIOP_S_REG_IMM8ROT_COND
(
p
, 
ARMOP_CMN
, 0, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
)

	)

1606 
	#ARM_CMN_REG_IMM
(
p
, 
∫
, 
imm8
, 
rŸ
) \

1607 
	`ARM_CMN_REG_IMM_COND
(
p
, 
∫
, 
imm8
, 
rŸ
, 
ARMCOND_AL
)

	)

1609 #i‚de‡
ARM_NOIASM


1610 
	#_CMN_REG_IMM_COND
(
∫
, 
imm8
, 
rŸ
, 
c⁄d
) \

1611 
	`ARM_IASM_DPIOP_S_REG_IMM8ROT_COND
(
ARMOP_CMN
, 0, 
∫
, 
imm8
, 
rŸ
, 
c⁄d
)

	)

1612 
	#_CMN_REG_IMM
(
∫
, 
imm8
, 
rŸ
) \

1613 
	`_CMN_REG_IMM_COND
(
∫
, 
imm8
, 
rŸ
, 
ARMCOND_AL
)

	)

1618 
	#ARM_CMN_REG_IMM8_COND
(
p
, 
∫
, 
imm8
, 
c⁄d
) \

1619 
	`ARM_CMN_REG_IMM_COND
(
p
, 
∫
, 
imm8
, 0, 
c⁄d
)

	)

1620 
	#ARM_CMN_REG_IMM8
(
p
, 
∫
, 
imm8
) \

1621 
	`ARM_CMN_REG_IMM8_COND
(
p
, 
∫
, 
imm8
, 
ARMCOND_AL
)

	)

1623 #i‚de‡
ARM_NOIASM


1624 
	#_CMN_REG_IMM8_COND
(
∫
, 
imm8
, 
c⁄d
) \

1625 
	`_CMN_REG_IMM_COND
(
∫
, 
imm8
, 0, 
c⁄d
)

	)

1626 
	#_CMN_REG_IMM8
(
∫
, 
imm8
) \

1627 
	`_CMN_REG_IMM8_COND
(
∫
, 
imm8
, 
ARMCOND_AL
)

	)

1632 
	#ARM_CMN_REG_REG_COND
(
p
, 
∫
, 
rm
, 
c⁄d
) \

1633 
	`ARM_DPIOP_S_REG_REG_COND
(
p
, 
ARMOP_CMN
, 0, 
∫
, 
rm
, 
c⁄d
)

	)

1634 
	#ARM_CMN_REG_REG
(
p
, 
∫
, 
rm
) \

1635 
	`ARM_CMN_REG_REG_COND
(
p
, 
∫
, 
rm
, 
ARMCOND_AL
)

	)

1637 #i‚de‡
ARM_NOIASM


1638 
	#_CMN_REG_REG_COND
(
∫
, 
rm
, 
c⁄d
) \

1639 
	`ARM_IASM_DPIOP_S_REG_REG_COND
(
ARMOP_CMN
, 0, 
∫
, 
rm
, 
c⁄d
)

	)

1640 
	#_CMN_REG_REG
(
∫
, 
rm
) \

1641 
	`_CMN_REG_REG_COND
(
∫
, 
rm
, 
ARMCOND_AL
)

	)

1646 
	#ARM_CMN_REG_IMMSHIFT_COND
(
p
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
) \

1647 
	`ARM_DPIOP_S_REG_IMMSHIFT_COND
(
p
, 
ARMOP_CMN
, 0, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
)

	)

1648 
	#ARM_CMN_REG_IMMSHIFT
(
p
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
) \

1649 
	`ARM_CMN_REG_IMMSHIFT_COND
(
p
, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
ARMCOND_AL
)

	)

1651 #i‚de‡
ARM_NOIASM


1652 
	#_CMN_REG_IMMSHIFT_COND
(
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
) \

1653 
	`ARM_IASM_DPIOP_S_REG_IMMSHIFT_COND
(
ARMOP_CMN
, 0, 
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
c⁄d
)

	)

1654 
	#_CMN_REG_IMMSHIFT
(
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
) \

1655 
	`_CMN_REG_IMMSHIFT_COND
(
∫
, 
rm
, 
shi·_ty≥
, 
imm_shi·
, 
ARMCOND_AL
)

	)

	@gp2x/arm_emit.h

20 #i‚de‡
ARM_EMIT_H


21 
	#ARM_EMIT_H


	)

23 
	~"¨m_codegí.h
"

25 
u32
 
¨m_upd©e_gba_¨m
(u32 
pc
);

26 
u32
 
¨m_upd©e_gba_thumb
(u32 
pc
);

27 
u32
 
¨m_upd©e_gba_idÀ_¨m
(u32 
pc
);

28 
u32
 
¨m_upd©e_gba_idÀ_thumb
(u32 
pc
);

32 
¨m_ödúe˘_bønch_¨m
(
u32
 
addªss
);

33 
¨m_ödúe˘_bønch_thumb
(
u32
 
addªss
);

34 
¨m_ödúe˘_bønch_duÆ_¨m
(
u32
 
addªss
);

35 
¨m_ödúe˘_bønch_duÆ_thumb
(
u32
 
addªss
);

37 
execuã_°‹e_˝§
(
u32
 
√w_˝§
, u32 
°‹e_mask
, u32 
addªss
);

38 
u32
 
execuã_°‹e_˝§_body
(u32 
_˝§
, u32 
°‹e_mask
, u32 
addªss
);

39 
execuã_°‹e_•§
(
u32
 
√w_˝§
, u32 
°‹e_mask
);

40 
u32
 
execuã_ªad_•§
();

41 
u32
 
execuã_•§_ª°‹e
(u32 
addªss
);

43 
execuã_swi_¨m
(
u32
 
pc
);

44 
execuã_swi_thumb
(
u32
 
pc
);

46 
fun˘i⁄_cc
 
execuã_°‹e_u32_ß„
(
u32
 
addªss
, u32 
sour˚
);

48 
°ï_debug_¨m
(
u32
 
pc
);

51 
	#wrôe32
(
vÆue
) \

52 *((
u32
 *)
å™¶©i⁄_±r
Ë
vÆue
; \

53 
å™¶©i⁄_±r
 += 4 \

54 

	)

55 
	#¨m_ªœtive_off£t
(
sour˚
, 
off£t
) \

56 (((((
u32
)
off£t
 - (u32)
sour˚
) - 8) >> 2) & 0xFFFFFF) \

57 

	)

62 
	#ªg_ba£_off£t
 1024

	)

65 
	#ªg_a0
 
ARMREG_R0


	)

66 
	#ªg_a1
 
ARMREG_R1


	)

67 
	#ªg_a2
 
ARMREG_R2


	)

69 
	#ªg_s0
 
ARMREG_R9


	)

70 
	#ªg_ba£
 
ARMREG_SP


	)

71 
	#ªg_Êags
 
ARMREG_R11


	)

73 
	#ªg_cy˛es
 
ARMREG_R12


	)

75 
	#ªg_rv
 
ARMREG_R0


	)

77 
	#ªg_rm
 
ARMREG_R0


	)

78 
	#ªg_∫
 
ARMREG_R1


	)

79 
	#ªg_rs
 
ARMREG_R14


	)

80 
	#ªg_rd
 
ARMREG_R0


	)

103 
	#ªg_x0
 
ARMREG_R3


	)

104 
	#ªg_x1
 
ARMREG_R4


	)

105 
	#ªg_x2
 
ARMREG_R5


	)

106 
	#ªg_x3
 
ARMREG_R6


	)

107 
	#ªg_x4
 
ARMREG_R7


	)

108 
	#ªg_x5
 
ARMREG_R8


	)

110 
	#mem_ªg
 -1

	)

152 
s32
 
	g¨m_ªgi°î_Æloˇti⁄
[] =

154 
ªg_x0
,

155 
ªg_x1
,

156 
mem_ªg
,

157 
mem_ªg
,

158 
mem_ªg
,

159 
mem_ªg
,

160 
ªg_x2
,

161 
mem_ªg
,

162 
mem_ªg
,

163 
ªg_x3
,

164 
mem_ªg
,

165 
mem_ªg
,

166 
ªg_x4
,

167 
mem_ªg
,

168 
ªg_x5
,

169 
ªg_a0


171 
mem_ªg
,

172 
mem_ªg
,

173 
mem_ªg
,

174 
mem_ªg
,

175 
mem_ªg
,

176 
mem_ªg
,

177 
mem_ªg
,

178 
mem_ªg
,

179 
mem_ªg
,

180 
mem_ªg
,

181 
mem_ªg
,

182 
mem_ªg
,

183 
mem_ªg
,

184 
mem_ªg
,

185 
mem_ªg
,

186 
mem_ªg
,

189 
s32
 
	gthumb_ªgi°î_Æloˇti⁄
[] =

191 
ªg_x0
,

192 
ªg_x1
,

193 
ªg_x2
,

194 
ªg_x3
,

195 
ªg_x4
,

196 
ªg_x5
,

197 
mem_ªg
,

198 
mem_ªg
,

199 
mem_ªg
,

200 
mem_ªg
,

201 
mem_ªg
,

202 
mem_ªg
,

203 
mem_ªg
,

204 
mem_ªg
,

205 
mem_ªg
,

206 
ªg_a0


208 
mem_ªg
,

209 
mem_ªg
,

210 
mem_ªg
,

211 
mem_ªg
,

212 
mem_ªg
,

213 
mem_ªg
,

214 
mem_ªg
,

215 
mem_ªg
,

216 
mem_ªg
,

217 
mem_ªg
,

218 
mem_ªg
,

219 
mem_ªg
,

220 
mem_ªg
,

221 
mem_ªg
,

222 
mem_ªg
,

223 
mem_ªg
,

228 
	#¨m_imm_l¶_to_rŸ
(
vÆue
) \

229 (32 - 
vÆue
) \

230 

	)

232 
u32
 
	$¨m_di£˘_imm_32bô
(
u32
 
imm
, u32 *
°‹es
, u32 *
rŸ©i⁄s
)

234 
u32
 
°‹e_cou¡
 = 0;

235 
u32
 
À·_shi·
 = 0;

236 
u32
 
i
;

240 if(
imm
 == 0)

242 
rŸ©i⁄s
[0] = 0;

243 
°‹es
[0] = 0;

250 ; 
À·_shi·
 < 32;Üeft_shift += 2)

252 if((
imm
 >> 
À·_shi·
) & 0x03)

256 if(
À·_shi·
 == 32)

259  
°‹e_cou¡
;

263 if(
À·_shi·
 >= 24)

270 
u32
 
t›_bôs
 = 32 - 
À·_shi·
;

271 
u32
 
ªsiduÆ_bôs
 = 8 - 
t›_bôs
;

272 
u32
 
ªsiduÆ_mask
 = (1 << 
ªsiduÆ_bôs
) - 1;

274 if((
°‹e_cou¡
 > 1Ë&& (
À·_shi·
 > 24) &&

275 ((
°‹es
[0] << ((32 - 
rŸ©i⁄s
[0]Ë& 0x1F)Ë< 
ªsiduÆ_mask
))

279 
u32
 
öôül_bôs
 = 
rŸ©i⁄s
[0];

280 
°‹es
[0] =

281 (
°‹es
[0] << ((
t›_bôs
 + (32 - 
rŸ©i⁄s
[0])) & 0x1F)) |

282 ((
imm
 >> 
À·_shi·
) & 0xFF);

283 
rŸ©i⁄s
[0] = 
t›_bôs
;

285  
°‹e_cou¡
;

290 
°‹es
[
°‹e_cou¡
] = (
imm
 >> 
À·_shi·
) & 0xFF;

291 
rŸ©i⁄s
[
°‹e_cou¡
] = (32 - 
À·_shi·
) & 0x1F;

292  
°‹e_cou¡
 + 1;

297 
°‹es
[
°‹e_cou¡
] = (
imm
 >> 
À·_shi·
) & 0xFF;

298 
rŸ©i⁄s
[
°‹e_cou¡
] = (32 - 
À·_shi·
) & 0x1F;

300 
°‹e_cou¡
++;

301 
À·_shi·
 += 8;

303 
	}
}

305 
	#¨m_lﬂd_imm_32bô
(
úeg
, 
imm
) \

307 
u32
 
°‹es
[4]; \

308 
u32
 
rŸ©i⁄s
[4]; \

309 
u32
 
°‹e_cou¡
 = 
	`¨m_di£˘_imm_32bô
(
imm
, 
°‹es
, 
rŸ©i⁄s
); \

310 
u32
 
i
; \

312 
	`ARM_MOV_REG_IMM
(0, 
úeg
, 
°‹es
[0], 
rŸ©i⁄s
[0]); \

314 
i
 = 1; i < 
°‹e_cou¡
; i++) \

316 
	`ARM_ORR_REG_IMM
(0, 
úeg
, iªg, 
°‹es
[
i
], 
rŸ©i⁄s
[i]); \

319 

	)

321 
	#gíî©e_lﬂd_pc
(
úeg
, 
√w_pc
) \

322 
	`¨m_lﬂd_imm_32bô
(
úeg
, 
√w_pc
) \

323 

	)

324 
	#gíî©e_lﬂd_imm
(
úeg
, 
imm
, 
imm_r‹
) \

325 
	`ARM_MOV_REG_IMM
(0, 
úeg
, 
imm
, 
imm_r‹
) \

326 

	)

329 
	#gíî©e_shi·_À·
(
úeg
, 
imm
) \

330 
	`ARM_MOV_REG_IMMSHIFT
(0, 
úeg
, iªg, 
ARMSHIFT_LSL
, 
imm
) \

331 

	)

332 
	#gíî©e_shi·_right
(
úeg
, 
imm
) \

333 
	`ARM_MOV_REG_IMMSHIFT
(0, 
úeg
, iªg, 
ARMSHIFT_LSR
, 
imm
) \

334 

	)

335 
	#gíî©e_shi·_right_¨ôhmëic
(
úeg
, 
imm
) \

336 
	`ARM_MOV_REG_IMMSHIFT
(0, 
úeg
, iªg, 
ARMSHIFT_ASR
, 
imm
) \

337 

	)

338 
	#gíî©e_rŸ©e_right
(
úeg
, 
imm
) \

339 
	`ARM_MOV_REG_IMMSHIFT
(0, 
úeg
, iªg, 
ARMSHIFT_ROR
, 
imm
) \

340 

	)

341 
	#gíî©e_add
(
úeg_de°
, 
úeg_§c
) \

342 
	`ARM_ADD_REG_REG
(0, 
úeg_de°
, iªg_de°, 
úeg_§c
) \

343 

	)

344 
	#gíî©e_sub
(
úeg_de°
, 
úeg_§c
) \

345 
	`ARM_SUB_REG_REG
(0, 
úeg_de°
, iªg_de°, 
úeg_§c
) \

346 

	)

347 
	#gíî©e_‹
(
úeg_de°
, 
úeg_§c
) \

348 
	`ARM_ORR_REG_REG
(0, 
úeg_de°
, iªg_de°, 
úeg_§c
) \

349 

	)

350 
	#gíî©e_x‹
(
úeg_de°
, 
úeg_§c
) \

351 
	`ARM_EOR_REG_REG
(0, 
úeg_de°
, iªg_de°, 
úeg_§c
) \

352 

	)

353 
	#gíî©e_add_imm
(
úeg
, 
imm
, 
imm_r‹
) \

354 
	`ARM_ADD_REG_IMM
(0, 
úeg
, iªg, 
imm
, 
imm_r‹
) \

355 

	)

356 
	#gíî©e_sub_imm
(
úeg
, 
imm
, 
imm_r‹
) \

357 
	`ARM_SUB_REG_IMM
(0, 
úeg
, iªg, 
imm
, 
imm_r‹
) \

358 

	)

359 
	#gíî©e_x‹_imm
(
úeg
, 
imm
, 
imm_r‹
) \

360 
	`ARM_EOR_REG_IMM
(0, 
úeg
, iªg, 
imm
, 
imm_r‹
) \

361 

	)

362 
	#gíî©e_add_ªg_ªg_imm
(
úeg_de°
, 
úeg_§c
, 
imm
, 
imm_r‹
) \

363 
	`ARM_ADD_REG_IMM
(0, 
úeg_de°
, 
úeg_§c
, 
imm
, 
imm_r‹
) \

364 

	)

365 
	#gíî©e_™d_imm
(
úeg
, 
imm
, 
imm_r‹
) \

366 
	`ARM_AND_REG_IMM
(0, 
úeg
, iªg, 
imm
, 
imm_r‹
) \

367 

	)

368 
	#gíî©e_mov
(
úeg_de°
, 
úeg_§c
) \

369 if(
úeg_de°
 !
úeg_§c
) \

371 
	`ARM_MOV_REG_REG
(0, 
úeg_de°
, 
úeg_§c
); \

373 

	)

374 
	#gíî©e_fun˘i⁄_ˇŒ
(
fun˘i⁄_loˇti⁄
) \

375 
	`ARM_BL
(0, 
	`¨m_ªœtive_off£t
(
å™¶©i⁄_±r
, 
fun˘i⁄_loˇti⁄
)) \

376 

	)

377 
	#gíî©e_exô_block
() \

378 
	`ARM_BX
(0, 
ARMREG_LR
) \

379 

	)

382 
	#gíî©e_bønch_fûÀr
(
c⁄dôi⁄_code
, 
wrôeback_loˇti⁄
) \

383 (
wrôeback_loˇti⁄
Ë
å™¶©i⁄_±r
; \

384 
	`ARM_B_COND
(0, 
c⁄dôi⁄_code
, 0) \

385 

	)

386 
	#gíî©e_upd©e_pc
(
√w_pc
) \

387 
	`gíî©e_lﬂd_pc
(
ªg_a0
, 
√w_pc
) \

388 

	)

389 
	#gíî©e_cy˛e_upd©e
() \

390 if(
cy˛e_cou¡
) \

392 if(
cy˛e_cou¡
 >> 8) \

394 
	`ARM_ADD_REG_IMM
(0, 
ªg_cy˛es
,Ñeg_cy˛es, (
cy˛e_cou¡
 >> 8) & 0xFF, \

395 
	`¨m_imm_l¶_to_rŸ
(8)); \

397 
	`ARM_ADD_REG_IMM
(0, 
ªg_cy˛es
,Ñeg_cy˛es, (
cy˛e_cou¡
 & 0xFF), 0); \

398 
cy˛e_cou¡
 = 0; \

400 

	)

401 
	#gíî©e_cy˛e_upd©e_Êag_£t
() \

402 if(
cy˛e_cou¡
 >> 8) \

404 
	`ARM_ADD_REG_IMM
(0, 
ªg_cy˛es
,Ñeg_cy˛es, (
cy˛e_cou¡
 >> 8) & 0xFF, \

405 
	`¨m_imm_l¶_to_rŸ
(8)); \

407 
	`gíî©e_ßve_Êags
(); \

408 
	`ARM_ADDS_REG_IMM
(0, 
ªg_cy˛es
,Ñeg_cy˛es, (
cy˛e_cou¡
 & 0xFF), 0); \

409 
cy˛e_cou¡
 = 0 \

410 

	)

411 
	#gíî©e_bønch_∑tch_c⁄dôi⁄Æ
(
de°
, 
off£t
) \

412 *((
u32
 *)(
de°
)) = (*((u32 *)dest) & 0xFF000000) | \

413 
	`¨m_ªœtive_off£t
(
de°
, 
off£t
) \

414 

	)

415 
	#gíî©e_bønch_∑tch_unc⁄dôi⁄Æ
(
de°
, 
off£t
) \

416 *((
u32
 *)(
de°
)) = (*((u32 *)dest) & 0xFF000000) | \

417 
	`¨m_ªœtive_off£t
(
de°
, 
off£t
) \

418 

	)

423 
	#gíî©e_bønch_idÀ_ñimö©e
(
wrôeback_loˇti⁄
, 
√w_pc
, 
mode
) \

424 
	`gíî©e_fun˘i⁄_ˇŒ
(
¨m_upd©e_gba_idÀ_
##
mode
); \

425 
	`wrôe32
(
√w_pc
); \

426 
	`gíî©e_bønch_fûÀr
(
ARMCOND_AL
, 
wrôeback_loˇti⁄
) \

427 

	)

428 
	#gíî©e_bønch_upd©e
(
wrôeback_loˇti⁄
, 
√w_pc
, 
mode
) \

429 
	`ARM_MOV_REG_IMMSHIFT
(0, 
ªg_a0
, 
ªg_cy˛es
, 
ARMSHIFT_LSR
, 31); \

430 
	`ARM_ADD_REG_IMMSHIFT
(0, 
ARMREG_PC
, ARMREG_PC, 
ªg_a0
, 
ARMSHIFT_LSL
, 2); \

431 
	`wrôe32
(
√w_pc
); \

432 
	`gíî©e_fun˘i⁄_ˇŒ
(
¨m_upd©e_gba_
##
mode
); \

433 
	`gíî©e_bønch_fûÀr
(
ARMCOND_AL
, 
wrôeback_loˇti⁄
) \

434 

	)

436 
	#gíî©e_bønch_no_cy˛e_upd©e
(
wrôeback_loˇti⁄
, 
√w_pc
, 
mode
) \

437 if(
pc
 =
idÀ_lo›_èrgë_pc
) \

439 
	`gíî©e_bønch_idÀ_ñimö©e
(
wrôeback_loˇti⁄
, 
√w_pc
, 
mode
); \

443 
	`gíî©e_bønch_upd©e
(
wrôeback_loˇti⁄
, 
√w_pc
, 
mode
); \

445 

	)

446 
	#gíî©e_bønch_cy˛e_upd©e
(
wrôeback_loˇti⁄
, 
√w_pc
, 
mode
) \

447 
	`gíî©e_cy˛e_upd©e
(); \

448 
	`gíî©e_bønch_no_cy˛e_upd©e
(
wrôeback_loˇti⁄
, 
√w_pc
, 
mode
) \

449 

	)

452 
	#gíî©e_ödúe˘_bønch_no_cy˛e_upd©e
(
ty≥
) \

453 
	`ARM_B
(0, 
	`¨m_ªœtive_off£t
(
å™¶©i⁄_±r
, 
¨m_ödúe˘_bønch_
##
ty≥
)) \

454 

	)

455 
	#gíî©e_ödúe˘_bønch_cy˛e_upd©e
(
ty≥
) \

456 
	`gíî©e_cy˛e_upd©e
(); \

457 
	`gíî©e_ödúe˘_bønch_no_cy˛e_upd©e
(
ty≥
) \

458 

	)

459 
	#gíî©e_block_¥ﬁogue
() \

460 

	)

461 
	#gíî©e_block_exåa_v¨s_¨m
() \

462 
	`gíî©e_ödúe˘_bønch_¨m
() \

464 if(
c⁄dôi⁄
 == 0x0E) \

466 
	`gíî©e_cy˛e_upd©e
(); \

468 
	`gíî©e_ödúe˘_bønch_no_cy˛e_upd©e
(
¨m
); \

471 
	`gíî©e_ödúe˘_bønch_duÆ
() \

473 if(
c⁄dôi⁄
 == 0x0E) \

475 
	`gíî©e_cy˛e_upd©e
(); \

477 
	`gíî©e_ödúe˘_bønch_no_cy˛e_upd©e
(
duÆ_¨m
); \

480 
u32
 
	`¥ï¨e_lﬂd_ªg
(u32 
s¸©ch_ªg
, u32 
ªg_ödex
) \

482 
u32
 
ªg_u£
 = 
¨m_ªgi°î_Æloˇti⁄
[
ªg_ödex
]; \

483 if(
ªg_u£
 =
mem_ªg
) \

485 
	`ARM_LDR_IMM
(0, 
s¸©ch_ªg
, 
ªg_ba£
, \

486 (
ªg_ba£_off£t
 + (
ªg_ödex
 * 4))); \

487  
s¸©ch_ªg
; \

490  
ªg_u£
; \

493 
u32
 
	`¥ï¨e_lﬂd_ªg_pc
(u32 
s¸©ch_ªg
, u32 
ªg_ödex
, u32 
pc_off£t
) \

495 if(
ªg_ödex
 == 15) \

497 
	`gíî©e_lﬂd_pc
(
s¸©ch_ªg
, 
pc
 + 
pc_off£t
); \

498  
s¸©ch_ªg
; \

500  
	`¥ï¨e_lﬂd_ªg
(
s¸©ch_ªg
, 
ªg_ödex
); \

503 
u32
 
	`¥ï¨e_°‹e_ªg
(u32 
s¸©ch_ªg
, u32 
ªg_ödex
) \

505 
u32
 
ªg_u£
 = 
¨m_ªgi°î_Æloˇti⁄
[
ªg_ödex
]; \

506 if(
ªg_u£
 =
mem_ªg
) \

507  
s¸©ch_ªg
; \

509  
ªg_u£
; \

512 
	`com∂ëe_°‹e_ªg
(
u32
 
s¸©ch_ªg
, u32 
ªg_ödex
) \

514 if(
¨m_ªgi°î_Æloˇti⁄
[
ªg_ödex
] =
mem_ªg
) \

516 
	`ARM_STR_IMM
(0, 
s¸©ch_ªg
, 
ªg_ba£
, \

517 (
ªg_ba£_off£t
 + (
ªg_ödex
 * 4))); \

521 
	`com∂ëe_°‹e_ªg_pc_no_Êags
(
u32
 
s¸©ch_ªg
, u32 
ªg_ödex
) \

523 if(
ªg_ödex
 == 15) \

525 
	`gíî©e_ödúe˘_bønch_¨m
(); \

529 
	`com∂ëe_°‹e_ªg
(
s¸©ch_ªg
, 
ªg_ödex
); \

533 
	`com∂ëe_°‹e_ªg_pc_Êags
(
u32
 
s¸©ch_ªg
, u32 
ªg_ödex
) \

535 if(
ªg_ödex
 == 15) \

537 if(
c⁄dôi⁄
 == 0x0E) \

539 
	`gíî©e_cy˛e_upd©e
(); \

541 
	`gíî©e_fun˘i⁄_ˇŒ
(
execuã_•§_ª°‹e
); \

545 
	`com∂ëe_°‹e_ªg
(
s¸©ch_ªg
, 
ªg_ödex
); \

549 
	`gíî©e_lﬂd_ªg
(
u32
 
úeg
, u32 
ªg_ödex
) \

551 
s32
 
lﬂd_§c
 = 
¨m_ªgi°î_Æloˇti⁄
[
ªg_ödex
]; \

552 if(
lﬂd_§c
 !
mem_ªg
) \

554 
	`ARM_MOV_REG_REG
(0, 
úeg
, 
lﬂd_§c
); \

558 
	`ARM_LDR_IMM
(0, 
úeg
, 
ªg_ba£
, (
ªg_ba£_off£t
 + (
ªg_ödex
 * 4))); \

562 
	`gíî©e_°‹e_ªg
(
u32
 
úeg
, u32 
ªg_ödex
) \

564 
s32
 
°‹e_de°
 = 
¨m_ªgi°î_Æloˇti⁄
[
ªg_ödex
]; \

565 if(
°‹e_de°
 !
mem_ªg
) \

567 
	`ARM_MOV_REG_REG
(0, 
°‹e_de°
, 
úeg
); \

571 
	`ARM_STR_IMM
(0, 
úeg
, 
ªg_ba£
, (
ªg_ba£_off£t
 + (
ªg_ödex
 * 4))); \

574 

	)

576 
	#gíî©e_block_exåa_v¨s_thumb
() \

577 
u32
 
	`¥ï¨e_lﬂd_ªg
(u32 
s¸©ch_ªg
, u32 
ªg_ödex
) \

579 
u32
 
ªg_u£
 = 
thumb_ªgi°î_Æloˇti⁄
[
ªg_ödex
]; \

580 if(
ªg_u£
 =
mem_ªg
) \

582 
	`ARM_LDR_IMM
(0, 
s¸©ch_ªg
, 
ªg_ba£
, \

583 (
ªg_ba£_off£t
 + (
ªg_ödex
 * 4))); \

584  
s¸©ch_ªg
; \

587  
ªg_u£
; \

590 
u32
 
	`¥ï¨e_lﬂd_ªg_pc
(u32 
s¸©ch_ªg
, u32 
ªg_ödex
, u32 
pc_off£t
) \

592 if(
ªg_ödex
 == 15) \

594 
	`gíî©e_lﬂd_pc
(
s¸©ch_ªg
, 
pc
 + 
pc_off£t
); \

595  
s¸©ch_ªg
; \

597  
	`¥ï¨e_lﬂd_ªg
(
s¸©ch_ªg
, 
ªg_ödex
); \

600 
u32
 
	`¥ï¨e_°‹e_ªg
(u32 
s¸©ch_ªg
, u32 
ªg_ödex
) \

602 
u32
 
ªg_u£
 = 
thumb_ªgi°î_Æloˇti⁄
[
ªg_ödex
]; \

603 if(
ªg_u£
 =
mem_ªg
) \

604  
s¸©ch_ªg
; \

606  
ªg_u£
; \

609 
	`com∂ëe_°‹e_ªg
(
u32
 
s¸©ch_ªg
, u32 
ªg_ödex
) \

611 if(
thumb_ªgi°î_Æloˇti⁄
[
ªg_ödex
] =
mem_ªg
) \

613 
	`ARM_STR_IMM
(0, 
s¸©ch_ªg
, 
ªg_ba£
, \

614 (
ªg_ba£_off£t
 + (
ªg_ödex
 * 4))); \

618 
	`gíî©e_lﬂd_ªg
(
u32
 
úeg
, u32 
ªg_ödex
) \

620 
s32
 
lﬂd_§c
 = 
thumb_ªgi°î_Æloˇti⁄
[
ªg_ödex
]; \

621 if(
lﬂd_§c
 !
mem_ªg
) \

623 
	`ARM_MOV_REG_REG
(0, 
úeg
, 
lﬂd_§c
); \

627 
	`ARM_LDR_IMM
(0, 
úeg
, 
ªg_ba£
, (
ªg_ba£_off£t
 + (
ªg_ödex
 * 4))); \

631 
	`gíî©e_°‹e_ªg
(
u32
 
úeg
, u32 
ªg_ödex
) \

633 
s32
 
°‹e_de°
 = 
thumb_ªgi°î_Æloˇti⁄
[
ªg_ödex
]; \

634 if(
°‹e_de°
 !
mem_ªg
) \

636 
	`ARM_MOV_REG_REG
(0, 
°‹e_de°
, 
úeg
); \

640 
	`ARM_STR_IMM
(0, 
úeg
, 
ªg_ba£
, (
ªg_ba£_off£t
 + (
ªg_ödex
 * 4))); \

643 

	)

644 
	#å™¶©e_övÆid©e_dˇche
() \

646 
	`övÆid©e_ˇche_ªgi⁄
(
rom_å™¶©i⁄_ˇche
, \

647 
rom_å™¶©i⁄_ˇche
 + 
ROM_TRANSLATION_CACHE_SIZE
); \

648 
	`övÆid©e_ˇche_ªgi⁄
(
øm_å™¶©i⁄_ˇche
, \

649 
øm_å™¶©i⁄_ˇche
 + 
RAM_TRANSLATION_CACHE_SIZE
); \

650 
	`övÆid©e_ˇche_ªgi⁄
(
bios_å™¶©i⁄_ˇche
, \

651 
bios_å™¶©i⁄_ˇche
 + 
BIOS_TRANSLATION_CACHE_SIZE
); \

653 

	)

654 
	#block_¥ﬁogue_size
 0

	)

661 
	#check_f‹_öãºu±s
() \

662 if((
io_ªgi°îs
[
REG_IE
] & io_ªgi°îs[
REG_IF
]) && \

663 
io_ªgi°îs
[
REG_IME
] && ((
ªg
[
REG_CPSR
] & 0x80) == 0)) \

665 
ªg_mode
[
MODE_IRQ
][6] = 
pc
 + 4; \

666 
•§
[
MODE_IRQ
] = 
ªg
[
REG_CPSR
]; \

667 
ªg
[
REG_CPSR
] = 0xD2; \

668 
pc
 = 0x00000018; \

669 
	`£t_˝u_mode
(
MODE_IRQ
); \

671 

	)

672 
	#gíî©e_lﬂd_ªg_pc
(
úeg
, 
ªg_ödex
, 
pc_off£t
) \

673 if(
ªg_ödex
 == 15) \

675 
	`gíî©e_lﬂd_pc
(
úeg
, 
pc
 + 
pc_off£t
); \

679 
	`gíî©e_lﬂd_ªg
(
úeg
, 
ªg_ödex
); \

681 

	)

682 
	#gíî©e_°‹e_ªg_pc_no_Êags
(
úeg
, 
ªg_ödex
) \

683 
	`gíî©e_°‹e_ªg
(
úeg
, 
ªg_ödex
); \

684 if(
ªg_ödex
 == 15) \

686 
	`gíî©e_ödúe˘_bønch_¨m
(); \

688 

	)

690 
u32
 
fun˘i⁄_cc
 
	$execuã_•§_ª°‹e_body
(
u32
 
pc
)

692 
	`£t_˝u_mode
(
˝u_modes
[
ªg
[
REG_CPSR
] & 0x1F]);

693 
	`check_f‹_öãºu±s
();

695  
pc
;

696 
	}
}

699 
	#gíî©e_°‹e_ªg_pc_Êags
(
úeg
, 
ªg_ödex
) \

700 
	`gíî©e_°‹e_ªg
(
úeg
, 
ªg_ödex
); \

701 if(
ªg_ödex
 == 15) \

703 if(
c⁄dôi⁄
 == 0x0E) \

705 
	`gíî©e_cy˛e_upd©e
(); \

707 
	`gíî©e_fun˘i⁄_ˇŒ
(
execuã_•§_ª°‹e
); \

709 

	)

711 
	#gíî©e_lﬂd_Êags
() \

713 

	)

714 
	#gíî©e_°‹e_Êags
() \

716 

	)

717 
	#gíî©e_ßve_Êags
() \

718 
	`ARM_MRS_CPSR
(0, 
ªg_Êags
) \

719 

	)

720 
	#gíî©e_ª°‹e_Êags
() \

721 
	`ARM_MSR_REG
(0, 
ARM_PSR_F
, 
ªg_Êags
, 
ARM_CPSR
) \

722 

	)

724 
	#c⁄dôi⁄_›posôe_eq
 
ARMCOND_NE


	)

725 
	#c⁄dôi⁄_›posôe_√
 
ARMCOND_EQ


	)

726 
	#c⁄dôi⁄_›posôe_cs
 
ARMCOND_CC


	)

727 
	#c⁄dôi⁄_›posôe_cc
 
ARMCOND_CS


	)

728 
	#c⁄dôi⁄_›posôe_mi
 
ARMCOND_PL


	)

729 
	#c⁄dôi⁄_›posôe_∂
 
ARMCOND_MI


	)

730 
	#c⁄dôi⁄_›posôe_vs
 
ARMCOND_VC


	)

731 
	#c⁄dôi⁄_›posôe_vc
 
ARMCOND_VS


	)

732 
	#c⁄dôi⁄_›posôe_hi
 
ARMCOND_LS


	)

733 
	#c⁄dôi⁄_›posôe_ls
 
ARMCOND_HI


	)

734 
	#c⁄dôi⁄_›posôe_ge
 
ARMCOND_LT


	)

735 
	#c⁄dôi⁄_›posôe_…
 
ARMCOND_GE


	)

736 
	#c⁄dôi⁄_›posôe_gt
 
ARMCOND_LE


	)

737 
	#c⁄dôi⁄_›posôe_À
 
ARMCOND_GT


	)

738 
	#c⁄dôi⁄_›posôe_Æ
 
ARMCOND_NV


	)

739 
	#c⁄dôi⁄_›posôe_nv
 
ARMCOND_AL


	)

741 
	#gíî©e_bønch
(
mode
) \

743 
	`gíî©e_bønch_cy˛e_upd©e
( \

744 
block_exôs
[
block_exô_posôi⁄
].
bønch_sour˚
, \

745 
block_exôs
[
block_exô_posôi⁄
].
bønch_èrgë
, 
mode
); \

746 
block_exô_posôi⁄
++; \

748 

	)

750 
	#gíî©e_›_™d_ªg_immshi·
(
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
shi·
) \

751 
	`ARM_AND_REG_IMMSHIFT
(0, 
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
shi·
) \

752 

	)

753 
	#gíî©e_›_‹r_ªg_immshi·
(
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
shi·
) \

754 
	`ARM_ORR_REG_IMMSHIFT
(0, 
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
shi·
) \

755 

	)

756 
	#gíî©e_›_e‹_ªg_immshi·
(
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
shi·
) \

757 
	`ARM_EOR_REG_IMMSHIFT
(0, 
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
shi·
) \

758 

	)

759 
	#gíî©e_›_bic_ªg_immshi·
(
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
shi·
) \

760 
	`ARM_BIC_REG_IMMSHIFT
(0, 
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
shi·
) \

761 

	)

762 
	#gíî©e_›_sub_ªg_immshi·
(
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
shi·
) \

763 
	`ARM_SUB_REG_IMMSHIFT
(0, 
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
shi·
) \

764 

	)

765 
	#gíî©e_›_rsb_ªg_immshi·
(
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
shi·
) \

766 
	`ARM_RSB_REG_IMMSHIFT
(0, 
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
shi·
) \

767 

	)

768 
	#gíî©e_›_sbc_ªg_immshi·
(
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
shi·
) \

769 
	`ARM_SBC_REG_IMMSHIFT
(0, 
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
shi·
) \

770 

	)

771 
	#gíî©e_›_rsc_ªg_immshi·
(
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
shi·
) \

772 
	`ARM_RSC_REG_IMMSHIFT
(0, 
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
shi·
) \

773 

	)

774 
	#gíî©e_›_add_ªg_immshi·
(
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
shi·
) \

775 
	`ARM_ADD_REG_IMMSHIFT
(0, 
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
shi·
) \

776 

	)

777 
	#gíî©e_›_adc_ªg_immshi·
(
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
shi·
) \

778 
	`ARM_ADC_REG_IMMSHIFT
(0, 
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
shi·
) \

779 

	)

780 
	#gíî©e_›_mov_ªg_immshi·
(
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
shi·
) \

781 
	`ARM_MOV_REG_IMMSHIFT
(0, 
_rd
, 
_rm
, 
shi·_ty≥
, 
shi·
) \

782 

	)

783 
	#gíî©e_›_mvn_ªg_immshi·
(
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
shi·
) \

784 
	`ARM_MVN_REG_IMMSHIFT
(0, 
_rd
, 
_rm
, 
shi·_ty≥
, 
shi·
) \

785 

	)

787 
	#gíî©e_›_™d_ªg_ªgshi·
(
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
_rs
) \

788 
	`ARM_AND_REG_REGSHIFT
(0, 
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
_rs
) \

789 

	)

790 
	#gíî©e_›_‹r_ªg_ªgshi·
(
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
_rs
) \

791 
	`ARM_ORR_REG_REGSHIFT
(0, 
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
_rs
) \

792 

	)

793 
	#gíî©e_›_e‹_ªg_ªgshi·
(
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
_rs
) \

794 
	`ARM_EOR_REG_REGSHIFT
(0, 
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
_rs
) \

795 

	)

796 
	#gíî©e_›_bic_ªg_ªgshi·
(
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
_rs
) \

797 
	`ARM_BIC_REG_REGSHIFT
(0, 
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
_rs
) \

798 

	)

799 
	#gíî©e_›_sub_ªg_ªgshi·
(
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
_rs
) \

800 
	`ARM_SUB_REG_REGSHIFT
(0, 
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
_rs
) \

801 

	)

802 
	#gíî©e_›_rsb_ªg_ªgshi·
(
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
_rs
) \

803 
	`ARM_RSB_REG_REGSHIFT
(0, 
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
_rs
) \

804 

	)

805 
	#gíî©e_›_sbc_ªg_ªgshi·
(
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
_rs
) \

806 
	`ARM_SBC_REG_REGSHIFT
(0, 
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
_rs
) \

807 

	)

808 
	#gíî©e_›_rsc_ªg_ªgshi·
(
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
_rs
) \

809 
	`ARM_RSC_REG_REGSHIFT
(0, 
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
_rs
) \

810 

	)

811 
	#gíî©e_›_add_ªg_ªgshi·
(
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
_rs
) \

812 
	`ARM_ADD_REG_REGSHIFT
(0, 
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
_rs
) \

813 

	)

814 
	#gíî©e_›_adc_ªg_ªgshi·
(
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
_rs
) \

815 
	`ARM_ADC_REG_REGSHIFT
(0, 
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
_rs
) \

816 

	)

817 
	#gíî©e_›_mov_ªg_ªgshi·
(
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
_rs
) \

818 
	`ARM_MOV_REG_REGSHIFT
(0, 
_rd
, 
_rm
, 
shi·_ty≥
, 
_rs
) \

819 

	)

820 
	#gíî©e_›_mvn_ªg_ªgshi·
(
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
_rs
) \

821 
	`ARM_MVN_REG_REGSHIFT
(0, 
_rd
, 
_rm
, 
shi·_ty≥
, 
_rs
) \

822 

	)

824 
	#gíî©e_›_™d_imm
(
_rd
, 
_∫
) \

825 
	`ARM_AND_REG_IMM
(0, 
_rd
, 
_∫
, 
imm
, 
imm_r‹
) \

826 

	)

827 
	#gíî©e_›_‹r_imm
(
_rd
, 
_∫
) \

828 
	`ARM_ORR_REG_IMM
(0, 
_rd
, 
_∫
, 
imm
, 
imm_r‹
) \

829 

	)

830 
	#gíî©e_›_e‹_imm
(
_rd
, 
_∫
) \

831 
	`ARM_EOR_REG_IMM
(0, 
_rd
, 
_∫
, 
imm
, 
imm_r‹
) \

832 

	)

833 
	#gíî©e_›_bic_imm
(
_rd
, 
_∫
) \

834 
	`ARM_BIC_REG_IMM
(0, 
_rd
, 
_∫
, 
imm
, 
imm_r‹
) \

835 

	)

836 
	#gíî©e_›_sub_imm
(
_rd
, 
_∫
) \

837 
	`ARM_SUB_REG_IMM
(0, 
_rd
, 
_∫
, 
imm
, 
imm_r‹
) \

838 

	)

839 
	#gíî©e_›_rsb_imm
(
_rd
, 
_∫
) \

840 
	`ARM_RSB_REG_IMM
(0, 
_rd
, 
_∫
, 
imm
, 
imm_r‹
) \

841 

	)

842 
	#gíî©e_›_sbc_imm
(
_rd
, 
_∫
) \

843 
	`ARM_SBC_REG_IMM
(0, 
_rd
, 
_∫
, 
imm
, 
imm_r‹
) \

844 

	)

845 
	#gíî©e_›_rsc_imm
(
_rd
, 
_∫
) \

846 
	`ARM_RSC_REG_IMM
(0, 
_rd
, 
_∫
, 
imm
, 
imm_r‹
) \

847 

	)

848 
	#gíî©e_›_add_imm
(
_rd
, 
_∫
) \

849 
	`ARM_ADD_REG_IMM
(0, 
_rd
, 
_∫
, 
imm
, 
imm_r‹
) \

850 

	)

851 
	#gíî©e_›_adc_imm
(
_rd
, 
_∫
) \

852 
	`ARM_ADC_REG_IMM
(0, 
_rd
, 
_∫
, 
imm
, 
imm_r‹
) \

853 

	)

854 
	#gíî©e_›_mov_imm
(
_rd
, 
_∫
) \

855 
	`ARM_MOV_REG_IMM
(0, 
_rd
, 
imm
, 
imm_r‹
) \

856 

	)

857 
	#gíî©e_›_mvn_imm
(
_rd
, 
_∫
) \

858 
	`ARM_MVN_REG_IMM
(0, 
_rd
, 
imm
, 
imm_r‹
) \

859 

	)

861 
	#gíî©e_›_ªg_immshi·_lÊags
(
«me
, 
_rd
, 
_∫
, 
_rm
, 
°
, 
shi·
) \

862 
ARM_
##
«me
##
	`_REG_IMMSHIFT
(0, 
_rd
, 
_∫
, 
_rm
, 
°
, 
shi·
) \

863 

	)

864 
	#gíî©e_›_ªg_immshi·_aÊags
(
«me
, 
_rd
, 
_∫
, 
_rm
, 
°
, 
shi·
) \

865 
ARM_
##
«me
##
	`_REG_IMMSHIFT
(0, 
_rd
, 
_∫
, 
_rm
, 
°
, 
shi·
) \

866 

	)

867 
	#gíî©e_›_ªg_immshi·_aÊags_lﬂd_c
(
«me
, 
_rd
, 
_∫
, 
_rm
, 
°
, 
sh
) \

868 
ARM_
##
«me
##
	`_REG_IMMSHIFT
(0, 
_rd
, 
_∫
, 
_rm
, 
°
, 
sh
) \

869 

	)

870 
	#gíî©e_›_ªg_immshi·_uÊags
(
«me
, 
_rd
, 
_rm
, 
shi·_ty≥
, 
shi·
) \

871 
ARM_
##
«me
##
	`_REG_IMMSHIFT
(0, 
_rd
, 
_rm
, 
shi·_ty≥
, 
shi·
) \

872 

	)

873 
	#gíî©e_›_ªg_immshi·_tÊags
(
«me
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
shi·
) \

874 
ARM_
##
«me
##
	`_REG_IMMSHIFT
(0, 
_∫
, 
_rm
, 
shi·_ty≥
, 
shi·
) \

875 

	)

877 
	#gíî©e_›_ªg_ªgshi·_lÊags
(
«me
, 
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
_rs
) \

878 
ARM_
##
«me
##
	`_REG_REGSHIFT
(0, 
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
_rs
) \

879 

	)

880 
	#gíî©e_›_ªg_ªgshi·_aÊags
(
«me
, 
_rd
, 
_∫
, 
_rm
, 
°
, 
_rs
) \

881 
ARM_
##
«me
##
	`_REG_REGSHIFT
(0, 
_rd
, 
_∫
, 
_rm
, 
°
, 
_rs
) \

882 

	)

883 
	#gíî©e_›_ªg_ªgshi·_aÊags_lﬂd_c
(
«me
, 
_rd
, 
_∫
, 
_rm
, 
°
, 
_rs
) \

884 
ARM_
##
«me
##
	`_REG_REGSHIFT
(0, 
_rd
, 
_∫
, 
_rm
, 
°
, 
_rs
) \

885 

	)

886 
	#gíî©e_›_ªg_ªgshi·_uÊags
(
«me
, 
_rd
, 
_rm
, 
shi·_ty≥
, 
_rs
) \

887 
ARM_
##
«me
##
	`_REG_REGSHIFT
(0, 
_rd
, 
_rm
, 
shi·_ty≥
, 
_rs
) \

888 

	)

889 
	#gíî©e_›_ªg_ªgshi·_tÊags
(
«me
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
_rs
) \

890 
ARM_
##
«me
##
	`_REG_REGSHIFT
(0, 
_∫
, 
_rm
, 
shi·_ty≥
, 
_rs
) \

891 

	)

893 
	#gíî©e_›_imm_lÊags
(
«me
, 
_rd
, 
_∫
) \

894 
ARM_
##
«me
##
	`_REG_IMM
(0, 
_rd
, 
_∫
, 
imm
, 
imm_r‹
) \

895 

	)

896 
	#gíî©e_›_imm_aÊags
(
«me
, 
_rd
, 
_∫
) \

897 
ARM_
##
«me
##
	`_REG_IMM
(0, 
_rd
, 
_∫
, 
imm
, 
imm_r‹
) \

898 

	)

899 
	#gíî©e_›_imm_aÊags_lﬂd_c
(
«me
, 
_rd
, 
_∫
) \

900 
ARM_
##
«me
##
	`_REG_IMM
(0, 
_rd
, 
_∫
, 
imm
, 
imm_r‹
) \

901 

	)

902 
	#gíî©e_›_imm_uÊags
(
«me
, 
_rd
) \

903 
ARM_
##
«me
##
	`_REG_IMM
(0, 
_rd
, 
imm
, 
imm_r‹
) \

904 

	)

905 
	#gíî©e_›_imm_tÊags
(
«me
, 
_∫
) \

906 
ARM_
##
«me
##
	`_REG_IMM
(0, 
_∫
, 
imm
, 
imm_r‹
) \

907 

	)

909 
	#gíî©e_›_™ds_ªg_immshi·
(
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
shi·
) \

910 
	`gíî©e_›_ªg_immshi·_lÊags
(
ANDS
, 
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
shi·
) \

911 

	)

912 
	#gíî©e_›_‹rs_ªg_immshi·
(
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
shi·
) \

913 
	`gíî©e_›_ªg_immshi·_lÊags
(
ORRS
, 
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
shi·
) \

914 

	)

915 
	#gíî©e_›_e‹s_ªg_immshi·
(
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
shi·
) \

916 
	`gíî©e_›_ªg_immshi·_lÊags
(
EORS
, 
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
shi·
) \

917 

	)

918 
	#gíî©e_›_bics_ªg_immshi·
(
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
shi·
) \

919 
	`gíî©e_›_ªg_immshi·_lÊags
(
BICS
, 
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
shi·
) \

920 

	)

921 
	#gíî©e_›_subs_ªg_immshi·
(
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
shi·
) \

922 
	`gíî©e_›_ªg_immshi·_aÊags
(
SUBS
, 
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
shi·
) \

923 

	)

924 
	#gíî©e_›_rsbs_ªg_immshi·
(
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
shi·
) \

925 
	`gíî©e_›_ªg_immshi·_aÊags
(
RSBS
, 
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
shi·
) \

926 

	)

927 
	#gíî©e_›_sbcs_ªg_immshi·
(
_rd
, 
_∫
, 
_rm
, 
°
, 
shi·
) \

928 
	`gíî©e_›_ªg_immshi·_aÊags_lﬂd_c
(
SBCS
, 
_rd
, 
_∫
, 
_rm
, 
°
, 
shi·
) \

929 

	)

930 
	#gíî©e_›_rscs_ªg_immshi·
(
_rd
, 
_∫
, 
_rm
, 
°
, 
shi·
) \

931 
	`gíî©e_›_ªg_immshi·_aÊags_lﬂd_c
(
RSCS
, 
_rd
, 
_∫
, 
_rm
, 
°
, 
shi·
) \

932 

	)

933 
	#gíî©e_›_adds_ªg_immshi·
(
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
shi·
) \

934 
	`gíî©e_›_ªg_immshi·_aÊags
(
ADDS
, 
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
shi·
) \

935 

	)

936 
	#gíî©e_›_adcs_ªg_immshi·
(
_rd
, 
_∫
, 
_rm
, 
°
, 
shi·
) \

937 
	`gíî©e_›_ªg_immshi·_aÊags_lﬂd_c
(
ADCS
, 
_rd
, 
_∫
, 
_rm
, 
°
, 
shi·
) \

938 

	)

939 
	#gíî©e_›_movs_ªg_immshi·
(
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
shi·
) \

940 
	`gíî©e_›_ªg_immshi·_uÊags
(
MOVS
, 
_rd
, 
_rm
, 
shi·_ty≥
, 
shi·
) \

941 

	)

942 
	#gíî©e_›_mvns_ªg_immshi·
(
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
shi·
) \

943 
	`gíî©e_›_ªg_immshi·_uÊags
(
MVNS
, 
_rd
, 
_rm
, 
shi·_ty≥
, 
shi·
) \

944 

	)

949 
	#gíî©e_›_√g_ªg_immshi·
(
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
shi·
) \

951 
	`gíî©e_lﬂd_imm
(
ªg_∫
, 0, 0); \

952 
	`gíî©e_›_subs_ªg_immshi·
(
_rd
, 
ªg_∫
, 
_rm
, 
ARMSHIFT_LSL
, 0); \

954 

	)

955 
	#gíî©e_›_muls_ªg_immshi·
(
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
shi·
) \

956 
	`gíî©e_lﬂd_Êags
(); \

957 
	`ARM_MULS
(0, 
_rd
, 
_∫
, 
_rm
); \

958 
	`gíî©e_°‹e_Êags
() \

959 

	)

960 
	#gíî©e_›_cmp_ªg_immshi·
(
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
shi·
) \

961 
	`gíî©e_›_ªg_immshi·_tÊags
(
CMP
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
shi·
) \

962 

	)

963 
	#gíî©e_›_cmn_ªg_immshi·
(
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
shi·
) \

964 
	`gíî©e_›_ªg_immshi·_tÊags
(
CMN
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
shi·
) \

965 

	)

966 
	#gíî©e_›_t°_ªg_immshi·
(
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
shi·
) \

967 
	`gíî©e_›_ªg_immshi·_tÊags
(
TST
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
shi·
) \

968 

	)

969 
	#gíî©e_›_ãq_ªg_immshi·
(
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
shi·
) \

970 
	`gíî©e_›_ªg_immshi·_tÊags
(
TEQ
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
shi·
) \

971 

	)

973 
	#gíî©e_›_™ds_ªg_ªgshi·
(
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
_rs
) \

974 
	`gíî©e_›_ªg_ªgshi·_lÊags
(
ANDS
, 
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
_rs
) \

975 

	)

976 
	#gíî©e_›_‹rs_ªg_ªgshi·
(
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
_rs
) \

977 
	`gíî©e_›_ªg_ªgshi·_lÊags
(
ORRS
, 
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
_rs
) \

978 

	)

979 
	#gíî©e_›_e‹s_ªg_ªgshi·
(
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
_rs
) \

980 
	`gíî©e_›_ªg_ªgshi·_lÊags
(
EORS
, 
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
_rs
) \

981 

	)

982 
	#gíî©e_›_bics_ªg_ªgshi·
(
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
_rs
) \

983 
	`gíî©e_›_ªg_ªgshi·_lÊags
(
BICS
, 
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
_rs
) \

984 

	)

985 
	#gíî©e_›_subs_ªg_ªgshi·
(
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
_rs
) \

986 
	`gíî©e_›_ªg_ªgshi·_aÊags
(
SUBS
, 
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
_rs
) \

987 

	)

988 
	#gíî©e_›_rsbs_ªg_ªgshi·
(
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
_rs
) \

989 
	`gíî©e_›_ªg_ªgshi·_aÊags
(
RSBS
, 
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
_rs
) \

990 

	)

991 
	#gíî©e_›_sbcs_ªg_ªgshi·
(
_rd
, 
_∫
, 
_rm
, 
°
, 
_rs
) \

992 
	`gíî©e_›_ªg_ªgshi·_aÊags_lﬂd_c
(
SBCS
, 
_rd
, 
_∫
, 
_rm
, 
°
, 
_rs
) \

993 

	)

994 
	#gíî©e_›_rscs_ªg_ªgshi·
(
_rd
, 
_∫
, 
_rm
, 
°
, 
_rs
) \

995 
	`gíî©e_›_ªg_ªgshi·_aÊags_lﬂd_c
(
RSCS
, 
_rd
, 
_∫
, 
_rm
, 
°
, 
_rs
) \

996 

	)

997 
	#gíî©e_›_adds_ªg_ªgshi·
(
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
_rs
) \

998 
	`gíî©e_›_ªg_ªgshi·_aÊags
(
ADDS
, 
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
_rs
) \

999 

	)

1000 
	#gíî©e_›_adcs_ªg_ªgshi·
(
_rd
, 
_∫
, 
_rm
, 
°
, 
_rs
) \

1001 
	`gíî©e_›_ªg_ªgshi·_aÊags_lﬂd_c
(
ADCS
, 
_rd
, 
_∫
, 
_rm
, 
°
, 
_rs
) \

1002 

	)

1003 
	#gíî©e_›_movs_ªg_ªgshi·
(
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
_rs
) \

1004 
	`gíî©e_›_ªg_ªgshi·_uÊags
(
MOVS
, 
_rd
, 
_rm
, 
shi·_ty≥
, 
_rs
) \

1005 

	)

1006 
	#gíî©e_›_mvns_ªg_ªgshi·
(
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
_rs
) \

1007 
	`gíî©e_›_ªg_ªgshi·_uÊags
(
MVNS
, 
_rd
, 
_rm
, 
shi·_ty≥
, 
_rs
) \

1008 

	)

1009 
	#gíî©e_›_cmp_ªg_ªgshi·
(
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
_rs
) \

1010 
	`gíî©e_›_ªg_ªgshi·_tÊags
(
CMP
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
_rs
) \

1011 

	)

1012 
	#gíî©e_›_cmn_ªg_ªgshi·
(
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
_rs
) \

1013 
	`gíî©e_›_ªg_ªgshi·_tÊags
(
CMN
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
_rs
) \

1014 

	)

1015 
	#gíî©e_›_t°_ªg_ªgshi·
(
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
_rs
) \

1016 
	`gíî©e_›_ªg_ªgshi·_tÊags
(
TST
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
_rs
) \

1017 

	)

1018 
	#gíî©e_›_ãq_ªg_ªgshi·
(
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
_rs
) \

1019 
	`gíî©e_›_ªg_ªgshi·_tÊags
(
TEQ
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
_rs
) \

1020 

	)

1022 
	#gíî©e_›_™ds_imm
(
_rd
, 
_∫
) \

1023 
	`gíî©e_›_imm_lÊags
(
ANDS
, 
_rd
, 
_∫
) \

1024 

	)

1025 
	#gíî©e_›_‹rs_imm
(
_rd
, 
_∫
) \

1026 
	`gíî©e_›_imm_lÊags
(
ORRS
, 
_rd
, 
_∫
) \

1027 

	)

1028 
	#gíî©e_›_e‹s_imm
(
_rd
, 
_∫
) \

1029 
	`gíî©e_›_imm_lÊags
(
EORS
, 
_rd
, 
_∫
) \

1030 

	)

1031 
	#gíî©e_›_bics_imm
(
_rd
, 
_∫
) \

1032 
	`gíî©e_›_imm_lÊags
(
BICS
, 
_rd
, 
_∫
) \

1033 

	)

1034 
	#gíî©e_›_subs_imm
(
_rd
, 
_∫
) \

1035 
	`gíî©e_›_imm_aÊags
(
SUBS
, 
_rd
, 
_∫
) \

1036 

	)

1037 
	#gíî©e_›_rsbs_imm
(
_rd
, 
_∫
) \

1038 
	`gíî©e_›_imm_aÊags
(
RSBS
, 
_rd
, 
_∫
) \

1039 

	)

1040 
	#gíî©e_›_sbcs_imm
(
_rd
, 
_∫
) \

1041 
	`gíî©e_›_imm_aÊags_lﬂd_c
(
SBCS
, 
_rd
, 
_∫
) \

1042 

	)

1043 
	#gíî©e_›_rscs_imm
(
_rd
, 
_∫
) \

1044 
	`gíî©e_›_imm_aÊags_lﬂd_c
(
RSCS
, 
_rd
, 
_∫
) \

1045 

	)

1046 
	#gíî©e_›_adds_imm
(
_rd
, 
_∫
) \

1047 
	`gíî©e_›_imm_aÊags
(
ADDS
, 
_rd
, 
_∫
) \

1048 

	)

1049 
	#gíî©e_›_adcs_imm
(
_rd
, 
_∫
) \

1050 
	`gíî©e_›_imm_aÊags_lﬂd_c
(
ADCS
, 
_rd
, 
_∫
) \

1051 

	)

1052 
	#gíî©e_›_movs_imm
(
_rd
, 
_∫
) \

1053 
	`gíî©e_›_imm_uÊags
(
MOVS
, 
_rd
) \

1054 

	)

1055 
	#gíî©e_›_mvns_imm
(
_rd
, 
_∫
) \

1056 
	`gíî©e_›_imm_uÊags
(
MVNS
, 
_rd
) \

1057 

	)

1058 
	#gíî©e_›_cmp_imm
(
_rd
, 
_∫
) \

1059 
	`gíî©e_›_imm_tÊags
(
CMP
, 
_∫
) \

1060 

	)

1061 
	#gíî©e_›_cmn_imm
(
_rd
, 
_∫
) \

1062 
	`gíî©e_›_imm_tÊags
(
CMN
, 
_∫
) \

1063 

	)

1064 
	#gíî©e_›_t°_imm
(
_rd
, 
_∫
) \

1065 
	`gíî©e_›_imm_tÊags
(
TST
, 
_∫
) \

1066 

	)

1067 
	#gíî©e_›_ãq_imm
(
_rd
, 
_∫
) \

1068 
	`gíî©e_›_imm_tÊags
(
TEQ
, 
_∫
) \

1069 

	)

1071 
	#¥ï¨e_lﬂd_∫_yes
() \

1072 
u32
 
_∫
 = 
	`¥ï¨e_lﬂd_ªg_pc
(
ªg_∫
, 
∫
, 8) \

1073 

	)

1074 
	#¥ï¨e_lﬂd_∫_no
() \

1075 

	)

1076 
	#¥ï¨e_°‹e_rd_yes
() \

1077 
u32
 
_rd
 = 
	`¥ï¨e_°‹e_ªg
(
ªg_rd
, 
rd
) \

1078 

	)

1079 
	#¥ï¨e_°‹e_rd_no
() \

1080 

	)

1081 
	#com∂ëe_°‹e_rd_yes
(
Êags_›
) \

1082 
com∂ëe_°‹e_ªg_pc_
##
	`Êags_›
(
_rd
, 
rd
) \

1083 

	)

1084 
	#com∂ëe_°‹e_rd_no
(
Êags_›
) \

1085 

	)

1086 
	#¨m_gíî©e_›_ªg
(
«me
, 
lﬂd_›
, 
°‹e_›
, 
Êags_›
) \

1087 
u32
 
shi·_ty≥
 = (
›code
 >> 5) & 0x03; \

1088 
	`¨m_decode_d©a_¥oc_ªg
(); \

1089 
¥ï¨e_lﬂd_∫_
##
	`lﬂd_›
(); \

1090 
¥ï¨e_°‹e_rd_
##
	`°‹e_›
(); \

1092 if((
›code
 >> 4) & 0x01) \

1094 
u32
 
rs
 = ((
›code
 >> 8) & 0x0F); \

1095 
u32
 
_rs
 = 
	`¥ï¨e_lﬂd_ªg
(
ªg_rs
, 
rs
); \

1096 
u32
 
_rm
 = 
	`¥ï¨e_lﬂd_ªg_pc
(
ªg_rm
, 
rm
, 12); \

1097 
gíî©e_›_
##
«me
##
	`_ªg_ªgshi·
(
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
_rs
); \

1101 
u32
 
shi·_imm
 = ((
›code
 >> 7) & 0x1F); \

1102 
u32
 
_rm
 = 
	`¥ï¨e_lﬂd_ªg_pc
(
ªg_rm
, 
rm
, 8); \

1103 
gíî©e_›_
##
«me
##
	`_ªg_immshi·
(
_rd
, 
_∫
, 
_rm
, 
shi·_ty≥
, 
shi·_imm
); \

1105 
com∂ëe_°‹e_rd_
##
	`°‹e_›
(
Êags_›
) \

1106 

	)

1107 
	#¨m_gíî©e_›_ªg_Êags
(
«me
, 
lﬂd_›
, 
°‹e_›
, 
Êags_›
) \

1108 
	`¨m_gíî©e_›_ªg
(
«me
, 
lﬂd_›
, 
°‹e_›
, 
Êags_›
) \

1109 

	)

1112 
	#¨m_gíî©e_›_imm
(
«me
, 
lﬂd_›
, 
°‹e_›
, 
Êags_›
) \

1113 
	`¨m_decode_d©a_¥oc_imm
(); \

1114 
¥ï¨e_lﬂd_∫_
##
	`lﬂd_›
(); \

1115 
¥ï¨e_°‹e_rd_
##
	`°‹e_›
(); \

1116 
gíî©e_›_
##
«me
##
	`_imm
(
_rd
, 
_∫
); \

1117 
com∂ëe_°‹e_rd_
##
	`°‹e_›
(
Êags_›
) \

1118 

	)

1119 
	#¨m_gíî©e_›_imm_Êags
(
«me
, 
lﬂd_›
, 
°‹e_›
, 
Êags_›
) \

1120 
	`¨m_gíî©e_›_imm
(
«me
, 
lﬂd_›
, 
°‹e_›
, 
Êags_›
) \

1121 

	)

1122 
	#¨m_d©a_¥oc
(
«me
, 
ty≥
, 
Êags_›
) \

1124 
¨m_gíî©e_›_
##
	`ty≥
(
«me
, 
yes
, yes, 
Êags_›
); \

1126 

	)

1127 
	#¨m_d©a_¥oc_ã°
(
«me
, 
ty≥
) \

1129 
¨m_gíî©e_›_
##
	`ty≥
(
«me
, 
yes
, 
no
,Ço); \

1131 

	)

1132 
	#¨m_d©a_¥oc_u«ry
(
«me
, 
ty≥
, 
Êags_›
) \

1134 
¨m_gíî©e_›_
##
	`ty≥
(
«me
, 
no
, 
yes
, 
Êags_›
); \

1136 

	)

1138 
	#¨m_mu…ùly_add_no_Êags_no
() \

1139 
	`ARM_MUL
(0, 
_rd
, 
_rm
, 
_rs
) \

1140 

	)

1141 
	#¨m_mu…ùly_add_yes_Êags_no
() \

1142 
u32
 
_∫
 = 
	`¥ï¨e_lﬂd_ªg
(
ªg_a2
, 
∫
); \

1143 
	`ARM_MLA
(0, 
_rd
, 
_rm
, 
_rs
, 
_∫
) \

1144 

	)

1145 
	#¨m_mu…ùly_add_no_Êags_yes
() \

1146 
	`gíî©e_lﬂd_Êags
(); \

1147 
	`ARM_MULS
(0, 
ªg_a0
,Ñeg_a0, 
ªg_a1
) \

1148 
	`gíî©e_°‹e_Êags
() \

1149 

	)

1150 
	#¨m_mu…ùly_add_yes_Êags_yes
() \

1151 
u32
 
_∫
 = 
	`¥ï¨e_lﬂd_ªg
(
ªg_a2
, 
∫
); \

1152 
	`gíî©e_lﬂd_Êags
(); \

1153 
	`ARM_MLAS
(0, 
_rd
, 
_rm
, 
_rs
, 
_∫
); \

1154 
	`gíî©e_°‹e_Êags
()

	)

1157 
	#¨m_mu…ùly
(
add_›
, 
Êags
) \

1159 
	`¨m_decode_mu…ùly
(); \

1160 
u32
 
_rm
 = 
	`¥ï¨e_lﬂd_ªg
(
ªg_a0
, 
rm
); \

1161 
u32
 
_rs
 = 
	`¥ï¨e_lﬂd_ªg
(
ªg_a1
, 
rs
); \

1162 
u32
 
_rd
 = 
	`¥ï¨e_°‹e_ªg
(
ªg_a0
, 
rd
); \

1163 
¨m_mu…ùly_add_
##
add_›
##
_Êags_
##
	`Êags
(); \

1164 
	`com∂ëe_°‹e_ªg
(
_rd
, 
rd
); \

1166 

	)

1168 
	#¨m_mu…ùly_l⁄g_«me_s64
 
SMULL


	)

1169 
	#¨m_mu…ùly_l⁄g_«me_u64
 
UMULL


	)

1170 
	#¨m_mu…ùly_l⁄g_«me_s64_add
 
SMLAL


	)

1171 
	#¨m_mu…ùly_l⁄g_«me_u64_add
 
UMLAL


	)

1174 
	#¨m_mu…ùly_l⁄g_Êags_no
(
«me
) \

1175 
ARM_
##
	`«me
(0, 
_rdlo
, 
_rdhi
, 
_rm
, 
_rs
) \

1176 

	)

1177 
	#¨m_mu…ùly_l⁄g_Êags_yes
(
«me
) \

1178 
	`gíî©e_lﬂd_Êags
(); \

1179 
ARM_
##
«me
##
	`S
(0, 
_rdlo
, 
_rdhi
, 
_rm
, 
_rs
); \

1180 
	`gíî©e_°‹e_Êags
() \

1181 

	)

1183 
	#¨m_mu…ùly_l⁄g_add_no
(
«me
) \

1184 

	)

1185 
	#¨m_mu…ùly_l⁄g_add_yes
(
«me
) \

1186 
	`¥ï¨e_lﬂd_ªg
(
ªg_a0
, 
rdlo
); \

1187 
	`¥ï¨e_lﬂd_ªg
(
ªg_a1
, 
rdhi
) \

1188 

	)

1190 
	#¨m_mu…ùly_l⁄g_›
(
Êags
, 
«me
) \

1191 
¨m_mu…ùly_l⁄g_Êags_
##
	`Êags
(
«me
) \

1192 

	)

1193 
	#¨m_mu…ùly_l⁄g
(
«me
, 
add_›
, 
Êags
) \

1195 
	`¨m_decode_mu…ùly_l⁄g
(); \

1196 
u32
 
_rm
 = 
	`¥ï¨e_lﬂd_ªg
(
ªg_a2
, 
rm
); \

1197 
u32
 
_rs
 = 
	`¥ï¨e_lﬂd_ªg
(
ªg_rs
, 
rs
); \

1198 
u32
 
_rdlo
 = 
	`¥ï¨e_°‹e_ªg
(
ªg_a0
, 
rdlo
); \

1199 
u32
 
_rdhi
 = 
	`¥ï¨e_°‹e_ªg
(
ªg_a1
, 
rdhi
); \

1200 
¨m_mu…ùly_l⁄g_add_
##
	`add_›
(
«me
); \

1201 
	`¨m_mu…ùly_l⁄g_›
(
Êags
, 
¨m_mu…ùly_l⁄g_«me_
##
«me
); \

1202 
	`com∂ëe_°‹e_ªg
(
_rdlo
, 
rdlo
); \

1203 
	`com∂ëe_°‹e_ªg
(
_rdhi
, 
rdhi
); \

1205 

	)

1206 
	#¨m_p§_ªad_˝§
() \

1207 
u32
 
_rd
 = 
	`¥ï¨e_°‹e_ªg
(
ªg_a0
, 
rd
); \

1208 
	`gíî©e_lﬂd_ªg
(
_rd
, 
REG_CPSR
); \

1209 
	`ARM_BIC_REG_IMM
(0, 
_rd
, _rd, 0xF0, 
	`¨m_imm_l¶_to_rŸ
(24)); \

1210 
	`ARM_AND_REG_IMM
(0, 
ªg_Êags
,Ñeg_Êags, 0xF0, 
	`¨m_imm_l¶_to_rŸ
(24)); \

1211 
	`ARM_ORR_REG_REG
(0, 
_rd
, _rd, 
ªg_Êags
); \

1212 
	`com∂ëe_°‹e_ªg
(
_rd
, 
rd
) \

1213 

	)

1214 
	#¨m_p§_ªad_•§
() \

1215 
	`gíî©e_fun˘i⁄_ˇŒ
(
execuã_ªad_•§
) \

1216 
	`gíî©e_°‹e_ªg
(
ªg_a0
, 
rd
) \

1217 

	)

1218 
	#¨m_p§_ªad
(
›_ty≥
, 
p§_ªg
) \

1219 
¨m_p§_ªad_
##
	`p§_ªg
() \

1220 

	)

1224 
u32
 
	$execuã_°‹e_˝§_body
(
u32
 
_˝§
, u32 
°‹e_mask
, u32 
addªss
)

1226 
ªg
[
REG_CPSR
] = 
_˝§
;

1227 if(
°‹e_mask
 & 0xFF)

1229 
	`£t_˝u_mode
(
˝u_modes
[
_˝§
 & 0x1F]);

1230 if((
io_ªgi°îs
[
REG_IE
] & io_ªgi°îs[
REG_IF
]) &&

1231 
io_ªgi°îs
[
REG_IME
] && ((
_˝§
 & 0x80) == 0))

1233 
ªg_mode
[
MODE_IRQ
][6] = 
addªss
 + 4;

1234 
•§
[
MODE_IRQ
] = 
_˝§
;

1235 
ªg
[
REG_CPSR
] = 0xD2;

1236 
	`£t_˝u_mode
(
MODE_IRQ
);

1242 
	}
}

1244 
	#¨m_p§_lﬂd_√w_ªg
() \

1245 
	`gíî©e_lﬂd_ªg
(
ªg_a0
, 
rm
) \

1246 

	)

1247 
	#¨m_p§_lﬂd_√w_imm
() \

1248 
	`gíî©e_lﬂd_imm
(
ªg_a0
, 
imm
, 
imm_r‹
) \

1249 

	)

1250 
	#¨m_p§_°‹e_˝§
() \

1251 
	`¨m_lﬂd_imm_32bô
(
ªg_a1
, 
p§_masks
[
p§_fõld
]); \

1252 
	`gíî©e_fun˘i⁄_ˇŒ
(
execuã_°‹e_˝§
); \

1253 
	`wrôe32
(
pc
) \

1254 

	)

1255 
	#¨m_p§_°‹e_•§
() \

1256 
	`gíî©e_fun˘i⁄_ˇŒ
(
execuã_°‹e_•§
) \

1257 

	)

1258 
	#¨m_p§_°‹e
(
›_ty≥
, 
p§_ªg
) \

1259 
¨m_p§_lﬂd_√w_
##
	`›_ty≥
(); \

1260 
¨m_p§_°‹e_
##
	`p§_ªg
() \

1261 

	)

1263 
	#¨m_p§
(
›_ty≥
, 
å™s„r_ty≥
, 
p§_ªg
) \

1265 
¨m_decode_p§_
##
	`›_ty≥
(); \

1266 
¨m_p§_
##
	`å™s„r_ty≥
(
›_ty≥
, 
p§_ªg
); \

1268 

	)

1273 
	#¨m_ac˚ss_mem‹y_lﬂd
(
mem_ty≥
) \

1274 
cy˛e_cou¡
 += 2; \

1275 
	`gíî©e_fun˘i⁄_ˇŒ
(
execuã_lﬂd_
##
mem_ty≥
); \

1276 
	`wrôe32
((
pc
 + 8)); \

1277 
	`gíî©e_°‹e_ªg_pc_no_Êags
(
ªg_rv
, 
rd
) \

1278 

	)

1279 
	#¨m_ac˚ss_mem‹y_°‹e
(
mem_ty≥
) \

1280 
cy˛e_cou¡
++; \

1281 
	`gíî©e_lﬂd_ªg_pc
(
ªg_a1
, 
rd
, 12); \

1282 
	`gíî©e_fun˘i⁄_ˇŒ
(
execuã_°‹e_
##
mem_ty≥
); \

1283 
	`wrôe32
((
pc
 + 4)) \

1284 

	)

1287 
	#¨m_ac˚ss_mem‹y_adju°_ªg_sh_up
(
úeg
) \

1288 
	`ARM_ADD_REG_IMMSHIFT
(0, 
úeg
, 
_∫
, 
_rm
, ((
›code
 >> 5) & 0x03), \

1289 ((
›code
 >> 7) & 0x1F)) \

1290 

	)

1291 
	#¨m_ac˚ss_mem‹y_adju°_ªg_sh_down
(
úeg
) \

1292 
	`ARM_SUB_REG_IMMSHIFT
(0, 
úeg
, 
_∫
, 
_rm
, ((
›code
 >> 5) & 0x03), \

1293 ((
›code
 >> 7) & 0x1F)) \

1294 

	)

1295 
	#¨m_ac˚ss_mem‹y_adju°_ªg_up
(
úeg
) \

1296 
	`ARM_ADD_REG_REG
(0, 
úeg
, 
_∫
, 
_rm
) \

1297 

	)

1298 
	#¨m_ac˚ss_mem‹y_adju°_ªg_down
(
úeg
) \

1299 
	`ARM_SUB_REG_REG
(0, 
úeg
, 
_∫
, 
_rm
) \

1300 

	)

1301 
	#¨m_ac˚ss_mem‹y_adju°_imm
(
›
, 
úeg
) \

1303 
u32
 
°‹es
[4]; \

1304 
u32
 
rŸ©i⁄s
[4]; \

1305 
u32
 
°‹e_cou¡
 = 
	`¨m_di£˘_imm_32bô
(
off£t
, 
°‹es
, 
rŸ©i⁄s
); \

1307 if(
°‹e_cou¡
 > 1) \

1309 
ARM_
##
›
##
	`_REG_IMM
(0, 
úeg
, 
_∫
, 
°‹es
[0], 
rŸ©i⁄s
[0]); \

1310 
ARM_
##
›
##
	`_REG_IMM
(0, 
úeg
, iªg, 
°‹es
[1], 
rŸ©i⁄s
[1]); \

1314 
ARM_
##
›
##
	`_REG_IMM
(0, 
úeg
, 
_∫
, 
°‹es
[0], 
rŸ©i⁄s
[0]); \

1317 

	)

1318 
	#¨m_ac˚ss_mem‹y_adju°_imm_up
(
úeg
) \

1319 
	`¨m_ac˚ss_mem‹y_adju°_imm
(
ADD
, 
úeg
) \

1320 

	)

1321 
	#¨m_ac˚ss_mem‹y_adju°_imm_down
(
úeg
) \

1322 
	`¨m_ac˚ss_mem‹y_adju°_imm
(
SUB
, 
úeg
) \

1323 

	)

1325 
	#¨m_ac˚ss_mem‹y_¥e
(
ty≥
, 
dúe˘i⁄
) \

1326 
¨m_ac˚ss_mem‹y_adju°_
##
ty≥
##
_
##
	`dúe˘i⁄
(
ªg_a0
) \

1327 

	)

1328 
	#¨m_ac˚ss_mem‹y_¥e_wb
(
ty≥
, 
dúe˘i⁄
) \

1329 
¨m_ac˚ss_mem‹y_adju°_
##
ty≥
##
_
##
	`dúe˘i⁄
(
ªg_a0
); \

1330 
	`gíî©e_°‹e_ªg
(
ªg_a0
, 
∫
) \

1331 

	)

1332 
	#¨m_ac˚ss_mem‹y_po°
(
ty≥
, 
dúe˘i⁄
) \

1333 
u32
 
_∫_de°
 = 
	`¥ï¨e_°‹e_ªg
(
ªg_a1
, 
∫
); \

1334 if(
_∫
 !
ªg_a0
) \

1336 
	`gíî©e_lﬂd_ªg
(
ªg_a0
, 
∫
); \

1338 
¨m_ac˚ss_mem‹y_adju°_
##
ty≥
##
_
##
	`dúe˘i⁄
(
_∫_de°
); \

1339 
	`com∂ëe_°‹e_ªg
(
_∫_de°
, 
∫
) \

1340 

	)

1342 
	#¨m_d©a_å™s_ªg
(
adju°_›
, 
dúe˘i⁄
) \

1343 
	`¨m_decode_d©a_å™s_ªg
(); \

1344 
u32
 
_∫
 = 
	`¥ï¨e_lﬂd_ªg_pc
(
ªg_a0
, 
∫
, 8); \

1345 
u32
 
_rm
 = 
	`¥ï¨e_lﬂd_ªg
(
ªg_a1
, 
rm
); \

1346 
¨m_ac˚ss_mem‹y_
##
	`adju°_›
(
ªg_sh
, 
dúe˘i⁄
) \

1347 

	)

1348 
	#¨m_d©a_å™s_imm
(
adju°_›
, 
dúe˘i⁄
) \

1349 
	`¨m_decode_d©a_å™s_imm
(); \

1350 
u32
 
_∫
 = 
	`¥ï¨e_lﬂd_ªg_pc
(
ªg_a0
, 
∫
, 8); \

1351 
¨m_ac˚ss_mem‹y_
##
	`adju°_›
(
imm
, 
dúe˘i⁄
) \

1352 

	)

1354 
	#¨m_d©a_å™s_hÆf_ªg
(
adju°_›
, 
dúe˘i⁄
) \

1355 
	`¨m_decode_hÆf_å™s_r
(); \

1356 
u32
 
_∫
 = 
	`¥ï¨e_lﬂd_ªg_pc
(
ªg_a0
, 
∫
, 8); \

1357 
u32
 
_rm
 = 
	`¥ï¨e_lﬂd_ªg
(
ªg_a1
, 
rm
); \

1358 
¨m_ac˚ss_mem‹y_
##
	`adju°_›
(
ªg
, 
dúe˘i⁄
) \

1359 

	)

1360 
	#¨m_d©a_å™s_hÆf_imm
(
adju°_›
, 
dúe˘i⁄
) \

1361 
	`¨m_decode_hÆf_å™s_of
(); \

1362 
u32
 
_∫
 = 
	`¥ï¨e_lﬂd_ªg_pc
(
ªg_a0
, 
∫
, 8); \

1363 
¨m_ac˚ss_mem‹y_
##
	`adju°_›
(
imm
, 
dúe˘i⁄
) \

1364 

	)

1366 
	#¨m_ac˚ss_mem‹y
(
ac˚ss_ty≥
, 
dúe˘i⁄
, 
adju°_›
, 
mem_ty≥
, \

1367 
off£t_ty≥
) \

1369 
¨m_d©a_å™s_
##
	`off£t_ty≥
(
adju°_›
, 
dúe˘i⁄
); \

1370 
¨m_ac˚ss_mem‹y_
##
	`ac˚ss_ty≥
(
mem_ty≥
); \

1372 

	)

1374 
	#w‹d_bô_cou¡
(
w‹d
) \

1375 (
bô_cou¡
[
w‹d
 >> 8] + bit_count[word & 0xFF]) \

1376 

	)

1377 
	#•röt_no
(
ac˚ss_ty≥
, 
¥e_›
, 
po°_›
, 
wb
) \

1378 

	)

1379 
	#•röt_yes
(
ac˚ss_ty≥
, 
¥e_›
, 
po°_›
, 
wb
) \

1380 
	`¥ötf
("sbit on %s %s %s %s\n", #access_type, #pre_op, #post_op, #wb) \

1381 

	)

1385 
	#¨m_block_mem‹y_lﬂd
() \

1386 
	`gíî©e_fun˘i⁄_ˇŒ
(
execuã_lﬂd_u32
); \

1387 
	`wrôe32
((
pc
 + 8)); \

1388 
	`gíî©e_°‹e_ªg
(
ªg_rv
, 
i
) \

1389 

	)

1390 
	#¨m_block_mem‹y_°‹e
() \

1391 
	`gíî©e_lﬂd_ªg_pc
(
ªg_a1
, 
i
, 8); \

1392 
	`gíî©e_fun˘i⁄_ˇŒ
(
execuã_°‹e_u32_ß„
) \

1393 

	)

1394 
	#¨m_block_mem‹y_föÆ_lﬂd
() \

1395 
	`¨m_block_mem‹y_lﬂd
() \

1396 

	)

1397 
	#¨m_block_mem‹y_föÆ_°‹e
() \

1398 
	`gíî©e_lﬂd_ªg_pc
(
ªg_a1
, 
i
, 12); \

1399 
	`gíî©e_fun˘i⁄_ˇŒ
(
execuã_°‹e_u32
); \

1400 
	`wrôe32
((
pc
 + 4)) \

1401 

	)

1402 
	#¨m_block_mem‹y_adju°_pc_°‹e
() \

1403 

	)

1404 
	#¨m_block_mem‹y_adju°_pc_lﬂd
() \

1405 if(
ªg_li°
 & 0x8000) \

1407 
	`gíî©e_mov
(
ªg_a0
, 
ªg_rv
); \

1408 
	`gíî©e_ödúe˘_bønch_¨m
(); \

1410 

	)

1411 
	#¨m_block_mem‹y_off£t_down_a
() \

1412 
	`gíî©e_sub_imm
(
ªg_s0
, ((
	`w‹d_bô_cou¡
(
ªg_li°
) * 4) - 4), 0) \

1413 

	)

1414 
	#¨m_block_mem‹y_off£t_down_b
() \

1415 
	`gíî©e_sub_imm
(
ªg_s0
, (
	`w‹d_bô_cou¡
(
ªg_li°
) * 4), 0) \

1416 

	)

1417 
	#¨m_block_mem‹y_off£t_no
() \

1418 

	)

1419 
	#¨m_block_mem‹y_off£t_up
() \

1420 
	`gíî©e_add_imm
(
ªg_s0
, 4, 0) \

1421 

	)

1422 
	#¨m_block_mem‹y_wrôeback_down
() \

1423 
	`gíî©e_lﬂd_ªg
(
ªg_a0
, 
∫
); \

1424 
	`gíî©e_sub_imm
(
ªg_a0
, (
	`w‹d_bô_cou¡
(
ªg_li°
) * 4), 0); \

1425 
	`gíî©e_°‹e_ªg
(
ªg_a0
, 
∫
) \

1426 

	)

1427 
	#¨m_block_mem‹y_wrôeback_up
() \

1428 
	`gíî©e_lﬂd_ªg
(
ªg_a0
, 
∫
); \

1429 
	`gíî©e_add_imm
(
ªg_a0
, (
	`w‹d_bô_cou¡
(
ªg_li°
) * 4), 0); \

1430 
	`gíî©e_°‹e_ªg
(
ªg_a0
, 
∫
) \

1431 

	)

1432 
	#¨m_block_mem‹y_wrôeback_no
()

	)

1436 
	#¨m_block_mem‹y_wrôeback_lﬂd
(
wrôeback_ty≥
) \

1437 if(!((
ªg_li°
 >> 
∫
) & 0x01)) \

1439 
¨m_block_mem‹y_wrôeback_
##
	`wrôeback_ty≥
(); \

1441 

	)

1442 
	#¨m_block_mem‹y_wrôeback_°‹e
(
wrôeback_ty≥
) \

1443 
¨m_block_mem‹y_wrôeback_
##
	`wrôeback_ty≥
() \

1444 

	)

1445 
	#¨m_block_mem‹y
(
ac˚ss_ty≥
, 
off£t_ty≥
, 
wrôeback_ty≥
, 
s_bô
) \

1447 
	`¨m_decode_block_å™s
(); \

1448 
u32
 
off£t
 = 0; \

1449 
u32
 
i
; \

1451 
	`gíî©e_lﬂd_ªg
(
ªg_s0
, 
∫
); \

1452 
¨m_block_mem‹y_off£t_
##
	`off£t_ty≥
(); \

1453 
¨m_block_mem‹y_wrôeback_
##
	`ac˚ss_ty≥
(
wrôeback_ty≥
); \

1454 
	`ARM_BIC_REG_IMM
(0, 
ªg_s0
,Ñeg_s0, 0x03, 0); \

1456 
i
 = 0; i < 16; i++) \

1458 if((
ªg_li°
 >> 
i
) & 0x01) \

1460 
cy˛e_cou¡
++; \

1461 
	`gíî©e_add_ªg_ªg_imm
(
ªg_a0
, 
ªg_s0
, 
off£t
, 0); \

1462 if(
ªg_li°
 & ~((2 << 
i
) - 1)) \

1464 
¨m_block_mem‹y_
##
	`ac˚ss_ty≥
(); \

1465 
off£t
 += 4; \

1469 
¨m_block_mem‹y_föÆ_
##
	`ac˚ss_ty≥
(); \

1475 
¨m_block_mem‹y_adju°_pc_
##
	`ac˚ss_ty≥
(); \

1477 

	)

1478 
	#¨m_sw≠
(
ty≥
) \

1480 
	`¨m_decode_sw≠
(); \

1481 
cy˛e_cou¡
 += 3; \

1482 
	`gíî©e_lﬂd_ªg
(
ªg_a0
, 
∫
); \

1483 
	`gíî©e_fun˘i⁄_ˇŒ
(
execuã_lﬂd_
##
ty≥
); \

1484 
	`wrôe32
((
pc
 + 8)); \

1485 
	`gíî©e_mov
(
ªg_s0
, 
ªg_rv
); \

1486 
	`gíî©e_lﬂd_ªg
(
ªg_a0
, 
∫
); \

1487 
	`gíî©e_lﬂd_ªg
(
ªg_a1
, 
rm
); \

1488 
	`gíî©e_fun˘i⁄_ˇŒ
(
execuã_°‹e_
##
ty≥
); \

1489 
	`wrôe32
((
pc
 + 4)); \

1490 
	`gíî©e_°‹e_ªg
(
ªg_s0
, 
rd
); \

1492 

	)

1494 
	#thumb_gíî©e_›_ªg
(
«me
, 
_rd
, 
_rs
, 
_∫
) \

1495 
u32
 
__rm
 = 
	`¥ï¨e_lﬂd_ªg
(
ªg_rm
, 
_∫
); \

1496 
gíî©e_›_
##
«me
##
	`_ªg_immshi·
(
__rd
, 
__∫
, 
__rm
, 
ARMSHIFT_LSL
, 0) \

1497 

	)

1498 
	#thumb_gíî©e_›_imm
(
«me
, 
_rd
, 
_rs
, 
imm_
) \

1500 
u32
 
imm_r‹
 = 0; \

1501 
gíî©e_›_
##
«me
##
	`_imm
(
__rd
, 
__∫
); \

1503 

	)

1505 
	#thumb_d©a_¥oc
(
ty≥
, 
«me
, 
›_ty≥
, 
_rd
, 
_rs
, 
_∫
) \

1507 
thumb_decode_
##
	`ty≥
(); \

1508 
u32
 
__∫
 = 
	`¥ï¨e_lﬂd_ªg
(
ªg_∫
, 
_rs
); \

1509 
u32
 
__rd
 = 
	`¥ï¨e_°‹e_ªg
(
ªg_rd
, 
_rd
); \

1510 
	`gíî©e_lﬂd_ªg
(
ªg_∫
, 
_rs
); \

1511 
thumb_gíî©e_›_
##
	`›_ty≥
(
«me
, 
_rd
, 
_rs
, 
_∫
); \

1512 
	`com∂ëe_°‹e_ªg
(
__rd
, 
_rd
); \

1514 

	)

1515 
	#thumb_d©a_¥oc_ã°
(
ty≥
, 
«me
, 
›_ty≥
, 
_rd
, 
_rs
) \

1517 
thumb_decode_
##
	`ty≥
(); \

1518 
u32
 
__∫
 = 
	`¥ï¨e_lﬂd_ªg
(
ªg_∫
, 
_rd
); \

1519 
thumb_gíî©e_›_
##
	`›_ty≥
(
«me
, 0, 
_rd
, 
_rs
); \

1521 

	)

1522 
	#thumb_d©a_¥oc_u«ry
(
ty≥
, 
«me
, 
›_ty≥
, 
_rd
, 
_rs
) \

1524 
thumb_decode_
##
	`ty≥
(); \

1525 
u32
 
__rd
 = 
	`¥ï¨e_°‹e_ªg
(
ªg_rd
, 
_rd
); \

1526 
thumb_gíî©e_›_
##
	`›_ty≥
(
«me
, 
_rd
, 0, 
_rs
); \

1527 
	`com∂ëe_°‹e_ªg
(
__rd
, 
_rd
); \

1529 

	)

1531 
	#com∂ëe_°‹e_ªg_pc_thumb
() \

1532 if(
rd
 == 15) \

1534 
	`gíî©e_ödúe˘_bønch_cy˛e_upd©e
(
thumb
); \

1538 
	`com∂ëe_°‹e_ªg
(
_rd
, 
rd
); \

1540 

	)

1541 
	#thumb_d©a_¥oc_hi
(
«me
) \

1543 
	`thumb_decode_húeg_›
(); \

1544 
u32
 
_rd
 = 
	`¥ï¨e_lﬂd_ªg_pc
(
ªg_rd
, 
rd
, 4); \

1545 
u32
 
_rs
 = 
	`¥ï¨e_lﬂd_ªg_pc
(
ªg_∫
, 
rs
, 4); \

1546 
gíî©e_›_
##
«me
##
	`_ªg_immshi·
(
_rd
, _rd, 
_rs
, 
ARMSHIFT_LSL
, 0); \

1547 
	`com∂ëe_°‹e_ªg_pc_thumb
(); \

1549 

	)

1550 
	#thumb_d©a_¥oc_ã°_hi
(
«me
) \

1552 
	`thumb_decode_húeg_›
(); \

1553 
u32
 
_rd
 = 
	`¥ï¨e_lﬂd_ªg_pc
(
ªg_rd
, 
rd
, 4); \

1554 
u32
 
_rs
 = 
	`¥ï¨e_lﬂd_ªg_pc
(
ªg_∫
, 
rs
, 4); \

1555 
gíî©e_›_
##
«me
##
	`_ªg_immshi·
(0, 
_rd
, 
_rs
, 
ARMSHIFT_LSL
, 0); \

1557 

	)

1558 
	#thumb_d©a_¥oc_mov_hi
() \

1560 
	`thumb_decode_húeg_›
(); \

1561 
u32
 
_rs
 = 
	`¥ï¨e_lﬂd_ªg_pc
(
ªg_∫
, 
rs
, 4); \

1562 
u32
 
_rd
 = 
	`¥ï¨e_°‹e_ªg
(
ªg_rd
, 
rd
); \

1563 
	`ARM_MOV_REG_REG
(0, 
_rd
, 
_rs
); \

1564 
	`com∂ëe_°‹e_ªg_pc_thumb
(); \

1566 

	)

1569 
	#thumb_lﬂd_pc
(
_rd
) \

1571 
	`thumb_decode_imm
(); \

1572 
u32
 
__rd
 = 
	`¥ï¨e_°‹e_ªg
(
ªg_rd
, 
_rd
); \

1573 
	`gíî©e_lﬂd_pc
(
__rd
, (((
pc
 & ~2Ë+ 4Ë+ (
imm
 * 4))); \

1574 
	`com∂ëe_°‹e_ªg
(
__rd
, 
_rd
); \

1576 

	)

1577 
	#thumb_lﬂd_•
(
_rd
) \

1579 
	`thumb_decode_imm
(); \

1580 
u32
 
__•
 = 
	`¥ï¨e_lﬂd_ªg
(
ªg_a0
, 
REG_SP
); \

1581 
u32
 
__rd
 = 
	`¥ï¨e_°‹e_ªg
(
ªg_a0
, 
_rd
); \

1582 
	`ARM_ADD_REG_IMM
(0, 
__rd
, 
__•
, 
imm
, 
	`¨m_imm_l¶_to_rŸ
(2)); \

1583 
	`com∂ëe_°‹e_ªg
(
__rd
, 
_rd
); \

1585 

	)

1586 
	#thumb_adju°_•_up
() \

1587 
	`ARM_ADD_REG_IMM
(0, 
_•
, _•, 
imm
, 
	`¨m_imm_l¶_to_rŸ
(2)) \

1588 

	)

1589 
	#thumb_adju°_•_down
() \

1590 
	`ARM_SUB_REG_IMM
(0, 
_•
, _•, 
imm
, 
	`¨m_imm_l¶_to_rŸ
(2)) \

1591 

	)

1592 
	#thumb_adju°_•
(
dúe˘i⁄
) \

1594 
	`thumb_decode_add_•
(); \

1595 
u32
 
_•
 = 
	`¥ï¨e_lﬂd_ªg
(
ªg_a0
, 
REG_SP
); \

1596 
thumb_adju°_•_
##
	`dúe˘i⁄
(); \

1597 
	`com∂ëe_°‹e_ªg
(
_•
, 
REG_SP
); \

1599 

	)

1600 
	#gíî©e_›_l¶_ªg
(
_rd
, 
_rm
, 
_rs
) \

1601 
	`gíî©e_›_movs_ªg_ªgshi·
(
_rd
, 0, 
_rm
, 
ARMSHIFT_LSL
, 
_rs
) \

1602 

	)

1603 
	#gíî©e_›_l§_ªg
(
_rd
, 
_rm
, 
_rs
) \

1604 
	`gíî©e_›_movs_ªg_ªgshi·
(
_rd
, 0, 
_rm
, 
ARMSHIFT_LSR
, 
_rs
) \

1605 

	)

1606 
	#gíî©e_›_a§_ªg
(
_rd
, 
_rm
, 
_rs
) \

1607 
	`gíî©e_›_movs_ªg_ªgshi·
(
_rd
, 0, 
_rm
, 
ARMSHIFT_ASR
, 
_rs
) \

1608 

	)

1609 
	#gíî©e_›_r‹_ªg
(
_rd
, 
_rm
, 
_rs
) \

1610 
	`gíî©e_›_movs_ªg_ªgshi·
(
_rd
, 0, 
_rm
, 
ARMSHIFT_ROR
, 
_rs
) \

1611 

	)

1613 
	#gíî©e_›_l¶_imm
(
_rd
, 
_rm
) \

1614 
	`gíî©e_›_movs_ªg_immshi·
(
_rd
, 0, 
_rm
, 
ARMSHIFT_LSL
, 
imm
) \

1615 

	)

1616 
	#gíî©e_›_l§_imm
(
_rd
, 
_rm
) \

1617 
	`gíî©e_›_movs_ªg_immshi·
(
_rd
, 0, 
_rm
, 
ARMSHIFT_LSR
, 
imm
) \

1618 

	)

1619 
	#gíî©e_›_a§_imm
(
_rd
, 
_rm
) \

1620 
	`gíî©e_›_movs_ªg_immshi·
(
_rd
, 0, 
_rm
, 
ARMSHIFT_ASR
, 
imm
) \

1621 

	)

1622 
	#gíî©e_›_r‹_imm
(
_rd
, 
_rm
) \

1623 
	`gíî©e_›_movs_ªg_immshi·
(
_rd
, 0, 
_rm
, 
ARMSHIFT_ROR
, 
imm
) \

1624 

	)

1626 
	#gíî©e_shi·_ªg
(
›_ty≥
) \

1627 
u32
 
__rm
 = 
	`¥ï¨e_lﬂd_ªg
(
ªg_rd
, 
rd
); \

1628 
u32
 
__rs
 = 
	`¥ï¨e_lﬂd_ªg
(
ªg_rs
, 
rs
); \

1629 
gíî©e_›_
##
›_ty≥
##
	`_ªg
(
__rd
, 
__rm
, 
__rs
) \

1630 

	)

1631 
	#gíî©e_shi·_imm
(
›_ty≥
) \

1632 
u32
 
__rs
 = 
	`¥ï¨e_lﬂd_ªg
(
ªg_rs
, 
rs
); \

1633 
gíî©e_›_
##
›_ty≥
##
	`_imm
(
__rd
, 
__rs
) \

1634 

	)

1636 
	#thumb_shi·
(
decode_ty≥
, 
›_ty≥
, 
vÆue_ty≥
) \

1638 
thumb_decode_
##
	`decode_ty≥
(); \

1639 
u32
 
__rd
 = 
	`¥ï¨e_°‹e_ªg
(
ªg_rd
, 
rd
); \

1640 
gíî©e_shi·_
##
	`vÆue_ty≥
(
›_ty≥
); \

1641 
	`com∂ëe_°‹e_ªg
(
__rd
, 
rd
); \

1643 

	)

1646 
	#thumb_ac˚ss_mem‹y_lﬂd
(
mem_ty≥
, 
_rd
) \

1647 
cy˛e_cou¡
 += 2; \

1648 
	`gíî©e_fun˘i⁄_ˇŒ
(
execuã_lﬂd_
##
mem_ty≥
); \

1649 
	`wrôe32
((
pc
 + 4)); \

1650 
	`gíî©e_°‹e_ªg
(
ªg_rv
, 
_rd
) \

1651 

	)

1652 
	#thumb_ac˚ss_mem‹y_°‹e
(
mem_ty≥
, 
_rd
) \

1653 
cy˛e_cou¡
++; \

1654 
	`gíî©e_lﬂd_ªg
(
ªg_a1
, 
_rd
); \

1655 
	`gíî©e_fun˘i⁄_ˇŒ
(
execuã_°‹e_
##
mem_ty≥
); \

1656 
	`wrôe32
((
pc
 + 2)) \

1657 

	)

1658 
	#thumb_ac˚ss_mem‹y_gíî©e_addªss_pc_ªœtive
(
off£t
, 
_rb
, 
_ro
) \

1659 
	`gíî©e_lﬂd_pc
(
ªg_a0
, (
off£t
)) \

1660 

	)

1661 
	#thumb_ac˚ss_mem‹y_gíî©e_addªss_ªg_imm
(
off£t
, 
_rb
, 
_ro
) \

1662 
u32
 
__rb
 = 
	`¥ï¨e_lﬂd_ªg
(
ªg_a0
, 
_rb
); \

1663 
	`ARM_ADD_REG_IMM
(0, 
ªg_a0
, 
__rb
, 
off£t
, 0) \

1664 

	)

1665 
	#thumb_ac˚ss_mem‹y_gíî©e_addªss_ªg_imm_•
(
off£t
, 
_rb
, 
_ro
) \

1666 
u32
 
__rb
 = 
	`¥ï¨e_lﬂd_ªg
(
ªg_a0
, 
_rb
); \

1667 
	`ARM_ADD_REG_IMM
(0, 
ªg_a0
, 
__rb
, 
off£t
, 
	`¨m_imm_l¶_to_rŸ
(2)) \

1668 

	)

1669 
	#thumb_ac˚ss_mem‹y_gíî©e_addªss_ªg_ªg
(
off£t
, 
_rb
, 
_ro
) \

1670 
u32
 
__rb
 = 
	`¥ï¨e_lﬂd_ªg
(
ªg_a0
, 
_rb
); \

1671 
u32
 
__ro
 = 
	`¥ï¨e_lﬂd_ªg
(
ªg_a1
, 
_ro
); \

1672 
	`ARM_ADD_REG_REG
(0, 
ªg_a0
, 
__rb
, 
__ro
) \

1673 

	)

1674 
	#thumb_ac˚ss_mem‹y
(
ac˚ss_ty≥
, 
›_ty≥
, 
_rd
, 
_rb
, 
_ro
, \

1675 
addªss_ty≥
, 
off£t
, 
mem_ty≥
) \

1677 
thumb_decode_
##
	`›_ty≥
(); \

1678 
thumb_ac˚ss_mem‹y_gíî©e_addªss_
##
	`addªss_ty≥
(
off£t
, 
_rb
, 
_ro
); \

1679 
thumb_ac˚ss_mem‹y_
##
	`ac˚ss_ty≥
(
mem_ty≥
, 
_rd
); \

1681 

	)

1684 
	#thumb_block_addªss_¥ódju°_up
() \

1685 
	`gíî©e_add_imm
(
ªg_s0
, (
bô_cou¡
[
ªg_li°
] * 4), 0) \

1686 

	)

1687 
	#thumb_block_addªss_¥ódju°_down
() \

1688 
	`gíî©e_sub_imm
(
ªg_s0
, (
bô_cou¡
[
ªg_li°
] * 4), 0) \

1689 

	)

1690 
	#thumb_block_addªss_¥ódju°_push_Ã
() \

1691 
	`gíî©e_sub_imm
(
ªg_s0
, ((
bô_cou¡
[
ªg_li°
] + 1) * 4), 0) \

1692 

	)

1693 
	#thumb_block_addªss_¥ódju°_no
() \

1694 

	)

1695 
	#thumb_block_addªss_po°adju°_no
(
ba£_ªg
) \

1696 
	`gíî©e_°‹e_ªg
(
ªg_s0
, 
ba£_ªg
) \

1697 

	)

1698 
	#thumb_block_addªss_po°adju°_up
(
ba£_ªg
) \

1699 
	`gíî©e_add_ªg_ªg_imm
(
ªg_a0
, 
ªg_s0
, (
bô_cou¡
[
ªg_li°
] * 4), 0); \

1700 
	`gíî©e_°‹e_ªg
(
ªg_a0
, 
ba£_ªg
) \

1701 

	)

1702 
	#thumb_block_addªss_po°adju°_down
(
ba£_ªg
) \

1703 
	`gíî©e_mov
(
ªg_a0
, 
ªg_s0
); \

1704 
	`gíî©e_sub_imm
(
ªg_a0
, (
bô_cou¡
[
ªg_li°
] * 4), 0); \

1705 
	`gíî©e_°‹e_ªg
(
ªg_a0
, 
ba£_ªg
) \

1706 

	)

1707 
	#thumb_block_addªss_po°adju°_p›_pc
(
ba£_ªg
) \

1708 
	`gíî©e_add_ªg_ªg_imm
(
ªg_a0
, 
ªg_s0
, \

1709 ((
bô_cou¡
[
ªg_li°
] + 1) * 4), 0); \

1710 
	`gíî©e_°‹e_ªg
(
ªg_a0
, 
ba£_ªg
) \

1711 

	)

1712 
	#thumb_block_addªss_po°adju°_push_Ã
(
ba£_ªg
) \

1713 
	`gíî©e_°‹e_ªg
(
ªg_s0
, 
ba£_ªg
) \

1714 

	)

1715 
	#thumb_block_mem‹y_exåa_no
() \

1716 

	)

1717 
	#thumb_block_mem‹y_exåa_up
() \

1718 

	)

1719 
	#thumb_block_mem‹y_exåa_down
() \

1720 

	)

1721 
	#thumb_block_mem‹y_exåa_p›_pc
() \

1722 
	`gíî©e_add_ªg_ªg_imm
(
ªg_a0
, 
ªg_s0
, (
bô_cou¡
[
ªg_li°
] * 4), 0); \

1723 
	`gíî©e_fun˘i⁄_ˇŒ
(
execuã_lﬂd_u32
); \

1724 
	`wrôe32
((
pc
 + 4)); \

1725 
	`gíî©e_mov
(
ªg_a0
, 
ªg_rv
); \

1726 
	`gíî©e_ödúe˘_bønch_cy˛e_upd©e
(
thumb
) \

1727 

	)

1728 
	#thumb_block_mem‹y_exåa_push_Ã
(
ba£_ªg
) \

1729 
	`gíî©e_add_ªg_ªg_imm
(
ªg_a0
, 
ªg_s0
, (
bô_cou¡
[
ªg_li°
] * 4), 0); \

1730 
	`gíî©e_lﬂd_ªg
(
ªg_a1
, 
REG_LR
); \

1731 
	`gíî©e_fun˘i⁄_ˇŒ
(
execuã_°‹e_u32_ß„
) \

1732 

	)

1733 
	#thumb_block_mem‹y_lﬂd
() \

1734 
	`gíî©e_fun˘i⁄_ˇŒ
(
execuã_lﬂd_u32
); \

1735 
	`wrôe32
((
pc
 + 4)); \

1736 
	`gíî©e_°‹e_ªg
(
ªg_rv
, 
i
) \

1737 

	)

1738 
	#thumb_block_mem‹y_°‹e
() \

1739 
	`gíî©e_lﬂd_ªg
(
ªg_a1
, 
i
); \

1740 
	`gíî©e_fun˘i⁄_ˇŒ
(
execuã_°‹e_u32_ß„
) \

1741 

	)

1742 
	#thumb_block_mem‹y_föÆ_lﬂd
() \

1743 
	`thumb_block_mem‹y_lﬂd
() \

1744 

	)

1745 
	#thumb_block_mem‹y_föÆ_°‹e
() \

1746 
	`gíî©e_lﬂd_ªg
(
ªg_a1
, 
i
); \

1747 
	`gíî©e_fun˘i⁄_ˇŒ
(
execuã_°‹e_u32
); \

1748 
	`wrôe32
((
pc
 + 2)) \

1749 

	)

1750 
	#thumb_block_mem‹y_föÆ_no
(
ac˚ss_ty≥
) \

1751 
thumb_block_mem‹y_föÆ_
##
	`ac˚ss_ty≥
() \

1752 

	)

1753 
	#thumb_block_mem‹y_föÆ_up
(
ac˚ss_ty≥
) \

1754 
thumb_block_mem‹y_föÆ_
##
	`ac˚ss_ty≥
() \

1755 

	)

1756 
	#thumb_block_mem‹y_föÆ_down
(
ac˚ss_ty≥
) \

1757 
thumb_block_mem‹y_föÆ_
##
	`ac˚ss_ty≥
() \

1758 

	)

1759 
	#thumb_block_mem‹y_föÆ_push_Ã
(
ac˚ss_ty≥
) \

1760 
thumb_block_mem‹y_
##
	`ac˚ss_ty≥
() \

1761 

	)

1762 
	#thumb_block_mem‹y_föÆ_p›_pc
(
ac˚ss_ty≥
) \

1763 
thumb_block_mem‹y_
##
	`ac˚ss_ty≥
() \

1764 

	)

1765 
	#thumb_block_mem‹y
(
ac˚ss_ty≥
, 
¥e_›
, 
po°_›
, 
ba£_ªg
) \

1767 
	`thumb_decode_æi°
(); \

1768 
u32
 
i
; \

1769 
u32
 
off£t
 = 0; \

1771 
	`gíî©e_lﬂd_ªg
(
ªg_s0
, 
ba£_ªg
); \

1772 
	`ARM_BIC_REG_IMM
(0, 
ªg_s0
,Ñeg_s0, 0x03, 0); \

1773 
thumb_block_addªss_¥ódju°_
##
	`¥e_›
(); \

1774 
thumb_block_addªss_po°adju°_
##
	`po°_›
(
ba£_ªg
); \

1776 
i
 = 0; i < 8; i++) \

1778 if((
ªg_li°
 >> 
i
) & 0x01) \

1780 
cy˛e_cou¡
++; \

1781 
	`gíî©e_add_ªg_ªg_imm
(
ªg_a0
, 
ªg_s0
, 
off£t
, 0); \

1782 if(
ªg_li°
 & ~((2 << 
i
) - 1)) \

1784 
thumb_block_mem‹y_
##
	`ac˚ss_ty≥
(); \

1785 
off£t
 += 4; \

1789 
thumb_block_mem‹y_föÆ_
##
	`po°_›
(
ac˚ss_ty≥
); \

1795 
thumb_block_mem‹y_exåa_
##
	`po°_›
(); \

1797 

	)

1798 
	#thumb_c⁄dôi⁄Æ_bønch
(
c⁄dôi⁄
) \

1800 
	`gíî©e_cy˛e_upd©e
(); \

1801 
	`gíî©e_lﬂd_Êags
(); \

1802 
	`gíî©e_bønch_fûÀr
(
c⁄dôi⁄_›posôe_
##
c⁄dôi⁄
, 
back∑tch_addªss
); \

1803 
	`gíî©e_bønch_no_cy˛e_upd©e
( \

1804 
block_exôs
[
block_exô_posôi⁄
].
bønch_sour˚
, \

1805 
block_exôs
[
block_exô_posôi⁄
].
bønch_èrgë
, 
thumb
); \

1806 
	`gíî©e_bønch_∑tch_c⁄dôi⁄Æ
(
back∑tch_addªss
, 
å™¶©i⁄_±r
); \

1807 
block_exô_posôi⁄
++; \

1809 

	)

1811 
	#¨m_c⁄dôi⁄Æ_block_hódî
() \

1812 
	`gíî©e_cy˛e_upd©e
(); \

1813 
	`gíî©e_lﬂd_Êags
(); \

1815 
c⁄dôi⁄
 ^= 0x01; \

1816 
	`gíî©e_bønch_fûÀr
(
c⁄dôi⁄
, 
back∑tch_addªss
) \

1817 

	)

1818 
	#¨m_b
() \

1819 
	`gíî©e_bønch
(
¨m
) \

1820 

	)

1821 
	#¨m_bl
() \

1822 
	`gíî©e_upd©e_pc
((
pc
 + 4)); \

1823 
	`gíî©e_°‹e_ªg
(
ªg_a0
, 
REG_LR
); \

1824 
	`gíî©e_bønch
(
¨m
) \

1825 

	)

1826 
	#¨m_bx
() \

1827 
	`¨m_decode_bønchx
(); \

1828 
	`gíî©e_lﬂd_ªg
(
ªg_a0
, 
∫
); \

1829 
	`gíî©e_ödúe˘_bønch_duÆ
(); \

1830 

	)

1831 
	#¨m_swi
() \

1832 
	`gíî©e_swi_hÀ_h™dÀr
((
›code
 >> 16Ë& 0xFF, 
¨m
); \

1833 
	`gíî©e_fun˘i⁄_ˇŒ
(
execuã_swi_¨m
); \

1834 
	`wrôe32
((
pc
 + 4)); \

1835 
	`gíî©e_bønch
(
¨m
) \

1836 

	)

1837 
	#thumb_b
() \

1838 
	`gíî©e_bønch
(
thumb
) \

1839 

	)

1840 
	#thumb_bl
() \

1841 
	`gíî©e_upd©e_pc
(((
pc
 + 2) | 0x01)); \

1842 
	`gíî©e_°‹e_ªg
(
ªg_a0
, 
REG_LR
); \

1843 
	`gíî©e_bønch
(
thumb
) \

1844 

	)

1845 
	#thumb_blh
() \

1847 
	`thumb_decode_bønch
(); \

1848 
	`gíî©e_upd©e_pc
(((
pc
 + 2) | 0x01)); \

1849 
	`gíî©e_lﬂd_ªg
(
ªg_a1
, 
REG_LR
); \

1850 
	`gíî©e_°‹e_ªg
(
ªg_a0
, 
REG_LR
); \

1851 
	`gíî©e_mov
(
ªg_a0
, 
ªg_a1
); \

1852 
	`gíî©e_add_imm
(
ªg_a0
, (
off£t
 * 2), 0); \

1853 
	`gíî©e_ödúe˘_bønch_cy˛e_upd©e
(
thumb
); \

1855 

	)

1856 
	#thumb_bx
() \

1858 
	`thumb_decode_húeg_›
(); \

1859 
	`gíî©e_lﬂd_ªg_pc
(
ªg_a0
, 
rs
, 4); \

1860 
	`gíî©e_ödúe˘_bønch_cy˛e_upd©e
(
duÆ_thumb
); \

1862 

	)

1863 
	#thumb_swi
() \

1864 
	`gíî©e_swi_hÀ_h™dÀr
(
›code
 & 0xFF, 
thumb
); \

1865 
	`gíî©e_fun˘i⁄_ˇŒ
(
execuã_swi_thumb
); \

1866 
	`wrôe32
((
pc
 + 2)); \

1868 
	`gíî©e_bønch
(
¨m
) \

1869 

	)

1870 
u8
 
	gswi_hÀ_h™dÀ
[256] =

1917 
execuã_swi_hÀ_div_¨m
();

1918 
execuã_swi_hÀ_div_thumb
();

1920 
	$execuã_swi_hÀ_div_c
()

1922 
s32
 
ªsu…
 = (s32)
ªg
[0] / (s32)reg[1];

1923 
ªg
[1] = (
s32
)reg[0] % (s32)reg[1];

1924 
ªg
[0] = 
ªsu…
;

1926 
ªg
[3] = (
ªsu…
 ^ (result >> 31)) - (result >> 31);

1927 
	}
}

1929 
	#gíî©e_swi_hÀ_h™dÀr
(
_swi_numbî
, 
mode
) \

1931 
u32
 
swi_numbî
 = 
_swi_numbî
; \

1932 if(
swi_hÀ_h™dÀ
[
swi_numbî
]) \

1935 if(
swi_numbî
 == 0x06) \

1937 
	`gíî©e_fun˘i⁄_ˇŒ
(
execuã_swi_hÀ_div_
##
mode
); \

1942 

	)

1943 
	#gíî©e_å™¶©i⁄_g©e
(
ty≥
) \

1944 
	`gíî©e_upd©e_pc
(
pc
); \

1945 
	`gíî©e_ödúe˘_bønch_no_cy˛e_upd©e
(
ty≥
) \

1946 

	)

1947 
	#gíî©e_°ï_debug
() \

1948 
	`gíî©e_fun˘i⁄_ˇŒ
(
°ï_debug_¨m
); \

1949 
	`wrôe32
(
pc
) \

1950 

	)

	@gp2x/cmdline.c

21 
	~<°dio.h
>

22 
	~<°dlib.h
>

23 
	~<°rög.h
>

24 
	~"˝u˘æ.h
"

25 
	~"gp2xmöûib.h
"

26 
	~"˝u˘æ.h
"

29 
	$ÁŒback
(
¨gc
, *
¨gv
[])

32 i‡(
¨gc
 == 3)

34 i‡(
	`©oi
(
¨gv
[1]) == 0)

36 if(
	`©oi
(
¨gv
[2]Ë> 36){
	`gp2x_deöô
();
	`exô
(1);}

37 if(
	`©oi
(
¨gv
[2]Ë< -20){
	`gp2x_deöô
();
	`exô
(1);}

38 
	`£t_add_FLCDCLK
(
	`©oi
(
¨gv
[2]));

42 if(
	`©oi
(
¨gv
[2]Ë> 10){
	`gp2x_deöô
();
	`exô
(1);}

43 if(
	`©oi
(
¨gv
[2]Ë< -5){
	`gp2x_deöô
();
	`exô
(1);}

44 
	`£t_add_ULCDCLK
(
	`©oi
(
¨gv
[2]));

48 i‡(
¨gc
 == 4)

50 if(
	`©oi
(
¨gv
[3]Ë> 320){
	`gp2x_deöô
();
	`exô
(1);}

51 if(
	`©oi
(
¨gv
[3]Ë< 33){
	`gp2x_deöô
();
	`exô
(1);}

52 i‡(
	`©oi
(
¨gv
[1]) == 0)

54 if(
	`©oi
(
¨gv
[2]Ë> 36){
	`gp2x_deöô
();
	`exô
(1);}

55 if(
	`©oi
(
¨gv
[2]Ë< -20){
	`gp2x_deöô
();
	`exô
(1);}

56 
	`£t_add_FLCDCLK
(
	`©oi
(
¨gv
[2]));

60 if(
	`©oi
(
¨gv
[2]Ë> 10){
	`gp2x_deöô
();
	`exô
(1);}

61 if(
	`©oi
(
¨gv
[2]Ë< -5){
	`gp2x_deöô
();
	`exô
(1);}

62 
	`£t_add_ULCDCLK
(
	`©oi
(
¨gv
[2]));

64 
	`£t_FCLK
(
	`©oi
(
¨gv
[3]));

67 i‡(
¨gc
 == 5)

69 if(
	`©oi
(
¨gv
[3]Ë> 320){
	`gp2x_deöô
();
	`exô
(1);}

70 if(
	`©oi
(
¨gv
[3]Ë< 33){
	`gp2x_deöô
();
	`exô
(1);}

71 if(
	`©of
(
¨gv
[4]Ë> 10){
	`gp2x_deöô
();
	`exô
(1);}

72 if(
	`©of
(
¨gv
[4]Ë< 0.02){
	`gp2x_deöô
();
	`exô
(1);}

73 i‡(
	`©oi
(
¨gv
[1]) == 0)

75 if(
	`©oi
(
¨gv
[2]Ë> 36){
	`gp2x_deöô
();
	`exô
(1);}

76 if(
	`©oi
(
¨gv
[2]Ë< -20){
	`gp2x_deöô
();
	`exô
(1);}

77 
	`£t_add_FLCDCLK
(
	`©oi
(
¨gv
[2]));

81 if(
	`©oi
(
¨gv
[2]Ë> 10){
	`gp2x_deöô
();
	`exô
(1);}

82 if(
	`©oi
(
¨gv
[2]Ë< -5){
	`gp2x_deöô
();
	`exô
(1);}

83 
	`£t_add_ULCDCLK
(
	`©oi
(
¨gv
[2]));

85 
	`£t_FCLK
(
	`©oi
(
¨gv
[3]));

86 
	`£t_gamma
(
	`©of
(
¨gv
[4]));

88 
	}
}

90 
	$cmdhñp
()

92 
	`¥ötf
 ("\ngpSP2X v0.9003 Beta by Exophase/ZodTTD\r\n");

93 
	`¥ötf
 ("cpu_speed by god_at_hell\r\n");

94 
	`¥ötf
 ("Usage: cpu_speed.gpe [option1] [value1] [option2]...\r\n");

95 
	`¥ötf
 ("Options:\r\n");

96 
	`¥ötf
 (" RAM-Options\r\n");

97 
	`¥ötf
 (" -----------\r\n");

98 
	`¥ötf
 (" --cas CAS Latency. Delay in clock cycles betweenÅheÑegistration \n\t\tofá READ commandándÅhe first bit of output data. \n\t\tValid valuesáre 2ánd 3 cycles.\r\n");

99 
	`¥ötf
 (" --trc ACTIVEÅo ACTIVE /AUTOREFRESH command delay. Defines ACTIVE \n\t\tto ACTIVE/autoÑefresh commandÖeriod delay. \n\t\tValid valuesáre from 1Åo 16 cycles.\r\n");

100 
	`¥ötf
 (" --tras ACTIVEÅo PRECHARGE delay. DefinesÅhe delay betweenÅhe ACTIVE \n\t\tand PRECHARGE commands. \n\t\tValid valuesáre from 1Åo 16 cycles.\r\n");

101 
	`¥ötf
 (" --twr WriteÑecoveryÅime in cycles.\n\t\tValid valuesáre from 1Åo 16 cycles.\r\n");

102 
	`¥ötf
 (" --tmrd LOAD MODE REGISTER command cycleÅime.\n\t\tValid valuesáre from 1Åo 16 cycles.\r\n");

103 
	`¥ötf
 (" --trfc AUTO REFRESH commandÖeriod in cycles.\n\t\tValid valuesáre from 1Åo 16 cycles.\r\n");

104 
	`¥ötf
 (" --trp PRECHARGE commandÖeriod in cycles.\n\t\tValid valuesáre from 1Åo 16 cycles.\r\n");

105 
	`¥ötf
 (" --trcd RASÅo CAS Delay in cycles.\n\t\tValid valuesáre from 1Åo 16 cycles.\r\n");

106 
	`¥ötf
 (" --refperd Refresh Period. Defines maximumÅimeÖeriod between \n\t\tAUTOREFRESH commands.\n\t\tValid valuesáre from 1Åo 65535 (default ~ 250) cycles.\r\n");

107 
	`¥ötf
 (" --ramdiv Divider forÅhe Memory-Clock which is 1/2 ofÅhe CPU-Clock. \n\t\tValid valuesáre from 1Åo 8.\r\n");

108 
	`¥ötf
 ("\n CPU-Options\r\n");

109 
	`¥ötf
 (" -----------\r\n");

110 
	`¥ötf
 (" --cpuclk SetsÅhe CPU-Frequency in Mhz. \n\t\tValid valuesáre from 33Åo 340.\r\n");

111 
	`¥ötf
 (" --cpudiv Divider forÅhe CPU-Clock. \n\t\tValid valuesáre from 1Åo 8.\r\n");

112 
	`¥ötf
 ("\n Display-Options\r\n");

113 
	`¥ötf
 ("----------------\r\n");

114 
	`¥ötf
 (" --fpll Sets clockgeneratorÅo fpll (for firmware 1.0 - 1.0.1).\r\n");

115 
	`¥ötf
 (" --upll Sets clockgeneratorÅo upll (forÅheÑest).\r\n");

116 
	`¥ötf
 (" --timing Timing PrescalerÅoÉliminate flickering. \n\t\tValid valuesáre: -20Åo 36 with fpll.\n\t\t\t\t -6Åo 10 with upll.\r\n");

117 
	`¥ötf
 (" --gamma RegulatesÅhe gamma. \n\t\tValid valuesáre from 0.0001Åo 15.0000.\r\n");

118 
	`¥ötf
 ("\n Daemon-Mode \r\n");

119 
	`¥ötf
 ("----------------\r\n");

120 
	`¥ötf
 ("Usage: cpu_speed.gpe --daemon [option1] [value1] [option2]...\r\n");

121 
	`¥ötf
 ("Shutdown: cpu_speed.gpe --kill[-daemon]\r\n");

122 
	`¥ötf
 ("Options:\r\n");

123 
	`¥ötf
 (" --min SetsÅhe minimum CPU-Frequency in Mhz. \n\t\tValid valuesáre from 33Åo 340.\r\n");

124 
	`¥ötf
 (" --max SetsÅhe maximum CPU-Frequency in Mhz. \n\t\tValid valuesáre from 33Åo 340.\r\n");

125 
	`¥ötf
 (" --start SetsÅhe CPU-Frequency in Mhz. \n\t\tValid valuesáre from 33Åo 340.\r\n");

126 
	`¥ötf
 (" --step SetsÅhe CPU-Frequency step in Mhz. \n\t\tValid valuesáre from 1Åo 340.\r\n");

127 
	`¥ötf
 (" --hotkey SetsÅhe hotkey. (Default: LR) \n\t\tValid valuesáreá combination of LRXYZAB+-S/@ or ``None''\n\t\t (+-áre volume, S is Start, / is Select, @ is Stick).\r\n");

128 
	`¥ötf
 (" --incr SetsÅhe increment key. (Default: +) \n\t\tValid valuesáreá combination of LRXYZAB+-S/@ or ``None''\n\t\t (+-áre volume, S is Start, / is Select, @ is Stick).\r\n");

129 
	`¥ötf
 (" --decr SetsÅhe decrement key. (Default: -) \n\t\tValid valuesáreá combination of LRXYZAB+-S/@ or ``None''\n\t\t (+-áre volume, S is Start, / is Select, @ is Stick).\r\n");

130 
	`¥ötf
 (" --no-hotkey Alias for --hotkey None.\r\n");

131 
	`¥ötf
 (" --no-incr Alias for --incr None.\r\n");

132 
	`¥ötf
 (" --no-decr Alias for --decr None.\r\n");

133 
	`¥ötf
 (" --foreground DoÇot switchÅo daemon mode. (Useful for debugging)\r\n");

134 
	`¥ötf
 (" --background SwitchÅo daemon mode. (Default)\r\n");

135 
	`¥ötf
 (" --display Enable on screen display. COMING SOON!\r\n");

136 
	`¥ötf
 (" --no-display Disable on screen display.\r\n");

137 
	`¥ötf
 ("\nNOTE:\nThe old commandline-settingsáre working ...Ñead moreáboutÅhis inÅheÑeadme\n\n");

138 
	}
}

140 
	$cmdlöe
(
¨gc
, *
¨gv
[])

142 
i
,
n
;

143 
v¨is
 = 11;

144 
˛ockgí
 = 
	`gë_Clkgí
();

145 
v¨
[11][9]={"--cas","--trc","--tras","--twr","--tmrd","--trfc","--trp","--trcd","--ramdiv","--cpuclk","--cpudiv"};

147 
vÆ
[
v¨is
];

148 
n
=0;n<
v¨is
;n++)

150 
vÆ
[
n
] = -1;

153 
timög
 = -100;

154 
ªÂîd
 = -1;

155 
gamma
 = -1.;

158 
i
=1; i<
¨gc
; i++)

160 if(
	`°rcmp
(
¨gv
[
i
], "--ÂŒ"Ë=0Ë
˛ockgí
 = 0;

161 if(
	`°rcmp
(
¨gv
[
i
], "--u∂l"Ë=0Ë
˛ockgí
 = 1;

163 
n
=0;Ç<
v¨is
;Ç++)

165 if(
	`°rcmp
(
¨gv
[
i
], 
v¨
[
n
]) == 0)

167 if(
i
+1 =
¨gc
){
	`¥ötf
 ("%†i†missög it'†∑ømëî\r\n",
v¨
[
n
]);
	`gp2x_deöô
();
	`exô
(1);}

168 
vÆ
[
n
] = 
	`©oi
(
¨gv
[
i
+1]);

171 if(
	`°rcmp
(
¨gv
[
i
], "--refperd") == 0)

173 if(
i
+1 =
¨gc
){
	`¥ötf
 ("%†i†missög it'†∑ømëî\r\n",
¨gv
[i]);
	`gp2x_deöô
();
	`exô
(1);}

174 
ªÂîd
 = 
	`©oi
(
¨gv
[
i
+1]);

176 if(
	`°rcmp
(
¨gv
[
i
], "--gamma") == 0)

178 if(
i
+1 =
¨gc
){
	`¥ötf
 ("%†i†missög it'†∑ømëî\r\n",
¨gv
[i]);
	`gp2x_deöô
();
	`exô
(1);}

179 
gamma
 = 
	`©of
(
¨gv
[
i
+1]);

181 if(
	`°rcmp
(
¨gv
[
i
], "--timing") == 0)

183 if(
i
+1 =
¨gc
){
	`¥ötf
 ("%†i†missög it'†∑ømëî\r\n",
¨gv
[i]);
	`gp2x_deöô
();
	`exô
(1);}

184 
timög
 = 
	`©oi
(
¨gv
[
i
+1]);

188 if(
˛ockgí
 == 0)

190 if(
timög
 > -21)

192 if(
timög
 < 37Ë
	`£t_add_FLCDCLK
(timing);

194 
	`£t_add_FLCDCLK
(
	`gë_LCDClk
(
˛ockgí
));

196 if(
˛ockgí
 == 1)

198 if(
timög
 > -7)

200 if(
timög
 < 11Ë
	`£t_add_ULCDCLK
(timing);

202 
	`£t_add_ULCDCLK
(
	`gë_LCDClk
(
˛ockgí
));

204 if(
ªÂîd
-1 > -1)

206 if(
ªÂîd
-1 < 0xffffË
	`£t_REFPERD
(refperd-1);

208 if(
gamma
 > 0.)

210 if(
gamma
 < 15.Ë
	`£t_gamma
(gamma);

212 if(
vÆ
[0]-2 > -1)

214 if(
vÆ
[0]-2 < 2Ë
	`£t_CAS
(val[0]-2);

216 if(
vÆ
[1]-1 > -1)

218 if(
vÆ
[1]-1 < 16Ë
	`£t_tRC
(val[1]-1);

220 if(
vÆ
[2]-1 > -1)

222 if(
vÆ
[2]-1 < 16Ë
	`£t_tRAS
(val[2]-1);

224 if(
vÆ
[3]-1 > -1)

226 if(
vÆ
[3]-1 < 16Ë
	`£t_tWR
(val[3]-1);

228 if(
vÆ
[4]-1 > -1)

230 if(
vÆ
[4]-1 < 16Ë
	`£t_tMRD
(val[4]-1);

232 if(
vÆ
[5]-1 > -1)

234 if(
vÆ
[5]-1 < 16Ë
	`£t_tRFC
(val[5]-1);

236 if(
vÆ
[6]-1 > -1)

238 if(
vÆ
[6] < 16Ë
	`£t_tRP
(val[6]-1);

240 if(
vÆ
[7]-1 > -1)

242 if(
vÆ
[7]-1 < 16Ë
	`£t_tRCD
(val[7]-1);

244 if(
vÆ
[8]-1 > -1)

246 if(
vÆ
[8]-1 < 8Ë
	`£t_DCLK_Div
(val[8]-1);

248 if(
vÆ
[9] > 32)

250 if(
vÆ
[9] < 341Ë
	`£t_FCLK
(val[9]);

252 if(
vÆ
[10]-1 > -1)

254 if(
vÆ
[10]-1 < 8Ë
	`£t_920_Div
(val[10]-1);

256 
	}
}

	@gp2x/cmdline.h

1 
ÁŒback
(
¨gc
, *
¨gv
[]);

2 
cmdhñp
();

3 
cmdlöe
(
¨gc
, *
¨gv
[]);

	@gp2x/cpu_speed.c

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

26 
	~<sys/ty≥s.h
>

27 
	~<sys/°©.h
>

28 
	~<sys/mm™.h
>

29 
	~<f˙é.h
>

30 
	~<m©h.h
>

31 
	~<time.h
>

32 
	~<uni°d.h
>

34 
	~"di•œy.h
"

35 
	~"˝u˘æ.h
"

36 
	~"gp2xmöûib.h
"

37 
	~"•ìdã°.h
"

38 
	~"cmdlöe.h
"

39 
	~"d´m⁄.h
"

41 
	g˝u•ìd_exô
 = 0;

43 
	gCOLORFONDO
=0xB00000;

44 
	gWHITE
=0xFFFFFF;

45 
	gTEXTBACK
=0x0000B0;

47 
	ggp2x_nKeys
=0;

48 
	gﬁdtime
=0;

49 
	g∑geshi·
;

50 
	gmíupoöt
;

51 
	gˇd
[256];

52 
	g˝u£âögs
[2],
	gdi•£âögs
[3],
	gøm£âögs
[10];

53 
d´m⁄£âögs
[8];

54 
MDIV
,
PDIV
,
SCALE
;

56 
	$˛órdi•
()

58 
	`CÀ¨S¸ìn
(
COLORFONDO
);

59 
	`•rötf
(
ˇd
,"gpSP2X v0.9008 with CPU_SPEED");

60 
	`v_putˇd
(1,1,
WHITE
,
COLORFONDO
,
ˇd
);

61 
	`v_putˇd
(28,5,
WHITE
,
COLORFONDO
,"Item Help");

62 
	`v_putˇd
(2,26,
WHITE
,
COLORFONDO
,"Start:Quit Stick:UP/DOWN");

64 
	`DøwBox
(
WHITE
);

65 
	}
}

67 
	$ôemhñp
(
ôem
[])

69 if(
	`°rcmp
(
ôem
, "menu") == 0)

71 
	`v_putˇd
(26,8,0xffffff,
COLORFONDO
,"Enter submenu");

72 
	`v_putˇd
(26,9,0xffffff,
COLORFONDO
,"with B.");

74 if(
	`°rcmp
(
ôem
, "cpuclk") == 0)

76 
	`v_putˇd
(26,8,0xffffff,
COLORFONDO
,"Chooseá");

77 
	`v_putˇd
(26,9,0xffffff,
COLORFONDO
,"clockspeed");

78 
	`v_putˇd
(26,10,0xffffff,
COLORFONDO
,"with R/L or");

79 
	`v_putˇd
(26,11,0xffffff,
COLORFONDO
,"Vol UP/Down.");

80 
	`v_putˇd
(26,13,0xffffff,
COLORFONDO
,"Valid speeds");

81 
	`v_putˇd
(26,14,0xffffff,
COLORFONDO
,"are:");

82 
	`v_putˇd
(26,15,0xffffff,
COLORFONDO
,"33Åo 340Mhz");

84 if(
	`°rcmp
(
ôem
, "cpudiv") == 0)

86 
	`v_putˇd
(26,8,0xffffff,
COLORFONDO
,"Choose with");

87 
	`v_putˇd
(26,9,0xffffff,
COLORFONDO
,"R/L.");

88 
	`v_putˇd
(26,11,0xffffff,
COLORFONDO
,"The CPU-clock");

89 
	`v_putˇd
(26,12,0xffffff,
COLORFONDO
,"will be");

90 
	`v_putˇd
(26,13,0xffffff,
COLORFONDO
,"divided by");

91 
	`v_putˇd
(26,14,0xffffff,
COLORFONDO
,"this value.");

92 
	`v_putˇd
(26,16,0xffffff,
COLORFONDO
,"Valid values");

93 
	`v_putˇd
(26,17,0xffffff,
COLORFONDO
,"are from");

94 
	`v_putˇd
(26,18,0xffffff,
COLORFONDO
,"1Åo 8");

96 if(
	`°rcmp
(
ôem
, "test") == 0)

98 
	`v_putˇd
(26,8,0xffffff,
COLORFONDO
,"Change with");

99 
	`v_putˇd
(26,9,0xffffff,
COLORFONDO
,"R/L.");

100 
	`v_putˇd
(26,11,0xffffff,
COLORFONDO
,"TheÅest");

101 
	`v_putˇd
(26,12,0xffffff,
COLORFONDO
,"checks how");

102 
	`v_putˇd
(26,13,0xffffff,
COLORFONDO
,"high you can");

103 
	`v_putˇd
(26,14,0xffffff,
COLORFONDO
,"clockÅhe");

104 
	`v_putˇd
(26,15,0xffffff,
COLORFONDO
,"CPU.");

105 
	`v_putˇd
(26,17,0xffffff,
COLORFONDO
,"CheckÅhe");

106 
	`v_putˇd
(26,18,0xffffff,
COLORFONDO
,"Readme for");

107 
	`v_putˇd
(26,19,0xffffff,
COLORFONDO
,"more infos.");

109 if(
	`°rcmp
(
ôem
, "gotest") == 0)

111 
	`v_putˇd
(26,8,0xffffff,
COLORFONDO
,"StartÅhe");

112 
	`v_putˇd
(26,9,0xffffff,
COLORFONDO
,"test with B.");

114 if(
	`°rcmp
(
ôem
, "clockgen") == 0)

116 
	`v_putˇd
(26,8,0xffffff,
COLORFONDO
,"ChangeÅhe");

117 
	`v_putˇd
(26,9,0xffffff,
COLORFONDO
,"clockgen with");

118 
	`v_putˇd
(26,10,0xffffff,
COLORFONDO
,"R/L.");

119 
	`v_putˇd
(26,12,0xffffff,
COLORFONDO
,"FPLL is for");

120 
	`v_putˇd
(26,13,0xffffff,
COLORFONDO
,"FW 1.0");

121 
	`v_putˇd
(26,14,0xffffff,
COLORFONDO
,"UPLL forÅhe");

122 
	`v_putˇd
(26,15,0xffffff,
COLORFONDO
,"rest.");

124 if(
	`°rcmp
(
ôem
, "timing") == 0)

126 
	`v_putˇd
(26,8,0xffffff,
COLORFONDO
,"ChooseÅhe");

127 
	`v_putˇd
(26,9,0xffffff,
COLORFONDO
,"LCD-Timing");

128 
	`v_putˇd
(26,10,0xffffff,
COLORFONDO
,"with R/L.");

129 
	`v_putˇd
(26,12,0xffffff,
COLORFONDO
,"Validáre");

130 
	`v_putˇd
(26,13,0xffffff,
COLORFONDO
,"values from");

131 
	`v_putˇd
(26,14,0xffffff,
COLORFONDO
,"-20Åo 36");

132 
	`v_putˇd
(26,15,0xffffff,
COLORFONDO
,"for FPLL");

133 
	`v_putˇd
(26,16,0xffffff,
COLORFONDO
,"and -6Åo 10");

134 
	`v_putˇd
(26,17,0xffffff,
COLORFONDO
,"for UPLL");

136 if(
	`°rcmp
(
ôem
, "gamma") == 0)

138 
	`v_putˇd
(26,8,0xffffff,
COLORFONDO
,"Change gamma");

139 
	`v_putˇd
(26,9,0xffffff,
COLORFONDO
,"with R/L or");

140 
	`v_putˇd
(26,10,0xffffff,
COLORFONDO
,"Vol UP/DOWN");

141 
	`v_putˇd
(26,12,0xffffff,
COLORFONDO
,"Validáre");

142 
	`v_putˇd
(26,13,0xffffff,
COLORFONDO
,"values from");

143 
	`v_putˇd
(26,14,0xffffff,
COLORFONDO
,"0.01Åo 10.00");

145 if(
	`°rcmp
(
ôem
, "CAS") == 0)

147 
	`v_putˇd
(26,8,0xffffff,
COLORFONDO
,"ChooseÅhe");

148 
	`v_putˇd
(26,9,0xffffff,
COLORFONDO
,"CAS Latency");

149 
	`v_putˇd
(26,10,0xffffff,
COLORFONDO
,"with R/L");

150 
	`v_putˇd
(26,12,0xffffff,
COLORFONDO
,"Validáre");

151 
	`v_putˇd
(26,13,0xffffff,
COLORFONDO
,"2 or 3 cycles");

152 
	`v_putˇd
(26,15,0xffffff,
COLORFONDO
,"Delay between");

153 
	`v_putˇd
(26,16,0xffffff,
COLORFONDO
,"registration");

154 
	`v_putˇd
(26,17,0xffffff,
COLORFONDO
,"ofá READ");

155 
	`v_putˇd
(26,18,0xffffff,
COLORFONDO
,"commandánd");

156 
	`v_putˇd
(26,19,0xffffff,
COLORFONDO
,"outputdata.");

157 
	`v_putˇd
(27,21,0x0000DD,
COLORFONDO
,"!INSTABLE!");

159 if(
	`°rcmp
(
ôem
, "tRC") == 0)

161 
	`v_putˇd
(26,8,0xffffff,
COLORFONDO
,"Change with");

162 
	`v_putˇd
(26,9,0xffffff,
COLORFONDO
,"R/L.");

163 
	`v_putˇd
(26,11,0xffffff,
COLORFONDO
,"Validáre");

164 
	`v_putˇd
(26,12,0xffffff,
COLORFONDO
,"1Åo 16");

165 
	`v_putˇd
(26,13,0xffffff,
COLORFONDO
,"cycles.");

166 
	`v_putˇd
(26,15,0xffffff,
COLORFONDO
,"ACTIVEÅo");

167 
	`v_putˇd
(26,16,0xffffff,
COLORFONDO
,"ACTIVE/");

168 
	`v_putˇd
(26,17,0xffffff,
COLORFONDO
,"AUTOREFRESH");

169 
	`v_putˇd
(26,18,0xffffff,
COLORFONDO
,"command");

170 
	`v_putˇd
(26,19,0xffffff,
COLORFONDO
,"period delay.");

172 if(
	`°rcmp
(
ôem
, "tRAS") == 0)

174 
	`v_putˇd
(26,8,0xffffff,
COLORFONDO
,"Change with");

175 
	`v_putˇd
(26,9,0xffffff,
COLORFONDO
,"R/L.");

176 
	`v_putˇd
(26,11,0xffffff,
COLORFONDO
,"Validáre");

177 
	`v_putˇd
(26,12,0xffffff,
COLORFONDO
,"1Åo 16");

178 
	`v_putˇd
(26,13,0xffffff,
COLORFONDO
,"cycles.");

179 
	`v_putˇd
(26,15,0xffffff,
COLORFONDO
,"Delay between");

180 
	`v_putˇd
(26,16,0xffffff,
COLORFONDO
,"the ACTIVE");

181 
	`v_putˇd
(26,17,0xffffff,
COLORFONDO
,"and PRECHARGE");

182 
	`v_putˇd
(26,18,0xffffff,
COLORFONDO
,"commands.");

184 if(
	`°rcmp
(
ôem
, "tWR") == 0)

186 
	`v_putˇd
(26,8,0xffffff,
COLORFONDO
,"Change with");

187 
	`v_putˇd
(26,9,0xffffff,
COLORFONDO
,"R/L.");

188 
	`v_putˇd
(26,11,0xffffff,
COLORFONDO
,"Validáre");

189 
	`v_putˇd
(26,12,0xffffff,
COLORFONDO
,"1Åo 16");

190 
	`v_putˇd
(26,13,0xffffff,
COLORFONDO
,"cycles.");

191 
	`v_putˇd
(26,15,0xffffff,
COLORFONDO
,"Write");

192 
	`v_putˇd
(26,16,0xffffff,
COLORFONDO
,"recoveryÅime");

193 
	`v_putˇd
(26,17,0xffffff,
COLORFONDO
,"in cycles.");

195 if(
	`°rcmp
(
ôem
, "tMRD") == 0)

197 
	`v_putˇd
(26,8,0xffffff,
COLORFONDO
,"Change with");

198 
	`v_putˇd
(26,9,0xffffff,
COLORFONDO
,"R/L.");

199 
	`v_putˇd
(26,11,0xffffff,
COLORFONDO
,"Validáre");

200 
	`v_putˇd
(26,12,0xffffff,
COLORFONDO
,"1Åo 16");

201 
	`v_putˇd
(26,13,0xffffff,
COLORFONDO
,"cycles.");

202 
	`v_putˇd
(26,15,0xffffff,
COLORFONDO
,"LOAD MODE");

203 
	`v_putˇd
(26,16,0xffffff,
COLORFONDO
,"REGISTER");

204 
	`v_putˇd
(26,17,0xffffff,
COLORFONDO
,"command cycle");

205 
	`v_putˇd
(26,18,0xffffff,
COLORFONDO
,"time.");

207 if(
	`°rcmp
(
ôem
, "tRFC") == 0)

209 
	`v_putˇd
(26,8,0xffffff,
COLORFONDO
,"Change with");

210 
	`v_putˇd
(26,9,0xffffff,
COLORFONDO
,"R/L.");

211 
	`v_putˇd
(26,11,0xffffff,
COLORFONDO
,"Validáre");

212 
	`v_putˇd
(26,12,0xffffff,
COLORFONDO
,"1Åo 16");

213 
	`v_putˇd
(26,13,0xffffff,
COLORFONDO
,"cycles.");

214 
	`v_putˇd
(26,15,0xffffff,
COLORFONDO
,"AUTOREFRESH");

215 
	`v_putˇd
(26,16,0xffffff,
COLORFONDO
,"command");

216 
	`v_putˇd
(26,17,0xffffff,
COLORFONDO
,"period.");

218 if(
	`°rcmp
(
ôem
, "tRP") == 0)

220 
	`v_putˇd
(26,8,0xffffff,
COLORFONDO
,"Change with");

221 
	`v_putˇd
(26,9,0xffffff,
COLORFONDO
,"R/L.");

222 
	`v_putˇd
(26,11,0xffffff,
COLORFONDO
,"Validáre");

223 
	`v_putˇd
(26,12,0xffffff,
COLORFONDO
,"1Åo 16");

224 
	`v_putˇd
(26,13,0xffffff,
COLORFONDO
,"cycles.");

225 
	`v_putˇd
(26,15,0xffffff,
COLORFONDO
,"PRECHARGE");

226 
	`v_putˇd
(26,16,0xffffff,
COLORFONDO
,"command");

227 
	`v_putˇd
(26,17,0xffffff,
COLORFONDO
,"period.");

229 if(
	`°rcmp
(
ôem
, "tRCD") == 0)

231 
	`v_putˇd
(26,8,0xffffff,
COLORFONDO
,"Change with");

232 
	`v_putˇd
(26,9,0xffffff,
COLORFONDO
,"R/L.");

233 
	`v_putˇd
(26,11,0xffffff,
COLORFONDO
,"Validáre");

234 
	`v_putˇd
(26,12,0xffffff,
COLORFONDO
,"1Åo 16");

235 
	`v_putˇd
(26,13,0xffffff,
COLORFONDO
,"cycles.");

236 
	`v_putˇd
(26,15,0xffffff,
COLORFONDO
,"RASÅo CAS");

237 
	`v_putˇd
(26,16,0xffffff,
COLORFONDO
,"Delay in");

238 
	`v_putˇd
(26,17,0xffffff,
COLORFONDO
,"cycles.");

240 if(
	`°rcmp
(
ôem
, "REFPERD") == 0)

242 
	`v_putˇd
(26,8,0xffffff,
COLORFONDO
,"ChooseÅhe");

243 
	`v_putˇd
(26,9,0xffffff,
COLORFONDO
,"RAM Refresh");

244 
	`v_putˇd
(26,9,0xffffff,
COLORFONDO
,"Period");

245 
	`v_putˇd
(26,10,0xffffff,
COLORFONDO
,"with R/L");

246 
	`v_putˇd
(26,12,0xffffff,
COLORFONDO
,"Validáre");

247 
	`v_putˇd
(26,13,0xffffff,
COLORFONDO
,"1Åo 65535 ");

248 
	`v_putˇd
(26,14,0xffffff,
COLORFONDO
,"cycles.");

249 
	`v_putˇd
(26,16,0xffffff,
COLORFONDO
,"Max. cycles");

250 
	`v_putˇd
(26,17,0xffffff,
COLORFONDO
,"between");

251 
	`v_putˇd
(26,18,0xffffff,
COLORFONDO
,"AUTOREFRESH");

252 
	`v_putˇd
(26,19,0xffffff,
COLORFONDO
,"commands.");

253 
	`v_putˇd
(26,21,0xFFFF,
COLORFONDO
,"Default ~250");

255 if(
	`°rcmp
(
ôem
, "DCLK_Div") == 0)

257 
	`v_putˇd
(26,8,0xffffff,
COLORFONDO
,"Choose with");

258 
	`v_putˇd
(26,9,0xffffff,
COLORFONDO
,"R/L.");

259 
	`v_putˇd
(26,11,0xffffff,
COLORFONDO
,"The CPU-clock");

260 
	`v_putˇd
(26,12,0xffffff,
COLORFONDO
,"will be");

261 
	`v_putˇd
(26,13,0xffffff,
COLORFONDO
,"divided by");

262 
	`v_putˇd
(26,14,0xffffff,
COLORFONDO
,"this value.");

263 
	`v_putˇd
(26,15,0xffffff,
COLORFONDO
,"Valid values");

264 
	`v_putˇd
(26,17,0xffffff,
COLORFONDO
,"are from");

265 
	`v_putˇd
(26,18,0xffffff,
COLORFONDO
,"1Åo 8");

266 
	`v_putˇd
(26,20,0xffffff,
COLORFONDO
,"RAM-Clock =");

267 
	`v_putˇd
(26,21,0xffffff,
COLORFONDO
,"CPU-Clock / 2");

269 
	}
}

271 
	$˝umíu
()

273 
sys‰eq
=0, 
˝u‰eq
, 
˝u_div
;

275 
ã°
 = 1;

277 if(
˝u£âögs
[0] == -1)

280 
˝u_div
 = 
	`gë_920_Div
();

281 
sys‰eq
=
	`gë_‰eq_920_CLK
();

282 
sys‰eq
*=
˝u_div
+1;

283 
˝u‰eq
=
sys‰eq
/1000000;

288 
˝u‰eq
 = 
˝u£âögs
[0];

289 
˝u_div
 = 
˝u£âögs
[1];

292 
míupoöt
 = 0;

296 
	`˛órdi•
();

299 
	`v_putˇd
(12,2,
WHITE
,
COLORFONDO
,"CPU Clock Setup");

300 
	`•rötf
(
ˇd
,"CPU Fªquícy = %uMhz",
˝u‰eq
);

301 if(
míupoöt
==0){
	`v_putˇd
(2,5,0xffffff,
TEXTBACK
,
ˇd
);
	`ôemhñp
("cpuclk");}

302 
	`v_putˇd
(2,5,0xffff,
COLORFONDO
,
ˇd
);

303 
	`•rötf
(
ˇd
,"CPU Dividî: %u",
˝u_div
+1);

304 if(
míupoöt
==1){
	`v_putˇd
(2,7,0xffffff,
TEXTBACK
,
ˇd
);
	`ôemhñp
("cpudiv");}

305 
	`v_putˇd
(2,7,0xffff,
COLORFONDO
,
ˇd
);

306 
	`v_putˇd
(2,12,0xffff00,
COLORFONDO
,"CPU Speedtest");

307 if(
ã°
==0Ë
	`•rötf
(
ˇd
,"Test 2: Primnumber");

308 if(
ã°
==1Ë
	`•rötf
(
ˇd
,"Test 1: Walking Ant");

309 if(
míupoöt
==2){
	`v_putˇd
(2,15,0xffffff,
TEXTBACK
,
ˇd
);
	`ôemhñp
("test");}

310 
	`v_putˇd
(2,15,0xffff,
COLORFONDO
,
ˇd
);

311 if(
míupoöt
==3){
	`v_putˇd
(8,17,0xffffff,
TEXTBACK
,"GO!!!");
	`ôemhñp
("gotest");}

312 
	`v_putˇd
(8,17,0xffff,
COLORFONDO
,"GO!!!");

314 
	`gp2x_video_Êù
();

318 
gp2x_nKeys
=
	`gp2x_joy°ick_ªad
();

320 if((
gp2x_nKeys
 & 
GP2X_START
))

324 
gp2x_nKeys
=
	`gp2x_joy°ick_ªad
();

325 if(!(
gp2x_nKeys
 & 
GP2X_START
)) ;

327 
˝u£âögs
[0] = 
˝u‰eq
;

328 
˝u£âögs
[1] = 
˝u_div
;

332 if((
gp2x_nKeys
 & 
GP2X_DOWN
))

334 
míupoöt
++;

335 if(
míupoöt
>3) menupoint=0;

336 
	`dñay_us
(200000);

340 if((
gp2x_nKeys
 & 
GP2X_UP
))

342 
míupoöt
--;

343 if(
míupoöt
<0) menupoint=3;

344 
	`dñay_us
(200000);

348 if((
gp2x_nKeys
 & 
GP2X_R
))

350 i‡(
míupoöt
 == 0)

352 
˝u‰eq
+=10;

353 i‡(
˝u‰eq
 > 340) cpufreq = 33;

355 i‡(
míupoöt
 == 1)

357 
˝u_div
++;

358 i‡(
˝u_div
 == 8) cpu_div = 0;

360 i‡(
míupoöt
 == 2)

362 
ã°
++;

363 i‡(
ã°
 == 2)Åest = 0;

365 
	`dñay_us
(200000);

369 if((
gp2x_nKeys
 & 
GP2X_L
))

371 i‡(
míupoöt
 == 0)

373 
˝u‰eq
-=10;

374 i‡(
˝u‰eq
 < 33) cpufreq = 340;

376 i‡(
míupoöt
 == 1)

378 
˝u_div
--;

379 i‡(
˝u_div
 == -1) cpu_div = 7;

381 i‡(
míupoöt
 == 2)

383 
˝u_div
--;

384 i‡(
˝u_div
 == -1) cpu_div = 1;

386 
	`dñay_us
(200000);

390 if((
gp2x_nKeys
 & 
GP2X_VOL_DOWN
))

392 i‡(
míupoöt
 == 0)

394 
˝u‰eq
++;

395 i‡(
˝u‰eq
 == 340) cpufreq = 33;

397 
	`dñay_us
(200000);

401 if((
gp2x_nKeys
 & 
GP2X_VOL_UP
))

403 i‡(
míupoöt
 == 0)

405 
˝u‰eq
--;

406 i‡(
˝u‰eq
 == 32) cpufreq = 340;

408 
	`dñay_us
(200000);

412 if((
gp2x_nKeys
 & 
GP2X_B
))

414 i‡(
míupoöt
 =3Ë
	`•ìdã°
(
ã°
);

415 
	`dñay_us
(200000);

421 
	}
}

423 
	$lcdmíu
()

425 
˛ockgí
, 
LCDClk
;

426 
gamma
;

428 if(
di•£âögs
[0] == -1)

431 
˛ockgí
 = 
	`gë_Clkgí
();

432 
LCDClk
 = 
	`gë_LCDClk
(
˛ockgí
);

433 
gamma
 = 1.0;

438 
˛ockgí
 = 
di•£âögs
[0];

439 
LCDClk
 = 
di•£âögs
[1];

440 
gamma
 = 
di•£âögs
[2]/100;

443 
míupoöt
 = 0;

447 
	`˛órdi•
();

450 
	`v_putˇd
(9,2,
WHITE
,
COLORFONDO
,"Display Setting Setup");

451 i‡(
˛ockgí
 == 0)

453 
	`•rötf
(
ˇd
,"Clockgen = FPLL");

454 if(
míupoöt
==0){
	`v_putˇd
(2,5,0xffffff,
TEXTBACK
,
ˇd
);
	`ôemhñp
("clockgen");}

455 
	`v_putˇd
(2,5,0xffff,
COLORFONDO
,
ˇd
);

459 
	`•rötf
(
ˇd
,"Clockgen = UPLL");

460 if(
míupoöt
==0){
	`v_putˇd
(2,5,0xffffff,
TEXTBACK
,
ˇd
);
	`ôemhñp
("clockgen");}

461 
	`v_putˇd
(2,5,0xffff,
COLORFONDO
,
ˇd
);

463 
	`•rötf
(
ˇd
,"Timög: %i",
LCDClk
);

464 if(
míupoöt
==1){
	`v_putˇd
(2,7,0xffffff,
TEXTBACK
,
ˇd
);
	`ôemhñp
("timing");}

465 
	`v_putˇd
(2,7,0xffff,
COLORFONDO
,
ˇd
);

466 
	`•rötf
(
ˇd
,"Gamma: %.2f",
gamma
);

467 if(
míupoöt
==2){
	`v_putˇd
(2,9,0xffffff,
TEXTBACK
,
ˇd
);
	`ôemhñp
("gamma");}

468 
	`v_putˇd
(2,9,0xffff,
COLORFONDO
,
ˇd
);

470 
	`gp2x_video_Êù
();

474 
gp2x_nKeys
=
	`gp2x_joy°ick_ªad
();

476 if((
gp2x_nKeys
 & 
GP2X_START
))

480 
gp2x_nKeys
=
	`gp2x_joy°ick_ªad
();

481 if(!(
gp2x_nKeys
 & 
GP2X_START
)) ;

483 
di•£âögs
[0] = 
˛ockgí
;

484 
di•£âögs
[1] = 
LCDClk
;

485 
di•£âögs
[2] = ()(
gamma
*100);

489 if((
gp2x_nKeys
 & 
GP2X_DOWN
))

491 
míupoöt
++;

492 if(
míupoöt
>2) menupoint=0;

493 
	`dñay_us
(200000);

497 if((
gp2x_nKeys
 & 
GP2X_UP
))

499 
míupoöt
--;

500 if(
míupoöt
<0) menupoint=2;

501 
	`dñay_us
(200000);

505 if((
gp2x_nKeys
 & 
GP2X_R
))

507 i‡(
míupoöt
 == 0)

509 
˛ockgí
++;

510 i‡(
˛ockgí
 == 2) clockgen = 0;

512 i‡(
míupoöt
 == 1)

514 
LCDClk
++;

515 i‡(
˛ockgí
 == 0)

517 i‡(
LCDClk
 == 37) LCDClk = -20;

518 
	`£t_add_FLCDCLK
(
LCDClk
);

522 i‡(
LCDClk
 == 11) LCDClk = -6;

523 
	`£t_add_ULCDCLK
(
LCDClk
);

526 i‡(
míupoöt
 == 2)

528 
gamma
 += 0.2;

529 i‡(
gamma
 > 10) gamma = 0.2;

530 
	`£t_gamma
(
gamma
);

532 
	`dñay_us
(200000);

536 if((
gp2x_nKeys
 & 
GP2X_L
))

538 i‡(
míupoöt
 == 0)

540 
˛ockgí
--;

541 i‡(
˛ockgí
 == -1) clockgen = 1;

543 i‡(
míupoöt
 == 1)

545 
LCDClk
--;

546 if(
˛ockgí
 == 0)

548 i‡(
LCDClk
 == -21) LCDClk = 36;

549 
	`£t_add_FLCDCLK
(
LCDClk
);

553 i‡(
LCDClk
 == -7) LCDClk = 10;

554 
	`£t_add_ULCDCLK
(
LCDClk
);

557 i‡(
míupoöt
 == 2)

559 
gamma
 -= 0.2;

560 i‡(
gamma
 < 0.01) gamma = 10;

561 
	`£t_gamma
(
gamma
);

563 
	`dñay_us
(200000);

567 if((
gp2x_nKeys
 & 
GP2X_VOL_DOWN
))

569 i‡(
míupoöt
 == 2)

571 
gamma
 += 0.01;

572 i‡(
gamma
 > 10) gamma = 0.01;

573 
	`£t_gamma
(
gamma
);

575 
	`dñay_us
(200000);

579 if((
gp2x_nKeys
 & 
GP2X_VOL_UP
))

581 i‡(
míupoöt
 == 2)

583 
gamma
 -= 0.01;

584 i‡(
gamma
 < 0.01) gamma = 10;

585 
	`£t_gamma
(
gamma
);

587 
	`dñay_us
(200000);

593 
	}
}

595 
	$ømmíu
()

597 
CAS
,
tRC
,
tRAS
,
tWR
,
tMRD
,
tRFC
,
tRP
,
tRCD
,
DCLK_Div
;

598 
REFPERD
;

600 if(
øm£âögs
[0] == -1)

603 
CAS
 = 
	`gë_CAS
();

604 
tRC
 = 
	`gë_tRC
();

605 
tRAS
 = 
	`gë_tRAS
();

606 
tWR
 = 
	`gë_tWR
();

607 
tMRD
 = 
	`gë_tMRD
();

608 
tRFC
 = 
	`gë_tRFC
();

609 
tRP
 = 
	`gë_tRP
();

610 
tRCD
 = 
	`gë_tRCD
();

611 
REFPERD
 = 
	`gë_REFPERD
();

612 
DCLK_Div
 = 
	`gë_DCLK_Div
();

617 
CAS
 = 
øm£âögs
[0];

618 
tRC
 = 
øm£âögs
[1];

619 
tRAS
 = 
øm£âögs
[2];

620 
tWR
 = 
øm£âögs
[3];

621 
tMRD
 = 
øm£âögs
[4];

622 
tRFC
 = 
øm£âögs
[5];

623 
tRP
 = 
øm£âögs
[6];

624 
tRCD
 = 
øm£âögs
[7];

625 
REFPERD
 = 
øm£âögs
[8];

626 
DCLK_Div
 = 
øm£âögs
[9];

629 
∑geshi·
 = 0;

630 
míupoöt
 = 0;

634 
	`˛órdi•
();

637 
	`v_putˇd
(11,2,
WHITE
,
COLORFONDO
,"RAM Setting Setup");

638 if(
∑geshi·
 == 0)

640 
	`•rötf
(
ˇd
,"CAS: %u",
CAS
+2);

641 if(
míupoöt
==0){
	`v_putˇd
(2,5,0xffffff,
TEXTBACK
,
ˇd
);
	`ôemhñp
("CAS");}

642 
	`v_putˇd
(2,5,0xffff,
COLORFONDO
,
ˇd
);

644 
	`v_putˇd
(13,5,0xffff,
COLORFONDO
,"^");

645 
	`•rötf
(
ˇd
,"tRC: %u",
tRC
+1);

646 if(
míupoöt
==1){
	`v_putˇd
(2,7-
∑geshi·
,0xffffff,
TEXTBACK
,
ˇd
);
	`ôemhñp
("tRC");}

647 
	`v_putˇd
(2,7-
∑geshi·
,0xffff,
COLORFONDO
,
ˇd
);

648 
	`•rötf
(
ˇd
,"tRAS: %u",
tRAS
+1);

649 if(
míupoöt
==2){
	`v_putˇd
(2,9-
∑geshi·
,0xffffff,
TEXTBACK
,
ˇd
);
	`ôemhñp
("tRAS");}

650 
	`v_putˇd
(2,9-
∑geshi·
,0xffff,
COLORFONDO
,
ˇd
);

651 
	`•rötf
(
ˇd
,"tWR: %u",
tWR
+1);

652 if(
míupoöt
==3){
	`v_putˇd
(2,11-
∑geshi·
,0xffffff,
TEXTBACK
,
ˇd
);
	`ôemhñp
("tWR");}

653 
	`v_putˇd
(2,11-
∑geshi·
,0xffff,
COLORFONDO
,
ˇd
);

654 
	`•rötf
(
ˇd
,"tMRD: %u",
tMRD
+1);

655 if(
míupoöt
==4){
	`v_putˇd
(2,13-
∑geshi·
,0xffffff,
TEXTBACK
,
ˇd
);
	`ôemhñp
("tMRD");}

656 
	`v_putˇd
(2,13-
∑geshi·
,0xffff,
COLORFONDO
,
ˇd
);

657 
	`•rötf
(
ˇd
,"tRFC: %u",
tRFC
+1);

658 if(
míupoöt
==5){
	`v_putˇd
(2,15-
∑geshi·
,0xffffff,
TEXTBACK
,
ˇd
);
	`ôemhñp
("tRFC");}

659 
	`v_putˇd
(2,15-
∑geshi·
,0xffff,
COLORFONDO
,
ˇd
);

660 
	`•rötf
(
ˇd
,"tRP: %u",
tRP
+1);

661 if(
míupoöt
==6){
	`v_putˇd
(2,17-
∑geshi·
,0xffffff,
TEXTBACK
,
ˇd
);
	`ôemhñp
("tRP");}

662 
	`v_putˇd
(2,17-
∑geshi·
,0xffff,
COLORFONDO
,
ˇd
);

663 
	`•rötf
(
ˇd
,"tRCD: %u",
tRCD
+1);

664 if(
míupoöt
==7){
	`v_putˇd
(2,19-
∑geshi·
,0xffffff,
TEXTBACK
,
ˇd
);
	`ôemhñp
("tRCD");}

665 
	`v_putˇd
(2,19-
∑geshi·
,0xffff,
COLORFONDO
,
ˇd
);

666 
	`•rötf
(
ˇd
,"Re‰esh Pîiod: %u",
REFPERD
+1);

667 if(
míupoöt
==8){
	`v_putˇd
(2,21-
∑geshi·
,0xffffff,
TEXTBACK
,
ˇd
);
	`ôemhñp
("REFPERD");}

668 
	`v_putˇd
(2,21-
∑geshi·
,0xffff,
COLORFONDO
,
ˇd
);

669 if(
∑geshi·
 == 1)

671 
	`•rötf
(
ˇd
,"RAM Dividî: %u",
DCLK_Div
+1);

672 if(
míupoöt
==9){
	`v_putˇd
(2,23,0xffffff,
TEXTBACK
,
ˇd
);
	`ôemhñp
("DCLK_Div");}

673 
	`v_putˇd
(2,23,0xffff,
COLORFONDO
,
ˇd
);

675 
	`v_putˇd
(13,23,0xffff,
COLORFONDO
,"v");

678 
	`gp2x_video_Êù
();

682 
gp2x_nKeys
=
	`gp2x_joy°ick_ªad
();

684 if((
gp2x_nKeys
 & 
GP2X_START
))

688 
gp2x_nKeys
=
	`gp2x_joy°ick_ªad
();

689 if(!(
gp2x_nKeys
 & 
GP2X_START
)) ;

691 
øm£âögs
[0] = 
CAS
;

692 
øm£âögs
[1] = 
tRC
;

693 
øm£âögs
[2] = 
tRAS
;

694 
øm£âögs
[3] = 
tWR
;

695 
øm£âögs
[4] = 
tMRD
;

696 
øm£âögs
[5] = 
tRFC
;

697 
øm£âögs
[6] = 
tRP
;

698 
øm£âögs
[7] = 
tRCD
;

699 
øm£âögs
[8] = 
REFPERD
;

700 
øm£âögs
[9] = 
DCLK_Div
;

704 if((
gp2x_nKeys
 & 
GP2X_DOWN
))

706 
míupoöt
++;

707 if(
míupoöt
==9Ë
∑geshi·
 = 1;

708 if(
míupoöt
>9Ë{míupoöt=0; 
∑geshi·
 = 0;}

709 
	`dñay_us
(200000);

713 if((
gp2x_nKeys
 & 
GP2X_UP
))

715 
míupoöt
--;

716 if(
míupoöt
==0Ë
∑geshi·
 = 0;

717 if(
míupoöt
<0Ë{ míupoöt=9; 
∑geshi·
 = 1;}

718 
	`dñay_us
(200000);

722 if((
gp2x_nKeys
 & 
GP2X_R
))

724 i‡(
míupoöt
 == 0)

726 
CAS
++;

727 i‡(
CAS
 == 2) CAS = 0;

729 i‡(
míupoöt
 == 1)

731 
tRC
++;

732 i‡(
tRC
 == 16)ÅRC = 0;

734 i‡(
míupoöt
 == 2)

736 
tRAS
++;

737 i‡(
tRAS
 == 16)ÅRAS = 0;

739 i‡(
míupoöt
 == 3)

741 
tWR
++;

742 i‡(
tWR
 == 16)ÅWR = 0;

744 i‡(
míupoöt
 == 4)

746 
tMRD
++;

747 i‡(
tMRD
 == 16)ÅMRD = 0;

749 i‡(
míupoöt
 == 5)

751 
tRFC
++;

752 i‡(
tRFC
 == 16)ÅRFC = 0;

754 i‡(
míupoöt
 == 6)

756 
tRP
++;

757 i‡(
tRP
 == 16)ÅRP = 0;

759 i‡(
míupoöt
 == 7)

761 
tRCD
++;

762 i‡(
tRCD
 == 16)ÅRCD = 0;

764 i‡(
míupoöt
 == 8)

766 
REFPERD
 += 10;

767 i‡(
REFPERD
 == 0xffff) REFPERD = 0;

769 i‡(
míupoöt
 == 9)

771 
DCLK_Div
++;

772 i‡(
DCLK_Div
 == 8) DCLK_Div = 0;

774 
	`dñay_us
(200000);

778 if((
gp2x_nKeys
 & 
GP2X_L
))

780 i‡(
míupoöt
 == 0)

782 
CAS
--;

783 i‡(
CAS
 == -1) CAS = 1;

785 i‡(
míupoöt
 == 1)

787 
tRC
--;

788 i‡(
tRC
 == -1)ÅRC = 15;

790 i‡(
míupoöt
 == 2)

792 
tRAS
--;

793 i‡(
tRAS
 == -1)ÅRAS = 15;

795 i‡(
míupoöt
 == 3)

797 
tWR
--;

798 i‡(
tWR
 == -1)ÅWR = 15;

800 i‡(
míupoöt
 == 4)

802 
tMRD
--;

803 i‡(
tMRD
 == -1)ÅMRD = 15;

805 i‡(
míupoöt
 == 5)

807 
tRFC
--;

808 i‡(
tRFC
 == -1)ÅRFC = 15;

810 i‡(
míupoöt
 == 6)

812 
tRP
--;

813 i‡(
tRP
 == -1)ÅRP = 15;

815 i‡(
míupoöt
 == 7)

817 
tRCD
--;

818 i‡(
tRCD
 == -1)ÅRCD = 15;

820 i‡(
míupoöt
 == 8)

822 
REFPERD
 -= 10;

823 i‡(
REFPERD
 == -1) REFPERD = 0xfffe;

825 i‡(
míupoöt
 == 9)

827 
DCLK_Div
--;

828 i‡(
DCLK_Div
 == -1) DCLK_Div = 7;

830 
	`dñay_us
(200000);

836 
	}
}

838 
	$exô_˝u_•ìd
(* 
runfûe
)

840 
	`gp2x_deöô
();

841 
˝u•ìd_exô
 = 1;

843 
	`sy°em
("sync");

844 if(
	`°rcmp
(
runfûe
, "gp2xmíu"Ë=0Ë
	`chdú
("/usr/gp2x");

845 
	`exe˛
(
runfûe
,
NULL
);

846 
	`exô
(0);

848 
	}
}

854 
	$maö_˝u•ìd
(
¨gc
, *
¨gv
[])

856 
sys‰eq
=0;

857 
˝u‰eq
, 
n
;

858 
run
 = 0;

859 
°¨t_d´m⁄
 = 0;

860 
maömíupoöt
 = 0;

861 
øm£âögs
[0] = -1;

862 
øm£âögs
[1] = -1;

863 
øm£âögs
[2] = -1;

864 
øm£âögs
[3] = -1;

865 
øm£âögs
[4] = -1;

866 
øm£âögs
[5] = -1;

867 
øm£âögs
[6] = -1;

868 
øm£âögs
[7] = -1;

869 
øm£âögs
[8] = -1;

870 
øm£âögs
[9] = -1;

871 
di•£âögs
[0] = -1;

872 
di•£âögs
[1] = -100;

873 
di•£âögs
[2] = -1;

874 
˝u£âögs
[0] = -1;

875 
˝u£âögs
[1] = -1;

876 
d´m⁄£âögs
[0] = -1;

877 
d´m⁄£âögs
[1] = 260;

878 
d´m⁄£âögs
[2] = 5;

879 
d´m⁄£âögs
[3] = 5;

880 
d´m⁄£âögs
[4] = 
GP2X_L
 | 
GP2X_R
;

881 
d´m⁄£âögs
[5] = 
GP2X_VOL_DOWN
;

882 
d´m⁄£âögs
[6] = 
GP2X_VOL_UP
;

883 
d´m⁄£âögs
[7] = 1;

885 *
runfûe
;

887 
FILE
 *
£âögs
;

888 
£ts
[41][40];

889 * 
comps
[25] = {

896 
	`gp2x_öô
(16,44100,16,1,50);

897 
	`˝u˘æ_öô
();

899 
£âögs
 = 
	`f›í
 ("./cpu_speed.cfg", "r");

901 i‡(
£âögs
 =
NULL
)

903 
	`¥ötf
("No file found\n");

907 *
Rëu∫Code
;

908 
n
=0;Ç<40;Ç++)

910 
Rëu∫Code
 = 
	`fgës
(
£ts
[
n
],40,
£âögs
);

911 i‡(
Rëu∫Code
 =
NULL
)

913 
£ts
[40][0] = ()
n
;

918 
n
=0;Ç<()
£ts
[40][0];Ç=n+2)

920 if(
	`°rcmp
(
£ts
[
n
],
comps
[0]) == 0)

922 if(
	`©oi
(
£ts
[
n
+1]) > 33)

923 if(
	`©oi
(
£ts
[
n
+1]) < 341)

924 
˝u£âögs
[0] = 
	`©oi
(
£ts
[
n
+1]);

926 if(
	`°rcmp
(
£ts
[
n
],
comps
[1]) == 0)

928 if(
	`©oi
(
£ts
[
n
+1]) > 0)

929 if(
	`©oi
(
£ts
[
n
+1]) < 9)

930 
˝u£âögs
[1] = 
	`©oi
(
£ts
[
n
+1])-1;

932 if(
	`°rcmp
(
£ts
[
n
],
comps
[2]) == 0)

934 if(
	`©oi
(
£ts
[
n
+1]) > -21)

935 if(
	`©oi
(
£ts
[
n
+1]) < 37)

936 
di•£âögs
[0] = 0;

937 
di•£âögs
[1] = 
	`©oi
(
£ts
[
n
+1]);

940 if(
	`°rcmp
(
£ts
[
n
],
comps
[3]) == 0)

942 if(
	`©oi
(
£ts
[
n
+1]) > -7)

943 if(
	`©oi
(
£ts
[
n
+1]) < 11)

944 
di•£âögs
[0] = 1;

945 
di•£âögs
[1] = 
	`©oi
(
£ts
[
n
+1]);

947 if(
	`°rcmp
(
£ts
[
n
],
comps
[4]) == 0)

949 if(
	`©of
(
£ts
[
n
+1]) > 0)

950 if(
	`©of
(
£ts
[
n
+1]) <= 10)

951 
di•£âögs
[2] = ()(
	`©of
(
£ts
[
n
+1])*100);

953 if(
	`°rcmp
(
£ts
[
n
],
comps
[5]) == 0)

955 if(
	`©oi
(
£ts
[
n
+1]) > 1)

956 if(
	`©oi
(
£ts
[
n
+1]) < 4)

957 
øm£âögs
[0] = 
	`©oi
(
£ts
[
n
+1])-2;

959 if(
	`°rcmp
(
£ts
[
n
],
comps
[6]) == 0)

961 if(
	`©oi
(
£ts
[
n
+1]) > 0)

962 if(
	`©oi
(
£ts
[
n
+1]) < 17)

963 
øm£âögs
[1] = 
	`©oi
(
£ts
[
n
+1])-1;

965 if(
	`°rcmp
(
£ts
[
n
],
comps
[7]) == 0)

967 if(
	`©oi
(
£ts
[
n
+1]) > 0)

968 if(
	`©oi
(
£ts
[
n
+1]) < 17)

969 
øm£âögs
[2] = 
	`©oi
(
£ts
[
n
+1])-1;

971 if(
	`°rcmp
(
£ts
[
n
],
comps
[8]) == 0)

973 if(
	`©oi
(
£ts
[
n
+1]) > 0)

974 if(
	`©oi
(
£ts
[
n
+1]) < 17)

975 
øm£âögs
[3] = 
	`©oi
(
£ts
[
n
+1])-1;

977 if(
	`°rcmp
(
£ts
[
n
],
comps
[9]) == 0)

979 if(
	`©oi
(
£ts
[
n
+1]) > 0)

980 if(
	`©oi
(
£ts
[
n
+1]) < 17)

981 
øm£âögs
[4] = 
	`©oi
(
£ts
[
n
+1])-1;

983 if(
	`°rcmp
(
£ts
[
n
],
comps
[10]) == 0)

985 if(
	`©oi
(
£ts
[
n
+1]) > 0)

986 if(
	`©oi
(
£ts
[
n
+1]) < 17)

987 
øm£âögs
[5] = 
	`©oi
(
£ts
[
n
+1])-1;

989 if(
	`°rcmp
(
£ts
[
n
],
comps
[11]) == 0)

991 if(
	`©oi
(
£ts
[
n
+1]) > 0)

992 if(
	`©oi
(
£ts
[
n
+1]) < 17)

993 
øm£âögs
[6] = 
	`©oi
(
£ts
[
n
+1])-1;

995 if(
	`°rcmp
(
£ts
[
n
],
comps
[12]) == 0)

997 if(
	`©oi
(
£ts
[
n
+1]) > 0)

998 if(
	`©oi
(
£ts
[
n
+1]) < 17)

999 
øm£âögs
[7] = 
	`©oi
(
£ts
[
n
+1])-1;

1001 if(
	`°rcmp
(
£ts
[
n
],
comps
[13]) == 0)

1003 if(
	`©oi
(
£ts
[
n
+1]) > 0)

1004 if(
	`©oi
(
£ts
[
n
+1]) < 65536)

1005 
øm£âögs
[8] = 
	`©oi
(
£ts
[
n
+1])-1;

1007 if(
	`°rcmp
(
£ts
[
n
],
comps
[14]) == 0)

1009 if(
	`©oi
(
£ts
[
n
+1]) > 0)

1010 if(
	`©oi
(
£ts
[
n
+1]) < 9)

1011 
øm£âögs
[9] = 
	`©oi
(
£ts
[
n
+1])-1;

1013 if(
	`°rcmp
(
£ts
[
n
],
comps
[15]) == 0)

1015 
run
 = 1;

1016 
runfûe
 = 
£ts
[
n
+1];

1018 if(
	`°rcmp
(
£ts
[
n
],
comps
[16]) == 0)

1020 if(
	`©oi
(
£ts
[
n
+1]) >= 33)

1021 if(
	`©oi
(
£ts
[
n
+1]) <= 340)

1022 
d´m⁄£âögs
[0] = 
	`©oi
(
£ts
[
n
+1]);

1024 if(
	`°rcmp
(
£ts
[
n
],
comps
[17]) == 0)

1026 if(
	`©oi
(
£ts
[
n
+1]) >= 33)

1027 if(
	`©oi
(
£ts
[
n
+1]) <= 340)

1028 
d´m⁄£âögs
[1] = 
	`©oi
(
£ts
[
n
+1]);

1030 if(
	`°rcmp
(
£ts
[
n
],
comps
[18]) == 0)

1032 if(
	`©oi
(
£ts
[
n
+1]Ë>
d´m⁄£âögs
[1])

1033 if(
	`©oi
(
£ts
[
n
+1]) <= 340)

1034 
d´m⁄£âögs
[2] = 
	`©oi
(
£ts
[
n
+1]);

1036 if(
	`°rcmp
(
£ts
[
n
],
comps
[19]) == 0)

1038 
d´m⁄£âögs
[3] = ()(
	`©of
(
£ts
[
n
+1])*10+0.5);

1039 if(
d´m⁄£âögs
[3] < 1)

1040 
d´m⁄£âögs
[3] = 5;

1042 if(
	`°rcmp
(
£ts
[
n
],
comps
[20]) == 0)

1044 
d´m⁄£âögs
[4] = 
	`∑r£_key_£quí˚
(
£ts
[
n
+1]);

1046 if(
	`°rcmp
(
£ts
[
n
],
comps
[21]) == 0)

1048 
d´m⁄£âögs
[5] = 
	`∑r£_key_£quí˚
(
£ts
[
n
+1]);

1050 if(
	`°rcmp
(
£ts
[
n
],
comps
[22]) == 0)

1052 
d´m⁄£âögs
[6] = 
	`∑r£_key_£quí˚
(
£ts
[
n
+1]);

1054 if(
	`°rcmp
(
£ts
[
n
],
comps
[23]) == 0)

1056 
d´m⁄£âögs
[7] = (
£ts
[
n
+1][1] == 'n' ? 1 : 0);

1058 if(
	`°rcmp
(
£ts
[
n
],
comps
[24]) == 0)

1060 
°¨t_d´m⁄
 = 1;

1065 if(
run
 == 1)

1067 i‡(
˝u£âögs
[0] > -1Ë
	`£t_FCLK
(cpusettings[0]);

1068 i‡(
˝u£âögs
[1] > -1Ë
	`£t_920_Div
(cpusettings[1]);

1069 i‡(
di•£âögs
[0] == 0)

1070 i‡(
di•£âögs
[1] > -100Ë
	`£t_add_FLCDCLK
(dispsettings[1]);

1071 i‡(
di•£âögs
[0] == 1)

1072 i‡(
di•£âögs
[1] > -100Ë
	`£t_add_ULCDCLK
(dispsettings[1]);

1073 i‡(
di•£âögs
[2] > -1Ë
	`£t_gamma
(()(dispsettings[2]/100));

1074 i‡(
øm£âögs
[0] > -1Ë
	`£t_CAS
(ramsettings[0]);

1075 i‡(
øm£âögs
[1] > -1Ë
	`£t_tRC
(ramsettings[1]);

1076 i‡(
øm£âögs
[2] > -1Ë
	`£t_tRAS
(ramsettings[2]);

1077 i‡(
øm£âögs
[3] > -1Ë
	`£t_tWR
(ramsettings[3]);

1078 i‡(
øm£âögs
[4] > -1Ë
	`£t_tMRD
(ramsettings[4]);

1079 i‡(
øm£âögs
[5] > -1Ë
	`£t_tRFC
(ramsettings[5]);

1080 i‡(
øm£âögs
[6] > -1Ë
	`£t_tRP
(ramsettings[6]);

1081 i‡(
øm£âögs
[7] > -1Ë
	`£t_tRCD
(ramsettings[7]);

1082 i‡(
øm£âögs
[8] > -1Ë
	`£t_REFPERD
(ramsettings[8]);

1083 i‡(
øm£âögs
[9] > -1Ë
	`£t_DCLK_Div
(ramsettings[9]);

1084 
	`exô_˝u_•ìd
(
runfûe
);

1088 
sys‰eq
=
	`gë_‰eq_920_CLK
();

1089 
sys‰eq
*=
	`gë_920_Div
()+1;

1090 
˝u‰eq
=
sys‰eq
/1000000;

1093 if(
¨gc
 > 1)

1095 if(
	`°rcmp
(
¨gv
[1], "0"Ë=0Ë
	`ÁŒback
(
¨gc
,árgv);

1096 if(
	`°rcmp
(
¨gv
[1], "1"Ë=0Ë
	`ÁŒback
(
¨gc
,árgv);

1097 if(
	`°rcmp
(
¨gv
[1], "--hñp"Ë=0Ë
	`cmdhñp
();

1098 if(
	`°rcmp
(
¨gv
[1], "--d´m⁄"Ë=0Ë
	`cmd_d´m⁄
(
¨gc
,árgv);

1099 if(
	`°rcmp
(
¨gv
[1], "--kûl-d´m⁄"Ë=0Ë
	`kûl_ru¬ög_d´m⁄
(Ë|| 
	`¥ötf
("no daemonÑunning\r\n");

1100 if(
	`°rcmp
(
¨gv
[1], "--kûl"Ë=0Ë
	`kûl_ru¬ög_d´m⁄
(Ë|| 
	`¥ötf
("no daemonÑunning\r\n");

1101 
	`cmdlöe
(
¨gc
, 
¨gv
);

1102 
	`gp2x_deöô
();

1107 if(
°¨t_d´m⁄
)

1108 
	`°¨t_d´m⁄_by_£âögs
();

1110 
	`£t_gamma
(1.0);

1114 
	`˛órdi•
();

1117 
	`v_putˇd
(27,26,
WHITE
,
COLORFONDO
,"Y:SaveÅo SD");

1118 
	`v_putˇd
(2,27,
WHITE
,
COLORFONDO
,"Select: Set settingánd quit");

1119 
	`ôemhñp
("menu");

1120 if(
maömíupoöt
==0Ë
	`v_putˇd
(2,6,0xffffff,
TEXTBACK
,"> CPU Clock");

1121 
	`v_putˇd
(2,6,0xffff,
COLORFONDO
,"> CPU Clock");

1122 if(
maömíupoöt
==1Ë
	`v_putˇd
(2,8,0xffffff,
TEXTBACK
,"> Display Settings");

1123 
	`v_putˇd
(2,8,0xffff,
COLORFONDO
,"> Display Settings");

1124 if(
maömíupoöt
==2Ë
	`v_putˇd
(2,10,0xffffff,
TEXTBACK
,"> RAM Settings");

1125 
	`v_putˇd
(2,10,0xffff,
COLORFONDO
,"> RAM Settings");

1126 if(
maömíupoöt
==3Ë
	`v_putˇd
(2,12,0xffffff,
TEXTBACK
,"> Daemon");

1127 
	`v_putˇd
(2,12,0xffff,
COLORFONDO
,"> Daemon");

1128 
	`v_putˇd
(2,17,0xffff00,
COLORFONDO
,"Information:");

1129 
	`•rötf
(
ˇd
,"Sys.-Frq: %u Hz",
sys‰eq
);

1130 
	`v_putˇd
(2,19,0xffffff,
COLORFONDO
,
ˇd
);

1131 
	`•rötf
(
ˇd
,"UCLK-Frq: %u Hz",
	`gë_‰eq_UCLK
());

1132 
	`v_putˇd
(2,20,0xffffff,
COLORFONDO
,
ˇd
);

1133 
	`•rötf
(
ˇd
,"ACLK-Frq: %u Hz",
	`gë_‰eq_ACLK
());

1134 
	`v_putˇd
(2,21,0xffffff,
COLORFONDO
,
ˇd
);

1135 
	`gp2x_video_Êù
();

1139 
gp2x_nKeys
=
	`gp2x_joy°ick_ªad
();

1141 if((
gp2x_nKeys
 & 
GP2X_START
))

1145 
gp2x_nKeys
=
	`gp2x_joy°ick_ªad
();

1146 if(!(
gp2x_nKeys
 & 
GP2X_START
)) ;

1148 
	`exô_˝u_•ìd
("gp2xmenu");

1152 if((
gp2x_nKeys
 & 
GP2X_SELECT
))

1154 i‡(
˝u£âögs
[0] > -1)

1156 
	`£t_FCLK
(
˝u£âögs
[0]);

1157 
	`£t_920_Div
(
˝u£âögs
[1]);

1159 i‡(
øm£âögs
[0] > -1)

1161 
	`£t_CAS
(
øm£âögs
[0]);

1162 
	`£t_tRC
(
øm£âögs
[1]);

1163 
	`£t_tRAS
(
øm£âögs
[2]);

1164 
	`£t_tWR
(
øm£âögs
[3]);

1165 
	`£t_tMRD
(
øm£âögs
[4]);

1166 
	`£t_tRFC
(
øm£âögs
[5]);

1167 
	`£t_tRP
(
øm£âögs
[6]);

1168 
	`£t_tRCD
(
øm£âögs
[7]);

1169 
	`£t_REFPERD
(
øm£âögs
[8]);

1170 
	`£t_DCLK_Div
(
øm£âögs
[9]);

1174 
gp2x_nKeys
=
	`gp2x_joy°ick_ªad
();

1175 if(!(
gp2x_nKeys
 & 
GP2X_START
)) ;

1177 
	`exô_˝u_•ìd
("gp2xmenu");

1181 if((
gp2x_nKeys
 & 
GP2X_DOWN
))

1183 
maömíupoöt
=mainmenupoint+1;

1184 if(
maömíupoöt
>3) mainmenupoint=0;

1185 
	`dñay_us
(200000);

1189 if((
gp2x_nKeys
 & 
GP2X_UP
))

1191 
maömíupoöt
=mainmenupoint-1;

1192 if(
maömíupoöt
<0) mainmenupoint=3;

1193 
	`dñay_us
(200000);

1197 if((
gp2x_nKeys
 & 
GP2X_Y
))

1199 
£âögs
 = 
	`f›í
("./cpu_speed.cfg", "w");

1200 if(
˝u£âögs
[0] > -1)

1202 
	`Ârötf
(
£âögs
,"CPU-Clock\n%u\n", 
˝u£âögs
[0]);

1203 
	`Ârötf
(
£âögs
,"CPU-Div\n%i\n", 
˝u£âögs
[1]+1);

1205 if(
di•£âögs
[0] > -1)

1207 if(
di•£âögs
[0] =0Ë
	`Ârötf
(
£âögs
,"FPLL\n%i\n", dispsettings[1]);

1208 if(
di•£âögs
[0] =1Ë
	`Ârötf
(
£âögs
,"UPLL\n%i\n", dispsettings[1]);

1209 
	`Ârötf
(
£âögs
,"Gamma\n%.2f\n", ()(
di•£âögs
[2]/100));

1211 if(
øm£âögs
[0] > -1)

1213 
	`Ârötf
(
£âögs
,"CAS\n%i\n", 
øm£âögs
[0]+2);

1214 
	`Ârötf
(
£âögs
,"tRC\n%i\n", 
øm£âögs
[1]+1);

1215 
	`Ârötf
(
£âögs
,"tRAS\n%i\n", 
øm£âögs
[2]+1);

1216 
	`Ârötf
(
£âögs
,"tWR\n%i\n", 
øm£âögs
[3]+1);

1217 
	`Ârötf
(
£âögs
,"tMRD\n%i\n", 
øm£âögs
[4]+1);

1218 
	`Ârötf
(
£âögs
,"tRFC\n%i\n", 
øm£âögs
[5]+1);

1219 
	`Ârötf
(
£âögs
,"tRP\n%i\n", 
øm£âögs
[6]+1);

1220 
	`Ârötf
(
£âögs
,"tRCD\n%i\n", 
øm£âögs
[7]+1);

1221 
	`Ârötf
(
£âögs
,"Re‰esh-Pîiod\n%i\n", 
øm£âögs
[8]+1);

1222 
	`Ârötf
(
£âögs
,"RAM-Div\n%i\n", 
øm£âögs
[9]+1);

1224 if(
d´m⁄£âögs
[0] > -1)

1226 
	`Ârötf
(
£âögs
,"D´m⁄-Mö\n%i\n", 
d´m⁄£âögs
[0]);

1227 
	`Ârötf
(
£âögs
,"D´m⁄-Max\n%i\n", 
d´m⁄£âögs
[1]);

1228 
	`Ârötf
(
£âögs
,"D´m⁄-Sãp\n%i\n", 
d´m⁄£âögs
[2]);

1229 
	`Ârötf
(
£âögs
,"D´m⁄-Dñay\n%.1f\n", 
d´m⁄£âögs
[3]/10.f);

1231 
ã°
[256];

1232 
	`•rötf
(
ã°
,"");

1233 
	`f‹m©key
(
ã°
,
d´m⁄£âögs
[4]);

1234 
	`Ârötf
(
£âögs
,"D´m⁄-HŸkey\n%s\n",
ã°
);

1235 
	`•rötf
(
ã°
,"");

1236 
	`f‹m©key
(
ã°
,
d´m⁄£âögs
[5]);

1237 
	`Ârötf
(
£âögs
,"D´m⁄-In¸-Key\n%s\n",
ã°
);

1238 
	`•rötf
(
ã°
,"");

1239 
	`f‹m©key
(
ã°
,
d´m⁄£âögs
[6]);

1240 
	`Ârötf
(
£âögs
,"D´m⁄-De¸-Key\n%s\n",
ã°
);

1242 
	`Ârötf
(
£âögs
,"D´m⁄-OSD\n%s\n",(
d´m⁄£âögs
[7]?"On":"Off"));

1243 if(!
	`ac˚ss
("/tmp/˝u_d´m⁄.pid",
R_OK
))

1244 
	`Ârötf
(
£âögs
,"Daemon-Run\nOn\n");

1249 
	`f˛o£
(
£âögs
);

1250 
	`sy°em
("sync");

1253 
gp2x_nKeys
=
	`gp2x_joy°ick_ªad
();

1254 if(!(
gp2x_nKeys
 & 
GP2X_Y
)) ;

1260 if((
gp2x_nKeys
 & 
GP2X_B
))

1262 if(
maömíupoöt
==0Ë
	`˝umíu
();

1263 if(
maömíupoöt
==1Ë
	`lcdmíu
();

1264 if(
maömíupoöt
==2Ë
	`ømmíu
();

1265 if(
maömíupoöt
==3Ë
	`d´m⁄míu
();

1268 
gp2x_nKeys
=
	`gp2x_joy°ick_ªad
();

1269 if(!(
gp2x_nKeys
 & 
GP2X_B
)) ;

1275 
˝u•ìd_exô
 == 0);

1276 
	}
}

	@gp2x/cpuctrl.c

28 
	~<sys/mm™.h
>

29 
	~<m©h.h
>

30 
	~<°dio.h
>

31 
	~"gp2xmöûib.h
"

33 
	#SYS_CLK_FREQ
 7372800

	)

37 
gp2x_dev
[4];

38 *
gp2x_memªgs
;

43 
	mSYSCLKENREG
,
	mSYSCSETREG
,
	mFPLLVSETREG
,
	mDUALINT920
,
	mDUALINT940
,
	mDUALCTRL940
,
	mDISPCSETREG
,
	mMEMTIMEX0
;

44 
	mMEMTIMEX1
,
	mMEMREFX
,
	mMLC_GAMM_BYPATH
,
	mMLC_GAMMA_A
,
	mMLC_GAMMA_D
,
	mYBNKLVL
;

46 
	gsy°em_ªg
;

48 vﬁ©ûê*
	gMEM_REG
;

49 
	gMDIV
,
	gPDIV
,
	gSCALE
;

50 vﬁ©ûê*
	g¨m940code
;

52 
	$˝u˘æ_öô
()

54 
MEM_REG
=&
gp2x_memªgs
[0];

55 
	}
}

57 
	$ßve_sy°em_ªgs
()

59 
sy°em_ªg
.
SYSCSETREG
=
MEM_REG
[0x91c>>1];

60 
sy°em_ªg
.
FPLLVSETREG
=
MEM_REG
[0x912>>1];

61 
sy°em_ªg
.
SYSCLKENREG
=
MEM_REG
[0x904>>1];

62 
sy°em_ªg
.
DUALINT920
=
MEM_REG
[0x3B40>>1];

63 
sy°em_ªg
.
DUALINT940
=
MEM_REG
[0x3B42>>1];

64 
sy°em_ªg
.
DUALCTRL940
=
MEM_REG
[0x3B48>>1];

65 
sy°em_ªg
.
DISPCSETREG
=
MEM_REG
[0x924>>1];

66 
sy°em_ªg
.
MEMTIMEX0
=
MEM_REG
[0x3802>>1];

67 
sy°em_ªg
.
MEMTIMEX1
=
MEM_REG
[0x3804>>1];

68 
sy°em_ªg
.
MEMREFX
=
MEM_REG
[0x3808>>1];

69 
sy°em_ªg
.
MLC_GAMM_BYPATH
=
MEM_REG
[0x2880>>1];

70 
sy°em_ªg
.
MLC_GAMMA_A
=
MEM_REG
[0x295C>>1];

71 
sy°em_ªg
.
MLC_GAMMA_D
=
MEM_REG
[0x295E>>1];

72 
sy°em_ªg
.
YBNKLVL
=
MEM_REG
[0x283A>>1];

73 
	}
}

75 
	$lﬂd_sy°em_ªgs
()

77 
MEM_REG
[0x91c>>1]=
sy°em_ªg
.
SYSCSETREG
;

78 
MEM_REG
[0x910>>1]=
sy°em_ªg
.
FPLLVSETREG
;

79 
MEM_REG
[0x3B40>>1]=
sy°em_ªg
.
DUALINT920
;

80 
MEM_REG
[0x3B42>>1]=
sy°em_ªg
.
DUALINT940
;

81 
MEM_REG
[0x3B48>>1]=
sy°em_ªg
.
DUALCTRL940
;

82 
MEM_REG
[0x904>>1]=
sy°em_ªg
.
SYSCLKENREG
;

84 
MEM_REG
[0x0914>>1] = 0x4F02;

86 
MEM_REG
[0x0902>>1] & 2);

88 
MEM_REG
[0x0916>>1] != 0x4F02);

89 
MEM_REG
[0x3802>>1]=
sy°em_ªg
.
MEMTIMEX0
;

90 
MEM_REG
[0x3804>>1]=
sy°em_ªg
.
MEMTIMEX1
;

91 
MEM_REG
[0x3808>>1]=
sy°em_ªg
.
MEMREFX
;

92 
MEM_REG
[0x2880>>1]=
sy°em_ªg
.
MLC_GAMM_BYPATH
;

93 
MEM_REG
[0x295C>>1]=
sy°em_ªg
.
MLC_GAMMA_A
;

94 
MEM_REG
[0x295E>>1]=
sy°em_ªg
.
MLC_GAMMA_D
;

95 
MEM_REG
[0x283A>>1]=
sy°em_ªg
.
YBNKLVL
;

96 
	}
}

99 
	$£t_FCLK
(
MHZ
)

101 
	`¥ötf
 ("£àCPU-Fªquícy = %uMHz\r\n",
MHZ
);

102 
v
;

103 
mdiv
,
pdiv
=3,
sˇÀ
=0;

104 
MHZ
*=1000000;

105 
mdiv
=(
MHZ
*
pdiv
)/
SYS_CLK_FREQ
;

108 
mdiv
=((mdiv-8)<<8) & 0xff00;

109 
pdiv
=((pdiv-2)<<2) & 0xfc;

110 
sˇÀ
&=3;

111 
v
=
mdiv
 | 
pdiv
 | 
sˇÀ
;

112 
MEM_REG
[0x910>>1]=
v
;

113 
	}
}

115 
	$gë_FCLK
()

117  
MEM_REG
[0x910>>1];

118 
	}
}

120 
	$£t_add_FLCDCLK
(
add˛ock
)

123 
	`¥ötf
 ("...setÅo FPLL-Clockgen...\r\n");

124 
	`¥ötf
 ("£àTimög-PªsˇÀ∏%i\r\n",
add˛ock
);

125 
MEM_REG
[0x924>>1]0x5A00 + ((
add˛ock
)<<8);

127 
	}
}

129 
	$£t_add_ULCDCLK
(
add˛ock
)

132 
	`¥ötf
 ("...setÅo UPLL-Clockgen...\r\n");

133 
	`¥ötf
 ("£àTimög-PªsˇÀ∏%i\r\n",
add˛ock
);

134 
MEM_REG
[0x0924>>1] = 0x8900 + ((
add˛ock
)<<8);

136 
	}
}

138 
	$gë_LCDClk
()

140 i‡(
MEM_REG
[0x0924>>1] < 0x7A01) ((MEM_REG[0x0924>>1] - 0x5A00)>>8);

141 ((
MEM_REG
[0x0924>>1] - 0x8900)>>8);

142 
	}
}

144 
	$gë_Clkgí
()

146 i‡(
MEM_REG
[0x0924>>1] < 0x7A01) (0);

148 
	}
}

150 
	$gë_‰eq_UCLK
()

152 
i
;

153 
ªg
,
mdiv
,
pdiv
,
sˇÀ
;

154 
i
 = 
MEM_REG
[0x900>>1];

155 
i
 = ((i >> 7) & 1) ;

156 if(
i
)  0;

157 
ªg
=
MEM_REG
[0x916>>1];

158 
mdiv
 = ((
ªg
 & 0xff00) >> 8) + 8;

159 
pdiv
 = ((
ªg
 & 0xfc) >> 2) + 2;

160 
sˇÀ
 = 
ªg
 & 3;

161  ((
SYS_CLK_FREQ
 * 
mdiv
Ë/ (
pdiv
 << 
sˇÀ
));

162 
	}
}

164 
	$gë_‰eq_ACLK
()

166 
i
;

167 
ªg
,
mdiv
,
pdiv
,
sˇÀ
;

168 
i
 = 
MEM_REG
[0x900>>1];

169 
i
 = ((i >> 8) & 1) ;

170 if(
i
)  0;

171 
ªg
=
MEM_REG
[0x918>>1];

172 
mdiv
 = ((
ªg
 & 0xff00) >> 8) + 8;

173 
pdiv
 = ((
ªg
 & 0xfc) >> 2) + 2;

174 
sˇÀ
 = 
ªg
 & 3;

175  ((
SYS_CLK_FREQ
 * 
mdiv
)/(
pdiv
 << 
sˇÀ
));

176 
	}
}

178 
	$gë_‰eq_920_CLK
()

180 
i
;

181 
ªg
,
mdiv
,
pdiv
,
sˇÀ
;

182 
ªg
=
MEM_REG
[0x912>>1];

183 
mdiv
 = ((
ªg
 & 0xff00) >> 8) + 8;

184 
pdiv
 = ((
ªg
 & 0xfc) >> 2) + 2;

185 
sˇÀ
 = 
ªg
 & 3;

186 
MDIV
=
mdiv
;

187 
PDIV
=
pdiv
;

188 
SCALE
=
sˇÀ
;

189 
i
 = (
MEM_REG
[0x91c>>1] & 7)+1;

190  ((
SYS_CLK_FREQ
 * 
mdiv
)/(
pdiv
 << 
sˇÀ
))/
i
;

191 
	}
}

193 
	$gë_‰eq_940_CLK
()

195 
i
;

196 
ªg
,
mdiv
,
pdiv
,
sˇÀ
;

197 
ªg
=
MEM_REG
[0x912>>1];

198 
mdiv
 = ((
ªg
 & 0xff00) >> 8) + 8;

199 
pdiv
 = ((
ªg
 & 0xfc) >> 2) + 2;

200 
sˇÀ
 = 
ªg
 & 3;

201 
i
 = ((
MEM_REG
[0x91c>>1]>>3) & 7)+1;

202  ((
SYS_CLK_FREQ
 * 
mdiv
Ë/ (
pdiv
 << 
sˇÀ
))/
i
;

203 
	}
}

205 
	$gë_‰eq_DCLK
()

207 
i
;

208 
ªg
,
mdiv
,
pdiv
,
sˇÀ
;

209 
ªg
=
MEM_REG
[0x912>>1];

210 
mdiv
 = ((
ªg
 & 0xff00) >> 8) + 8;

211 
pdiv
 = ((
ªg
 & 0xfc) >> 2) + 2;

212 
sˇÀ
 = 
ªg
 & 3;

213 
i
 = ((
MEM_REG
[0x91c>>1]>>6) & 7)+1;

214  ((
SYS_CLK_FREQ
 * 
mdiv
Ë/ (
pdiv
 << 
sˇÀ
))/
i
;

215 
	}
}

217 
	$£t_920_Div
(
div
)

219 
	`¥ötf
 ("£àdividî f‹ CPU-Clock = %u\r\n",
div
+1);

220 
v
;

221 
v
 = 
MEM_REG
[0x91c>>1] & (~0x3);

222 
MEM_REG
[0x91c>>1] = (
div
 & 0x7Ë| 
v
;

223 
	}
}

225 
	$gë_920_Div
()

227  (
MEM_REG
[0x91c>>1] & 0x7);

228 
	}
}

230 
	$£t_940_Div
(
div
)

232 
v
;

233 
v
 = ()–
MEM_REG
[0x91c>>1] & (~(0x7 << 3)));

234 
MEM_REG
[0x91c>>1] = ((
div
 & 0x7Ë<< 3Ë| 
v
;

235 
	}
}

237 
	$gë_940_Div
()

239  ((
MEM_REG
[0x91c>>1] >> 3) & 0x7);

240 
	}
}

242 
	$£t_DCLK_Div
–
div
 )

244 
	`¥ötf
 ("£àdividî f‹ RAM-Clock = %u\r\n",
div
+1);

245 
v
;

246 
v
 = ()–
MEM_REG
[0x91c>>1] & (~(0x7 << 6)));

247 
MEM_REG
[0x91c>>1] = ((
div
 & 0x7Ë<< 6Ë| 
v
;

248 
	}
}

250 
	$gë_DCLK_Div
()

252  ((
MEM_REG
[0x91c>>1] >> 6) & 0x7);

253 
	}
}

255 
	$DißbÀ_I¡_920
()

257 
ªt
;

258 
ªt
=
MEM_REG
[0x3B40>>1];

259 
MEM_REG
[0x3B40>>1]=0;

260 
MEM_REG
[0x3B44>>1]=0xffff;

261  
ªt
;

262 
	}
}

264 
	$DißbÀ_I¡_940
()

266 
ªt
;

267 
ªt
=
MEM_REG
[0x3B42>>1];

268 
MEM_REG
[0x3B42>>1]=0;

269 
MEM_REG
[0x3B46>>1]=0xffff;

270  
ªt
;

271 
	}
}

273 
	$gë_°©e940
()

275  
MEM_REG
[0x904>>1];

276 
	}
}

279 
	$E«bÀ_I¡_920
(
Êag
)

281 
MEM_REG
[0x3B40>>1]=
Êag
;

282 
	}
}

284 
	$E«bÀ_I¡_940
(
Êag
)

286 
MEM_REG
[0x3B42>>1]=
Êag
;

287 
	}
}

289 
	$DißbÀ_940
()

291 
	`DißbÀ_I¡_940
();

292 
MEM_REG
[0x3B48>>1]|= (1 << 7);

293 
MEM_REG
[0x904>>1]&=0xfffe;

294 
	}
}

296 
	$Lﬂd_940_code
(*
code
,
size
)

298 *
˝
;

299 
i
;

300 
¨m940code
=(*)
	`mm≠
(0, 0x100000, 
PROT_READ
|
PROT_WRITE
, 
MAP_SHARED
, 
gp2x_dev
[2], 0x03000000);

301 
	`DißbÀ_940
();

302 
˝
=(*Ë
code
;

303 
i
 = 0; i < 
size
/4; i ++)

305 
¨m940code
[
i
] = 
˝
[i];

307 
i
 = 0; i < 64; i ++)

309 
¨m940code
[0x3FC0+
i
] = 0;

311 
MEM_REG
[0x3B48>>1]=(MEM_REG[0x3B48>>1] & 0xFF00) | 0x03;

312 
	}
}

314 
	$˛ock_940_off
()

316 
MEM_REG
[0x904>>1]&=0xfffe;

317 
	}
}

319 
	$˛ock_940_⁄
()

321 
MEM_REG
[0x904>>1]|=1;

322 
	}
}

331 
	$gë_CAS
()

333  ((
MEM_REG
[0x3804>>1] >> 12) & 0x1);

334 
	}
}

336 
	$gë_tRC
()

338  ((
MEM_REG
[0x3804>>1] >> 8) & 0xF);

339 
	}
}

341 
	$gë_tRAS
()

343  ((
MEM_REG
[0x3804>>1] >> 4) & 0xF);

344 
	}
}

346 
	$gë_tWR
()

348  (
MEM_REG
[0x3804>>1] & 0xF);

349 
	}
}

351 
	$gë_tMRD
()

353  ((
MEM_REG
[0x3802>>1] >> 12) & 0xF);

354 
	}
}

356 
	$gë_tRFC
()

358  ((
MEM_REG
[0x3802>>1] >> 8) & 0xF);

359 
	}
}

361 
	$gë_tRP
()

363  ((
MEM_REG
[0x3802>>1] >> 4) & 0xF);

364 
	}
}

366 
	$gë_tRCD
()

368  (
MEM_REG
[0x3802>>1] & 0xF);

369 
	}
}

371 
	$gë_REFPERD
()

373  
MEM_REG
[0x3808>>1];

374 
	}
}

379 
	$£t_CAS
(
timög
)

381 
	`¥ötf
 ("£àCAS = %u\r\n",
timög
+2);

382 
v
;

383 
v
 = ()(
MEM_REG
[0x3804>>1] & (~(0x1 << 12)));

384 
MEM_REG
[0x3804>>1] = ((
timög
 & 0x1Ë<< 12Ë| 
v
;

385 
	}
}

387 
	$£t_tRC
(
timög
)

389 
	`¥ötf
 ("£àtRC = %u\r\n",
timög
+1);

390 
v
;

391 
v
 = ()(
MEM_REG
[0x3804>>1] & (~(0xF << 8)));

392 
MEM_REG
[0x3804>>1] = ((
timög
 & 0xFË<< 8Ë| 
v
;

393 
	}
}

395 
	$£t_tRAS
(
timög
)

397 
	`¥ötf
 ("£àtRAS = %u\r\n",
timög
+1);

398 
v
;

399 
v
 = ()(
MEM_REG
[0x3804>>1] & (~(0xF << 4)));

400 
MEM_REG
[0x3804>>1] = ((
timög
 & 0xFË<< 4Ë| 
v
;

401 
	}
}

403 
	$£t_tWR
(
timög
)

405 
	`¥ötf
 ("£àtWR = %u\r\n",
timög
+1);

406 
v
;

407 
v
 = ()(
MEM_REG
[0x3804>>1] & (~(0xF)));

408 
MEM_REG
[0x3804>>1] = (
timög
 & 0xFË| 
v
;

409 
	}
}

411 
	$£t_tMRD
(
timög
)

413 
	`¥ötf
 ("£àtMRD = %u\r\n",
timög
+1);

414 
v
;

415 
v
 = ()(
MEM_REG
[0x3802>>1] & (~(0xF << 12)));

416 
MEM_REG
[0x3802>>1] = ((
timög
 & 0xFË<< 12Ë| 
v
;

417 
	}
}

419 
	$£t_tRFC
(
timög
)

421 
	`¥ötf
 ("£àtRFC = %u\r\n",
timög
+1);

422 
v
;

423 
v
 = ()(
MEM_REG
[0x3802>>1] & (~(0xF << 8)));

424 
MEM_REG
[0x3802>>1] = ((
timög
 & 0xFË<< 8Ë| 
v
;

425 
	}
}

427 
	$£t_tRP
(
timög
)

429 
	`¥ötf
 ("£àtRP = %u\r\n",
timög
+1);

430 
v
;

431 
v
 = ()(
MEM_REG
[0x3802>>1] & (~(0xF << 4)));

432 
MEM_REG
[0x3802>>1] = ((
timög
 & 0xFË<< 4Ë| 
v
;

433 
	}
}

435 
	$£t_tRCD
(
timög
)

437 
	`¥ötf
 ("£àtRCD = %u\r\n",
timög
+1);

438 
v
;

439 
v
 = ()(
MEM_REG
[0x3802>>1] & (~(0xF)));

440 
MEM_REG
[0x3802>>1] = (
timög
 & 0xFË| 
v
;

441 
	}
}

443 
	$£t_REFPERD
(
timög
)

445 
	`¥ötf
 ("£àRe‰esh Pîiod = %u\r\n",
timög
+1);

446 
MEM_REG
[0x3808>>1] = 
timög
;

447 
	}
}

454 
	$£t_gamma
(
gamma
)

456 
	`¥ötf
 ("£àgamm®%f\r\n",
gamma
);

457 
i
;

458 
gamma
 = 1/gamma;

461 
MEM_REG
[0x2880>>1]&=~(1<<12);

463 
MEM_REG
[0x295C>>1]=0;

464 
i
=0; i<256; i++)

466 
g
;

467 
s
;

468 
g
 =()(255.0*
	`pow
(
i
/255.0,
gamma
));

469 
s
 = (
g
<<8) | g;

470 
MEM_REG
[0x295E>>1]
s
;

471 
MEM_REG
[0x295E>>1]
g
;

473 
	}
}

475 
	$gë_YBNKLVL
()

477  (
MEM_REG
[0x283A>>1] & 0x3FF);

478 
	}
}

480 
	$£t_YBNKLVL
(
vÆ
)

482 
ãmp
 = ()(
MEM_REG
[0x3808>>1] & (~(0x3FF)));

483 
MEM_REG
[0x3808>>1] = (
vÆ
 & 0x3FFË| 
ãmp
;

484 
	}
}

	@gp2x/cpuctrl.h

1 #i‡!
deföed
(
_CPUCTRL_
)

2 
	#_CPUCTRL_


	)

4 
˝u˘æ_öô
();

6 
ßve_sy°em_ªgs
();

7 
lﬂd_sy°em_ªgs
();

9 
£t_FCLK
(
MHZ
);

10 
£t_add_ULCDCLK
(
add˛ock
);

11 
£t_add_FLCDCLK
(
add˛ock
);

13 
gë_FCLK
();

14 
gë_‰eq_UCLK
();

15 
gë_‰eq_ACLK
();

16 
gë_‰eq_920_CLK
();

17 
gë_‰eq_940_CLK
();

18 
gë_‰eq_DCLK
();

19 
gë_LCDClk
();

20 
gë_Clkgí
();

21 
gë_°©e940
();

23 
£t_920_Div
(
div
);

24 
gë_920_Div
();

26 
£t_940_Div
(
div
);

27 
gë_940_Div
();

29 
£t_DCLK_Div
(
div
);

30 
gë_DCLK_Div
();

32 
DißbÀ_I¡_920
();

33 
DißbÀ_I¡_940
();

35 
E«bÀ_I¡_920
(
Êag
);

36 
E«bÀ_I¡_940
(
Êag
);

38 
DißbÀ_940
();

40 vﬁ©ûê*
¨m940code
;

42 
Lﬂd_940_code
(*
code
,
size
);

44 
˛ock_940_off
();

45 
˛ock_940_⁄
();

48 
gë_CAS
();

49 
gë_tRC
();

50 
gë_tRAS
();

51 
gë_tWR
();

52 
gë_tMRD
();

53 
gë_tRFC
();

54 
gë_tRP
();

55 
gë_tRCD
();

56 
gë_REFPERD
();

58 
£t_CAS
();

59 
£t_tRC
();

60 
£t_tRAS
();

61 
£t_tWR
();

62 
£t_tMRD
();

63 
£t_tRFC
();

64 
£t_tRP
();

65 
£t_tRCD
();

66 
£t_REFPERD
();

68 
£t_gamma
(
gamma
);

70 
gë_YBNKLVL
();

71 
£t_YBNKLVL
(
vÆ
);

	@gp2x/daemon.c

21 
	~<sys/ty≥s.h
>

22 
	~<sys/°©.h
>

23 
	~<sys/mm™.h
>

24 
	~<f˙é.h
>

25 
	~<uni°d.h
>

26 
	~<°dio.h
>

27 
	~<°dlib.h
>

28 
	~<°rög.h
>

29 
	~<±hªad.h
>

31 
	~"gp2xmöûib.h
"

32 
	~"˝u˘æ.h
"

33 
	~"di•œy.h
"

35 
	~"d´m⁄.h
"

38 
COLORFONDO
;

39 
WHITE
;

40 
TEXTBACK
;

42 
ˇd
[256];

44 *
gp2x_memªgs
;

45 
±hªad_t
 
gp2x_sound_thªad
;

47 
	$°¨t_d´m⁄
(

48 
möimÆ_˝u_•ìd
, 
maximÆ_˝u_•ìd
, 
°¨t_˝u_•ìd
, 
˝u_•ìd_°ï
,

49 
hŸkey
, 
ö¸emítkey
, 
de¸emítkey
,

50 
•ìd_di•œy
, 
f‹eground
,

51 
dñay
)

53 
pid_t
 
pid
, 
sid
;

55 if(!
f‹eground
) {

56 
	`kûl_ru¬ög_d´m⁄
();

59 
FILE
 * 
pidfûe
 = 
	`f›í
("/tmp/cpu_daemon.pid","w");

61 if(!
pidfûe
) {

62 
	`¥ötf
("couldn't writeÖidfile\r\n");

63 
	`exô
(-2);

66 
pid
 = 
	`f‹k
();

68 if(
pid
 > 0) {

69 
	`Ârötf
(
pidfûe
,"%i\n",
pid
);

70 
	`f˛o£
(
pidfûe
);

72 if(
pid
 != 0)

73  
pid
;

76 
	`f˛o£
(
pidfûe
);

78 
	`umask
(0);

79 
sid
 = 
	`£tsid
();

82 
	`˛o£
(
STDIN_FILENO
);

83 
	`˛o£
(
STDOUT_FILENO
);

84 
	`˛o£
(
STDERR_FILENO
);

87 if(
f‹eground
)

88 
	`¥ötf
("daemonÑeady\r\n");

90 
	`«no_£tup
();

93 
cuºít_˝u_•ìd
 = 
°¨t_˝u_•ìd
;

96 
	`u¶ìp
(
dñay
);

97 
key°©e
 = 
	`gp2x_joy°ick_ªad
();

99 
œ°_˝u_•ìd
 = 0;

102 (
hŸkey
 && (
key°©e
 & hotkey) == hotkey) ||

103 ((!
hŸkey
) && (

104 (
ö¸emítkey
 && (
key°©e
 & incrementkey) == incrementkey) ||

105 (
de¸emítkey
 && (
key°©e
 & decrementkey) == decrementkey)

108 if(
f‹eground
 && !
œ°_˝u_•ìd
)

109 
	`¥ötf
("cpu daemonáctivated!\r\n");

111 if(
ö¸emítkey
 && (
key°©e
 & incrementkey) == incrementkey) {

112 
cuºít_˝u_•ìd
 +
˝u_•ìd_°ï
;

113 (
key°©e
 & 
ö¸emítkey
Ë=ö¸emítkeyË
	`u¶ìp
(100000),key°©ê
	`gp2x_joy°ick_ªad
();

115 if(
de¸emítkey
 && (
key°©e
 & decrementkey) == decrementkey) {

116 
cuºít_˝u_•ìd
 -
˝u_•ìd_°ï
;

117 (
key°©e
 & 
de¸emítkey
Ë=de¸emítkeyË
	`u¶ìp
(100000),key°©ê
	`gp2x_joy°ick_ªad
();

120 if(
cuºít_˝u_•ìd
 < 
möimÆ_˝u_•ìd
)

121 
cuºít_˝u_•ìd
 = 
möimÆ_˝u_•ìd
;

122 if(
cuºít_˝u_•ìd
 > 
maximÆ_˝u_•ìd
)

123 
cuºít_˝u_•ìd
 = 
maximÆ_˝u_•ìd
;

127 if(
œ°_˝u_•ìd
 !
cuºít_˝u_•ìd
) {

128 
	`£t_FCLK
(
cuºít_˝u_•ìd
);

130 
œ°_˝u_•ìd
 = 
cuºít_˝u_•ìd
;

131 
key°©e
 = 
	`gp2x_joy°ick_ªad
();

136 
	}
}

138 
	$kûl_ru¬ög_d´m⁄
() {

140 
FILE
 * 
pidfûe
 = 
	`f›í
("/tmp/cpu_daemon.pid","r");

141 
pid_buf„r
[14];

142 
pid_buf„r
[0] = 'k';

143 
pid_buf„r
[1] = 'i';

144 
pid_buf„r
[2] = 'l';

145 
pid_buf„r
[3] = 'l';

146 
pid_buf„r
[4] = ' ';

147 
pid_buf„r
[5] = 0;

148 if(
pidfûe
) {

149 
	`¥ötf
("foundÖidfile\r\n");

150 
	`fgës
(&(
pid_buf„r
[5]),10,
pidfûe
);

151 
	`f˛o£
(
pidfûe
);

152 
ªtu∫_code
 = 
	`sy°em
(
pid_buf„r
);

153 if(
ªtu∫_code
)

154 
	`¥ötf
("daemon wasn'tÑunning\r\n");

156 
	`¥ötf
("killed old daemon\r\n");

157 
	`u∆ök
("/tmp/cpu_daemon.pid");

161 
	}
}

164 
	$«no_£tup
() {

165 if(!
gp2x_sound_thªad
) {

166 
gp2x_memªgs
=(*)
	`mm≠
(0, 0x10000, 
PROT_READ
|
PROT_WRITE
, 
MAP_SHARED
, 
	`›í
("/dev/mem", 
O_RDWR
), 0xc0000000);

167 
	`˝u˘æ_öô
();

169 
	}
}

171 
	$cmd_d´m⁄
(
¨gc
, *
¨gv
[]) {

173 
˝u_div
 = 
	`gë_920_Div
();

174 
sys‰eq
=
	`gë_‰eq_920_CLK
();

175 
sys‰eq
*=
˝u_div
+1;

176 
˝u‰eq
=
sys‰eq
/1000000;

178 
möimÆ_vÆue
 = 33;

179 
maximÆ_vÆue
 = 260;

180 
°¨t_vÆue
 = 
˝u‰eq
;

181 
°ï
 = 10;

182 
hŸkey
 = 
GP2X_L
 | 
GP2X_R
;

183 
downkey
 = 
GP2X_VOL_UP
;

184 
upkey
 = 
GP2X_VOL_DOWN
;

185 
f‹eground
 = 0;

186 
di•œy
 = 1;

187 
dñay
 = 1;

189 
i
;

190  
i
 = 2; i < 
¨gc
; i++) {

191 if(!
	`°rcmp
(
¨gv
[
i
],"--min")) {

192 if(
i
+1 =
¨gc
){
	`¥ötf
 ("%†i†missög it'†∑ømëî\r\n",
¨gv
[i]);
	`gp2x_deöô
();
	`exô
(1);}

193 
möimÆ_vÆue
 = 
	`©oi
(
¨gv
[
i
+1]);

194 if(
möimÆ_vÆue
 < 33)

195 
möimÆ_vÆue
 = 33;

197 if(!
	`°rcmp
(
¨gv
[
i
],"--max")) {

198 if(
i
+1 =
¨gc
){
	`¥ötf
 ("%†i†missög it'†∑ømëî\r\n",
¨gv
[i]);
	`gp2x_deöô
();
	`exô
(1);}

199 
maximÆ_vÆue
 = 
	`©oi
(
¨gv
[
i
+1]);

200 if(
maximÆ_vÆue
 > 340)

201 
maximÆ_vÆue
 = 340;

203 if(!
	`°rcmp
(
¨gv
[
i
],"--start")) {

204 if(
i
+1 =
¨gc
){
	`¥ötf
 ("%†i†missög it'†∑ømëî\r\n",
¨gv
[i]);
	`gp2x_deöô
();
	`exô
(1);}

205 
°¨t_vÆue
 = 
	`©oi
(
¨gv
[
i
+1]);

207 if(!
	`°rcmp
(
¨gv
[
i
],"--step")) {

208 if(
i
+1 =
¨gc
){
	`¥ötf
 ("%†i†missög it'†∑ømëî\r\n",
¨gv
[i]);
	`gp2x_deöô
();
	`exô
(1);}

209 
°ï
 = 
	`©oi
(
¨gv
[
i
+1]);

211 if(!
	`°rcmp
(
¨gv
[
i
],"--hotkey")) {

212 if(
i
+1 =
¨gc
){
	`¥ötf
 ("%†i†missög it'†∑ømëî\r\n",
¨gv
[i]);
	`gp2x_deöô
();
	`exô
(1);}

213 
hŸkey
 = 
	`∑r£_key_£quí˚
(
¨gv
[
i
+1]);

215 if(!
	`°rcmp
(
¨gv
[
i
],"--incr")) {

216 if(
i
+1 =
¨gc
){
	`¥ötf
 ("%†i†missög it'†∑ømëî\r\n",
¨gv
[i]);
	`gp2x_deöô
();
	`exô
(1);}

217 
upkey
 = 
	`∑r£_key_£quí˚
(
¨gv
[
i
+1]);

219 if(!
	`°rcmp
(
¨gv
[
i
],"--decr")) {

220 if(
i
+1 =
¨gc
){
	`¥ötf
 ("%†i†missög it'†∑ømëî\r\n",
¨gv
[i]);
	`gp2x_deöô
();
	`exô
(1);}

221 
downkey
 = 
	`∑r£_key_£quí˚
(
¨gv
[
i
+1]);

223 if(!
	`°rcmp
(
¨gv
[
i
],"--delay")) {

224 if(
i
+1 =
¨gc
){
	`¥ötf
 ("%†i†missög it'†∑ømëî\r\n",
¨gv
[i]);
	`gp2x_deöô
();
	`exô
(1);}

225 
dñay
 = 
	`©of
(
¨gv
[
i
+1]);

227 if(!
	`°rcmp
(
¨gv
[
i
],"--no-incr")) {

228 
upkey
 = 0;

230 if(!
	`°rcmp
(
¨gv
[
i
],"--no-decr")) {

231 
downkey
 = 0;

233 if(!
	`°rcmp
(
¨gv
[
i
],"--no-hotkey")) {

234 
hŸkey
 = 0;

236 if(!
	`°rcmp
(
¨gv
[
i
],"--foreground")) {

237 
f‹eground
 = 1;

239 if(!
	`°rcmp
(
¨gv
[
i
],"--background")) {

240 
f‹eground
 = 0;

242 if(!
	`°rcmp
(
¨gv
[
i
],"--display")) {

243 
di•œy
 = 1;

245 if(!
	`°rcmp
(
¨gv
[
i
],"--no-display")) {

246 
di•œy
 = 0;

250 if((
hŸkey
 & 
downkey
) == downkey)

251 
	`¥ötf
("warning: hotkey includes decrement keypress!\r\n");

252 if((
hŸkey
 & 
upkey
) == upkey)

253 
	`¥ötf
("warning: hotkey includes increment keypress!\r\n");

255 
pid
 = 
	`°¨t_d´m⁄
(
möimÆ_vÆue
, 
maximÆ_vÆue
, 
°¨t_vÆue
, 
°ï
, 
hŸkey
, 
upkey
, 
downkey
, 
di•œy
, 
f‹eground
, 
dñay
* 1000000);

257 if(
pid
 < 0) {

258 
	`¥ötf
("couldn't start daemon\r\n");

259 
	`exô
(1);

261 if(
pid
 > 0) {

262 
	`¥ötf
("daemon started\r\n");

263 
	`exô
(0);

265 
	}
}

267 
	$∑r£_key_£quí˚
(*
key_£quí˚
) {

268 
hŸkey
 = 0;

269 if(!
	`°rcmp
(
key_£quí˚
,"None"))

271 *
mask
 = 
key_£quí˚
;

272 *
mask
) {

273 *
mask
) {

276 
hŸkey
 |
GP2X_L
;

280 
hŸkey
 |
GP2X_R
;

284 
hŸkey
 |
GP2X_A
;

288 
hŸkey
 |
GP2X_B
;

292 
hŸkey
 |
GP2X_X
;

296 
hŸkey
 |
GP2X_Y
;

299 
hŸkey
 |
GP2X_VOL_DOWN
;

302 
hŸkey
 |
GP2X_VOL_UP
;

306 
hŸkey
 |
GP2X_START
;

309 
hŸkey
 |
GP2X_SELECT
;

312 
hŸkey
 |
GP2X_PUSH
;

317 
	`¥ötf
("unknow¿key %c\r\n",*
mask
);

319 
mask
++;

321  
hŸkey
;

322 
	}
}

324 
	gd´m⁄£âögs
[8];

327 
˛órdi•
();

330 
	$f‹m©key
(* 
ba£
, 
key£q
) {

332 if(!
key£q
)

333 
	`°rˇt
(
ba£
,"None");

335 if(
key£q
 & 
GP2X_L
)

336 
	`°rˇt
(
ba£
,"L");

337 if(
key£q
 & 
GP2X_R
)

338 
	`°rˇt
(
ba£
,"R");

339 if(
key£q
 & 
GP2X_A
)

340 
	`°rˇt
(
ba£
,"A");

341 if(
key£q
 & 
GP2X_B
)

342 
	`°rˇt
(
ba£
,"B");

343 if(
key£q
 & 
GP2X_X
)

344 
	`°rˇt
(
ba£
,"X");

345 if(
key£q
 & 
GP2X_Y
)

346 
	`°rˇt
(
ba£
,"Y");

347 if(
key£q
 & 
GP2X_VOL_DOWN
)

348 
	`°rˇt
(
ba£
,"+");

349 if(
key£q
 & 
GP2X_VOL_UP
)

350 
	`°rˇt
(
ba£
,"-");

351 if(
key£q
 & 
GP2X_START
)

352 
	`°rˇt
(
ba£
,"S");

353 if(
key£q
 & 
GP2X_SELECT
)

354 
	`°rˇt
(
ba£
,"/");

355 if(
key£q
 & 
GP2X_PUSH
)

356 
	`°rˇt
(
ba£
,"@");

357 
	}
}

361 
	#VALID_KEYS
 ((
GP2X_L
Ë| (
GP2X_R
Ë| (
GP2X_X
Ë| (
GP2X_Y
Ë| (
GP2X_A
Ë| (
GP2X_B
Ë| (
GP2X_START
Ë| (
GP2X_SELECT
Ë| (
GP2X_VOL_UP
Ë| (
GP2X_VOL_DOWN
Ë| (
GP2X_PUSH
Ë)

	)

363 
	gru¬ög
;

365 
	$d´m⁄_ôemhñp
(
míuôem
)

367 
míuôem
) {

369 
	`v_putˇd
(26,8,0xffffff,
COLORFONDO
,"Chooseá");

370 
	`v_putˇd
(26,9,0xffffff,
COLORFONDO
,"minimal");

371 
	`v_putˇd
(26,10,0xffffff,
COLORFONDO
,"clockspeed");

372 
	`v_putˇd
(26,11,0xffffff,
COLORFONDO
,"with R/L or");

373 
	`v_putˇd
(26,12,0xffffff,
COLORFONDO
,"Vol UP/Down.");

374 
	`v_putˇd
(26,14,0xffffff,
COLORFONDO
,"Valid speeds");

375 
	`v_putˇd
(26,15,0xffffff,
COLORFONDO
,"are:");

376 
	`v_putˇd
(26,16,0xffffff,
COLORFONDO
,"33Åo 340Mhz");

379 
	`v_putˇd
(26,8,0xffffff,
COLORFONDO
,"Chooseá");

380 
	`v_putˇd
(26,9,0xffffff,
COLORFONDO
,"maximal");

381 
	`v_putˇd
(26,10,0xffffff,
COLORFONDO
,"clockspeed");

382 
	`v_putˇd
(26,11,0xffffff,
COLORFONDO
,"with R/L or");

383 
	`v_putˇd
(26,12,0xffffff,
COLORFONDO
,"Vol UP/Down.");

384 
	`v_putˇd
(26,14,0xffffff,
COLORFONDO
,"Valid speeds");

385 
	`v_putˇd
(26,15,0xffffff,
COLORFONDO
,"are:");

386 
	`v_putˇd
(26,16,0xffffff,
COLORFONDO
,"33Åo 340Mhz");

389 
	`v_putˇd
(26,8,0xffffff,
COLORFONDO
,"Chooseá step");

390 
	`v_putˇd
(26,9,0xffffff,
COLORFONDO
,"width for");

391 
	`v_putˇd
(26,10,0xffffff,
COLORFONDO
,"changingÅhe");

392 
	`v_putˇd
(26,11,0xffffff,
COLORFONDO
,"clockspeed.");

393 
	`v_putˇd
(26,13,0xffffff,
COLORFONDO
,"Use R/L or");

394 
	`v_putˇd
(26,14,0xffffff,
COLORFONDO
,"Vol UP/Down.");

397 
	`v_putˇd
(26,8,0xffffff,
COLORFONDO
,"Chooseá");

398 
	`v_putˇd
(26,9,0xffffff,
COLORFONDO
,"delay between");

399 
	`v_putˇd
(26,10,0xffffff,
COLORFONDO
,"each hotkey");

400 
	`v_putˇd
(26,11,0xffffff,
COLORFONDO
,"check");

401 
	`v_putˇd
(26,13,0xffffff,
COLORFONDO
,"Use R/L or");

402 
	`v_putˇd
(26,14,0xffffff,
COLORFONDO
,"Vol UP/Down.");

405 
	`v_putˇd
(26,8,0xffffff,
COLORFONDO
,"Chooseá");

406 
	`v_putˇd
(26,9,0xffffff,
COLORFONDO
,"hotkey.");

407 
	`v_putˇd
(26,10,0xffffff,
COLORFONDO
,"Add or delete");

408 
	`v_putˇd
(26,11,0xffffff,
COLORFONDO
,"a button by");

409 
	`v_putˇd
(26,12,0xffffff,
COLORFONDO
,"pressing it.");

410 
	`v_putˇd
(26,14,0x0000DD,
COLORFONDO
,"Joystick is");

411 
	`v_putˇd
(26,15,0x0000DD,
COLORFONDO
,"notállowed.");

414 
	`v_putˇd
(26,8,0xffffff,
COLORFONDO
,"Chooseá");

415 
	`v_putˇd
(26,9,0xffffff,
COLORFONDO
,"key for");

416 
	`v_putˇd
(26,10,0xffffff,
COLORFONDO
,"incrementing");

417 
	`v_putˇd
(26,11,0xffffff,
COLORFONDO
,"the clkspeed.");

418 
	`v_putˇd
(26,12,0xffffff,
COLORFONDO
,"Add or delete");

419 
	`v_putˇd
(26,13,0xffffff,
COLORFONDO
,"a button by");

420 
	`v_putˇd
(26,14,0xffffff,
COLORFONDO
,"pressing it.");

421 
	`v_putˇd
(26,16,0x0000DD,
COLORFONDO
,"Joystick is");

422 
	`v_putˇd
(26,17,0x0000DD,
COLORFONDO
,"notállowed.");

425 
	`v_putˇd
(26,8,0xffffff,
COLORFONDO
,"Chooseá");

426 
	`v_putˇd
(26,9,0xffffff,
COLORFONDO
,"key for");

427 
	`v_putˇd
(26,10,0xffffff,
COLORFONDO
,"decrementing");

428 
	`v_putˇd
(26,11,0xffffff,
COLORFONDO
,"the clkspeed.");

429 
	`v_putˇd
(26,12,0xffffff,
COLORFONDO
,"Add or delete");

430 
	`v_putˇd
(26,13,0xffffff,
COLORFONDO
,"a button by");

431 
	`v_putˇd
(26,14,0xffffff,
COLORFONDO
,"pressing it.");

432 
	`v_putˇd
(26,16,0x0000DD,
COLORFONDO
,"Joystick is");

433 
	`v_putˇd
(26,17,0x0000DD,
COLORFONDO
,"notállowed.");

444 
	`v_putˇd
(26,8,0x0000DD,
COLORFONDO
,"COMING SOON");

447 if(
ru¬ög
) {

448 
	`v_putˇd
(26,8,0xffffff,
COLORFONDO
,"Press BÅo");

449 
	`v_putˇd
(26,9,0xffffff,
COLORFONDO
,"killÅhe");

450 
	`v_putˇd
(26,10,0xffffff,
COLORFONDO
,"running");

451 
	`v_putˇd
(26,11,0xffffff,
COLORFONDO
,"daemon");

452 
	`v_putˇd
(26,12,0xffffff,
COLORFONDO
,"process.");

455 
	`v_putˇd
(26,8,0xffffff,
COLORFONDO
,"Press BÅo");

456 
	`v_putˇd
(26,9,0xffffff,
COLORFONDO
,"startÅhe ");

457 
	`v_putˇd
(26,10,0xffffff,
COLORFONDO
,"daemon inÅhe");

458 
	`v_putˇd
(26,11,0xffffff,
COLORFONDO
, "background.");

462 
	}
}

464 
	$d´m⁄míu
() {

466 
míupoöt
 = 0;

467 
ru¬ög
 = !
	`ac˚ss
("/tmp/˝u_d´m⁄.pid",
R_OK
);

470 
gp2x_nKeys
;

473 if(
d´m⁄£âögs
[0] < 33)

474 
d´m⁄£âögs
[0] = 33;

475 if(
d´m⁄£âögs
[1] > 340)

476 
d´m⁄£âögs
[1] = 340;

477 if(
d´m⁄£âögs
[1] < daemonsettings[0])

478 
d´m⁄£âögs
[1] = daemonsettings[0];

479 if(
d´m⁄£âögs
[0] > daemonsettings[1])

480 
d´m⁄£âögs
[0] = daemonsettings[1];

481 if(
d´m⁄£âögs
[2] < 1)

482 
d´m⁄£âögs
[2] = 1;

483 if(
d´m⁄£âögs
[3] < 1)

484 
d´m⁄£âögs
[3] = 1;

488 
d´m⁄£âögs
[7] = 0;

492 
	`˛órdi•
();

493 
	`v_putˇd
(13,2,
WHITE
,
COLORFONDO
,"Daemon Setup");

495 
	`v_putˇd
(2,5,0xffff00,
COLORFONDO
,"CPU Clockspeed:");

497 
	`•rötf
(
ˇd
,"From: %huMhz",
d´m⁄£âögs
[0]);

499 
	`v_putˇd
(2,7,0xffff,
COLORFONDO
,
ˇd
);

500 if(
míupoöt
 == 0)

501 
	`v_putˇd
(2,7,0xffff,
TEXTBACK
,
ˇd
);

503 
	`•rötf
(
ˇd
,"To: %huMhz",
d´m⁄£âögs
[1]);

505 
	`v_putˇd
(2,8,0xffff,
COLORFONDO
,
ˇd
);

506 if(
míupoöt
 == 1)

507 
	`v_putˇd
(2,8,0xffff,
TEXTBACK
,
ˇd
);

509 
	`•rötf
(
ˇd
,"Sãp: %huMhz",
d´m⁄£âögs
[2]);

511 
	`v_putˇd
(2,9,0xffff,
COLORFONDO
,
ˇd
);

512 if(
míupoöt
 == 2)

513 
	`v_putˇd
(2,9,0xffff,
TEXTBACK
,
ˇd
);

516 
	`v_putˇd
(2,11,0xffff00,
COLORFONDO
,"Buttons:");

518 
	`•rötf
(
ˇd
,"Dñay: %0.1f£c",
d´m⁄£âögs
[3]/10.0f);

520 
	`v_putˇd
(2,13,0xffff,
COLORFONDO
,
ˇd
);

521 if(
míupoöt
 == 3)

522 
	`v_putˇd
(2,13,0xffff,
TEXTBACK
,
ˇd
);

524 
	`•rötf
(
ˇd
,"Hotkey: ");

526 
	`f‹m©key
(
ˇd
,
d´m⁄£âögs
[4]);

528 
	`v_putˇd
(2,15,0xffff,
COLORFONDO
,
ˇd
);

529 if(
míupoöt
 == 4)

530 
	`v_putˇd
(2,15,0xffff,
TEXTBACK
,
ˇd
);

533 
	`•rötf
(
ˇd
,"IncrKey: ");

535 
	`f‹m©key
(
ˇd
,
d´m⁄£âögs
[5]);

537 
	`v_putˇd
(2,16,0xffff,
COLORFONDO
,
ˇd
);

538 if(
míupoöt
 == 5)

539 
	`v_putˇd
(2,16,0xffff,
TEXTBACK
,
ˇd
);

541 
	`•rötf
(
ˇd
,"DecrKey: ");

543 
	`f‹m©key
(
ˇd
,
d´m⁄£âögs
[6]);

545 
	`v_putˇd
(2,17,0xffff,
COLORFONDO
,
ˇd
);

546 if(
míupoöt
 == 6)

547 
	`v_putˇd
(2,17,0xffff,
TEXTBACK
,
ˇd
);

549 if(
míupoöt
 >= 4 && menupoint <=6)

550 
	`v_putˇd
(2,26,
WHITE
,
COLORFONDO
,"---------- Stick:UP/DOWN");

552 
	`v_putˇd
(2,19,0xffff00,
COLORFONDO
,"Misc:");

555 
	`v_putˇd
(2,21,0xffff,
COLORFONDO
,(
d´m⁄£âögs
[7] ? "On Screen Display: On" : "On Screen Display: Off"));

556 if(
míupoöt
 == 7)

557 
	`v_putˇd
(2,21,0xffff,
TEXTBACK
,(
d´m⁄£âögs
[7] ? "On Screen Display: On" : "On Screen Display: Off"));

560 
	`v_putˇd
(2,23,0xffff,
COLORFONDO
,(
ru¬ög
 ? "Kill Running Daemon" : "Start Daemon"));

561 if(
míupoöt
 == 8)

562 
	`v_putˇd
(2,23,0xffff,
TEXTBACK
,(
ru¬ög
 ? "Kill Running Daemon" : "Start Daemon"));

566 
	`d´m⁄_ôemhñp
(
míupoöt
);

568 
	`gp2x_video_Êù
();

571 
gp2x_nKeys
=
	`gp2x_joy°ick_ªad
();

575 if((
gp2x_nKeys
 & 
GP2X_DOWN
))

577 
míupoöt
++;

578 if(
míupoöt
>8) menupoint=0;

579 
	`u¶ìp
(200000);

583 if((
gp2x_nKeys
 & 
GP2X_UP
))

585 
míupoöt
--;

586 if(
míupoöt
<0) menupoint=8;

587 
	`u¶ìp
(200000);

591 if((
míupoöt
 >4Ë&& (míupoöà<6Ë&& (
gp2x_nKeys
 & 
VALID_KEYS
))

593 
d´m⁄£âögs
[
míupoöt
] ^(
gp2x_nKeys
 & 
VALID_KEYS
);

594 
	`u¶ìp
(200000);

598 if(
míupoöt
 < 8 &&(
gp2x_nKeys
 & 
GP2X_R
))

600 
d´m⁄£âögs
[
míupoöt
] += 10;

601 
	`u¶ìp
(200000);

605 if(
míupoöt
 < 4 && (
gp2x_nKeys
 & 
GP2X_VOL_UP
))

607 
d´m⁄£âögs
[
míupoöt
] -= 1;

608 
	`u¶ìp
(200000);

612 if(
míupoöt
 < 4 && (
gp2x_nKeys
 & 
GP2X_VOL_DOWN
))

614 
d´m⁄£âögs
[
míupoöt
] += 1;

615 
	`u¶ìp
(200000);

619 if(
míupoöt
 < 8 && (
gp2x_nKeys
 & 
GP2X_L
))

621 
d´m⁄£âögs
[
míupoöt
] -= 10;

622 
	`u¶ìp
(200000);

625 if(
míupoöt
 =8 && (
gp2x_nKeys
 & 
GP2X_B
))

627 if(
ru¬ög
)

628 
	`kûl_ru¬ög_d´m⁄
();

630 
˝u_div
 = 
	`gë_920_Div
();

631 
sys‰eq
=
	`gë_‰eq_920_CLK
();

632 
sys‰eq
*=
˝u_div
+1;

633 
˝u‰eq
=
sys‰eq
/1000000;

635 
	`°¨t_d´m⁄_by_£âögs
();

637 
	`u¶ìp
(200000);

638 
ru¬ög
 = !
	`ac˚ss
("/tmp/˝u_d´m⁄.pid",
R_OK
);

643 if((
gp2x_nKeys
 & 
GP2X_START
))

647 
gp2x_nKeys
=
	`gp2x_joy°ick_ªad
();

648 if(!(
gp2x_nKeys
 & 
GP2X_START
)) ;

651 if(
ru¬ög
) {

652 
	`°¨t_d´m⁄_by_£âögs
();

661 
	}
}

663 
	$°¨t_d´m⁄_by_£âögs
() {

664 
˝u_div
 = 
	`gë_920_Div
();

665 
sys‰eq
=
	`gë_‰eq_920_CLK
();

666 
sys‰eq
*=
˝u_div
+1;

667 
˝u‰eq
=
sys‰eq
/1000000;

669 
	`°¨t_d´m⁄
(
d´m⁄£âögs
[0], d´m⁄£âögs[1], 
˝u‰eq
, daemonsettings[2], daemonsettings[4], daemonsettings[5],

670 
d´m⁄£âögs
[6], daemonsettings[7], 0, daemonsettings[3] * 100000);

671 
	}
}

	@gp2x/daemon.h

1 
°¨t_d´m⁄
(

2 
möimÆ_˝u_•ìd
, 
maximÆ_˝u_•ìd
, 
°¨t_˝u_•ìd
, 
˝u_•ìd_°ï
,

3 
hŸkey
, 
ö¸emítkey
, 
de¸mítkey
,

4 
•ìd_di•œy
, 
f‹eground
,

5 
dñay
);

7 
kûl_ru¬ög_d´m⁄
();

9 
«no_£tup
();

10 
cmd_d´m⁄
(
¨gc
, *
¨gv
[]);

12 
∑r£_key_£quí˚
(*
key_£quí˚
);

14 
d´m⁄míu
();

16 
f‹m©key
(* 
ba£
, 
key£q
);

18 
°¨t_d´m⁄_by_£âögs
();

	@gp2x/display.c

22 
	~<°dio.h
>

23 
	~<sys/mm™.h
>

24 
	~<f˙é.h
>

25 
	~<m©h.h
>

26 
	~<uni°d.h
>

28 
	~"gp2xmöûib.h
"

29 
	~"˝u˘æ.h
"

30 
	#WIDTH
 320

	)

31 
	#HEIGHT
 240

	)

35 
msx
[];

37 
	$CÀ¨S¸ìn
(
vÆ
)

39 
n
;

40 *
c
;

41 
cﬁ
;

42 
c
=&
vÆ
;

43 
cﬁ
=
	`gp2x_video_cﬁ‹15
(
c
[0],c[1],c[2],0);

44 
n
=0;n<320*240;n++)

46 
gp2x_s¸ìn15
[
n
]=
cﬁ
;

48 
	}
}

50 
	$DøwBox
(
vÆ
)

52 
n
;

53 *
c
;

54 
cﬁ
;

55 
c
=&
vÆ
;

56 
cﬁ
=
	`gp2x_video_cﬁ‹15
(
c
[0],c[1],c[2],0);

58 
n
=320*27+2;n<320*28-1;n++)

60 
gp2x_s¸ìn15
[
n
]=
cﬁ
;

61 
gp2x_s¸ìn15
[
n
+320*209]=
cﬁ
;

64 
n
=320*29+4;n<320*30-3;n++)

66 
gp2x_s¸ìn15
[
n
]=
cﬁ
;

67 
gp2x_s¸ìn15
[
n
+320*169]=
cﬁ
;

68 
gp2x_s¸ìn15
[
n
+320*205]=
cﬁ
;

71 
n
=320*28;n<320*237;n=n+320)

73 
gp2x_s¸ìn15
[
n
+2]=
cﬁ
;

74 
gp2x_s¸ìn15
[
n
-2]=
cﬁ
;

77 
n
=320*30;n<320*235;n=n+320)

79 
gp2x_s¸ìn15
[
n
+4]=
cﬁ
;

80 
gp2x_s¸ìn15
[
n
-4]=
cﬁ
;

83 
n
=320*30;n<320*199;n=n+320)

85 
gp2x_s¸ìn15
[
n
-120]=
cﬁ
;

88 
n
=320*55-120;n<320*55-4;n++)

90 
gp2x_s¸ìn15
[
n
]=
cﬁ
;

93 
	}
}

95 
	$v_putch¨
–
x
, 
y
, 
cﬁ‹
, 
ãxtback
, 
ch
)

97 
i
,
j
,
v
;

98 *
f⁄t
;

99 *
c
;

100 
cﬁ
,
cﬁ2
;

101 if(
x
>=
WIDTH
 || 
y
>=
HEIGHT
) ;

102 
c
=&
cﬁ‹
;

103 
cﬁ
=
	`gp2x_video_cﬁ‹15
(
c
[0],c[1],c[2],0);

104 
c
=&
ãxtback
;

105 
cﬁ2
=
	`gp2x_video_cﬁ‹15
(
c
[0],c[1],c[2],0);

106 
v
=(
y
*320*8);

107 
f⁄t
 = &
msx
[ ()
ch
 * 8];

108 
i
=0; i < 8; i++, 
f⁄t
++)

110 
j
=0; j < 8; j++)

112 i‡((*
f⁄t
 & (128 >> 
j
)))

114 
gp2x_s¸ìn15
[
v
+(((
x
<<3)+
j
))]=
cﬁ
;

116 
gp2x_s¸ìn15
[
v
+(((
x
<<3)+
j
))]=
cﬁ2
;

118 
v
+=
WIDTH
;

120 
	}
}

124 
	$v_putˇd
(
x
,
y
,
cﬁ‹
,
ãxtback
,*
ˇd
)

126 
ˇd
[0]!=0Ë{
	`v_putch¨
(
x
,
y
,
cﬁ‹
,
ãxtback
,cad[0]);cad++;x++;}

127 
	}
}

130 
	$gp2x_sound_‰ame
(*
unu£d
, *
°ªam
, 
ßm∂es
)

132 
n
;

133 *
pu
;

134 
pu
=
°ªam
;

135 
n
=0;n<(
ßm∂es
);n++)

137 *
pu
++=0;*pu++=0;

139 
	}
}

	@gp2x/display.h

1 
CÀ¨S¸ìn
(
vÆ
);

2 
DøwBox
(
vÆ
);

3 
v_putch¨
–
x
, 
y
, 
cﬁ‹
, 
ãxtback
, 
ch
);

4 
v_putˇd
(
x
,
y
,
cﬁ‹
,
ãxtback
,*
ˇd
);

5 
gp2x_sound_‰ame
(*
unu£d
, *
°ªam
, 
ßm∂es
);

	@gp2x/font.c

12 
	gmsx
[]=

	@gp2x/gp2x.c

22 
	~<sys/mm™.h
>

23 
	~<sys/io˘l.h
>

24 
	~<sys/soundˇrd.h
>

25 
	~"../comm⁄.h
"

26 
	~"gp2x.h
"

28 
maö_˝u•ìd
(
¨gc
, *
¨gv
[]);

29 
SDL_SurÁ˚
* 
s¸ìn
;

31 
u32
 
	ggp2x_audio_vﬁume
 = 74;

32 
u32
 
	ggp•_gp2x_dev_audio
 = 0;

33 
u32
 
	ggp•_gp2x_dev
 = 0;

35 vﬁ©ûê
u16
 *
	ggp•_gp2x_memªgs
;

36 vﬁ©ûê
u32
 *
	ggp•_gp2x_memªgl
;

38 vﬁ©ûê
u16
 *
	gMEM_REG
;

40 
s32
 
	$gp2x_lﬂd_mmuhack
()

42 
s32
 
mmufd
 = 
	`›í
("/dev/mmuhack", 
O_RDWR
);

44 if(
mmufd
 < 0)

46 
	`sy°em
("/sbin/insmod mmuhack.o");

47 
mmufd
 = 
	`›í
("/dev/mmuhack", 
O_RDWR
);

50 if(
mmufd
 < 0)

53 
	`˛o£
(
mmufd
);

55 
	}
}

57 
	$gp2x_ovî˛ock
()

59 
gp•_gp2x_dev
 = 
	`›í
("/dev/mem", 
O_RDWR
);

60 
gp•_gp2x_dev_audio
 = 
	`›í
("/dev/mixî", 
O_RDWR
);

61 
gp•_gp2x_memªgl
 =

62 (*)
	`mm≠
(0, 0x10000, 
PROT_READ
|
PROT_WRITE
, 
MAP_SHARED
,

63 
gp•_gp2x_dev
, 0xc0000000);

64 
gp•_gp2x_memªgs
 = (*)
gp•_gp2x_memªgl
;

66 
	`˛ór_s¸ìn
(0);

67 
	`maö_˝u•ìd
(0, 
NULL
);

68 
	`gp2x_sound_vﬁume
(1);

69 
	}
}

71 
	$gp2x_quô
()

73 
	`munm≠
((*)
gp•_gp2x_memªgl
, 0x10000);

74 
	`˛o£
(
gp•_gp2x_dev_audio
);

75 
	`˛o£
(
gp•_gp2x_dev
);

76 
	`chdú
("/usr/gp2x");

77 
	`exe˛
("gp2xmíu", "gp2xmíu", 
NULL
);

78 
	}
}

80 
	$gp2x_sound_vﬁume
(
u32
 
vﬁume_up
)

82 
u32
 
vﬁume
;

83 if((
vﬁume_up
 =0Ë&& (
gp2x_audio_vﬁume
 > 0))

84 
gp2x_audio_vﬁume
--;

86 if((
vﬁume_up
 !0Ë&& (
gp2x_audio_vﬁume
 < 100))

87 
gp2x_audio_vﬁume
++;

89 
vﬁume
 = (
gp2x_audio_vﬁume
 * 0x50) / 100;

90 
vﬁume
 = (
gp2x_audio_vﬁume
 << 8) | gp2x_audio_volume;

91 
	`io˘l
(
gp•_gp2x_dev_audio
, 
SOUND_MIXER_WRITE_PCM
, &
vﬁume
);

92 
	}
}

	@gp2x/gp2x.h

1 #i‚de‡
GP2X_H


2 
	#GP2X_H


	)

6 
	mGP2X_UP
 = 1 << 0,

7 
	mGP2X_LEFT
 = 1 << 2,

8 
	mGP2X_DOWN
 = 1 << 4,

9 
	mGP2X_RIGHT
 = 1 << 6,

10 
	mGP2X_START
 = 1 << 8,

11 
	mGP2X_SELECT
 = 1 << 9,

12 
	mGP2X_L
 = 1 << 10,

13 
	mGP2X_R
 = 1 << 11,

14 
	mGP2X_A
 = 1 << 12,

15 
	mGP2X_B
 = 1 << 13,

16 
	mGP2X_X
 = 1 << 14,

17 
	mGP2X_Y
 = 1 << 15,

18 
	mGP2X_VOL_DOWN
 = 1 << 22,

19 
	mGP2X_VOL_UP
 = 1 << 23,

20 
	mGP2X_PUSH
 = 1 << 27

24 
u32
 
gp•_gp2x_dev_audio
;

25 
u32
 
gp•_gp2x_dev
;

26 vﬁ©ûê
u16
 *
gp•_gp2x_memªgs
;

27 vﬁ©ûê
u32
 *
gp•_gp2x_memªgl
;

29 
gp2x_sound_vﬁume
(
u32
 
vﬁume_up
);

30 
gp2x_quô
();

33 
˝u˘æ_öô
();

34 
ßve_sy°em_ªgs
();

35 
˝u˘æ_deöô
();

36 
£t_di•œy_˛ock_div
(
div
);

38 
£t_FCLK
(
u32
 
MHZ
);

40 
£t_920_Div
(
u16
 
div
);

41 
£t_DCLK_Div
(
u16
 
div
);

43 
DißbÀ_940
();

44 
gp2x_video_waô_vsync
();

45 
gë_920_Div
();

46 
£t_940_Div
(
u16
 
div
);

48 
s32
 
gp2x_lﬂd_mmuhack
();

	@gp2x/gp2xminilib.c

26 
	~<°dlib.h
>

27 
	~<°dio.h
>

28 
	~<uni°d.h
>

29 
	~<f˙é.h
>

30 
	~<sys/mm™.h
>

31 
	~<sys/io˘l.h
>

32 
	~<sys/soundˇrd.h
>

33 
	~<löux/fb.h
>

34 
	~<±hªad.h
>

35 
	~"gp2xmöûib.h
"

37 
gp2x_sound_‰ame
(*
bœh
, *
buf„rg
, 
ßm∂es
);

41 
	ggp2x_dev
[4]={0,0,0,0}, 
	ggp2x_physvøm
[4];

42 *
	ggp2x_memªgs
, *
	ggp2x_s¸ìn15
, *
	ggp2x_logvøm15
[2], 
	ggp2x_sound_buf„r
[4+(44100*2)*4];

43 vﬁ©ûê
	ggp2x_∑Àâe
[512][2];

44 *
	ggp2x_s¸ìn8
, *
	ggp2x_logvøm8
[2];

45 
±hªad_t
 
	ggp2x_sound_thªad
=0, 
	ggp2x_sound_thªad_exô
=0;

47 
	$gp2x_video_Êù
()

49 
addªss
=
gp2x_physvøm
[gp2x_physvram[3]];

51 
gp2x_s¸ìn15
=
gp2x_logvøm15
[
gp2x_physvøm
[3]^=1];

52 
gp2x_s¸ìn8
 =
gp2x_logvøm8
 [
gp2x_physvøm
[3] ];

54 
gp2x_memªgs
[0x290E>>1]=()(
addªss
 & 0xffff);

55 
gp2x_memªgs
[0x2910>>1]=()(
addªss
 >> 16);

56 
gp2x_memªgs
[0x2912>>1]=()(
addªss
 & 0xffff);

57 
gp2x_memªgs
[0x2914>>1]=()(
addªss
 >> 16);

58 
	}
}

60 
	$gp2x_video_£çÆëã
()

61 {
i
;

62 
gp2x_memªgs
[0x2958>>1]=0;

63 
i
=0; i<512; i++Ë
gp2x_memªgs
[0x295A>>1]=
gp2x_∑Àâe
[i][0], gp2x_memregs[0x295A>>1]=gp2x_palette[i][1];

64 
	}
}

66 
	$gp2x_joy°ick_ªad
()

68 
vÆue
=(
gp2x_memªgs
[0x1198>>1] & 0x00FF);

70 if(
vÆue
==0xFD) value=0xFA;

71 if(
vÆue
==0xF7) value=0xEB;

72 if(
vÆue
==0xDF) value=0xAF;

73 if(
vÆue
==0x7F) value=0xBE;

75  ~((
gp2x_memªgs
[0x1184>>1] & 0xFF00Ë| 
vÆue
 | (gp2x_memregs[0x1186>>1] << 16));

76 
	}
}

79 *
	$gp2x_sound_∂ay
(*
bœh
)

81 
time•ec
 
ts
;

82 
Êù
=0;

84 
ts
.
tv_£c
=0,Ås.
tv_n£c
=
gp2x_sound_buf„r
[2];

86 ! 
gp2x_sound_thªad_exô
)

88 
	`gp2x_sound_‰ame
(
bœh
, (*)(&
gp2x_sound_buf„r
[4+
Êù
]), gp2x_sound_buffer[0]);

89 
	`wrôe
(
gp2x_dev
[3], (*)(&
gp2x_sound_buf„r
[4+
Êù
]), gp2x_sound_buffer[1]);

91 
Êù
^=
gp2x_sound_buf„r
[1];

96  
NULL
;

97 
	}
}

100 
	$gp2x_deöô
()

101 {
i
;

102 if(
gp2x_sound_thªad
Ë{ 
gp2x_sound_thªad_exô
=1; 
i
=0;i<1000000;i++); }

104 
gp2x_memªgs
[0x28DA>>1]=0x4AB;

105 
gp2x_memªgs
[0x290C>>1]=640;

107 
	`˛o£
(
gp2x_dev
[0]);

108 
	`˛o£
(
gp2x_dev
[1]);

109 
	`˛o£
(
gp2x_dev
[2]);

112 
	}
}

114 
	$gp2x_öô
(
bµ
, 
øã
, 
bôs
, 
°îeo
, 
Hz
)

116 
fb_fix_s¸ìnöfo
 
fixed_öfo
;

118 if(!
gp2x_dev
[0]Ëgp2x_dev[0] = 
	`›í
("/dev/fb0", 
O_RDWR
);

119 if(!
gp2x_dev
[1]Ëgp2x_dev[1] = 
	`›í
("/dev/fb1", 
O_RDWR
);

120 if(!
gp2x_dev
[2]Ëgp2x_dev[2] = 
	`›í
("/dev/mem", 
O_RDWR
);

123 
gp2x_memªgs
=(*)
	`mm≠
(0, 0x10000, 
PROT_READ
|
PROT_WRITE
, 
MAP_SHARED
, 
gp2x_dev
[2], 0xc0000000);

125 if(!
gp2x_sound_thªad
Ë{ 
gp2x_memªgs
[0x0F16>>1] = 0x830a; 
	`¶ìp
(1);

126 
gp2x_memªgs
[0x0F58>>1] = 0x100c; 
	`¶ìp
(1); }

128 
	`io˘l
 (
gp2x_dev
[0], 
FBIOGET_FSCREENINFO
, &
fixed_öfo
);

129 
gp2x_s¸ìn15
=
gp2x_logvøm15
[0]=(*)
	`mm≠
(0, 320*240*2, 
PROT_WRITE
, 
MAP_SHARED
, 
gp2x_dev
[0], 0);

130 
gp2x_s¸ìn8
=
gp2x_logvøm8
[0]=(*)
gp2x_logvøm15
[0];

131 
gp2x_physvøm
[0]=
fixed_öfo
.
smem_°¨t
;

133 
	`io˘l
 (
gp2x_dev
[1], 
FBIOGET_FSCREENINFO
, &
fixed_öfo
);

134 
gp2x_logvøm15
[1]=(*)
	`mm≠
(0, 320*240*2, 
PROT_WRITE
, 
MAP_SHARED
, 
gp2x_dev
[1], 0);

135 
gp2x_logvøm8
[1]=(*)
gp2x_logvøm15
[1];

136 
gp2x_physvøm
[1]=
fixed_öfo
.
smem_°¨t
;

138 
gp2x_memªgs
[0x28DA>>1]=(((
bµ
+1)/8)<<9)|0xAB;

139 
gp2x_memªgs
[0x290C>>1]=320*((
bµ
+1)/8);

141 
	`io˘l
(
gp2x_dev
[3], 
SNDCTL_DSP_SPEED
, &
øã
);

142 
	`io˘l
(
gp2x_dev
[3], 
SNDCTL_DSP_SETFMT
, &
bôs
);

143 
	`io˘l
(
gp2x_dev
[3], 
SNDCTL_DSP_STEREO
, &
°îeo
);

145 
gp2x_sound_buf„r
[1]=(gp2x_sound_buf„r[0]=(
øã
/
Hz
)Ë<< (
°îeo
 + (
bôs
==16));

146 
gp2x_sound_buf„r
[2]=(1000000/
Hz
);

148 if(!
gp2x_sound_thªad
) { gp2x_sound_thread = 1;

149 
	`©exô
(
gp2x_deöô
); }

150 
	}
}

	@gp2x/gp2xminilib.h

27 #i‡!
deföed
(
GP2XMINILIB
)

28 
	#GP2XMINILIB


	)

30 íum { 
	mGP2X_UP
=0x1, 
	mGP2X_LEFT
=0x4, 
	mGP2X_DOWN
=0x10, 
	mGP2X_RIGHT
=0x40,

31 
	mGP2X_START
=1<<8, 
	mGP2X_SELECT
=1<<9, 
	mGP2X_L
=1<<10, 
	mGP2X_R
=1<<11,

32 
	mGP2X_A
=1<<12, 
	mGP2X_B
=1<<13, 
	mGP2X_X
=1<<14, 
	mGP2X_Y
=1<<15,

33 
	mGP2X_VOL_UP
=1<<22, 
	mGP2X_VOL_DOWN
=1<<23, 
	mGP2X_PUSH
=1<<27, };

35 
	#gp2x_video_cﬁ‹15
(
R
,
G
,
B
,
A
Ë(((R&0xF8)<<8)|((G&0xF8)<<3)|((B&0xF8)>>3)|(A<<5))

	)

36 
	#gp2x_video_cﬁ‹8
 (
C
,
R
,
G
,
B
Ë
gp2x_∑Àâe
[C][0]=(G<<8)|B,gp2x_∑Àâe[C][1]=R;

	)

42 *
gp2x_memªgs
, *
gp2x_s¸ìn15
, *
gp2x_logvøm15
[2], 
gp2x_sound_buf„r
[4+(44100*2)*4];

46 
gp2x_dev
[4];

49 
gp2x_video_Êù
();

50 
gp2x_video_£çÆëã
();

51 
gp2x_joy°ick_ªad
();

52 *
gp2x_sound_∂ay
(*
bœh
);

53 
gp2x_deöô
();

54 
gp2x_öô
(
bµ
, 
øã
, 
bôs
, 
°îeo
, 
Hz
);

	@gp2x/load_imm_test.c

1 
	~<°dio.h
>

3 
	tu32
;

5 
u32
 
	$¨m_imm_föd_n⁄zîo
(
u32
 
imm
, u32 
°¨t_bô
)

7 
u32
 
i
;

9 
i
 = 
°¨t_bô
; i < 32; i += 2)

11 if((
imm
 >> 
i
) & 0x03)

15  
i
;

16 
	}
}

18 
u32
 
	$¨m_di£˘_imm_32bô
(
u32
 
imm
, u32 *
°‹es
, u32 *
rŸ©i⁄s
)

20 
u32
 
°‹e_cou¡
 = 0;

21 
u32
 
À·_shi·
 = 0;

25 if(
imm
 == 0)

27 
rŸ©i⁄s
[0] = 0;

28 
°‹es
[0] = 0;

35 
À·_shi·
 = 
	`¨m_imm_föd_n⁄zîo
(
imm
,Üeft_shift);

37 if(
À·_shi·
 == 32)

40  
°‹e_cou¡
;

44 if(
À·_shi·
 >= 24)

51 
u32
 
t›_bôs
 = 32 - 
À·_shi·
;

52 
u32
 
ªsiduÆ_bôs
 = 8 - 
t›_bôs
;

53 
u32
 
ªsiduÆ_mask
 = (1 << 
ªsiduÆ_bôs
) - 1;

55 if((
°‹e_cou¡
 > 1Ë&& (
À·_shi·
 > 24) &&

56 ((
°‹es
[0] << (32 - 
rŸ©i⁄s
[0])Ë< 
ªsiduÆ_mask
))

60 
u32
 
öôül_bôs
 = 
rŸ©i⁄s
[0];

61 
°‹es
[0] = (°‹es[0] << (
t›_bôs
 + (32 - 
rŸ©i⁄s
[0]))) |

62 ((
imm
 >> 
À·_shi·
) & 0xFF);

63 
rŸ©i⁄s
[0] = 
t›_bôs
;

65  
°‹e_cou¡
;

70 
°‹es
[
°‹e_cou¡
] = (
imm
 >> 
À·_shi·
) & 0xFF;

71 
rŸ©i⁄s
[
°‹e_cou¡
] = (32 - 
À·_shi·
) & 0x1F;

72  
°‹e_cou¡
 + 1;

77 
°‹es
[
°‹e_cou¡
] = (
imm
 >> 
À·_shi·
) & 0xFF;

78 
rŸ©i⁄s
[
°‹e_cou¡
] = (32 - 
À·_shi·
) & 0x1F;

80 
°‹e_cou¡
++;

81 
À·_shi·
 += 8;

83 
	}
}

85 
	#r‹
(
vÆue
, 
shi·
Ë\

	)

86 ((
	gvÆue
Ë>> 
	gshi·
) | ((value) << (32 - shift)) \

88 
u32
 
	$¨m_as£mbÀ_imm_32bô
(
u32
 *
°‹es
, u32 *
rŸ©i⁄s
, u32 
°‹e_cou¡
)

90 
u32
 
n
 = 
	`r‹
(
°‹es
[0], 
rŸ©i⁄s
[0]);

91 
u32
 
i
;

92 
	`¥ötf
("%x : %x\n", 
°‹es
[0], 
rŸ©i⁄s
[0]);

94 
i
 = 1; i < 
°‹e_cou¡
; i++)

96 
	`¥ötf
("%x : %x\n", 
°‹es
[
i
], 
rŸ©i⁄s
[i]);

97 
n
 |
	`r‹
(
°‹es
[
i
], 
rŸ©i⁄s
[i]);

100  
n
;

101 
	}
}

104 
	$maö
(
¨gc
, *
¨gv
[])

106 
u32
 
n
 = 0;

107 
u32
 
°‹es
[4];

108 
u32
 
rŸ©i⁄s
[4];

109 
u32
 
°‹e_cou¡
;

110 
u32
 
n2
;

112 if(
¨gc
 != 1)

114 
n
 = 
	`°πoul
(
¨gv
[1], 
NULL
, 16);

115 
°‹e_cou¡
 = 
	`¨m_di£˘_imm_32bô
(
n
, 
°‹es
, 
rŸ©i⁄s
);

116 
n2
 = 
	`¨m_as£mbÀ_imm_32bô
(
°‹es
, 
rŸ©i⁄s
, 
°‹e_cou¡
);

117 
	`¥ötf
("%08x -> %08x (%d st‹es)\n", 
n
, 
n2
, 
°‹e_cou¡
);

123 
°‹e_cou¡
 = 
	`¨m_di£˘_imm_32bô
(
n
, 
°‹es
, 
rŸ©i⁄s
);

124 
n2
 = 
	`¨m_as£mbÀ_imm_32bô
(
°‹es
, 
rŸ©i⁄s
, 
°‹e_cou¡
);

125 if(
n
 !
n2
)

127 
	`¥ötf
("Faûuª: %08x -/-> %08x\n", 
n
, 
n2
);

130 
n
++;

131 } 
n
 != 0);

133 
	`¥ötf
("Done!\n");

135 
	}
}

	@gp2x/speedtest.c

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

23 
	~<f˙é.h
>

24 
	~<m©h.h
>

25 
	~<uni°d.h
>

27 
	~"di•œy.h
"

28 
	~"˝u˘æ.h
"

29 
	~"gp2xmöûib.h
"

31 
	$¥im
()

34 
ˇd
[256];

35 
p
 = 0;

36 
¥imnumbî
;

37 
l
 = 1;

38 
g
 = 0;

39 
i
 = 3;

41 
i
 != 500000)

43 
m
 = 2;

44 
ãmp
 = 
	`sqπ
(
i
);

45 
iÊﬂt
 = ()
i
;

47 if(
ãmp
 == ()temp)

49 
m
 = 
i
;

50 
p
 = 1;

53 
m
 < 
ãmp
)

55 
g
 = 
iÊﬂt
/
m
;

56 i‡(
g
 == ()g)

58 
m
 = 
i
;

59 
p
 = 1;

61 
m
++;

64 i‡(
p
 == 0)

66 
l
 += 1;

67 
¥imnumbî
 = 
i
;

68 
	`•rötf
(
ˇd
,"%u i†¥imnumbî",
i
);

69 
	`v_putˇd
(1,13,0xffffff,0xB00000,
ˇd
);

74 
	`gp2x_video_Êù
();

76 
p
 = 0;

77 
i
++;

79 
	}
}

81 
	$™t
()

83 
i
,
n
;

84 
ˇd
[256];

85 
dúe˘i⁄
 = 0;

86 
cﬁ1
, 
cﬁ2
;

87 
cﬁ1
=
	`gp2x_video_cﬁ‹15
(0,0,0,0);

88 
cﬁ2
=
	`gp2x_video_cﬁ‹15
(0xFF,0xFF,0xFF,0);

89 
™tx
 = 200;

90 
™ty
 = 140;

91 
i
 = 0; i < 9000; i++)

93 
n
 = 0;Ç < 500000;Ç++);

94 if(
gp2x_s¸ìn15
[(320*
™ty
Ë+ 
™tx
]==
cﬁ1
)

96 
n
 = 0;Ç < 3;Ç++)

98 
m
 = 0;

99 
m
 = 0; m < 3; m++)

101 
gp2x_s¸ìn15
[320*(
™ty
+
n
)+
™tx
+
m
] = 
cﬁ2
;

104 
	`•rötf
(
ˇd
,"%u sãp†À· ",8999-
i
);

105 
	`v_putˇd
(1,3,0x000000,0xffffff,
ˇd
);

106 
	`gp2x_video_Êù
();

107 
n
 = 0;Ç < 3;Ç++)

109 
m
 = 0;

110 
m
 = 0; m < 3; m++)

112 
gp2x_s¸ìn15
[320*(
™ty
+
n
)+
™tx
+
m
] = 
cﬁ2
;

115 
	`•rötf
(
ˇd
,"%u sãp†À· ",8999-
i
);

116 
	`v_putˇd
(1,3,0x000000,0xffffff,
ˇd
);

117 
	`gp2x_video_Êù
();

118 if(
dúe˘i⁄
 =0Ë
™tx
-=3;

119 if(
dúe˘i⁄
 =1Ë
™ty
-=3;

120 if(
dúe˘i⁄
 =2Ë
™tx
+=3;

121 if(
dúe˘i⁄
 =3Ë
™ty
+=3;

122 
dúe˘i⁄
--;

123 if(
dúe˘i⁄
 < 0) direction=3;

125 if(
gp2x_s¸ìn15
[(320*
™ty
Ë+ 
™tx
]==
cﬁ2
)

127 
n
 = 0;Ç < 3;Ç++)

129 
m
 = 0;

130 
m
 = 0; m < 3; m++)

132 
gp2x_s¸ìn15
[320*(
™ty
+
n
)+
™tx
+
m
] = 
cﬁ1
;

135 
	`•rötf
(
ˇd
,"%u sãp†À· ",8999-
i
);

136 
	`v_putˇd
(1,3,0x000000,0xffffff,
ˇd
);

137 
	`gp2x_video_Êù
();

138 
n
 = 0;Ç < 3;Ç++)

140 
m
 = 0;

141 
m
 = 0; m < 3; m++)

143 
gp2x_s¸ìn15
[320*(
™ty
+
n
)+
™tx
+
m
] = 
cﬁ1
;

146 
	`•rötf
(
ˇd
,"%u sãp†À· ",8999-
i
);

147 
	`v_putˇd
(1,3,0x000000,0xffffff,
ˇd
);

148 
	`gp2x_video_Êù
();

149 if(
dúe˘i⁄
 =0Ë
™tx
+=3;

150 if(
dúe˘i⁄
 =1Ë
™ty
+=3;

151 if(
dúe˘i⁄
 =2Ë
™tx
-=3;

152 if(
dúe˘i⁄
 =3Ë
™ty
-=3;

153 
dúe˘i⁄
++;

154 if(
dúe˘i⁄
 > 3) direction=0;

157 
	}
}

159 
	$•ìdã°
(
ã°
)

161 
BACKGROUND
;

162 if(
ã°
 =0Ë
BACKGROUND
=0xB00000;

163 if(
ã°
 =1Ë
BACKGROUND
=0xFFFFFF;

164 
°¨t
 = 240;

165 
˝u•ìd
 = 
°¨t
;

166 
ˇd
[256];

167 
FILE
 *
•ìd
;

171 
•ìd
 = 
	`f›í
("/mnt/sd/speed.txt", "w");

172 
	`CÀ¨S¸ìn
(
BACKGROUND
);

173 if(
ã°
 =0Ë
	`v_putˇd
(1,1,0x00ff00,
BACKGROUND
,"Prim-Speedtest");

174 if(
ã°
 =1Ë
	`v_putˇd
(1,1,0x006600,
BACKGROUND
,"Ant-Speedtest");

175 
	`v_putˇd
(1,6,0xffffff,
BACKGROUND
,"Testing Speed");

176 if(
˝u•ìd
 > 
°¨t
)

178 
	`•rötf
(
ˇd
,"%uMhz checked",
˝u•ìd
-5);

179 
	`v_putˇd
(1,9,0xffffff,
BACKGROUND
,
ˇd
);

181 
	`gp2x_video_Êù
();

182 
	`CÀ¨S¸ìn
(
BACKGROUND
);

183 if(
ã°
 =0Ë
	`v_putˇd
(1,1,0x00ff00,
BACKGROUND
,"Prim-Speedtest");

184 if(
ã°
 =1Ë
	`v_putˇd
(1,1,0x006600,
BACKGROUND
,"Ant-Speedtest");

185 
	`v_putˇd
(1,6,0xffffff,
BACKGROUND
,"Testing Speed");

186 if(
˝u•ìd
 > 
°¨t
)

188 
	`•rötf
(
ˇd
,"%uMhz checked",
˝u•ìd
-5);

189 if(
ã°
 =0Ë
	`v_putˇd
(1,9,0xffffff,
BACKGROUND
,
ˇd
);

190 if(
ã°
 =1Ë
	`v_putˇd
(1,9,0x000000,
BACKGROUND
,
ˇd
);

192 
	`gp2x_video_Êù
();

193 
	`Ârötf
 (
•ìd
,"£àCPU-Fªquícy = %uMHz\r\n",
˝u•ìd
);

194 
	`£t_FCLK
(
˝u•ìd
);

196 if(
ã°
 =0Ë
	`¥im
();

197 if(
ã°
 =1Ë
	`™t
();

199 
	`Ârötf
(
•ìd
,"%uMhz checked\n\n", 
˝u•ìd
);

200 
˝u•ìd
 = cpuspeed + 5;

201 
	`f˛o£
(
•ìd
);

202 
	`exe˛
("sync",
NULL
);

205 
	}
}

	@gp2x/speedtest.h

1 
¥im
();

2 
™t
();

3 
•ìdã°
(
ã°
);

	@gui.c

19 #i‚de‡
_WIN32_WCE


21 
	~<sys/°©.h
>

22 
	~<uni°d.h
>

23 
	~<˘y≥.h
>

24 
	~<dúít.h
>

28 
	~"comm⁄.h
"

29 
	~"f⁄t.h
"

31 
	#MAX_PATH
 1024

	)

35 #ifde‡
GP2X_BUILD


37 
	#FILE_LIST_ROWS
 (()((
SDL_SCREEN_HEIGHT
 - 40Ë/ 
FONT_HEIGHT
))

	)

38 
	#FILE_LIST_POSITION
 5

	)

39 
	#DIR_LIST_POSITION
 260

	)

43 
	#FILE_LIST_ROWS
 25

	)

44 
	#FILE_LIST_POSITION
 5

	)

45 
	#DIR_LIST_POSITION
 360

	)

49 #ifde‡
PSP_BUILD


51 
	#cﬁ‹16
(
ªd
, 
gªí
, 
blue
) \

52 (
blue
 << 11Ë| (
gªí
 << 5Ë| 
ªd
 \

53 

	)

56 
	#cﬁ‹16
(
ªd
, 
gªí
, 
blue
) \

57 (
ªd
 << 11Ë| (
gªí
 << 5Ë| 
blue
 \

58 

	)

61 #ifde‡
GP2X_BUILD


63 
	#COLOR_BG
 
	`cﬁ‹16
(0, 0, 0)

	)

67 
	#COLOR_BG
 
	`cﬁ‹16
(2, 8, 10)

	)

71 
	#COLOR_ROM_INFO
 
	`cﬁ‹16
(22, 36, 26)

	)

72 
	#COLOR_ACTIVE_ITEM
 
	`cﬁ‹16
(31, 63, 31)

	)

73 
	#COLOR_INACTIVE_ITEM
 
	`cﬁ‹16
(13, 40, 18)

	)

74 
	#COLOR_FRAMESKIP_BAR
 
	`cﬁ‹16
(15, 31, 31)

	)

75 
	#COLOR_HELP_TEXT
 
	`cﬁ‹16
(16, 40, 24)

	)

77 
	$s‹t_fun˘i⁄
(c⁄° *
de°_°r_±r
, c⁄° *
§c_°r_±r
)

79 *
de°_°r
 = *((**)
de°_°r_±r
);

80 *
§c_°r
 = *((**)
§c_°r_±r
);

82 if(
§c_°r
[0] == '.')

85 if(
de°_°r
[0] == '.')

88  
	`°rˇ£cmp
(
de°_°r
, 
§c_°r
);

89 
	}
}

91 
s32
 
	$lﬂd_fûe
(
u8
 **
wûdˇrds
, u8 *
ªsu…
)

93 
DIR
 *
cuºít_dú
;

94 
dúít
 *
cuºít_fûe
;

95 
°©
 
fûe_öfo
;

96 
u8
 
cuºít_dú_«me
[
MAX_PATH
];

97 
u8
 
cuºít_dú_sh‹t
[81];

98 
u32
 
cuºít_dú_Àngth
;

99 
u32
 
tŸÆ_fûíames_Æloˇãd
;

100 
u32
 
tŸÆ_dú«mes_Æloˇãd
;

101 
u8
 **
fûe_li°
;

102 
u8
 **
dú_li°
;

103 
u32
 
num_fûes
;

104 
u32
 
num_dús
;

105 
u8
 *
fûe_«me
;

106 
u32
 
fûe_«me_Àngth
;

107 
u32
 
ext_pos
 = -1;

108 
u32
 
cho£n_fûe
, 
cho£n_dú
;

109 
u32
 
dülog_ªsu…
 = 1;

110 
s32
 
ªtu∫_vÆue
 = 1;

111 
u32
 
cuºít_fûe_£À˘i⁄
;

112 
u32
 
cuºít_fûe_s¸ﬁl_vÆue
;

113 
u32
 
cuºít_dú_£À˘i⁄
;

114 
u32
 
cuºít_dú_s¸ﬁl_vÆue
;

115 
u32
 
cuºít_fûe_ö_s¸ﬁl
;

116 
u32
 
cuºít_dú_ö_s¸ﬁl
;

117 
u32
 
cuºít_fûe_numbî
, 
cuºít_dú_numbî
;

118 
u32
 
cuºít_cﬁumn
 = 0;

119 
u32
 
ª≥©
;

120 
u32
 
i
;

121 
gui_a˘i⁄_ty≥
 
gui_a˘i⁄
;

123 
ªtu∫_vÆue
 == 1)

125 
cuºít_fûe_£À˘i⁄
 = 0;

126 
cuºít_fûe_s¸ﬁl_vÆue
 = 0;

127 
cuºít_dú_£À˘i⁄
 = 0;

128 
cuºít_dú_s¸ﬁl_vÆue
 = 0;

129 
cuºít_fûe_ö_s¸ﬁl
 = 0;

130 
cuºít_dú_ö_s¸ﬁl
 = 0;

132 
tŸÆ_fûíames_Æloˇãd
 = 32;

133 
tŸÆ_dú«mes_Æloˇãd
 = 32;

134 
fûe_li°
 = (
u8
 **)
	`mÆloc
((u8 *) * 32);

135 
dú_li°
 = (
u8
 **)
	`mÆloc
((u8 *) * 32);

136 
	`mem£t
(
fûe_li°
, 0, (
u8
 *) * 32);

137 
	`mem£t
(
dú_li°
, 0, (
u8
 *) * 32);

139 
num_fûes
 = 0;

140 
num_dús
 = 0;

141 
cho£n_fûe
 = 0;

142 
cho£n_dú
 = 0;

144 
	`gëcwd
(
cuºít_dú_«me
, 
MAX_PATH
);

146 
cuºít_dú
 = 
	`›ídú
(
cuºít_dú_«me
);

150 if(
cuºít_dú
)

151 
cuºít_fûe
 = 
	`ªaddú
(
cuºít_dú
);

153 
cuºít_fûe
 = 
NULL
;

155 if(
cuºít_fûe
)

157 
fûe_«me
 = 
cuºít_fûe
->
d_«me
;

158 
fûe_«me_Àngth
 = 
	`°æí
(
fûe_«me
);

160 if((
	`°©
(
fûe_«me
, &
fûe_öfo
) >= 0) &&

161 ((
fûe_«me
[0] != '.') || (file_name[1] == '.')))

163 if(
	`S_ISDIR
(
fûe_öfo
.
°_mode
))

165 
dú_li°
[
num_dús
] =

166 (
u8
 *)
	`mÆloc
(
fûe_«me_Àngth
 + 1);

168 
	`•rötf
(
dú_li°
[
num_dús
], "%s", 
fûe_«me
);

170 
num_dús
++;

175 if(
fûe_«me_Àngth
 >= 4)

177 if(
fûe_«me
[
fûe_«me_Àngth
 - 4] == '.')

178 
ext_pos
 = 
fûe_«me_Àngth
 - 4;

181 if(
fûe_«me
[
fûe_«me_Àngth
 - 3] == '.')

182 
ext_pos
 = 
fûe_«me_Àngth
 - 3;

185 
ext_pos
 = 0;

187 
i
 = 0; 
wûdˇrds
[i] !
NULL
; i++)

189 if(!
	`°rˇ£cmp
((
fûe_«me
 + 
ext_pos
),

190 
wûdˇrds
[
i
]))

192 
fûe_li°
[
num_fûes
] =

193 (
u8
 *)
	`mÆloc
(
fûe_«me_Àngth
 + 1);

195 
	`•rötf
(
fûe_li°
[
num_fûes
], "%s", 
fûe_«me
);

197 
num_fûes
++;

205 if(
num_fûes
 =
tŸÆ_fûíames_Æloˇãd
)

207 
fûe_li°
 = (
u8
 **)
	`ªÆloc
(file_list, (u8 *) *

208 
tŸÆ_fûíames_Æloˇãd
 * 2);

209 
	`mem£t
(
fûe_li°
 + 
tŸÆ_fûíames_Æloˇãd
, 0,

210 (
u8
 *Ë* 
tŸÆ_fûíames_Æloˇãd
);

211 
tŸÆ_fûíames_Æloˇãd
 *= 2;

214 if(
num_dús
 =
tŸÆ_dú«mes_Æloˇãd
)

216 
dú_li°
 = (
u8
 **)
	`ªÆloc
(dir_list, (u8 *) *

217 
tŸÆ_dú«mes_Æloˇãd
 * 2);

218 
	`mem£t
(
dú_li°
 + 
tŸÆ_dú«mes_Æloˇãd
, 0,

219 (
u8
 *Ë* 
tŸÆ_dú«mes_Æloˇãd
);

220 
tŸÆ_dú«mes_Æloˇãd
 *= 2;

223 } 
cuºít_fûe
);

225 
	`qs‹t
((*)
fûe_li°
, 
num_fûes
, (
u8
 *), 
s‹t_fun˘i⁄
);

226 
	`qs‹t
((*)
dú_li°
, 
num_dús
, (
u8
 *), 
s‹t_fun˘i⁄
);

228 
	`˛o£dú
(
cuºít_dú
);

230 
cuºít_dú_Àngth
 = 
	`°æí
(
cuºít_dú_«me
);

232 if(
cuºít_dú_Àngth
 > 80)

235 #ifde‡
GP2X_BUILD


236 
	`¢¥ötf
(
cuºít_dú_sh‹t
, 80,

237 "...%s", 
cuºít_dú_«me
 + 
cuºít_dú_Àngth
 - 77);

239 
	`mem˝y
(
cuºít_dú_sh‹t
, "...", 3);

240 
	`mem˝y
(
cuºít_dú_sh‹t
 + 3,

241 
cuºít_dú_«me
 + 
cuºít_dú_Àngth
 - 77, 77);

242 
cuºít_dú_sh‹t
[80] = 0;

247 #ifde‡
GP2X_BUILD


248 
	`¢¥ötf
(
cuºít_dú_sh‹t
, 80, "%s", 
cuºít_dú_«me
);

250 
	`mem˝y
(
cuºít_dú_sh‹t
, 
cuºít_dú_«me
,

251 
cuºít_dú_Àngth
 + 1);

255 
ª≥©
 = 1;

257 if(
num_fûes
 == 0)

258 
cuºít_cﬁumn
 = 1;

260 
	`˛ór_s¸ìn
(
COLOR_BG
);

262 
u8
 
¥öt_buf„r
[81];

264 
ª≥©
)

266 
	`Êù_s¸ìn
();

268 
	`¥öt_°rög
(
cuºít_dú_sh‹t
, 
COLOR_ACTIVE_ITEM
, 
COLOR_BG
, 0, 0);

269 #ifde‡
GP2X_BUILD


270 
	`¥öt_°rög
("Press XÅoÑeturnÅoÅhe main menu.",

271 
COLOR_HELP_TEXT
, 
COLOR_BG
, 20, 220);

273 
	`¥öt_°rög
("Press XÅoÑeturnÅoÅhe main menu.",

274 
COLOR_HELP_TEXT
, 
COLOR_BG
, 20, 260);

277 
i
 = 0, 
cuºít_fûe_numbî
 = i + 
cuºít_fûe_s¸ﬁl_vÆue
;

278 
i
 < 
FILE_LIST_ROWS
; i++, 
cuºít_fûe_numbî
++)

280 if(
cuºít_fûe_numbî
 < 
num_fûes
)

282 if((
cuºít_fûe_numbî
 =
cuºít_fûe_£À˘i⁄
) &&

283 (
cuºít_cﬁumn
 == 0))

285 
	`¥öt_°rög
(
fûe_li°
[
cuºít_fûe_numbî
], 
COLOR_ACTIVE_ITEM
,

286 
COLOR_BG
, 
FILE_LIST_POSITION
, ((
i
 + 1) * 10));

290 
	`¥öt_°rög
(
fûe_li°
[
cuºít_fûe_numbî
], 
COLOR_INACTIVE_ITEM
,

291 
COLOR_BG
, 
FILE_LIST_POSITION
, ((
i
 + 1) * 10));

296 
i
 = 0, 
cuºít_dú_numbî
 = i + 
cuºít_dú_s¸ﬁl_vÆue
;

297 
i
 < 
FILE_LIST_ROWS
; i++, 
cuºít_dú_numbî
++)

299 if(
cuºít_dú_numbî
 < 
num_dús
)

301 if((
cuºít_dú_numbî
 =
cuºít_dú_£À˘i⁄
) &&

302 (
cuºít_cﬁumn
 == 1))

304 
	`¥öt_°rög
(
dú_li°
[
cuºít_dú_numbî
], 
COLOR_ACTIVE_ITEM
,

305 
COLOR_BG
, 
DIR_LIST_POSITION
, ((
i
 + 1) * 10));

309 
	`¥öt_°rög
(
dú_li°
[
cuºít_dú_numbî
], 
COLOR_INACTIVE_ITEM
,

310 
COLOR_BG
, 
DIR_LIST_POSITION
, ((
i
 + 1) * 10));

315 
gui_a˘i⁄
 = 
	`gë_gui_öput
();

317 
gui_a˘i⁄
)

319 
CURSOR_DOWN
:

320 if(
cuºít_cﬁumn
 == 0)

322 if(
cuºít_fûe_£À˘i⁄
 < (
num_fûes
 - 1))

324 
cuºít_fûe_£À˘i⁄
++;

325 if(
cuºít_fûe_ö_s¸ﬁl
 =(
FILE_LIST_ROWS
 - 1))

327 
	`˛ór_s¸ìn
(
COLOR_BG
);

328 
cuºít_fûe_s¸ﬁl_vÆue
++;

332 
cuºít_fûe_ö_s¸ﬁl
++;

338 if(
cuºít_dú_£À˘i⁄
 < (
num_dús
 - 1))

340 
cuºít_dú_£À˘i⁄
++;

341 if(
cuºít_dú_ö_s¸ﬁl
 =(
FILE_LIST_ROWS
 - 1))

343 
	`˛ór_s¸ìn
(
COLOR_BG
);

344 
cuºít_dú_s¸ﬁl_vÆue
++;

348 
cuºít_dú_ö_s¸ﬁl
++;

355 
CURSOR_UP
:

356 if(
cuºít_cﬁumn
 == 0)

358 if(
cuºít_fûe_£À˘i⁄
)

360 
cuºít_fûe_£À˘i⁄
--;

361 if(
cuºít_fûe_ö_s¸ﬁl
 == 0)

363 
	`˛ór_s¸ìn
(
COLOR_BG
);

364 
cuºít_fûe_s¸ﬁl_vÆue
--;

368 
cuºít_fûe_ö_s¸ﬁl
--;

374 if(
cuºít_dú_£À˘i⁄
)

376 
cuºít_dú_£À˘i⁄
--;

377 if(
cuºít_dú_ö_s¸ﬁl
 == 0)

379 
	`˛ór_s¸ìn
(
COLOR_BG
);

380 
cuºít_dú_s¸ﬁl_vÆue
--;

384 
cuºít_dú_ö_s¸ﬁl
--;

390 
CURSOR_RIGHT
:

391 if(
cuºít_cﬁumn
 == 0)

393 if(
num_dús
 != 0)

394 
cuºít_cﬁumn
 = 1;

398 
CURSOR_LEFT
:

399 if(
cuºít_cﬁumn
 == 1)

401 if(
num_fûes
 != 0)

402 
cuºít_cﬁumn
 = 0;

406 
CURSOR_SELECT
:

407 if(
cuºít_cﬁumn
 == 1)

409 
ª≥©
 = 0;

410 
	`chdú
(
dú_li°
[
cuºít_dú_£À˘i⁄
]);

414 if(
num_fûes
 != 0)

416 
ª≥©
 = 0;

417 
ªtu∫_vÆue
 = 0;

418 
	`°r˝y
(
ªsu…
, 
fûe_li°
[
cuºít_fûe_£À˘i⁄
]);

423 
CURSOR_BACK
:

424 #ifde‡
PSP_BUILD


425 if(!
	`°rcmp
(
cuºít_dú_«me
, "ms0:/PSP"))

428 
ª≥©
 = 0;

429 
	`chdú
("..");

432 
CURSOR_EXIT
:

433 
ªtu∫_vÆue
 = -1;

434 
ª≥©
 = 0;

440 
i
 = 0; i < 
num_fûes
; i++)

442 
	`‰ì
(
fûe_li°
[
i
]);

444 
	`‰ì
(
fûe_li°
);

446 
i
 = 0; i < 
num_dús
; i++)

448 
	`‰ì
(
dú_li°
[
i
]);

450 
	`‰ì
(
dú_li°
);

453 
	`˛ór_s¸ìn
(
COLOR_BG
);

455  
ªtu∫_vÆue
;

456 
	}
}

460 
	mNUMBER_SELECTION_OPTION
 = 0x01,

461 
	mSTRING_SELECTION_OPTION
 = 0x02,

462 
	mSUBMENU_OPTION
 = 0x04,

463 
	mACTION_OPTION
 = 0x08

464 } 
	tmíu_›ti⁄_ty≥_íum
;

466 
	s_míu_ty≥


468 (* 
	möô_fun˘i⁄
)();

469 (* 
	m∑ssive_fun˘i⁄
)();

470 
_míu_›ti⁄_ty≥
 *
	m›ti⁄s
;

471 
u32
 
	mnum_›ti⁄s
;

474 
	s_míu_›ti⁄_ty≥


476 (* 
	ma˘i⁄_fun˘i⁄
)();

477 (* 
	m∑ssive_fun˘i⁄
)();

478 
_míu_ty≥
 *
	msub_míu
;

479 *
	mdi•œy_°rög
;

480 *
	m›ti⁄s
;

481 
u32
 *
	mcuºít_›ti⁄
;

482 
u32
 
	mnum_›ti⁄s
;

483 *
	mhñp_°rög
;

484 
u32
 
	mlöe_numbî
;

485 
míu_›ti⁄_ty≥_íum
 
	m›ti⁄_ty≥
;

488 
_míu_›ti⁄_ty≥
 
	tmíu_›ti⁄_ty≥
;

489 
_míu_ty≥
 
	tmíu_ty≥
;

491 
	#make_míu
(
«me
, 
öô_fun˘i⁄
, 
∑ssive_fun˘i⁄
) \

492 
míu_ty≥
 
«me
##
_míu
 = \

494 
öô_fun˘i⁄
, \

495 
∑ssive_fun˘i⁄
, \

496 
«me
##
_›ti⁄s
, \

497 (
«me
##
_›ti⁄s
Ë/ (
míu_›ti⁄_ty≥
) \

499 

	)

500 
	#gamïad_c⁄fig_›ti⁄
(
di•œy_°rög
, 
numbî
) \

502 
NULL
, \

503 
míu_fix_gamïad_hñp
, \

504 
NULL
, \

505 
di•œy_°rög
 ": %s", \

506 
gamïad_c⁄fig_buâ⁄s
, \

507 
gamïad_c⁄fig_m≠
 + 
gamïad_c⁄fig_löe_to_buâ⁄
[
numbî
], \

508 (
gamïad_c⁄fig_buâ⁄s
) / (gamepad_config_buttons[0]), \

509 
gamïad_hñp
[
gamïad_c⁄fig_m≠
[ \

510 
gamïad_c⁄fig_löe_to_buâ⁄
[
numbî
]]], \

511 
numbî
, \

512 
STRING_SELECTION_OPTION
 \

514 

	)

515 
	#™Æog_c⁄fig_›ti⁄
(
di•œy_°rög
, 
numbî
) \

517 
NULL
, \

518 
míu_fix_gamïad_hñp
, \

519 
NULL
, \

520 
di•œy_°rög
 ": %s", \

521 
gamïad_c⁄fig_buâ⁄s
, \

522 
gamïad_c⁄fig_m≠
 + 
numbî
 + 12, \

523 (
gamïad_c⁄fig_buâ⁄s
) / (gamepad_config_buttons[0]), \

524 
gamïad_hñp
[
gamïad_c⁄fig_m≠
[
numbî
 + 12]], \

525 
numbî
 + 2, \

526 
STRING_SELECTION_OPTION
 \

528 

	)

529 
	#chót_›ti⁄
(
numbî
) \

531 
NULL
, \

532 
NULL
, \

533 
NULL
, \

534 
chót_f‹m©_°r
[
numbî
], \

535 
íabÀ_dißbÀ_›ti⁄s
, \

536 &(
chóts
[
numbî
].
chót_a˘ive
), \

539 
numbî
, \

540 
STRING_SELECTION_OPTION
 \

542 

	)

543 
	#a˘i⁄_›ti⁄
(
a˘i⁄_fun˘i⁄
, 
∑ssive_fun˘i⁄
, 
di•œy_°rög
, \

544 
hñp_°rög
, 
löe_numbî
) \

546 
a˘i⁄_fun˘i⁄
, \

547 
∑ssive_fun˘i⁄
, \

548 
NULL
, \

549 
di•œy_°rög
, \

550 
NULL
, \

551 
NULL
, \

553 
hñp_°rög
, \

554 
löe_numbî
, \

555 
ACTION_OPTION
 \

557 

	)

558 
	#submíu_›ti⁄
(
sub_míu
, 
di•œy_°rög
, 
hñp_°rög
, 
löe_numbî
) \

560 
NULL
, \

561 
NULL
, \

562 
sub_míu
, \

563 
di•œy_°rög
, \

564 
NULL
, \

565 
NULL
, \

566 (
sub_míu
Ë/ (
míu_›ti⁄_ty≥
), \

567 
hñp_°rög
, \

568 
löe_numbî
, \

569 
SUBMENU_OPTION
 \

571 

	)

572 
	#£À˘i⁄_›ti⁄
(
∑ssive_fun˘i⁄
, 
di•œy_°rög
, 
›ti⁄s
, \

573 
›ti⁄_±r
, 
num_›ti⁄s
, 
hñp_°rög
, 
löe_numbî
, 
ty≥
) \

575 
NULL
, \

576 
∑ssive_fun˘i⁄
, \

577 
NULL
, \

578 
di•œy_°rög
, \

579 
›ti⁄s
, \

580 
›ti⁄_±r
, \

581 
num_›ti⁄s
, \

582 
hñp_°rög
, \

583 
löe_numbî
, \

584 
ty≥
 \

586 

	)

587 
	#a˘i⁄_£À˘i⁄_›ti⁄
(
a˘i⁄_fun˘i⁄
, 
∑ssive_fun˘i⁄
, \

588 
di•œy_°rög
, 
›ti⁄s
, 
›ti⁄_±r
, 
num_›ti⁄s
, 
hñp_°rög
, 
löe_numbî
, \

589 
ty≥
) \

591 
a˘i⁄_fun˘i⁄
, \

592 
∑ssive_fun˘i⁄
, \

593 
NULL
, \

594 
di•œy_°rög
, \

595 
›ti⁄s
, \

596 
›ti⁄_±r
, \

597 
num_›ti⁄s
, \

598 
hñp_°rög
, \

599 
löe_numbî
, \

600 
ty≥
 | 
ACTION_OPTION
 \

602 

	)

604 
	#°rög_£À˘i⁄_›ti⁄
(
∑ssive_fun˘i⁄
, 
di•œy_°rög
, 
›ti⁄s
, \

605 
›ti⁄_±r
, 
num_›ti⁄s
, 
hñp_°rög
, 
löe_numbî
) \

606 
	`£À˘i⁄_›ti⁄
(
∑ssive_fun˘i⁄
, 
di•œy_°rög
 ": %s", 
›ti⁄s
, \

607 
›ti⁄_±r
, 
num_›ti⁄s
, 
hñp_°rög
, 
löe_numbî
, 
STRING_SELECTION_OPTION
)\

608 

	)

609 
	#numîic_£À˘i⁄_›ti⁄
(
∑ssive_fun˘i⁄
, 
di•œy_°rög
, \

610 
›ti⁄_±r
, 
num_›ti⁄s
, 
hñp_°rög
, 
löe_numbî
) \

611 
	`£À˘i⁄_›ti⁄
(
∑ssive_fun˘i⁄
, 
di•œy_°rög
 ": %d", 
NULL
, 
›ti⁄_±r
, \

612 
num_›ti⁄s
, 
hñp_°rög
, 
löe_numbî
, 
NUMBER_SELECTION_OPTION
) \

613 

	)

614 
	#°rög_£À˘i⁄_a˘i⁄_›ti⁄
(
a˘i⁄_fun˘i⁄
, 
∑ssive_fun˘i⁄
, \

615 
di•œy_°rög
, 
›ti⁄s
, 
›ti⁄_±r
, 
num_›ti⁄s
, 
hñp_°rög
, 
löe_numbî
) \

616 
	`a˘i⁄_£À˘i⁄_›ti⁄
(
a˘i⁄_fun˘i⁄
, 
∑ssive_fun˘i⁄
, \

617 
di•œy_°rög
 ": %s", 
›ti⁄s
, 
›ti⁄_±r
, 
num_›ti⁄s
, 
hñp_°rög
, \

618 
löe_numbî
, 
STRING_SELECTION_OPTION
) \

619 

	)

620 
	#numîic_£À˘i⁄_a˘i⁄_›ti⁄
(
a˘i⁄_fun˘i⁄
, 
∑ssive_fun˘i⁄
, \

621 
di•œy_°rög
, 
›ti⁄_±r
, 
num_›ti⁄s
, 
hñp_°rög
, 
löe_numbî
) \

622 
	`a˘i⁄_£À˘i⁄_›ti⁄
(
a˘i⁄_fun˘i⁄
, 
∑ssive_fun˘i⁄
, \

623 
di•œy_°rög
 ": %d", 
NULL
, 
›ti⁄_±r
, 
num_›ti⁄s
, 
hñp_°rög
, \

624 
löe_numbî
, 
NUMBER_SELECTION_OPTION
) \

625 

	)

626 
	#numîic_£À˘i⁄_a˘i⁄_hide_›ti⁄
(
a˘i⁄_fun˘i⁄
, \

627 
∑ssive_fun˘i⁄
, 
di•œy_°rög
, 
›ti⁄_±r
, 
num_›ti⁄s
, 
hñp_°rög
, \

628 
löe_numbî
) \

629 
	`a˘i⁄_£À˘i⁄_›ti⁄
(
a˘i⁄_fun˘i⁄
, 
∑ssive_fun˘i⁄
, \

630 
di•œy_°rög
, 
NULL
, 
›ti⁄_±r
, 
num_›ti⁄s
, 
hñp_°rög
, \

631 
löe_numbî
, 
NUMBER_SELECTION_OPTION
) \

632 

	)

634 
	#GAMEPAD_MENU_WIDTH
 15

	)

636 #ifde‡
PSP_BUILD


638 
u32
 
	ggamïad_c⁄fig_löe_to_buâ⁄
[] =

643 #ifde‡
GP2X_BUILD


645 
u32
 
	ggamïad_c⁄fig_löe_to_buâ⁄
[] =

651 
s32
 
	$lﬂd_game_c⁄fig_fûe
()

653 
u8
 
game_c⁄fig_fûíame
[512];

654 
u32
 
fûe_lﬂded
 = 0;

655 
u32
 
i
;

656 
	`ch™ge_ext
(
gamïak_fûíame
, 
game_c⁄fig_fûíame
, ".cfg");

658 
	`fûe_›í
(
game_c⁄fig_fûe
, 
game_c⁄fig_fûíame
, 
ªad
);

660 if(
	`fûe_check_vÆid
(
game_c⁄fig_fûe
))

662 
u32
 
fûe_size
 = 
	`fûe_Àngth
(
game_c⁄fig_fûíame
, 
game_c⁄fig_fûe
);

665 if(
fûe_size
 == 56)

667 
u32
 
fûe_›ti⁄s
[
fûe_size
 / 4];

669 
	`fûe_ªad_¨øy
(
game_c⁄fig_fûe
, 
fûe_›ti⁄s
);

670 
cuºít_‰ameskù_ty≥
 = 
fûe_›ti⁄s
[0] % 3;

671 
‰ameskù_vÆue
 = 
fûe_›ti⁄s
[1];

672 
øndom_skù
 = 
fûe_›ti⁄s
[2] % 2;

673 
˛ock_•ìd
 = 
fûe_›ti⁄s
[3];

675 if(
˛ock_•ìd
 > 333)

676 
˛ock_•ìd
 = 333;

678 if(
˛ock_•ìd
 < 33)

679 
˛ock_•ìd
 = 33;

681 if(
‰ameskù_vÆue
 < 0)

682 
‰ameskù_vÆue
 = 0;

684 if(
‰ameskù_vÆue
 > 99)

685 
‰ameskù_vÆue
 = 99;

687 
i
 = 0; i < 10; i++)

689 
chóts
[
i
].
chót_a˘ive
 = 
fûe_›ti⁄s
[3 + i] % 2;

690 
chóts
[
i
].
chót_«me
[0] = 0;

693 
	`fûe_˛o£
(
game_c⁄fig_fûe
);

694 
fûe_lﬂded
 = 1;

698 if(
fûe_lﬂded
)

701 
cuºít_‰ameskù_ty≥
 = 
auto_‰ameskù
;

702 
‰ameskù_vÆue
 = 4;

703 
øndom_skù
 = 0;

704 
˛ock_•ìd
 = 333;

706 
i
 = 0; i < 10; i++)

708 
chóts
[
i
].
chót_a˘ive
 = 0;

709 
chóts
[
i
].
chót_«me
[0] = 0;

713 
	}
}

715 
s32
 
	$lﬂd_c⁄fig_fûe
()

717 
u8
 
c⁄fig_∑th
[512];

719 #i‡(
	`deföed
(
PSP_BUILD
Ë|| deföed(
ARM_ARCH
)Ë&& !deföed(
_WIN32_WCE
)

720 
	`•rötf
(
c⁄fig_∑th
, "%s/%s", 
maö_∑th
, 
GPSP_CONFIG_FILENAME
);

722 
	`•rötf
(
c⁄fig_∑th
, "%s\\%s", 
maö_∑th
, 
GPSP_CONFIG_FILENAME
);

725 
	`fûe_›í
(
c⁄fig_fûe
, 
c⁄fig_∑th
, 
ªad
);

727 if(
	`fûe_check_vÆid
(
c⁄fig_fûe
))

729 
u32
 
fûe_size
 = 
	`fûe_Àngth
(
c⁄fig_∑th
, 
c⁄fig_fûe
);

732 if(
fûe_size
 == 92)

734 
u32
 
fûe_›ti⁄s
[
fûe_size
 / 4];

735 
u32
 
i
;

736 
s32
 
míu_buâ⁄
 = -1;

737 
	`fûe_ªad_¨øy
(
c⁄fig_fûe
, 
fûe_›ti⁄s
);

739 
s¸ìn_sˇÀ
 = 
fûe_›ti⁄s
[0] % 3;

740 
s¸ìn_fûãr
 = 
fûe_›ti⁄s
[1] % 2;

741 
globÆ_íabÀ_audio
 = 
fûe_›ti⁄s
[2] % 2;

743 #ifde‡
PSP_BUILD


744 
audio_buf„r_size_numbî
 = 
fûe_›ti⁄s
[3] % 10;

746 
audio_buf„r_size_numbî
 = 
fûe_›ti⁄s
[3] % 11;

749 
upd©e_backup_Êag
 = 
fûe_›ti⁄s
[4] % 2;

750 
globÆ_íabÀ_™Æog
 = 
fûe_›ti⁄s
[5] % 2;

751 
™Æog_£nsôivôy_Àvñ
 = 
fûe_›ti⁄s
[6] % 8;

753 #ifde‡
PSP_BUILD


754 
	`s˚PowîSëClockFªquícy
(
˛ock_•ìd
, clock_speed, clock_speed / 2);

760 #i‚de‡
PC_BUILD


761 
i
 = 0; i < 16; i++)

763 
gamïad_c⁄fig_m≠
[
i
] = 
fûe_›ti⁄s
[7 + i] %

764 (
BUTTON_ID_NONE
 + 1);

766 if(
gamïad_c⁄fig_m≠
[
i
] =
BUTTON_ID_MENU
)

768 
míu_buâ⁄
 = 
i
;

772 if(
míu_buâ⁄
 == -1)

774 
gamïad_c⁄fig_m≠
[0] = 
BUTTON_ID_MENU
;

778 
	`fûe_˛o£
(
c⁄fig_fûe
);

785 
	}
}

787 
s32
 
	$ßve_game_c⁄fig_fûe
()

789 
u8
 
game_c⁄fig_fûíame
[512];

790 
u32
 
i
;

792 
	`ch™ge_ext
(
gamïak_fûíame
, 
game_c⁄fig_fûíame
, ".cfg");

794 
	`fûe_›í
(
game_c⁄fig_fûe
, 
game_c⁄fig_fûíame
, 
wrôe
);

796 if(
	`fûe_check_vÆid
(
game_c⁄fig_fûe
))

798 
u32
 
fûe_›ti⁄s
[14];

800 
fûe_›ti⁄s
[0] = 
cuºít_‰ameskù_ty≥
;

801 
fûe_›ti⁄s
[1] = 
‰ameskù_vÆue
;

802 
fûe_›ti⁄s
[2] = 
øndom_skù
;

803 
fûe_›ti⁄s
[3] = 
˛ock_•ìd
;

805 
i
 = 0; i < 10; i++)

807 
fûe_›ti⁄s
[4 + 
i
] = 
chóts
[i].
chót_a˘ive
;

810 
	`fûe_wrôe_¨øy
(
game_c⁄fig_fûe
, 
fûe_›ti⁄s
);

812 
	`fûe_˛o£
(
game_c⁄fig_fûe
);

818 
	}
}

820 
s32
 
	$ßve_c⁄fig_fûe
()

822 
u8
 
c⁄fig_∑th
[512];

824 #i‡(
	`deföed
(
PSP_BUILD
Ë|| deföed(
ARM_ARCH
)Ë&& !deföed(
_WIN32_WCE
)

825 
	`•rötf
(
c⁄fig_∑th
, "%s/%s", 
maö_∑th
, 
GPSP_CONFIG_FILENAME
);

827 
	`•rötf
(
c⁄fig_∑th
, "%s\\%s", 
maö_∑th
, 
GPSP_CONFIG_FILENAME
);

830 
	`fûe_›í
(
c⁄fig_fûe
, 
c⁄fig_∑th
, 
wrôe
);

832 
	`ßve_game_c⁄fig_fûe
();

834 if(
	`fûe_check_vÆid
(
c⁄fig_fûe
))

836 
u32
 
fûe_›ti⁄s
[23];

837 
u32
 
i
;

839 
fûe_›ti⁄s
[0] = 
s¸ìn_sˇÀ
;

840 
fûe_›ti⁄s
[1] = 
s¸ìn_fûãr
;

841 
fûe_›ti⁄s
[2] = 
globÆ_íabÀ_audio
;

842 
fûe_›ti⁄s
[3] = 
audio_buf„r_size_numbî
;

843 
fûe_›ti⁄s
[4] = 
upd©e_backup_Êag
;

844 
fûe_›ti⁄s
[5] = 
globÆ_íabÀ_™Æog
;

845 
fûe_›ti⁄s
[6] = 
™Æog_£nsôivôy_Àvñ
;

847 #i‚de‡
PC_BUILD


848 
i
 = 0; i < 16; i++)

850 
fûe_›ti⁄s
[7 + 
i
] = 
gamïad_c⁄fig_m≠
[i];

854 
	`fûe_wrôe_¨øy
(
c⁄fig_fûe
, 
fûe_›ti⁄s
);

856 
	`fûe_˛o£
(
c⁄fig_fûe
);

862 
	}
}

866 
	mMAIN_MENU
,

867 
	mGAMEPAD_MENU
,

868 
	mSAVESTATE_MENU
,

869 
	mFRAMESKIP_MENU
,

870 
	mCHEAT_MENU


871 } 
	tmíu_íum
;

873 
u32
 
	gßve°©e_¶Ÿ
 = 0;

875 
	$gë_ßve°©e_¢≠shŸ
(
u8
 *
ßve°©e_fûíame
)

877 
u16
 
¢≠shŸ_buf„r
[240 * 160];

878 
u8
 
ßve°©e_time°amp_°rög
[80];

880 
	`fûe_›í
(
ßve°©e_fûe
, 
ßve°©e_fûíame
, 
ªad
);

882 if(
	`fûe_check_vÆid
(
ßve°©e_fûe
))

884 
u8
 
wìkday_°rögs
[7][11] =

889 
time_t
 
ßve°©e_time_Ê©
;

890 
tm
 *
cuºít_time
;

891 
	`fûe_ªad_¨øy
(
ßve°©e_fûe
, 
¢≠shŸ_buf„r
);

892 
	`fûe_ªad_v¨übÀ
(
ßve°©e_fûe
, 
ßve°©e_time_Ê©
);

894 
	`fûe_˛o£
(
ßve°©e_fûe
);

896 
cuºít_time
 = 
	`loˇ…ime
(&
ßve°©e_time_Ê©
);

897 
	`•rötf
(
ßve°©e_time°amp_°rög
,

899 
wìkday_°rögs
[
cuºít_time
->
tm_wday
], cuºít_time->
tm_m⁄
 + 1,

900 
cuºít_time
->
tm_mday
, cuºít_time->
tm_yór
 + 1900,

901 
cuºít_time
->
tm_hour
, cuºít_time->
tm_mö
, cuºít_time->
tm_£c
);

903 
ßve°©e_time°amp_°rög
[40] = 0;

904 
	`¥öt_°rög
(
ßve°©e_time°amp_°rög
, 
COLOR_HELP_TEXT
, 
COLOR_BG
,

909 
	`mem£t
(
¢≠shŸ_buf„r
, 0, 240 * 160 * 2);

910 
	`¥öt_°rög_ext
("No savestateÉxists forÅhis slot.",

911 0xFFFF, 0x0000, 15, 75, 
¢≠shŸ_buf„r
, 240, 0);

912 
	`¥öt_°rög
("---------- --/--/---- --:--:-- ", 
COLOR_HELP_TEXT
,

913 
COLOR_BG
, 10, 40);

916 #i‚de‡
GP2X_BUILD


917 
	`blô_to_s¸ìn
(
¢≠shŸ_buf„r
, 240, 160, 230, 40);

919 
	}
}

921 
	$gë_ßve°©e_fûíame
(
u32
 
¶Ÿ
, 
u8
 *
«me_buf„r
)

923 
u8
 
ßve°©e_ext
[16];

925 
	`•rötf
(
ßve°©e_ext
, "%d.svs", 
¶Ÿ
);

926 
	`ch™ge_ext
(
gamïak_fûíame
, 
«me_buf„r
, 
ßve°©e_ext
);

928 
	`gë_ßve°©e_¢≠shŸ
(
«me_buf„r
);

929 
	}
}

931 
	$gë_ßve°©e_fûíame_noshŸ
(
u32
 
¶Ÿ
, 
u8
 *
«me_buf„r
)

933 
u8
 
ßve°©e_ext
[16];

935 
	`•rötf
(
ßve°©e_ext
, "%d.svs", 
¶Ÿ
);

936 
	`ch™ge_ext
(
gamïak_fûíame
, 
«me_buf„r
, 
ßve°©e_ext
);

937 
	}
}

939 #ifde‡
PSP_BUILD


940 
	$_Êush_ˇche
()

942 
	`övÆid©e_Æl_ˇche
();

943 
	}
}

946 
u32
 
	$míu
(
u16
 *
‹igöÆ_s¸ìn
)

948 
u32
 
˛ock_•ìd_numbî
 = (
˛ock_•ìd
 / 33) - 1;

949 
u8
 
¥öt_buf„r
[81];

950 
u32
 
_cuºít_›ti⁄
 = 0;

951 
gui_a˘i⁄_ty≥
 
gui_a˘i⁄
;

952 
míu_íum
 
_cuºít_míu
 = 
MAIN_MENU
;

953 
u32
 
i
;

954 
u32
 
ª≥©
 = 1;

955 
u32
 
ªtu∫_vÆue
 = 0;

956 
u32
 
fú°_lﬂd
 = 0;

957 
u8
 
ßve°©e_ext
[16];

958 
u8
 
cuºít_ßve°©e_fûíame
[512];

959 
u8
 
löe_buf„r
[80];

960 
u8
 
chót_f‹m©_°r
[10][41];

962 
míu_ty≥
 *
cuºít_míu
;

963 
míu_›ti⁄_ty≥
 *
cuºít_›ti⁄
;

964 
míu_›ti⁄_ty≥
 *
di•œy_›ti⁄
;

965 
u32
 
cuºít_›ti⁄_num
;

967 autÿ
	`choo£_míu
();

968 autÿ
	`˛ór_hñp
();

970 
u8
 *
gamïad_hñp
[] =

996 
	`míu_exô
()

998 if(!
fú°_lﬂd
)

999 
ª≥©
 = 0;

1002 
	`míu_quô
()

1004 
˛ock_•ìd
 = (
˛ock_•ìd_numbî
 + 1) * 33;

1005 
	`ßve_c⁄fig_fûe
();

1006 
	`quô
();

1009 
	`míu_lﬂd
()

1011 
u8
 *
fûe_ext
[] = { ".gba", ".bö", ".zù", 
NULL
 };

1012 
u8
 
lﬂd_fûíame
[512];

1013 
	`ßve_game_c⁄fig_fûe
();

1014 if(
	`lﬂd_fûe
(
fûe_ext
, 
lﬂd_fûíame
) != -1)

1016 if(
	`lﬂd_gamïak
(
lﬂd_fûíame
) == -1)

1018 
	`quô
();

1020 
	`ª£t_gba
();

1021 
ªtu∫_vÆue
 = 1;

1022 
ª≥©
 = 0;

1023 
ªg
[
CHANGED_PC_STATUS
] = 1;

1027 
	`choo£_míu
(
cuºít_míu
);

1031 
	`míu_ª°¨t
()

1033 if(!
fú°_lﬂd
)

1035 
	`ª£t_gba
();

1036 
ªg
[
CHANGED_PC_STATUS
] = 1;

1037 
ªtu∫_vÆue
 = 1;

1038 
ª≥©
 = 0;

1042 
	`míu_ch™ge_°©e
()

1044 
	`gë_ßve°©e_fûíame
(
ßve°©e_¶Ÿ
, 
cuºít_ßve°©e_fûíame
);

1047 
	`míu_ßve_°©e
()

1049 if(!
fú°_lﬂd
)

1051 
	`gë_ßve°©e_fûíame_noshŸ
(
ßve°©e_¶Ÿ
,

1052 
cuºít_ßve°©e_fûíame
);

1053 
	`ßve_°©e
(
cuºít_ßve°©e_fûíame
, 
‹igöÆ_s¸ìn
);

1055 
	`míu_ch™ge_°©e
();

1058 
	`míu_lﬂd_°©e
()

1060 if(!
fú°_lﬂd
)

1062 
	`lﬂd_°©e
(
cuºít_ßve°©e_fûíame
);

1063 
ªtu∫_vÆue
 = 1;

1064 
ª≥©
 = 0;

1068 
	`míu_lﬂd_°©e_fûe
()

1070 
u8
 *
fûe_ext
[] = { ".svs", 
NULL
 };

1071 
u8
 
lﬂd_fûíame
[512];

1072 if(
	`lﬂd_fûe
(
fûe_ext
, 
lﬂd_fûíame
) != -1)

1074 
	`lﬂd_°©e
(
lﬂd_fûíame
);

1075 
ªtu∫_vÆue
 = 1;

1076 
ª≥©
 = 0;

1080 
	`choo£_míu
(
cuºít_míu
);

1084 
	`míu_fix_gamïad_hñp
()

1086 #i‚de‡
PC_BUILD


1087 
	`˛ór_hñp
();

1088 
cuºít_›ti⁄
->
hñp_°rög
 =

1089 
gamïad_hñp
[
gamïad_c⁄fig_m≠
[

1090 
gamïad_c⁄fig_löe_to_buâ⁄
[
cuºít_›ti⁄_num
]]];

1094 
	`submíu_gøphics_sound
()

1099 
	`submíu_chóts_misc
()

1104 
	`submíu_gamïad
()

1109 
	`submíu_™Æog
()

1114 
	`submíu_ßve°©e
()

1116 
	`¥öt_°rög
("Save°©ê›ti⁄s:", 
COLOR_ACTIVE_ITEM
, 
COLOR_BG
, 10, 70);

1117 
	`míu_ch™ge_°©e
();

1120 
	`submíu_maö
()

1122 
	`°∫˝y
(
¥öt_buf„r
, 
gamïak_fûíame
, 80);

1123 
	`¥öt_°rög
(
¥öt_buf„r
, 
COLOR_ROM_INFO
, 
COLOR_BG
, 10, 10);

1124 
	`•rötf
(
¥öt_buf„r
, "%† %† %s", 
gamïak_tôÀ
,

1125 
gamïak_code
, 
gamïak_makî
);

1126 
	`¥öt_°rög
(
¥öt_buf„r
, 
COLOR_ROM_INFO
, 
COLOR_BG
, 10, 20);

1128 
	`gë_ßve°©e_fûíame_noshŸ
(
ßve°©e_¶Ÿ
,

1129 
cuºít_ßve°©e_fûíame
);

1132 
u8
 *
yes_no_›ti⁄s
[] = { "no", "yes" };

1133 
u8
 *
íabÀ_dißbÀ_›ti⁄s
[] = { "disabled", "enabled" };

1135 
u8
 *
sˇÀ_›ti⁄s
[] =

1140 
u8
 *
‰ameskù_›ti⁄s
[] = { "automatic", "manual", "off" };

1141 
u8
 *
‰ameskù_v¨üti⁄_›ti⁄s
[] = { "uniform", "random" };

1143 #i‚de‡
PSP_BUILD


1144 
u8
 *
audio_buf„r_›ti⁄s
[] =

1151 
u8
 *
audio_buf„r_›ti⁄s
[] =

1159 
u8
 *
upd©e_backup_›ti⁄s
[] = { "Exit only", "Automatic" };

1161 
u8
 *
˛ock_•ìd_›ti⁄s
[] =

1167 
u8
 *
gamïad_c⁄fig_buâ⁄s
[] =

1194 
míu_›ti⁄_ty≥
 
gøphics_sound_›ti⁄s
[] =

1196 
	`°rög_£À˘i⁄_›ti⁄
(
NULL
, "Di•œy sˇlög", 
sˇÀ_›ti⁄s
,

1197 (
u32
 *)(&
s¸ìn_sˇÀ
), 3,

1202 
	`°rög_£À˘i⁄_›ti⁄
(
NULL
, "S¸ì¿fûãrög", 
yes_no_›ti⁄s
,

1203 (
u32
 *)(&
s¸ìn_fûãr
), 2,

1208 
	`°rög_£À˘i⁄_›ti⁄
(
NULL
, "FømeskùÅy≥", 
‰ameskù_›ti⁄s
,

1209 (
u32
 *)(&
cuºít_‰ameskù_ty≥
), 3,

1215 
	`numîic_£À˘i⁄_›ti⁄
(
NULL
, "Fømeskù vÆue", &
‰ameskù_vÆue
, 100,

1220 
	`°rög_£À˘i⁄_›ti⁄
(
NULL
, "Framskip variation",

1221 
‰ameskù_v¨üti⁄_›ti⁄s
, &
øndom_skù
, 2,

1226 
	`°rög_£À˘i⁄_›ti⁄
(
NULL
, "Audiÿouçut", 
yes_no_›ti⁄s
,

1227 &
globÆ_íabÀ_audio
, 2,

1230 #i‚de‡
PSP_BUILD


1231 
	`°rög_£À˘i⁄_›ti⁄
(
NULL
, "Audiÿbuf„r", 
audio_buf„r_›ti⁄s
,

1232 &
audio_buf„r_size_numbî
, 11,

1234 
	`°rög_£À˘i⁄_›ti⁄
(
NULL
, "Audiÿbuf„r", 
audio_buf„r_›ti⁄s
,

1235 &
audio_buf„r_size_numbî
, 10,

1243 
	`submíu_›ti⁄
(
NULL
, "Back", "ReturnÅoÅhe main menu.", 12)

1246 
	`make_míu
(
gøphics_sound
, 
submíu_gøphics_sound
, 
NULL
);

1248 
míu_›ti⁄_ty≥
 
chóts_misc_›ti⁄s
[] =

1250 
	`chót_›ti⁄
(0),

1251 
	`chót_›ti⁄
(1),

1252 
	`chót_›ti⁄
(2),

1253 
	`chót_›ti⁄
(3),

1254 
	`chót_›ti⁄
(4),

1255 
	`chót_›ti⁄
(5),

1256 
	`chót_›ti⁄
(6),

1257 
	`chót_›ti⁄
(7),

1258 
	`chót_›ti⁄
(8),

1259 
	`chót_›ti⁄
(9),

1260 
	`°rög_£À˘i⁄_›ti⁄
(
NULL
, "Clock speed",

1261 
˛ock_•ìd_›ti⁄s
, &
˛ock_•ìd_numbî
, 10,

1264 
	`°rög_£À˘i⁄_›ti⁄
(
NULL
, "Update backup",

1265 
upd©e_backup_›ti⁄s
, &
upd©e_backup_Êag
, 2,

1271 
	`submíu_›ti⁄
(
NULL
, "Back", "ReturnÅoÅhe main menu.", 14)

1274 
	`make_míu
(
chóts_misc
, 
submíu_chóts_misc
, 
NULL
);

1276 
míu_›ti⁄_ty≥
 
ßve°©e_›ti⁄s
[] =

1278 
	`numîic_£À˘i⁄_a˘i⁄_hide_›ti⁄
(
míu_lﬂd_°©e
, 
míu_ch™ge_°©e
,

1279 "Lﬂd save°©ê‰om cuºíà¶Ÿ", &
ßve°©e_¶Ÿ
, 10,

1282 
	`numîic_£À˘i⁄_a˘i⁄_hide_›ti⁄
(
míu_ßve_°©e
, 
míu_ch™ge_°©e
,

1283 "Savêßve°©êtÿcuºíà¶Ÿ", &
ßve°©e_¶Ÿ
, 10,

1286 
	`numîic_£À˘i⁄_a˘i⁄_hide_›ti⁄
(
míu_lﬂd_°©e_fûe
,

1287 
míu_ch™ge_°©e
,

1288 "Lﬂd save°©ê‰om fûe", &
ßve°©e_¶Ÿ
, 10,

1291 
	`numîic_£À˘i⁄_›ti⁄
(
míu_ch™ge_°©e
,

1292 "Cuºíàßve°©ê¶Ÿ", &
ßve°©e_¶Ÿ
, 10,

1294 
	`submíu_›ti⁄
(
NULL
, "Back", "ReturnÅoÅhe main menu.", 13)

1297 
	`make_míu
(
ßve°©e
, 
submíu_ßve°©e
, 
NULL
);

1299 #ifde‡
PSP_BUILD


1301 
míu_›ti⁄_ty≥
 
gamïad_c⁄fig_›ti⁄s
[] =

1303 
	`gamïad_c⁄fig_›ti⁄
("D-pad up ", 0),

1304 
	`gamïad_c⁄fig_›ti⁄
("D-pad down ", 1),

1305 
	`gamïad_c⁄fig_›ti⁄
("D-padÜeft ", 2),

1306 
	`gamïad_c⁄fig_›ti⁄
("D-padÑight ", 3),

1307 
	`gamïad_c⁄fig_›ti⁄
("Circle ", 4),

1308 
	`gamïad_c⁄fig_›ti⁄
("Cross ", 5),

1309 
	`gamïad_c⁄fig_›ti⁄
("Square ", 6),

1310 
	`gamïad_c⁄fig_›ti⁄
("Triangle ", 7),

1311 
	`gamïad_c⁄fig_›ti⁄
("Left Trigger ", 8),

1312 
	`gamïad_c⁄fig_›ti⁄
("Right Trigger", 9),

1313 
	`gamïad_c⁄fig_›ti⁄
("Start ", 10),

1314 
	`gamïad_c⁄fig_›ti⁄
("Select ", 11),

1315 
	`submíu_›ti⁄
(
NULL
, "Back", "ReturnÅoÅhe main menu.", 13)

1319 
míu_›ti⁄_ty≥
 
™Æog_c⁄fig_›ti⁄s
[] =

1321 
	`™Æog_c⁄fig_›ti⁄
("Analog up ", 0),

1322 
	`™Æog_c⁄fig_›ti⁄
("Analog down ", 1),

1323 
	`™Æog_c⁄fig_›ti⁄
("AnalogÜeft ", 2),

1324 
	`™Æog_c⁄fig_›ti⁄
("AnalogÑight", 3),

1325 
	`°rög_£À˘i⁄_›ti⁄
(
NULL
, "E«bÀá«log", 
yes_no_›ti⁄s
,

1326 &
globÆ_íabÀ_™Æog
, 2,

1328 
	`numîic_£À˘i⁄_›ti⁄
(
NULL
, "Analog sensitivity",

1329 &
™Æog_£nsôivôy_Àvñ
, 10,

1332 
	`submíu_›ti⁄
(
NULL
, "Back", "ReturnÅoÅhe main menu.", 11)

1337 #ifde‡
GP2X_BUILD


1339 
míu_›ti⁄_ty≥
 
gamïad_c⁄fig_›ti⁄s
[] =

1341 
	`gamïad_c⁄fig_›ti⁄
("D-pad up ", 0),

1342 
	`gamïad_c⁄fig_›ti⁄
("D-pad down ", 1),

1343 
	`gamïad_c⁄fig_›ti⁄
("D-padÜeft ", 2),

1344 
	`gamïad_c⁄fig_›ti⁄
("D-padÑight ", 3),

1345 
	`gamïad_c⁄fig_›ti⁄
("A ", 4),

1346 
	`gamïad_c⁄fig_›ti⁄
("B ", 5),

1347 
	`gamïad_c⁄fig_›ti⁄
("X ", 6),

1348 
	`gamïad_c⁄fig_›ti⁄
("Y ", 7),

1349 
	`gamïad_c⁄fig_›ti⁄
("Left Trigger ", 8),

1350 
	`gamïad_c⁄fig_›ti⁄
("Right Trigger", 9),

1351 
	`gamïad_c⁄fig_›ti⁄
("Start ", 10),

1352 
	`gamïad_c⁄fig_›ti⁄
("Select ", 11),

1353 
	`submíu_›ti⁄
(
NULL
, "Back", "ReturnÅoÅhe main menu.", 13)

1357 
míu_›ti⁄_ty≥
 
™Æog_c⁄fig_›ti⁄s
[] =

1359 
	`submíu_›ti⁄
(
NULL
, "Back", "ReturnÅoÅhe main menu.", 11)

1364 #ifde‡
PC_BUILD


1366 
míu_›ti⁄_ty≥
 
gamïad_c⁄fig_›ti⁄s
[] =

1368 
	`submíu_›ti⁄
(
NULL
, "Back", "ReturnÅoÅhe main menu.", 13)

1371 
míu_›ti⁄_ty≥
 
™Æog_c⁄fig_›ti⁄s
[] =

1373 
	`submíu_›ti⁄
(
NULL
, "Back", "ReturnÅoÅhe main menu.", 11)

1378 
	`make_míu
(
gamïad_c⁄fig
, 
submíu_gamïad
, 
NULL
);

1379 
	`make_míu
(
™Æog_c⁄fig
, 
submíu_™Æog
, 
NULL
);

1381 
míu_›ti⁄_ty≥
 
maö_›ti⁄s
[] =

1383 
	`submíu_›ti⁄
(&
gøphics_sound_míu
, "Graphicsánd Sound options",

1386 
	`numîic_£À˘i⁄_a˘i⁄_›ti⁄
(
míu_lﬂd_°©e
, 
NULL
,

1387 "Lﬂd sèã from slŸ", &
ßve°©e_¶Ÿ
, 10,

1391 
	`numîic_£À˘i⁄_a˘i⁄_›ti⁄
(
míu_ßve_°©e
, 
NULL
,

1392 "Savê°©êtÿ¶Ÿ", &
ßve°©e_¶Ÿ
, 10,

1396 
	`submíu_›ti⁄
(&
ßve°©e_míu
, "Savestate options",

1400 
	`submíu_›ti⁄
(&
gamïad_c⁄fig_míu
, "Configure gamepad input",

1403 
	`submíu_›ti⁄
(&
™Æog_c⁄fig_míu
, "Configureánalog input",

1405 
	`submíu_›ti⁄
(&
chóts_misc_míu
, "Cheatsánd Miscellaneous options",

1408 
	`a˘i⁄_›ti⁄
(
míu_lﬂd
, 
NULL
, "LoadÇew game",

1411 
	`a˘i⁄_›ti⁄
(
míu_ª°¨t
, 
NULL
, "Restart game",

1413 
	`a˘i⁄_›ti⁄
(
míu_exô
, 
NULL
, "ReturnÅo game",

1415 
	`a˘i⁄_›ti⁄
(
míu_quô
, 
NULL
, "Exit gpSP",

1419 
	`make_míu
(
maö
, 
submíu_maö
, 
NULL
);

1421 
	`choo£_míu
(
míu_ty≥
 *
√w_míu
)

1423 if(
√w_míu
 =
NULL
)

1424 
√w_míu
 = &
maö_míu
;

1426 
	`˛ór_s¸ìn
(
COLOR_BG
);

1428 #i‚de‡
GP2X_BUILD


1429 
	`blô_to_s¸ìn
(
‹igöÆ_s¸ìn
, 240, 160, 230, 40);

1432 
cuºít_míu
 = 
√w_míu
;

1433 
cuºít_›ti⁄
 = 
√w_míu
->
›ti⁄s
;

1434 
cuºít_›ti⁄_num
 = 0;

1435 if(
cuºít_míu
->
öô_fun˘i⁄
)

1436 
cuºít_míu
->
	`öô_fun˘i⁄
();

1439 
	`˛ór_hñp
()

1441 
i
 = 0; i < 6; i++)

1443 
	`¥öt_°rög_∑d
(" ", 
COLOR_BG
, COLOR_BG, 30, 210 + (
i
 * 10), 70);

1447 
	`video_ªsﬁuti⁄_œrge
();

1449 #i‚de‡
GP2X_BUILD


1450 
	`SDL_LockMuãx
(
sound_muãx
);

1452 
	`SDL_Pau£Audio
(1);

1454 #i‚de‡
GP2X_BUILD


1455 
	`SDL_U∆ockMuãx
(
sound_muãx
);

1458 if(
gamïak_fûíame
[0] == 0)

1460 
fú°_lﬂd
 = 1;

1461 
	`mem£t
(
‹igöÆ_s¸ìn
, 0x00, 240 * 160 * 2);

1462 
	`¥öt_°rög_ext
("No gameÜoaded yet.", 0xFFFF, 0x0000,

1463 60, 75,
‹igöÆ_s¸ìn
, 240, 0);

1466 
	`choo£_míu
(&
maö_míu
);

1468 
i
 = 0; i < 10; i++)

1470 if(
i
 >
num_chóts
)

1472 
	`•rötf
(
chót_f‹m©_°r
[
i
], "cheat %d (noneÜoaded)", i);

1476 
	`•rötf
(
chót_f‹m©_°r
[
i
], "cheat %d (%s): %%s", i,

1477 
chóts
[
i
].
chót_«me
);

1481 
cuºít_míu
->
	`öô_fun˘i⁄
();

1483 
ª≥©
)

1485 
di•œy_›ti⁄
 = 
cuºít_míu
->
›ti⁄s
;

1487 
i
 = 0; i < 
cuºít_míu
->
num_›ti⁄s
; i++, 
di•œy_›ti⁄
++)

1489 if(
di•œy_›ti⁄
->
›ti⁄_ty≥
 & 
NUMBER_SELECTION_OPTION
)

1491 
	`•rötf
(
löe_buf„r
, 
di•œy_›ti⁄
->
di•œy_°rög
,

1492 *(
di•œy_›ti⁄
->
cuºít_›ti⁄
));

1496 if(
di•œy_›ti⁄
->
›ti⁄_ty≥
 & 
STRING_SELECTION_OPTION
)

1498 
	`•rötf
(
löe_buf„r
, 
di•œy_›ti⁄
->
di•œy_°rög
,

1499 ((
u32
 *)
di•œy_›ti⁄
->
›ti⁄s
)[*(di•œy_›ti⁄->
cuºít_›ti⁄
)]);

1503 
	`°r˝y
(
löe_buf„r
, 
di•œy_›ti⁄
->
di•œy_°rög
);

1506 if(
di•œy_›ti⁄
 =
cuºít_›ti⁄
)

1508 
	`¥öt_°rög_∑d
(
löe_buf„r
, 
COLOR_ACTIVE_ITEM
, 
COLOR_BG
, 10,

1509 (
di•œy_›ti⁄
->
löe_numbî
 * 10) + 40, 36);

1513 
	`¥öt_°rög_∑d
(
löe_buf„r
, 
COLOR_INACTIVE_ITEM
, 
COLOR_BG
, 10,

1514 (
di•œy_›ti⁄
->
löe_numbî
 * 10) + 40, 36);

1518 
	`¥öt_°rög
(
cuºít_›ti⁄
->
hñp_°rög
, 
COLOR_HELP_TEXT
,

1519 
COLOR_BG
, 30, 210);

1521 
	`Êù_s¸ìn
();

1523 
gui_a˘i⁄
 = 
	`gë_gui_öput
();

1525 
gui_a˘i⁄
)

1527 
CURSOR_DOWN
:

1528 
cuºít_›ti⁄_num
 = (current_option_num + 1) %

1529 
cuºít_míu
->
num_›ti⁄s
;

1531 
cuºít_›ti⁄
 = 
cuºít_míu
->
›ti⁄s
 + 
cuºít_›ti⁄_num
;

1532 
	`˛ór_hñp
();

1535 
CURSOR_UP
:

1536 if(
cuºít_›ti⁄_num
)

1537 
cuºít_›ti⁄_num
--;

1539 
cuºít_›ti⁄_num
 = 
cuºít_míu
->
num_›ti⁄s
 - 1;

1541 
cuºít_›ti⁄
 = 
cuºít_míu
->
›ti⁄s
 + 
cuºít_›ti⁄_num
;

1542 
	`˛ór_hñp
();

1545 
CURSOR_RIGHT
:

1546 if(
cuºít_›ti⁄
->
›ti⁄_ty≥
 & (
NUMBER_SELECTION_OPTION
 |

1547 
STRING_SELECTION_OPTION
))

1549 *(
cuºít_›ti⁄
->current_option) =

1550 (*
cuºít_›ti⁄
->current_option + 1) %

1551 
cuºít_›ti⁄
->
num_›ti⁄s
;

1553 if(
cuºít_›ti⁄
->
∑ssive_fun˘i⁄
)

1554 
cuºít_›ti⁄
->
	`∑ssive_fun˘i⁄
();

1558 
CURSOR_LEFT
:

1559 if(
cuºít_›ti⁄
->
›ti⁄_ty≥
 & (
NUMBER_SELECTION_OPTION
 |

1560 
STRING_SELECTION_OPTION
))

1562 
u32
 
cuºít_›ti⁄_vÆ
 = *(
cuºít_›ti⁄
->current_option);

1564 if(
cuºít_›ti⁄_vÆ
)

1565 
cuºít_›ti⁄_vÆ
--;

1567 
cuºít_›ti⁄_vÆ
 = 
cuºít_›ti⁄
->
num_›ti⁄s
 - 1;

1569 *(
cuºít_›ti⁄
->cuºít_›ti⁄Ë
cuºít_›ti⁄_vÆ
;

1571 if(
cuºít_›ti⁄
->
∑ssive_fun˘i⁄
)

1572 
cuºít_›ti⁄
->
	`∑ssive_fun˘i⁄
();

1576 
CURSOR_EXIT
:

1577 if(
cuºít_míu
 =&
maö_míu
)

1578 
	`míu_exô
();

1580 
	`choo£_míu
(&
maö_míu
);

1583 
CURSOR_SELECT
:

1584 if(
cuºít_›ti⁄
->
›ti⁄_ty≥
 & 
ACTION_OPTION
)

1585 
cuºít_›ti⁄
->
	`a˘i⁄_fun˘i⁄
();

1587 if(
cuºít_›ti⁄
->
›ti⁄_ty≥
 & 
SUBMENU_OPTION
)

1588 
	`choo£_míu
(
cuºít_›ti⁄
->
sub_míu
);

1593 
	`£t_gba_ªsﬁuti⁄
(
s¸ìn_sˇÀ
);

1594 
	`video_ªsﬁuti⁄_smÆl
();

1596 
˛ock_•ìd
 = (
˛ock_•ìd_numbî
 + 1) * 33;

1598 #ifde‡
PSP_BUILD


1599 
	`s˚PowîSëClockFªquícy
(
˛ock_•ìd
, clock_speed, clock_speed / 2);

1602 
	`SDL_Pau£Audio
(0);

1604  
ªtu∫_vÆue
;

1605 
	}
}

	@gui.h

20 #i‚de‡
GUI_H


21 
	#GUI_H


	)

23 
	#GPSP_CONFIG_FILENAME
 "gp•.cfg"

	)

25 
s32
 
lﬂd_fûe
(
u8
 **
wûdˇrds
, u8 *
ªsu…
);

26 
u32
 
adju°_‰ameskù
(u32 
buâ⁄_id
);

27 
s32
 
lﬂd_game_c⁄fig_fûe
();

28 
s32
 
lﬂd_c⁄fig_fûe
();

29 
s32
 
ßve_game_c⁄fig_fûe
();

30 
s32
 
ßve_c⁄fig_fûe
();

31 
u32
 
míu
(
u16
 *
‹igöÆ_s¸ìn
);

33 
u32
 
ßve°©e_¶Ÿ
;

35 
gë_ßve°©e_fûíame_noshŸ
(
u32
 
¶Ÿ
, 
u8
 *
«me_buf„r
);

36 
gë_ßve°©e_fûíame
(
u32
 
¶Ÿ
, 
u8
 *
«me_buf„r
);

37 
gë_ßve°©e_¢≠shŸ
(
u8
 *
ßve°©e_fûíame
);

	@input.c

20 
	~"comm⁄.h
"

24 
	$åiggî_key
(
u32
 
key
)

26 
u32
 
p1_˙t
 = 
io_ªgi°îs
[
REG_P1CNT
];

27 
u32
 
p1
;

29 if((
p1_˙t
 >> 14) & 0x01)

31 
u32
 
key_öãr£˘i⁄
 = (
p1_˙t
 & 
key
) & 0x3FF;

33 if(
p1_˙t
 >> 15)

35 if(
key_öãr£˘i⁄
 =(
p1_˙t
 & 0x3FF))

36 
	`øi£_öãºu±
(
IRQ_KEYPAD
);

40 if(
key_öãr£˘i⁄
)

41 
	`øi£_öãºu±
(
IRQ_KEYPAD
);

44 
	}
}

46 
u32
 
	gkey
 = 0;

48 
u32
 
	gglobÆ_íabÀ_™Æog
 = 1;

49 
u32
 
	g™Æog_£nsôivôy_Àvñ
 = 4;

53 
	mBUTTON_NOT_HELD
,

54 
	mBUTTON_HELD_INITIAL
,

55 
	mBUTTON_HELD_REPEAT


56 } 
	tbuâ⁄_ª≥©_°©e_ty≥
;

61 
	#BUTTON_REPEAT_START
 200000

	)

62 
	#BUTTON_REPEAT_CONTINUE
 50000

	)

64 
buâ⁄_ª≥©_°©e_ty≥
 
	gbuâ⁄_ª≥©_°©e
 = 
BUTTON_NOT_HELD
;

65 
u32
 
	gbuâ⁄_ª≥©
 = 0;

66 
gui_a˘i⁄_ty≥
 
	gcurs‹_ª≥©
 = 
CURSOR_NONE
;

69 #ifde‡
PSP_BUILD


71 
u32
 
	ggamïad_c⁄fig_m≠
[16] =

73 
BUTTON_ID_MENU
,

74 
BUTTON_ID_A
,

75 
BUTTON_ID_B
,

76 
BUTTON_ID_START
,

77 
BUTTON_ID_L
,

78 
BUTTON_ID_R
,

79 
BUTTON_ID_DOWN
,

80 
BUTTON_ID_LEFT
,

81 
BUTTON_ID_UP
,

82 
BUTTON_ID_RIGHT
,

83 
BUTTON_ID_SELECT
,

84 
BUTTON_ID_START
,

85 
BUTTON_ID_UP
,

86 
BUTTON_ID_DOWN
,

87 
BUTTON_ID_LEFT
,

88 
BUTTON_ID_RIGHT


91 
	#PSP_ALL_BUTTON_MASK
 0xFFFF

	)

93 
gui_a˘i⁄_ty≥
 
	$gë_gui_öput
()

95 
S˚CålD©a
 
˘æ_d©a
;

96 
gui_a˘i⁄_ty≥
 
√w_buâ⁄
 = 
CURSOR_NONE
;

97 
u32
 
√w_buâ⁄s
;

99 
u32
 
œ°_buâ⁄s
 = 0;

100 
u64
 
buâ⁄_ª≥©_time°amp
;

102 
	`dñay_us
(25000);

104 
	`s˚CålPìkBuf„rPosôive
(&
˘æ_d©a
, 1);

105 
˘æ_d©a
.
Buâ⁄s
 &
PSP_ALL_BUTTON_MASK
;

106 
√w_buâ⁄s
 = (
œ°_buâ⁄s
 ^ 
˘æ_d©a
.
Buâ⁄s
) & ctrl_data.Buttons;

107 
œ°_buâ⁄s
 = 
˘æ_d©a
.
Buâ⁄s
;

109 if(
√w_buâ⁄s
 & 
PSP_CTRL_LEFT
)

110 
√w_buâ⁄
 = 
CURSOR_LEFT
;

112 if(
√w_buâ⁄s
 & 
PSP_CTRL_RIGHT
)

113 
√w_buâ⁄
 = 
CURSOR_RIGHT
;

115 if(
√w_buâ⁄s
 & 
PSP_CTRL_UP
)

116 
√w_buâ⁄
 = 
CURSOR_UP
;

118 if(
√w_buâ⁄s
 & 
PSP_CTRL_DOWN
)

119 
√w_buâ⁄
 = 
CURSOR_DOWN
;

121 if(
√w_buâ⁄s
 & 
PSP_CTRL_START
)

122 
√w_buâ⁄
 = 
CURSOR_SELECT
;

124 if(
√w_buâ⁄s
 & 
PSP_CTRL_CIRCLE
)

125 
√w_buâ⁄
 = 
CURSOR_SELECT
;

127 if(
√w_buâ⁄s
 & 
PSP_CTRL_CROSS
)

128 
√w_buâ⁄
 = 
CURSOR_EXIT
;

130 if(
√w_buâ⁄s
 & 
PSP_CTRL_SQUARE
)

131 
√w_buâ⁄
 = 
CURSOR_BACK
;

133 if(
√w_buâ⁄
 !
CURSOR_NONE
)

135 
	`gë_ticks_us
(&
buâ⁄_ª≥©_time°amp
);

136 
buâ⁄_ª≥©_°©e
 = 
BUTTON_HELD_INITIAL
;

137 
buâ⁄_ª≥©
 = 
√w_buâ⁄s
;

138 
curs‹_ª≥©
 = 
√w_buâ⁄
;

142 if(
˘æ_d©a
.
Buâ⁄s
 & 
buâ⁄_ª≥©
)

144 
u64
 
√w_ticks
;

145 
	`gë_ticks_us
(&
√w_ticks
);

147 if(
buâ⁄_ª≥©_°©e
 =
BUTTON_HELD_INITIAL
)

149 if((
√w_ticks
 - 
buâ⁄_ª≥©_time°amp
) >

150 
BUTTON_REPEAT_START
)

152 
√w_buâ⁄
 = 
curs‹_ª≥©
;

153 
buâ⁄_ª≥©_time°amp
 = 
√w_ticks
;

154 
buâ⁄_ª≥©_°©e
 = 
BUTTON_HELD_REPEAT
;

158 if(
buâ⁄_ª≥©_°©e
 =
BUTTON_HELD_REPEAT
)

160 if((
√w_ticks
 - 
buâ⁄_ª≥©_time°amp
) >

161 
BUTTON_REPEAT_CONTINUE
)

163 
√w_buâ⁄
 = 
curs‹_ª≥©
;

164 
buâ⁄_ª≥©_time°amp
 = 
√w_ticks
;

170  
√w_buâ⁄
;

171 
	}
}

173 
	#PSP_CTRL_ANALOG_UP
 (1 << 28)

	)

174 
	#PSP_CTRL_ANALOG_DOWN
 (1 << 29)

	)

175 
	#PSP_CTRL_ANALOG_LEFT
 (1 << 30)

	)

176 
	#PSP_CTRL_ANALOG_RIGHT
 (1 << 31)

	)

178 
u32
 
	gbuâ⁄_p•_mask_to_c⁄fig
[] =

180 
PSP_CTRL_TRIANGLE
,

181 
PSP_CTRL_CIRCLE
,

182 
PSP_CTRL_CROSS
,

183 
PSP_CTRL_SQUARE
,

184 
PSP_CTRL_LTRIGGER
,

185 
PSP_CTRL_RTRIGGER
,

186 
PSP_CTRL_DOWN
,

187 
PSP_CTRL_LEFT
,

188 
PSP_CTRL_UP
,

189 
PSP_CTRL_RIGHT
,

190 
PSP_CTRL_SELECT
,

191 
PSP_CTRL_START
,

192 
PSP_CTRL_ANALOG_UP
,

193 
PSP_CTRL_ANALOG_DOWN
,

194 
PSP_CTRL_ANALOG_LEFT
,

195 
PSP_CTRL_ANALOG_RIGHT


198 
u32
 
	gbuâ⁄_id_to_gba_mask
[] =

200 
BUTTON_UP
,

201 
BUTTON_DOWN
,

202 
BUTTON_LEFT
,

203 
BUTTON_RIGHT
,

204 
BUTTON_A
,

205 
BUTTON_B
,

206 
BUTTON_L
,

207 
BUTTON_R
,

208 
BUTTON_START
,

209 
BUTTON_SELECT
,

210 
BUTTON_NONE
,

211 
BUTTON_NONE
,

212 
BUTTON_NONE
,

213 
BUTTON_NONE


216 
gui_a˘i⁄_ty≥
 
	$gë_gui_öput_fs_hﬁd
(
u32
 
buâ⁄_id
)

218 
gui_a˘i⁄_ty≥
 
√w_buâ⁄
 = 
	`gë_gui_öput
();

219 if((
œ°_buâ⁄s
 & 
buâ⁄_p•_mask_to_c⁄fig
[
buâ⁄_id
]) == 0)

220  
CURSOR_BACK
;

222  
√w_buâ⁄
;

223 
	}
}

225 
u32
 
	gøpidfúe_Êag
 = 1;

227 
u32
 
	$upd©e_öput
()

229 
S˚CålD©a
 
˘æ_d©a
;

230 
u32
 
buâ⁄s
;

231 
u32
 
n⁄_ª≥©_buâ⁄s
;

232 
u32
 
buâ⁄_id
;

233 
u32
 
i
;

234 
u32
 
√w_key
 = 0;

235 
u32
 
™Æog_£nsôivôy
 = 92 - (
™Æog_£nsôivôy_Àvñ
 * 4);

236 
u32
 
öv_™Æog_£nsôivôy
 = 256 - 
™Æog_£nsôivôy
;

238 
	`s˚CålPìkBuf„rPosôive
(&
˘æ_d©a
, 1);

240 
buâ⁄s
 = 
˘æ_d©a
.
Buâ⁄s
;

242 if(
globÆ_íabÀ_™Æog
)

244 if(
˘æ_d©a
.
Lx
 < 
™Æog_£nsôivôy
)

245 
buâ⁄s
 |
PSP_CTRL_ANALOG_LEFT
;

247 if(
˘æ_d©a
.
Lx
 > 
öv_™Æog_£nsôivôy
)

248 
buâ⁄s
 |
PSP_CTRL_ANALOG_RIGHT
;

250 if(
˘æ_d©a
.
Ly
 < 
™Æog_£nsôivôy
)

251 
buâ⁄s
 |
PSP_CTRL_ANALOG_UP
;

253 if(
˘æ_d©a
.
Ly
 > 
öv_™Æog_£nsôivôy
)

254 
buâ⁄s
 |
PSP_CTRL_ANALOG_DOWN
;

257 
n⁄_ª≥©_buâ⁄s
 = (
œ°_buâ⁄s
 ^ 
buâ⁄s
) & buttons;

258 
œ°_buâ⁄s
 = 
buâ⁄s
;

260 
i
 = 0; i < 16; i++)

262 if(
n⁄_ª≥©_buâ⁄s
 & 
buâ⁄_p•_mask_to_c⁄fig
[
i
])

263 
buâ⁄_id
 = 
gamïad_c⁄fig_m≠
[
i
];

265 
buâ⁄_id
 = 
BUTTON_ID_NONE
;

267 
buâ⁄_id
)

269 
BUTTON_ID_MENU
:

271 
u16
 *
s¸ìn_c›y
 = 
	`c›y_s¸ìn
();

272 
u32
 
ªt_vÆ
 = 
	`míu
(
s¸ìn_c›y
);

273 
	`‰ì
(
s¸ìn_c›y
);

275  
ªt_vÆ
;

278 
BUTTON_ID_LOADSTATE
:

280 
u8
 
cuºít_ßve°©e_fûíame
[512];

281 
	`gë_ßve°©e_fûíame_noshŸ
(
ßve°©e_¶Ÿ
,

282 
cuºít_ßve°©e_fûíame
);

283 
	`lﬂd_°©e
(
cuºít_ßve°©e_fûíame
);

287 
BUTTON_ID_SAVESTATE
:

289 
u8
 
cuºít_ßve°©e_fûíame
[512];

290 
u16
 *
cuºít_s¸ìn
 = 
	`c›y_s¸ìn
();

291 
	`gë_ßve°©e_fûíame_noshŸ
(
ßve°©e_¶Ÿ
,

292 
cuºít_ßve°©e_fûíame
);

293 
	`ßve_°©e
(
cuºít_ßve°©e_fûíame
, 
cuºít_s¸ìn
);

294 
	`‰ì
(
cuºít_s¸ìn
);

298 
BUTTON_ID_FASTFORWARD
:

299 
	`¥öt_°rög
("FASTFORWARD", 0xFFFF, 0x0000, 0, 50);

300 
synchr⁄ize_Êag
 ^= 1;

304 if(
buâ⁄s
 & 
buâ⁄_p•_mask_to_c⁄fig
[
i
])

306 
buâ⁄_id
 = 
gamïad_c⁄fig_m≠
[
i
];

307 if(
buâ⁄_id
 < 
BUTTON_ID_MENU
)

309 
√w_key
 |
buâ⁄_id_to_gba_mask
[
buâ⁄_id
];

313 if((
buâ⁄_id
 >
BUTTON_ID_RAPIDFIRE_A
) &&

314 (
buâ⁄_id
 <
BUTTON_ID_RAPIDFIRE_L
))

316 
øpidfúe_Êag
 ^= 1;

317 if(
øpidfúe_Êag
)

319 
√w_key
 |
buâ⁄_id_to_gba_mask
[
buâ⁄_id
 -

320 
BUTTON_ID_RAPIDFIRE_A
 + 
BUTTON_ID_A
];

324 
√w_key
 &~
buâ⁄_id_to_gba_mask
[
buâ⁄_id
 -

325 
BUTTON_ID_RAPIDFIRE_A
 + 
BUTTON_ID_A
];

331 if((
√w_key
 | 
key
) != key)

332 
	`åiggî_key
(
√w_key
);

334 
key
 = 
√w_key
;

336 
io_ªgi°îs
[
REG_P1
] = (~
key
) & 0x3FF;

339 
	}
}

341 
	$öô_öput
()

343 
	`s˚CålSëSam∂ögCy˛e
(0);

344 
	`s˚CålSëSam∂ögMode
(
PSP_CTRL_MODE_ANALOG
);

345 
	}
}

350 #ifde‡
GP2X_BUILD


353 
	~<sys/mm™.h
>

354 
	~<sys/io˘l.h
>

355 
	~"gp2x/gp2x.h
"

357 
u32
 
	ggamïad_c⁄fig_m≠
[16] =

359 
BUTTON_ID_UP
,

360 
BUTTON_ID_LEFT
,

361 
BUTTON_ID_DOWN
,

362 
BUTTON_ID_RIGHT
,

363 
BUTTON_ID_START
,

364 
BUTTON_ID_SELECT
,

365 
BUTTON_ID_L
,

366 
BUTTON_ID_R
,

367 
BUTTON_ID_NONE
,

368 
BUTTON_ID_A
,

369 
BUTTON_ID_B
,

370 
BUTTON_ID_NONE
,

371 
BUTTON_ID_VOLDOWN
,

372 
BUTTON_ID_VOLUP
,

373 
BUTTON_ID_FPS
,

374 
BUTTON_ID_MENU


377 
u32
 
gp2x_Âs_debug
;

379 
u32
 
	$gp•_gp2x_joy°ick_ªad
()

381 
u32
 
vÆue
 = (
gp•_gp2x_memªgs
[0x1198 >> 1] & 0x00FF);

383 if(
vÆue
 == 0xFD)

384 
vÆue
 = 0xFA;

385 if(
vÆue
 == 0xF7)

386 
vÆue
 = 0xEB;

387 if(
vÆue
 == 0xDF)

388 
vÆue
 = 0xAF;

389 if(
vÆue
 == 0x7F)

390 
vÆue
 = 0xBE;

392  ~((
gp•_gp2x_memªgs
[0x1184 >> 1] & 0xFF00Ë| 
vÆue
 |

393 (
gp•_gp2x_memªgs
[0x1186 >> 1] << 16));

394 
	}
}

396 
gui_a˘i⁄_ty≥
 
	$gë_gui_öput
()

398 
gui_a˘i⁄_ty≥
 
√w_buâ⁄
 = 
CURSOR_NONE
;

399 
u32
 
buâ⁄s
 = 
	`gp•_gp2x_joy°ick_ªad
();

400 
u32
 
√w_buâ⁄s
;

402 
u32
 
œ°_buâ⁄s
 = 0;

403 
u64
 
buâ⁄_ª≥©_time°amp
;

405 
	`dñay_us
(25000);

407 
√w_buâ⁄s
 = (
œ°_buâ⁄s
 ^ 
buâ⁄s
) & buttons;

408 
œ°_buâ⁄s
 = 
buâ⁄s
;

410 if(
√w_buâ⁄s
 & 
GP2X_A
)

411 
√w_buâ⁄
 = 
CURSOR_BACK
;

413 if(
√w_buâ⁄s
 & 
GP2X_X
)

414 
√w_buâ⁄
 = 
CURSOR_EXIT
;

416 if(
√w_buâ⁄s
 & 
GP2X_B
)

417 
√w_buâ⁄
 = 
CURSOR_SELECT
;

419 if(
√w_buâ⁄s
 & 
GP2X_UP
)

420 
√w_buâ⁄
 = 
CURSOR_UP
;

422 if(
√w_buâ⁄s
 & 
GP2X_DOWN
)

423 
√w_buâ⁄
 = 
CURSOR_DOWN
;

425 if(
√w_buâ⁄s
 & 
GP2X_LEFT
)

426 
√w_buâ⁄
 = 
CURSOR_LEFT
;

428 if(
√w_buâ⁄s
 & 
GP2X_RIGHT
)

429 
√w_buâ⁄
 = 
CURSOR_RIGHT
;

432 if(
√w_buâ⁄
 !
CURSOR_NONE
)

434 
	`gë_ticks_us
(&
buâ⁄_ª≥©_time°amp
);

435 
buâ⁄_ª≥©_°©e
 = 
BUTTON_HELD_INITIAL
;

436 
buâ⁄_ª≥©
 = 
√w_buâ⁄s
;

437 
curs‹_ª≥©
 = 
√w_buâ⁄
;

441 if(
buâ⁄s
 & 
buâ⁄_ª≥©
)

443 
u64
 
√w_ticks
;

444 
	`gë_ticks_us
(&
√w_ticks
);

446 if(
buâ⁄_ª≥©_°©e
 =
BUTTON_HELD_INITIAL
)

448 if((
√w_ticks
 - 
buâ⁄_ª≥©_time°amp
) >

449 
BUTTON_REPEAT_START
)

451 
√w_buâ⁄
 = 
curs‹_ª≥©
;

452 
buâ⁄_ª≥©_time°amp
 = 
√w_ticks
;

453 
buâ⁄_ª≥©_°©e
 = 
BUTTON_HELD_REPEAT
;

457 if(
buâ⁄_ª≥©_°©e
 =
BUTTON_HELD_REPEAT
)

459 if((
√w_ticks
 - 
buâ⁄_ª≥©_time°amp
) >

460 
BUTTON_REPEAT_CONTINUE
)

462 
√w_buâ⁄
 = 
curs‹_ª≥©
;

463 
buâ⁄_ª≥©_time°amp
 = 
√w_ticks
;

469  
√w_buâ⁄
;

470 
	}
}

472 
	#GP2X_VOL_MIDDLE
 (1 << 24)

	)

474 
u32
 
	gbuâ⁄_gp2x_mask_to_c⁄fig
[] =

476 
GP2X_UP
,

477 
GP2X_LEFT
,

478 
GP2X_DOWN
,

479 
GP2X_RIGHT
,

480 
GP2X_START
,

481 
GP2X_SELECT
,

482 
GP2X_L
,

483 
GP2X_R
,

484 
GP2X_A
,

485 
GP2X_B
,

486 
GP2X_X
,

487 
GP2X_Y
,

488 
GP2X_VOL_DOWN
,

489 
GP2X_VOL_UP
,

490 
GP2X_PUSH
,

491 
GP2X_VOL_MIDDLE


494 
u32
 
	gbuâ⁄_id_to_gba_mask
[] =

496 
BUTTON_UP
,

497 
BUTTON_DOWN
,

498 
BUTTON_LEFT
,

499 
BUTTON_RIGHT
,

500 
BUTTON_A
,

501 
BUTTON_B
,

502 
BUTTON_L
,

503 
BUTTON_R
,

504 
BUTTON_START
,

505 
BUTTON_SELECT
,

506 
BUTTON_NONE
,

507 
BUTTON_NONE
,

508 
BUTTON_NONE
,

509 
BUTTON_NONE


512 
u32
 
	$upd©e_öput
()

514 
u32
 
øpidfúe_Êag
 = 1;

515 
u32
 
œ°_buâ⁄s
;

516 
u32
 
n⁄_ª≥©_buâ⁄s
;

517 
u32
 
buâ⁄_id
;

518 
u32
 
√w_key
 = 0;

519 
u32
 
buâ⁄s
 = 
	`gp•_gp2x_joy°ick_ªad
();

520 
u32
 
i
;

522 if((
buâ⁄s
 & 
GP2X_VOL_DOWN
Ë&& (buâ⁄†& 
GP2X_VOL_UP
))

524 
buâ⁄s
 &~(
GP2X_VOL_DOWN
 | 
GP2X_VOL_UP
);

525 
buâ⁄s
 |
GP2X_VOL_MIDDLE
;

528 
n⁄_ª≥©_buâ⁄s
 = (
œ°_buâ⁄s
 ^ 
buâ⁄s
) & buttons;

529 
œ°_buâ⁄s
 = 
buâ⁄s
;

531 
i
 = 0; i < 16; i++)

533 if(
n⁄_ª≥©_buâ⁄s
 & 
buâ⁄_gp2x_mask_to_c⁄fig
[
i
])

534 
buâ⁄_id
 = 
gamïad_c⁄fig_m≠
[
i
];

536 
buâ⁄_id
 = 
BUTTON_ID_NONE
;

538 
buâ⁄_id
)

540 
BUTTON_ID_MENU
:

542 
u16
 *
s¸ìn_c›y
 = 
	`c›y_s¸ìn
();

543 
u32
 
ªt_vÆ
 = 
	`míu
(
s¸ìn_c›y
);

544 
	`‰ì
(
s¸ìn_c›y
);

546  
ªt_vÆ
;

549 
BUTTON_ID_LOADSTATE
:

551 
u8
 
cuºít_ßve°©e_fûíame
[512];

552 
	`gë_ßve°©e_fûíame_noshŸ
(
ßve°©e_¶Ÿ
,

553 
cuºít_ßve°©e_fûíame
);

554 
	`lﬂd_°©e
(
cuºít_ßve°©e_fûíame
);

558 
BUTTON_ID_SAVESTATE
:

560 
u8
 
cuºít_ßve°©e_fûíame
[512];

561 
u16
 *
cuºít_s¸ìn
 = 
	`c›y_s¸ìn
();

562 
	`gë_ßve°©e_fûíame_noshŸ
(
ßve°©e_¶Ÿ
,

563 
cuºít_ßve°©e_fûíame
);

564 
	`ßve_°©e
(
cuºít_ßve°©e_fûíame
, 
cuºít_s¸ìn
);

565 
	`‰ì
(
cuºít_s¸ìn
);

569 
BUTTON_ID_FASTFORWARD
:

570 
	`¥öt_°rög
("FASTFORWARD", 0xFFFF, 0x0000, 0, 50);

571 
synchr⁄ize_Êag
 ^= 1;

574 
BUTTON_ID_VOLUP
:

575 
	`gp2x_sound_vﬁume
(1);

578 
BUTTON_ID_VOLDOWN
:

579 
	`gp2x_sound_vﬁume
(0);

582 
BUTTON_ID_FPS
:

583 
gp2x_Âs_debug
 ^= 1;

587 if(
buâ⁄s
 & 
buâ⁄_gp2x_mask_to_c⁄fig
[
i
])

589 
buâ⁄_id
 = 
gamïad_c⁄fig_m≠
[
i
];

590 if(
buâ⁄_id
 < 
BUTTON_ID_MENU
)

592 
√w_key
 |
buâ⁄_id_to_gba_mask
[
buâ⁄_id
];

596 if((
buâ⁄_id
 >
BUTTON_ID_RAPIDFIRE_A
) &&

597 (
buâ⁄_id
 <
BUTTON_ID_RAPIDFIRE_L
))

599 
øpidfúe_Êag
 ^= 1;

600 if(
øpidfúe_Êag
)

602 
√w_key
 |
buâ⁄_id_to_gba_mask
[
buâ⁄_id
 -

603 
BUTTON_ID_RAPIDFIRE_A
 + 
BUTTON_ID_A
];

607 
√w_key
 &~
buâ⁄_id_to_gba_mask
[
buâ⁄_id
 -

608 
BUTTON_ID_RAPIDFIRE_A
 + 
BUTTON_ID_A
];

614 if((
√w_key
 | 
key
) != key)

615 
	`åiggî_key
(
√w_key
);

617 
key
 = 
√w_key
;

619 
io_ªgi°îs
[
REG_P1
] = (~
key
) & 0x3FF;

622 
	}
}

624 
	$öô_öput
()

627 
	}
}

633 #ifde‡
PC_BUILD


635 
u32
 
	$key_m≠
(
SDLKey
 
key_sym
)

637 
key_sym
)

639 
SDLK_LSHIFT
:

640  
BUTTON_L
;

642 
SDLK_x
:

643  
BUTTON_R
;

645 
SDLK_DOWN
:

646  
BUTTON_DOWN
;

648 
SDLK_UP
:

649  
BUTTON_UP
;

651 
SDLK_LEFT
:

652  
BUTTON_LEFT
;

654 
SDLK_RIGHT
:

655  
BUTTON_RIGHT
;

657 
SDLK_RETURN
:

658  
BUTTON_START
;

660 
SDLK_RSHIFT
:

661  
BUTTON_SELECT
;

663 
SDLK_LCTRL
:

664  
BUTTON_B
;

666 
SDLK_LALT
:

667  
BUTTON_A
;

670  
BUTTON_NONE
;

672 
	}
}

674 
u32
 
	$joy_m≠
(
u32
 
buâ⁄
)

676 
buâ⁄
)

679  
BUTTON_L
;

682  
BUTTON_R
;

685  
BUTTON_START
;

688  
BUTTON_SELECT
;

691  
BUTTON_B
;

694  
BUTTON_A
;

697  
BUTTON_NONE
;

699 
	}
}

701 
gui_a˘i⁄_ty≥
 
	$gë_gui_öput
()

703 
SDL_Evít
 
evít
;

704 
gui_a˘i⁄_ty≥
 
gui_a˘i⁄
 = 
CURSOR_NONE
;

706 
	`dñay_us
(30000);

708 
	`SDL_PﬁlEvít
(&
evít
))

710 
evít
.
ty≥
)

712 
SDL_QUIT
:

713 
	`quô
();

715 
SDL_KEYDOWN
:

717 
evít
.
key
.
keysym
.
sym
)

719 
SDLK_ESCAPE
:

720 
gui_a˘i⁄
 = 
CURSOR_EXIT
;

723 
SDLK_DOWN
:

724 
gui_a˘i⁄
 = 
CURSOR_DOWN
;

727 
SDLK_UP
:

728 
gui_a˘i⁄
 = 
CURSOR_UP
;

731 
SDLK_LEFT
:

732 
gui_a˘i⁄
 = 
CURSOR_LEFT
;

735 
SDLK_RIGHT
:

736 
gui_a˘i⁄
 = 
CURSOR_RIGHT
;

739 
SDLK_RETURN
:

740 
gui_a˘i⁄
 = 
CURSOR_SELECT
;

743 
SDLK_BACKSPACE
:

744 
gui_a˘i⁄
 = 
CURSOR_BACK
;

752  
gui_a˘i⁄
;

753 
	}
}

755 
u32
 
	$upd©e_öput
()

757 
SDL_Evít
 
evít
;

759 
	`SDL_PﬁlEvít
(&
evít
))

761 
evít
.
ty≥
)

763 
SDL_QUIT
:

764 
	`quô
();

766 
SDL_KEYDOWN
:

768 if(
evít
.
key
.
keysym
.
sym
 =
SDLK_ESCAPE
)

770 
	`quô
();

773 if(
evít
.
key
.
keysym
.
sym
 =
SDLK_BACKSPACE
)

775 
u16
 *
s¸ìn_c›y
 = 
	`c›y_s¸ìn
();

776 
u32
 
ªt_vÆ
 = 
	`míu
(
s¸ìn_c›y
);

777 
	`‰ì
(
s¸ìn_c›y
);

779  
ªt_vÆ
;

783 if(
evít
.
key
.
keysym
.
sym
 =
SDLK_F1
)

785 
	`debug_⁄
();

789 if(
evít
.
key
.
keysym
.
sym
 =
SDLK_F2
)

791 
FILE
 *
Â
 = 
	`f›í
("palette_ram.bin", "wb");

792 
	`¥ötf
("writingÖalette RAM\n");

793 
	`fwrôe
(
∑Àâe_øm
, 1024, 1, 
Â
);

794 
	`f˛o£
(
Â
);

795 
	`¥ötf
("writingÖalette VRAM\n");

796 
Â
 = 
	`f›í
("vram.bin", "wb");

797 
	`fwrôe
(
vøm
, 1024 * 96, 1, 
Â
);

798 
	`f˛o£
(
Â
);

799 
	`¥ötf
("writingÖalette OAM RAM\n");

800 
Â
 = 
	`f›í
("oam_ram.bin", "wb");

801 
	`fwrôe
(
ﬂm_øm
, 1024, 1, 
Â
);

802 
	`f˛o£
(
Â
);

803 
	`¥ötf
("writingÖalette I/OÑegisters\n");

804 
Â
 = 
	`f›í
("io_registers.bin", "wb");

805 
	`fwrôe
(
io_ªgi°îs
, 1024, 1, 
Â
);

806 
	`f˛o£
(
Â
);

810 if(
evít
.
key
.
keysym
.
sym
 =
SDLK_F3
)

812 
	`dump_å™¶©i⁄_ˇche
();

816 if(
evít
.
key
.
keysym
.
sym
 =
SDLK_F5
)

818 
u8
 
cuºít_ßve°©e_fûíame
[512];

819 
u16
 *
cuºít_s¸ìn
 = 
	`c›y_s¸ìn
();

820 
	`gë_ßve°©e_fûíame_noshŸ
(
ßve°©e_¶Ÿ
,

821 
cuºít_ßve°©e_fûíame
);

822 
	`ßve_°©e
(
cuºít_ßve°©e_fûíame
, 
cuºít_s¸ìn
);

823 
	`‰ì
(
cuºít_s¸ìn
);

827 if(
evít
.
key
.
keysym
.
sym
 =
SDLK_F7
)

829 
u8
 
cuºít_ßve°©e_fûíame
[512];

830 
	`gë_ßve°©e_fûíame_noshŸ
(
ßve°©e_¶Ÿ
,

831 
cuºít_ßve°©e_fûíame
);

832 
	`lﬂd_°©e
(
cuºít_ßve°©e_fûíame
);

833 
	`debug_⁄
();

838 if(
evít
.
key
.
keysym
.
sym
 =
SDLK_BACKQUOTE
)

840 
synchr⁄ize_Êag
 ^= 1;

844 
key
 |
	`key_m≠
(
evít
.key.
keysym
.
sym
);

845 
	`åiggî_key
(
key
);

851 
SDL_KEYUP
:

853 
key
 &~(
	`key_m≠
(
evít
.key.
keysym
.
sym
));

857 
SDL_JOYBUTTONDOWN
:

859 
key
 |
	`joy_m≠
(
evít
.
jbuâ⁄
.
buâ⁄
);

860 
	`åiggî_key
(
key
);

864 
SDL_JOYBUTTONUP
:

866 
key
 &~(
	`joy_m≠
(
evít
.
jbuâ⁄
.
buâ⁄
));

872 
io_ªgi°îs
[
REG_P1
] = (~
key
) & 0x3FF;

875 
	}
}

877 
	$öô_öput
()

879 
u32
 
joy°ick_cou¡
 = 
	`SDL_NumJoy°icks
();

881 if(
joy°ick_cou¡
 > 0)

883 
	`SDL_Joy°ickO≥n
(0);

884 
	`SDL_Joy°ickEvítSèã
(
SDL_ENABLE
);

886 
	}
}

891 
	#öput_ßve°©e_buûdî
(
ty≥
) \

892 
öput_
##
ty≥
##
	`_ßve°©e
(
fûe_èg_ty≥
 
ßve°©e_fûe
) \

894 
fûe_
##
ty≥
##
	`_v¨übÀ
(
ßve°©e_fûe
, 
key
); \

896 

	)

897 
öput_ßve°©e_buûdî
(
ªad
);

898 
öput_ßve°©e_buûdî
(
wrôe_mem
);

	@input.h

20 #i‚de‡
INPUT_H


21 
	#INPUT_H


	)

25 
	mBUTTON_L
 = 0x200,

26 
	mBUTTON_R
 = 0x100,

27 
	mBUTTON_DOWN
 = 0x80,

28 
	mBUTTON_UP
 = 0x40,

29 
	mBUTTON_LEFT
 = 0x20,

30 
	mBUTTON_RIGHT
 = 0x10,

31 
	mBUTTON_START
 = 0x08,

32 
	mBUTTON_SELECT
 = 0x04,

33 
	mBUTTON_B
 = 0x02,

34 
	mBUTTON_A
 = 0x01,

35 
	mBUTTON_NONE
 = 0x00

36 } 
	töput_buâ⁄s_ty≥
;

40 
	mBUTTON_ID_UP
,

41 
	mBUTTON_ID_DOWN
,

42 
	mBUTTON_ID_LEFT
,

43 
	mBUTTON_ID_RIGHT
,

44 
	mBUTTON_ID_A
,

45 
	mBUTTON_ID_B
,

46 
	mBUTTON_ID_L
,

47 
	mBUTTON_ID_R
,

48 
	mBUTTON_ID_START
,

49 
	mBUTTON_ID_SELECT
,

50 
	mBUTTON_ID_MENU
,

51 
	mBUTTON_ID_FASTFORWARD
,

52 
	mBUTTON_ID_LOADSTATE
,

53 
	mBUTTON_ID_SAVESTATE
,

54 
	mBUTTON_ID_RAPIDFIRE_A
,

55 
	mBUTTON_ID_RAPIDFIRE_B
,

56 
	mBUTTON_ID_RAPIDFIRE_L
,

57 
	mBUTTON_ID_RAPIDFIRE_R
,

58 
	mBUTTON_ID_VOLUP
,

59 
	mBUTTON_ID_VOLDOWN
,

60 
	mBUTTON_ID_FPS
,

61 
	mBUTTON_ID_NONE


62 } 
	töput_buâ⁄s_id_ty≥
;

66 
	mCURSOR_UP
,

67 
	mCURSOR_DOWN
,

68 
	mCURSOR_LEFT
,

69 
	mCURSOR_RIGHT
,

70 
	mCURSOR_SELECT
,

71 
	mCURSOR_BACK
,

72 
	mCURSOR_EXIT
,

73 
	mCURSOR_NONE


74 } 
	tgui_a˘i⁄_ty≥
;

76 
öô_öput
();

77 
u32
 
upd©e_öput
();

78 
gui_a˘i⁄_ty≥
 
gë_gui_öput
();

79 
gui_a˘i⁄_ty≥
 
gë_gui_öput_fs_hﬁd
(
u32
 
buâ⁄_id
);

80 
öput_wrôe_mem_ßve°©e
(
fûe_èg_ty≥
 
ßve°©e_fûe
);

81 
öput_ªad_ßve°©e
(
fûe_èg_ty≥
 
ßve°©e_fûe
);

83 
u32
 
gamïad_c⁄fig_m≠
[16];

84 
u32
 
globÆ_íabÀ_™Æog
;

85 
u32
 
™Æog_£nsôivôy_Àvñ
;

87 #i‡
deföed
(
GP2X_BUILD
)

88 
u32
 
gp•_gp2x_joy°ick_ªad
();

	@main.c

20 
	~"comm⁄.h
"

22 #ifde‡
PSP_BUILD


27 
vbœnk_öãºu±_h™dÀr
(
u32
 
sub
, u32 *
∑rg
);

31 
timî_ty≥
 
	gtimî
[4];

35 
u32
 
	gbªakpoöt_vÆue
 = 0x7c5000;

36 
debug_°©e
 
	gcuºít_debug_°©e
 = 
RUN
;

41 
‰ameskù_ty≥
 
	gcuºít_‰ameskù_ty≥
 = 
auto_‰ameskù
;

42 
u32
 
	gglobÆ_cy˛es_≥r_ö°ru˘i⁄
 = 1;

43 
u32
 
	gøndom_skù
 = 0;

45 #ifde‡
GP2X_BUILD


46 
u32
 
	g‰ameskù_vÆue
 = 2;

48 
u64
 
	g‰ame_cou¡_öôül_time°amp
 = 0;

49 
u64
 
	gœ°_‰ame_öãrvÆ_time°amp
;

50 
u32
 
	ggp2x_Âs_debug
 = 0;

52 
gp2x_quô
();

55 
u32
 
	g‰ameskù_vÆue
 = 4;

57 
u32
 
	gskù_√xt_‰ame
 = 0;

59 
u32
 
	g‰ameskù_cou¡î
 = 0;

61 
u32
 
	g˝u_ticks
 = 0;

62 
u32
 
	g‰ame_ticks
 = 0;

64 
u32
 
	gexecuã_cy˛es
 = 960;

65 
s32
 
	gvideo_cou¡
 = 960;

66 
u32
 
	gticks
;

68 
u32
 
	g¨m_‰ame
 = 0;

69 
u32
 
	gthumb_‰ame
 = 0;

70 
u32
 
	gœ°_‰ame
 = 0;

72 
u32
 
	gcy˛e_mem‹y_ac˚ss
 = 0;

73 
u32
 
	gcy˛e_pc_ªœtive_ac˚ss
 = 0;

74 
u32
 
	gcy˛e_•_ªœtive_ac˚ss
 = 0;

75 
u32
 
	gcy˛e_block_mem‹y_ac˚ss
 = 0;

76 
u32
 
	gcy˛e_block_mem‹y_•_ac˚ss
 = 0;

77 
u32
 
	gcy˛e_block_mem‹y_w‹ds
 = 0;

78 
u32
 
	gcy˛e_dma16_w‹ds
 = 0;

79 
u32
 
	gcy˛e_dma32_w‹ds
 = 0;

80 
u32
 
	gÊush_øm_cou¡
 = 0;

81 
u32
 
	ggbc_upd©e_cou¡
 = 0;

82 
u32
 
	gﬂm_upd©e_cou¡
 = 0;

84 
u32
 
	gsynchr⁄ize_Êag
 = 1;

86 
u32
 
	gupd©e_backup_Êag
 = 1;

87 
u32
 
	g˛ock_•ìd
 = 333;

88 
u8
 
	gmaö_∑th
[512];

90 
åiggî_ext_evít
();

92 
	#check_cou¡
(
cou¡_v¨
) \

93 if(
cou¡_v¨
 < 
execuã_cy˛es
) \

94 
execuã_cy˛es
 = 
cou¡_v¨
; \

95 

	)

96 
	#check_timî
(
timî_numbî
) \

97 if(
timî
[
timî_numbî
].
°©us
 =
TIMER_PRESCALE
) \

98 
	`check_cou¡
(
timî
[
timî_numbî
].
cou¡
); \

99 

	)

100 
	#upd©e_timî
(
timî_numbî
) \

101 if(
timî
[
timî_numbî
].
°©us
 !
TIMER_INACTIVE
) \

103 if(
timî
[
timî_numbî
].
°©us
 !
TIMER_CASCADE
) \

105 
timî
[
timî_numbî
].
cou¡
 -
execuã_cy˛es
; \

106 
io_ªgi°îs
[
REG_TM
##
timî_numbî
##
D
] = \

107 -(
timî
[
timî_numbî
].
cou¡
 >>Åimî[timî_numbî].
¥esˇÀ
); \

110 if(
timî
[
timî_numbî
].
cou¡
 <= 0) \

112 if(
timî
[
timî_numbî
].
úq
 =
TIMER_TRIGGER_IRQ
) \

113 
úq_øi£d
 |
IRQ_TIMER
##
timî_numbî
; \

115 if((
timî_numbî
 != 3) && \

116 (
timî
[
timî_numbî
 + 1].
°©us
 =
TIMER_CASCADE
)) \

118 
timî
[
timî_numbî
 + 1].
cou¡
--; \

119 
io_ªgi°îs
[
REG_TM0D
 + (
timî_numbî
 + 1) * 2] = \

120 -(
timî
[
timî_numbî
 + 1].
cou¡
); \

123 if(
timî_numbî
 < 2) \

125 if(
timî
[
timî_numbî
].
dúe˘_sound_ch™√ls
 & 0x01) \

126 
	`sound_timî
(
timî
[
timî_numbî
].
‰equícy_°ï
, 0); \

128 if(
timî
[
timî_numbî
].
dúe˘_sound_ch™√ls
 & 0x02) \

129 
	`sound_timî
(
timî
[
timî_numbî
].
‰equícy_°ï
, 1); \

132 
timî
[
timî_numbî
].
cou¡
 += \

133 (
timî
[
timî_numbî
].
ªlﬂd
 <<Åimî[timî_numbî].
¥esˇÀ
); \

136 

	)

137 
u8
 *
	gfûe_ext
[] = { ".gba", ".bö", ".zù", 
NULL
 };

139 #ifde‡
ARM_ARCH


140 
	$Ch™geW‹kögDúe˘‹y
(*
exe
)

142 #i‚de‡
_WIN32_WCE


143 *
s
 = 
	`°ºchr
(
exe
, '/');

144 i‡(
s
 !
NULL
) {

145 *
s
 = '\0';

146 
	`chdú
(
exe
);

147 *
s
 = '/';

150 
	}
}

153 
	$öô_maö
()

155 
u32
 
i
;

157 
skù_√xt_‰ame
 = 0;

159 
i
 = 0; i < 4; i++)

161 
dma
[
i
].
°¨t_ty≥
 = 
DMA_INACTIVE
;

162 
dma
[
i
].
dúe˘_sound_ch™√l
 = 
DMA_NO_DIRECT_SOUND
;

163 
timî
[
i
].
°©us
 = 
TIMER_INACTIVE
;

164 
timî
[
i
].
ªlﬂd
 = 0x10000;

165 
timî
[
i
].
°›_˝u_ticks
 = 0;

168 
timî
[0].
dúe˘_sound_ch™√ls
 = 
TIMER_DS_CHANNEL_BOTH
;

169 
timî
[1].
dúe˘_sound_ch™√ls
 = 
TIMER_DS_CHANNEL_NONE
;

171 
˝u_ticks
 = 0;

172 
‰ame_ticks
 = 0;

174 
execuã_cy˛es
 = 960;

175 
video_cou¡
 = 960;

177 
	`Êush_å™¶©i⁄_ˇche_rom
();

178 
	`Êush_å™¶©i⁄_ˇche_øm
();

179 
	`Êush_å™¶©i⁄_ˇche_bios
();

180 
	}
}

182 
	$maö
(
¨gc
, *
¨gv
[])

184 
u32
 
i
;

185 
u32
 
vcou¡
 = 0;

186 
u32
 
ticks
;

187 
u32
 
di•°©
;

188 
u8
 
lﬂd_fûíame
[512];

189 
u8
 
bios_fûíame
[512];

191 #ifde‡
GP2X_BUILD


192 if(
	`gp2x_lﬂd_mmuhack
() == -1)

193 
	`dñay_us
(2500000);

196 #ifde‡
PSP_BUILD


197 
	`s˚Kî√lRegi°îSubI¡rH™dÀr
(
PSP_VBLANK_INT
, 0,

198 
vbœnk_öãºu±_h™dÀr
, 
NULL
);

199 
	`s˚Kî√lE«bÀSubI¡r
(
PSP_VBLANK_INT
, 0);

201 
	`‰e›í
("CON", "wb", 
°dout
);

204 *
˝u_mode_«mes
[];

206 
	`öô_gamïak_buf„r
();

210 #ifde‡
ARM_ARCH


212 
	`Ch™geW‹kögDúe˘‹y
(
¨gv
[0]);

215 
	`gëcwd
(
maö_∑th
, 512);

216 
	`lﬂd_c⁄fig_fûe
();

218 
gamïak_fûíame
[0] = 0;

220 #ifde‡
PSP_BUILD


221 
	`dñay_us
(2500000);

224 
	`öô_video
();

226 #ifde‡
GP2X_BUILD


228 
	`gp2x_ovî˛ock
();

231 #ifde‡
GP2X_BUILD


232 
	`•rötf
(
bios_fûíame
, "%s/%s", 
maö_∑th
, "gba_bios.bin");

233 if(
	`lﬂd_bios
(
bios_fûíame
) == -1)

235 if(
	`lﬂd_bios
("gba_bios.bin") == -1)

238 
gui_a˘i⁄_ty≥
 
gui_a˘i⁄
 = 
CURSOR_NONE
;

240 
	`debug_s¸ìn_°¨t
();

241 
	`debug_s¸ìn_¥öé
("Sorry, but gpSPÑequiresá Gameboy Advance BIOS ");

242 
	`debug_s¸ìn_¥öé
("imageÅoÑun correctly. Make sureÅo getán ");

243 
	`debug_s¸ìn_¥öé
("authentic one, it'll beÉxactly 16384 bytesÜarge ");

244 
	`debug_s¸ìn_¥öé
("and should haveÅhe following md5sum value: ");

245 
	`debug_s¸ìn_¥öé
(" ");

246 
	`debug_s¸ìn_¥öé
("a860e8c0b6d573d191e4ec7db1b1e4f6 ");

247 
	`debug_s¸ìn_¥öé
(" ");

248 
	`debug_s¸ìn_¥öé
("When you do get itÇame it gba_bios.binándÖut it");

249 
	`debug_s¸ìn_¥öé
("inÅhe same directoryás gpSP. ");

250 
	`debug_s¸ìn_¥öé
(" ");

251 
	`debug_s¸ìn_¥öé
("Pressány buttonÅoÉxit. ");

253 
	`debug_s¸ìn_upd©e
();

255 
gui_a˘i⁄
 =
CURSOR_NONE
)

257 
gui_a˘i⁄
 = 
	`gë_gui_öput
();

258 
	`dñay_us
(15000);

261 
	`debug_s¸ìn_íd
();

263 
	`quô
();

266 if(
bios_rom
[0] != 0x18)

268 
gui_a˘i⁄_ty≥
 
gui_a˘i⁄
 = 
CURSOR_NONE
;

270 
	`debug_s¸ìn_°¨t
();

271 
	`debug_s¸ìn_¥öé
("You haveán incorrect BIOS image. ");

272 
	`debug_s¸ìn_¥öé
("While many games will work fine, some willÇot. It");

273 
	`debug_s¸ìn_¥öé
("is stronglyÑecommendedÅhat you obtainÅhe ");

274 
	`debug_s¸ìn_¥öé
("correct BIOS file. Do NOTÑeportány bugs if you ");

275 
	`debug_s¸ìn_¥öé
("are seeingÅhis message. ");

276 
	`debug_s¸ìn_¥öé
(" ");

277 
	`debug_s¸ìn_¥öé
("Pressány buttonÅoÑesume,át your ownÑisk. ");

279 
	`debug_s¸ìn_upd©e
();

281 
gui_a˘i⁄
 =
CURSOR_NONE
)

283 
gui_a˘i⁄
 = 
	`gë_gui_öput
();

284 
	`dñay_us
(15000);

287 
	`debug_s¸ìn_íd
();

290 
	`öô_maö
();

291 
	`öô_sound
();

293 
	`öô_öput
();

295 
	`video_ªsﬁuti⁄_œrge
();

297 if(
¨gc
 > 1)

299 if(
	`lﬂd_gamïak
(
¨gv
[1]) == -1)

301 #ifde‡
PC_BUILD


302 
	`¥ötf
("FaûedÅÿlﬂd gamïak %s,Éxôög.\n", 
lﬂd_fûíame
);

304 
	`exô
(-1);

307 
	`£t_gba_ªsﬁuti⁄
(
s¸ìn_sˇÀ
);

308 
	`video_ªsﬁuti⁄_smÆl
();

310 
	`öô_˝u
();

311 
	`öô_mem‹y
();

315 if(
	`lﬂd_fûe
(
fûe_ext
, 
lﬂd_fûíame
) == -1)

317 
	`míu
(
	`c›y_s¸ìn
());

321 if(
	`lﬂd_gamïak
(
lﬂd_fûíame
) == -1)

323 #ifde‡
PC_BUILD


324 
	`¥ötf
("FaûedÅÿlﬂd gamïak %s,Éxôög.\n", 
lﬂd_fûíame
);

326 
	`exô
(-1);

329 
	`£t_gba_ªsﬁuti⁄
(
s¸ìn_sˇÀ
);

330 
	`video_ªsﬁuti⁄_smÆl
();

332 
	`öô_˝u
();

333 
	`öô_mem‹y
();

337 
œ°_‰ame
 = 0;

341 #ifde‡
PSP_BUILD


342 
	`execuã_¨m_å™¶©e
(
execuã_cy˛es
);

345 #ifde‡
GP2X_BUILD


346 
	`gë_ticks_us
(&
‰ame_cou¡_öôül_time°amp
);

354 
	`debug_⁄
();

356 if(
¨gc
 > 2)

358 
cuºít_debug_°©e
 = 
COUNTDOWN_BREAKPOINT
;

359 
bªakpoöt_vÆue
 = 
	`°πﬁ
(
¨gv
[2], 
NULL
, 16);

362 
	`åiggî_ext_evít
();

364 
	`execuã_¨m_å™¶©e
(
execuã_cy˛es
);

365 
	`execuã_¨m
(
execuã_cy˛es
);

368 
	}
}

370 
	$¥öt_mem‹y_°©s
(
u32
 *
cou¡î
, u32 *
ªgi⁄_°©s
, *
°©s_°r
)

372 
u32
 
Ÿhî_ªgi⁄_cou¡î
 = 
ªgi⁄_°©s
[0x1] +Ñegion_stats[0xE] +

373 
ªgi⁄_°©s
[0xF];

374 
u32
 
rom_ªgi⁄_cou¡î
 = 
ªgi⁄_°©s
[0x8] +Ñegion_stats[0x9] +

375 
ªgi⁄_°©s
[0xA] +Ñegion_stats[0xB] +Ñegion_stats[0xC] +

376 
ªgi⁄_°©s
[0xD];

377 
u32
 
_cou¡î
 = *
cou¡î
;

379 
	`¥ötf
("mem‹yác˚s†°©s: %†(ouào‡%d)\n", 
°©s_°r
, 
_cou¡î
);

380 
	`¥ötf
("bios: %f%%\tiwram: %f%%\tewram: %f%%\tvram: %f\n",

381 
ªgi⁄_°©s
[0x0] * 100.0 / 
_cou¡î
,Ñegion_stats[0x3] * 100.0 /

382 
_cou¡î
,

383 
ªgi⁄_°©s
[0x2] * 100.0 / 
_cou¡î
,Ñegion_stats[0x6] * 100.0 /

384 
_cou¡î
);

386 
	`¥ötf
("oam: %f%%\tpalette: %f%%\trom: %f%%\tother: %f%%\n",

387 
ªgi⁄_°©s
[0x7] * 100.0 / 
_cou¡î
,Ñegion_stats[0x5] * 100.0 /

388 
_cou¡î
,

389 
rom_ªgi⁄_cou¡î
 * 100.0 / 
_cou¡î
, 
Ÿhî_ªgi⁄_cou¡î
 * 100.0 /

390 
_cou¡î
);

392 *
cou¡î
 = 0;

393 
	`mem£t
(
ªgi⁄_°©s
, 0, (
u32
) * 16);

394 
	}
}

396 
u32
 
	gevít_cy˛es
 = 0;

397 c⁄° 
u32
 
	gevít_cy˛es_åiggî
 = 60 * 5;

398 
u32
 
	gno_Æpha
 = 0;

400 
	$åiggî_ext_evít
()

402 
u32
 
evít_numbî
 = 0;

403 
u64
 
bíchm¨k_ticks
[16];

404 
u64
 
√w_ticks
;

405 
u8
 
cuºít_ßve°©e_fûíame
[512];

409 if(
evít_numbî
)

411 
	`gë_ticks_us
(&
√w_ticks
);

412 
bíchm¨k_ticks
[
evít_numbî
 - 1] =

413 
√w_ticks
 - 
bíchm¨k_ticks
[
evít_numbî
 - 1];

416 
cuºít_‰ameskù_ty≥
 = 
no_‰ameskù
;

417 
no_Æpha
 = 0;

418 
synchr⁄ize_Êag
 = 0;

420 
	`gë_ßve°©e_fûíame_noshŸ
(
ßve°©e_¶Ÿ
,

421 
cuºít_ßve°©e_fûíame
);

422 
	`lﬂd_°©e
(
cuºít_ßve°©e_fûíame
);

424 
evít_numbî
)

432 
no_Æpha
 = 1;

438 
cuºít_‰ameskù_ty≥
 = 
m™uÆ_‰ameskù
;

439 
‰ameskù_vÆue
 = 1000000;

445 
ªg
[
CPU_HALT_STATE
] = 
CPU_HALT
;

446 
ªg
[
REG_CPSR
] = 0xD2;

451 
ªg
[
CPU_HALT_STATE
] = 
CPU_HALT
;

452 
ªg
[
REG_CPSR
] = 0xD2;

453 
cuºít_‰ameskù_ty≥
 = 
m™uÆ_‰ameskù
;

454 
‰ameskù_vÆue
 = 1000000;

460 *
¥öt_°rögs
[] =

471 
u32
 
i
;

473 
bíchm¨k_ticks
[6] = benchmark_ticks[0] - benchmark_ticks[2];

474 
bíchm¨k_ticks
[5] = benchmark_ticks[0] - benchmark_ticks[4] -

475 
bíchm¨k_ticks
[6];

476 
bíchm¨k_ticks
[7] = benchmark_ticks[0] - benchmark_ticks[1];

478 
	`¥ötf
("Bíchm¨kÑesu…†(%d fømes): \n", 
evít_cy˛es_åiggî
);

479 
i
 = 0; i < 8; i++)

481 
	`¥ötf
(" %s: %d ms (%f msÖer frame)\n",

482 
¥öt_°rögs
[
i
], (
u32
)
bíchm¨k_ticks
[i] / 1000,

483 ()(
bíchm¨k_ticks
[
i
] / (1000.0 * 
evít_cy˛es_åiggî
)));

484 if(
i
 == 4)

485 
	`¥ötf
("\n");

487 
	`quô
();

491 
evít_cy˛es
 = 0;

493 
	`gë_ticks_us
(
bíchm¨k_ticks
 + 
evít_numbî
);

494 
evít_numbî
++;

495 
	}
}

497 
u32
 
	$upd©e_gba
()

499 
úq_ty≥
 
úq_øi£d
 = 
IRQ_NONE
;

503 
˝u_ticks
 +
execuã_cy˛es
;

505 
ªg
[
CHANGED_PC_STATUS
] = 0;

507 if(
gbc_sound_upd©e
)

509 
gbc_upd©e_cou¡
++;

510 
	`upd©e_gbc_sound
(
˝u_ticks
);

511 
gbc_sound_upd©e
 = 0;

514 
	`upd©e_timî
(0);

515 
	`upd©e_timî
(1);

516 
	`upd©e_timî
(2);

517 
	`upd©e_timî
(3);

519 
video_cou¡
 -
execuã_cy˛es
;

521 if(
video_cou¡
 <= 0)

523 
u32
 
vcou¡
 = 
io_ªgi°îs
[
REG_VCOUNT
];

524 
u32
 
di•°©
 = 
io_ªgi°îs
[
REG_DISPSTAT
];

526 if((
di•°©
 & 0x02) == 0)

529 
video_cou¡
 += (272);

530 
di•°©
 |= 0x02;

532 if((
di•°©
 & 0x01) == 0)

534 
u32
 
i
;

535 if(
ﬂm_upd©e
)

536 
ﬂm_upd©e_cou¡
++;

538 if(
no_Æpha
)

539 
io_ªgi°îs
[
REG_BLDCNT
] = 0;

540 
	`upd©e_sˇ∆öe
();

543 
i
 = 0; i < 4; i++)

545 if(
dma
[
i
].
°¨t_ty≥
 =
DMA_START_HBLANK
)

546 
	`dma_å™s„r
(
dma
 + 
i
);

550 if(
di•°©
 & 0x10)

551 
úq_øi£d
 |
IRQ_HBLANK
;

556 
video_cou¡
 += 960;

557 
di•°©
 &= ~0x02;

559 
vcou¡
++;

561 if(
vcou¡
 == 160)

564 
u32
 
i
;

566 
di•°©
 |= 0x01;

567 if(
di•°©
 & 0x8)

569 
úq_øi£d
 |
IRQ_VBLANK
;

572 
afföe_ª„ªn˚_x
[0] =

573 (
s32
)(
	`addªss32
(
io_ªgi°îs
, 0x28) << 4) >> 4;

574 
afföe_ª„ªn˚_y
[0] =

575 (
s32
)(
	`addªss32
(
io_ªgi°îs
, 0x2C) << 4) >> 4;

576 
afföe_ª„ªn˚_x
[1] =

577 (
s32
)(
	`addªss32
(
io_ªgi°îs
, 0x38) << 4) >> 4;

578 
afföe_ª„ªn˚_y
[1] =

579 (
s32
)(
	`addªss32
(
io_ªgi°îs
, 0x3C) << 4) >> 4;

581 
i
 = 0; i < 4; i++)

583 if(
dma
[
i
].
°¨t_ty≥
 =
DMA_START_VBLANK
)

584 
	`dma_å™s„r
(
dma
 + 
i
);

589 if(
vcou¡
 == 228)

592 
di•°©
 &= ~0x01;

593 
‰ame_ticks
++;

595 #ifde‡
PC_BUILD


596 
	`¥ötf
("frame update (%x), %d instructionsÅotal, %d RAM flushes\n",

597 
ªg
[
REG_PC
], 
ö°ru˘i⁄_cou¡
 - 
œ°_‰ame
, 
Êush_øm_cou¡
);

598 
œ°_‰ame
 = 
ö°ru˘i⁄_cou¡
;

602 
gbc_upd©e_cou¡
 = 0;

603 
ﬂm_upd©e_cou¡
 = 0;

604 
Êush_øm_cou¡
 = 0;

607 if(
	`upd©e_öput
())

610 
	`upd©e_gbc_sound
(
˝u_ticks
);

611 
	`synchr⁄ize
();

613 
	`upd©e_s¸ìn
();

615 if(
upd©e_backup_Êag
)

616 
	`upd©e_backup
();

618 
	`¥o˚ss_chóts
();

620 
evít_cy˛es
++;

621 if(
evít_cy˛es
 =
evít_cy˛es_åiggî
)

623 
	`åiggî_ext_evít
();

627 
vcou¡
 = 0;

630 if(
vcou¡
 =(
di•°©
 >> 8))

633 
di•°©
 |= 0x04;

634 if(
di•°©
 & 0x20)

636 
úq_øi£d
 |
IRQ_VCOUNT
;

641 
di•°©
 &= ~0x04;

644 
io_ªgi°îs
[
REG_VCOUNT
] = 
vcou¡
;

646 
io_ªgi°îs
[
REG_DISPSTAT
] = 
di•°©
;

649 if(
úq_øi£d
)

650 
	`øi£_öãºu±
(
úq_øi£d
);

652 
execuã_cy˛es
 = 
video_cou¡
;

654 
	`check_timî
(0);

655 
	`check_timî
(1);

656 
	`check_timî
(2);

657 
	`check_timî
(3);

658 } 
ªg
[
CPU_HALT_STATE
] !
CPU_ACTIVE
);

660  
execuã_cy˛es
;

661 
	}
}

663 
u64
 
	gœ°_s¸ìn_time°amp
 = 0;

664 
u32
 
	g‰ame_•ìd
 = 15000;

667 #ifde‡
PSP_BUILD


669 
u32
 
	gªÆ_‰ame_cou¡
 = 0;

670 
u32
 
	gvútuÆ_‰ame_cou¡
 = 0;

671 
u32
 
	gnum_skù≥d_‰ames
 = 0;

673 
	$vbœnk_öãºu±_h™dÀr
(
u32
 
sub
, u32 *
∑rg
)

675 
ªÆ_‰ame_cou¡
++;

676 
	}
}

678 
	$synchr⁄ize
()

680 
ch¨_buf„r
[64];

681 
u64
 
√w_ticks
, 
time_dñè
;

682 
s32
 
u£d_‰ameskù
 = 
‰ameskù_vÆue
;

684 if(!
synchr⁄ize_Êag
)

686 
	`¥öt_°rög
("--FF--", 0xFFFF, 0x000, 0, 0);

687 
u£d_‰ameskù
 = 4;

688 
vútuÆ_‰ame_cou¡
 = 
ªÆ_‰ame_cou¡
 - 1;

691 
skù_√xt_‰ame
 = 0;

693 
vútuÆ_‰ame_cou¡
++;

695 if(
ªÆ_‰ame_cou¡
 >
vútuÆ_‰ame_cou¡
)

697 if((
ªÆ_‰ame_cou¡
 > 
vútuÆ_‰ame_cou¡
) &&

698 (
cuºít_‰ameskù_ty≥
 =
auto_‰ameskù
) &&

699 (
num_skù≥d_‰ames
 < 
‰ameskù_vÆue
))

701 
skù_√xt_‰ame
 = 1;

702 
num_skù≥d_‰ames
++;

706 
vútuÆ_‰ame_cou¡
 = 
ªÆ_‰ame_cou¡
;

707 
num_skù≥d_‰ames
 = 0;

714 
	`dñay_us
(1);

718 if(
synchr⁄ize_Êag
)

719 
	`s˚Di•œyWaôVbœnkSèπ
();

722 if(
cuºít_‰ameskù_ty≥
 =
m™uÆ_‰ameskù
)

724 
‰ameskù_cou¡î
 = (frameskip_counter + 1) %

725 (
u£d_‰ameskù
 + 1);

726 if(
øndom_skù
)

728 if(
‰ameskù_cou¡î
 !(
	`ønd
(Ë% (
u£d_‰ameskù
 + 1)))

729 
skù_√xt_‰ame
 = 1;

733 if(
‰ameskù_cou¡î
)

734 
skù_√xt_‰ame
 = 1;

749 
	}
}

753 #ifde‡
GP2X_BUILD


755 
u32
 
	gªÆ_‰ame_cou¡
 = 0;

756 
u32
 
	gvútuÆ_‰ame_cou¡
 = 0;

757 
u32
 
	gnum_skù≥d_‰ames
 = 0;

758 
u32
 
	göãrvÆ_skù≥d_‰ames
;

759 
u32
 
	g‰ames
;

761 
u32
 
	gskù≥d_‰ames
 = 0;

762 
u32
 
	gticks_√eded_tŸÆ
 = 0;

763 c⁄° 
u32
 
	g‰ame_öãrvÆ
 = 60;

765 
	$synchr⁄ize
()

767 
u64
 
√w_ticks
;

768 
u64
 
time_dñè
;

769 
u32
 
Âs
 = 60;

770 
u32
 
‰ames_døwn
 = 60;

772 if(
gp2x_Âs_debug
)

774 
¥öt_buf„r
[128];

775 
	`•rötf
(
¥öt_buf„r
, "%d (%d)", 
Âs
, 
‰ames_døwn
);

776 
	`¥öt_°rög
(
¥öt_buf„r
, 0xFFFF, 0x000, 0, 0);

779 
	`gë_ticks_us
(&
√w_ticks
);

780 
time_dñè
 = 
√w_ticks
 - 
œ°_s¸ìn_time°amp
;

781 
œ°_s¸ìn_time°amp
 = 
√w_ticks
;

782 
ticks_√eded_tŸÆ
 +
time_dñè
;

784 
skù_√xt_‰ame
 = 0;

785 
vútuÆ_‰ame_cou¡
++;

787 
ªÆ_‰ame_cou¡
 = ((
√w_ticks
 -

788 
‰ame_cou¡_öôül_time°amp
) * 3) / 50000;

790 if(
ªÆ_‰ame_cou¡
 >
vútuÆ_‰ame_cou¡
)

792 if((
ªÆ_‰ame_cou¡
 > 
vútuÆ_‰ame_cou¡
) &&

793 (
cuºít_‰ameskù_ty≥
 =
auto_‰ameskù
) &&

794 (
num_skù≥d_‰ames
 < 
‰ameskù_vÆue
))

796 
skù_√xt_‰ame
 = 1;

797 
num_skù≥d_‰ames
++;

801 
vútuÆ_‰ame_cou¡
 = 
ªÆ_‰ame_cou¡
;

802 
num_skù≥d_‰ames
 = 0;

807 if((
synchr⁄ize_Êag
) &&

808 ((
time_dñè
 < 
‰ame_•ìd
Ë&& 
synchr⁄ize_Êag
))

810 
	`dñay_us
(
‰ame_•ìd
 - 
time_dñè
);

814 
‰ames
++;

816 if(
‰ames
 =
‰ame_öãrvÆ
)

818 
u32
 
√w_Âs
;

819 
u32
 
√w_‰ames_døwn
;

821 
time_dñè
 = 
√w_ticks
 - 
œ°_‰ame_öãrvÆ_time°amp
;

822 
√w_Âs
 = (
u64
)((u64)1000000 * (u64)
‰ame_öãrvÆ
Ë/ 
time_dñè
;

823 
√w_‰ames_døwn
 =

824 (
‰ame_öãrvÆ
 - 
öãrvÆ_skù≥d_‰ames
) * (60 / frame_interval);

827 
Âs
 = 
√w_Âs
;

828 
‰ames_døwn
 = 
√w_‰ames_døwn
;

830 
œ°_‰ame_öãrvÆ_time°amp
 = 
√w_ticks
;

831 
öãrvÆ_skù≥d_‰ames
 = 0;

832 
ticks_√eded_tŸÆ
 = 0;

833 
‰ames
 = 0;

836 if(
cuºít_‰ameskù_ty≥
 =
m™uÆ_‰ameskù
)

838 
‰ameskù_cou¡î
 = (frameskip_counter + 1) %

839 (
‰ameskù_vÆue
 + 1);

840 if(
øndom_skù
)

842 if(
‰ameskù_cou¡î
 !(
	`ønd
(Ë% (
‰ameskù_vÆue
 + 1)))

843 
skù_√xt_‰ame
 = 1;

847 if(
‰ameskù_cou¡î
)

848 
skù_√xt_‰ame
 = 1;

852 
öãrvÆ_skù≥d_‰ames
 +
skù_√xt_‰ame
;

854 if(!
synchr⁄ize_Êag
)

855 
	`¥öt_°rög
("--FF--", 0xFFFF, 0x000, 0, 0);

856 
	}
}

861 #ifde‡
PC_BUILD


863 
u32
 
	gticks_√eded_tŸÆ
 = 0;

864 
	gus_√eded
 = 0.0;

865 
u32
 
	g‰ames
 = 0;

866 c⁄° 
u32
 
	g‰ame_öãrvÆ
 = 60;

868 
	$synchr⁄ize
()

870 
u64
 
√w_ticks
;

871 
u64
 
time_dñè
;

872 
ch¨_buf„r
[64];

874 
	`gë_ticks_us
(&
√w_ticks
);

875 
time_dñè
 = 
√w_ticks
 - 
œ°_s¸ìn_time°amp
;

876 
œ°_s¸ìn_time°amp
 = 
√w_ticks
;

877 
ticks_√eded_tŸÆ
 +
time_dñè
;

879 
skù_√xt_‰ame
 = 0;

881 if((
time_dñè
 < 
‰ame_•ìd
Ë&& 
synchr⁄ize_Êag
)

883 
	`dñay_us
(
‰ame_•ìd
 - 
time_dñè
);

886 
‰ames
++;

888 if(
‰ames
 =
‰ame_öãrvÆ
)

890 
us_√eded
 = ()
ticks_√eded_tŸÆ
 / 
‰ame_öãrvÆ
;

891 
ticks_√eded_tŸÆ
 = 0;

892 
‰ames
 = 0;

895 if(
cuºít_‰ameskù_ty≥
 =
m™uÆ_‰ameskù
)

897 
‰ameskù_cou¡î
 = (frameskip_counter + 1) %

898 (
‰ameskù_vÆue
 + 1);

899 if(
øndom_skù
)

901 if(
‰ameskù_cou¡î
 !(
	`ønd
(Ë% (
‰ameskù_vÆue
 + 1)))

902 
skù_√xt_‰ame
 = 1;

906 if(
‰ameskù_cou¡î
)

907 
skù_√xt_‰ame
 = 1;

911 if(
synchr⁄ize_Êag
 == 0)

912 
	`¥öt_°rög
("--FF--", 0xFFFF, 0x000, 0, 0);

914 
	`•rötf
(
ch¨_buf„r
, "gpSP: %.1fm†%.1fÂs", 
us_√eded
 / 1000.0,

915 1000000.0 / 
us_√eded
);

916 
	`SDL_WM_SëC≠ti⁄
(
ch¨_buf„r
, "gpSP");

924 
	}
}

928 
	$quô
()

930 if(!
upd©e_backup_Êag
)

931 
	`upd©e_backup_f‹˚
();

933 
	`sound_exô
();

935 #ifde‡
REGISTER_USAGE_ANALYZE


936 
	`¥öt_ªgi°î_ußge
();

939 #ifde‡
PSP_BUILD


940 
	`s˚Kî√lExôGame
();

942 
	`SDL_Quô
();

944 #ifde‡
GP2X_BUILD


945 
	`gp2x_quô
();

948 
	`exô
(0);

950 
	}
}

952 
	$ª£t_gba
()

954 
	`öô_maö
();

955 
	`öô_mem‹y
();

956 
	`öô_˝u
();

957 
	`ª£t_sound
();

958 
	}
}

960 #ifde‡
PSP_BUILD


962 
u32
 
	$fûe_Àngth
(
u8
 *
fûíame
, 
s32
 
dummy
)

964 
S˚IoSèt
 
°©s
;

965 
	`s˚IoGë°©
(
fûíame
, &
°©s
);

966  
°©s
.
°_size
;

967 
	}
}

969 
	$dñay_us
(
u32
 
us_cou¡
)

971 
	`s˚Kî√lDñayThªad
(
us_cou¡
);

972 
	}
}

974 
	$gë_ticks_us
(
u64
 *
tick_ªtu∫
)

976 
u64
 
ticks
;

977 
	`s˚RtcGëCuºítTick
(&
ticks
);

979 *
tick_ªtu∫
 = (
ticks
 * 1000000Ë/ 
	`s˚RtcGëTickResﬁuti⁄
();

980 
	}
}

984 
u32
 
	$fûe_Àngth
(
u8
 *
dummy
, 
FILE
 *
Â
)

986 
u32
 
Àngth
;

988 
	`f£ek
(
Â
, 0, 
SEEK_END
);

989 
Àngth
 = 
	`·ñl
(
Â
);

990 
	`f£ek
(
Â
, 0, 
SEEK_SET
);

992  
Àngth
;

993 
	}
}

995 #ifde‡
PC_BUILD


997 
	$dñay_us
(
u32
 
us_cou¡
)

999 
	`SDL_Dñay
(
us_cou¡
 / 1000);

1000 
	}
}

1002 
	$gë_ticks_us
(
u64
 *
ticks_ªtu∫
)

1004 *
ticks_ªtu∫
 = (
	`SDL_GëTicks
() * 1000);

1005 
	}
}

1009 
	$dñay_us
(
u32
 
us_cou¡
)

1011 
	`u¶ìp
(
us_cou¡
);

1012 
	}
}

1014 
	$gë_ticks_us
(
u64
 *
ticks_ªtu∫
)

1016 
timevÆ
 
cuºít_time
;

1017 
	`gëtimeofday
(&
cuºít_time
, 
NULL
);

1019 *
ticks_ªtu∫
 =

1020 (
u64
)
cuºít_time
.
tv_£c
 * 1000000 + cuºít_time.
tv_u£c
;

1021 
	}
}

1027 
	$ch™ge_ext
(
u8
 *
§c
, u8 *
buf„r
, u8 *
exãnsi⁄
)

1029 
u8
 *
dŸ_posôi⁄
;

1030 
	`°r˝y
(
buf„r
, 
§c
);

1031 
dŸ_posôi⁄
 = 
	`°ºchr
(
buf„r
, '.');

1033 if(
dŸ_posôi⁄
)

1034 
	`°r˝y
(
dŸ_posôi⁄
, 
exãnsi⁄
);

1035 
	}
}

1037 
	#maö_ßve°©e_buûdî
(
ty≥
) \

1038 
maö_
##
ty≥
##
	`_ßve°©e
(
fûe_èg_ty≥
 
ßve°©e_fûe
) \

1040 
fûe_
##
ty≥
##
	`_v¨übÀ
(
ßve°©e_fûe
, 
˝u_ticks
); \

1041 
fûe_
##
ty≥
##
	`_v¨übÀ
(
ßve°©e_fûe
, 
execuã_cy˛es
); \

1042 
fûe_
##
ty≥
##
	`_v¨übÀ
(
ßve°©e_fûe
, 
video_cou¡
); \

1043 
fûe_
##
ty≥
##
	`_¨øy
(
ßve°©e_fûe
, 
timî
); \

1045 

	)

1046 
maö_ßve°©e_buûdî
(
ªad
);

1047 
maö_ßve°©e_buûdî
(
wrôe_mem
);

1050 
	$¥ötout
(*
°r
, 
u32
 
vÆ
)

1052 
	`¥ötf
(
°r
, 
vÆ
);

1053 
	}
}

	@main.h

20 #i‚de‡
MAIN_H


21 
	#MAIN_H


	)

25 
	mTIMER_INACTIVE
,

26 
	mTIMER_PRESCALE
,

27 
	mTIMER_CASCADE


28 } 
	ttimî_°©us_ty≥
;

32 
	mTIMER_NO_IRQ
,

33 
	mTIMER_TRIGGER_IRQ


34 } 
	ttimî_úq_ty≥
;

39 
	mTIMER_DS_CHANNEL_NONE
,

40 
	mTIMER_DS_CHANNEL_A
,

41 
	mTIMER_DS_CHANNEL_B
,

42 
	mTIMER_DS_CHANNEL_BOTH


43 } 
	ttimî_ds_ch™√l_ty≥
;

47 
s32
 
	mcou¡
;

48 
u32
 
	mªlﬂd
;

49 
u32
 
	m¥esˇÀ
;

50 
u32
 
	m°›_˝u_ticks
;

51 
fixed16_16
 
	m‰equícy_°ï
;

52 
timî_ds_ch™√l_ty≥
 
	mdúe˘_sound_ch™√ls
;

53 
timî_úq_ty≥
 
	múq
;

54 
timî_°©us_ty≥
 
	m°©us
;

55 } 
	ttimî_ty≥
;

59 
	mauto_‰ameskù
,

60 
	mm™uÆ_‰ameskù
,

61 
	mno_‰ameskù


62 } 
	t‰ameskù_ty≥
;

64 
u32
 
˝u_ticks
;

65 
u32
 
‰ame_ticks
;

66 
u32
 
execuã_cy˛es
;

67 
‰ameskù_ty≥
 
cuºít_‰ameskù_ty≥
;

68 
u32
 
‰ameskù_vÆue
;

69 
u32
 
øndom_skù
;

70 
u32
 
globÆ_cy˛es_≥r_ö°ru˘i⁄
;

71 
u32
 
synchr⁄ize_Êag
;

72 
u32
 
skù_√xt_‰ame
;

74 
timî_ty≥
 
timî
[4];

75 
u32
 
	g¥esˇÀ_èbÀ
[] = { 0, 6, 8, 10 };

77 
u32
 
cy˛e_mem‹y_ac˚ss
;

78 
u32
 
cy˛e_pc_ªœtive_ac˚ss
;

79 
u32
 
cy˛e_•_ªœtive_ac˚ss
;

80 
u32
 
cy˛e_block_mem‹y_ac˚ss
;

81 
u32
 
cy˛e_block_mem‹y_•_ac˚ss
;

82 
u32
 
cy˛e_block_mem‹y_w‹ds
;

83 
u32
 
cy˛e_dma16_w‹ds
;

84 
u32
 
cy˛e_dma32_w‹ds
;

85 
u32
 
Êush_øm_cou¡
;

87 
u64
 
ba£_time°amp
;

89 
u8
 
maö_∑th
[512];

91 
u32
 
upd©e_backup_Êag
;

92 
u32
 
˛ock_•ìd
;

94 
u32
 
upd©e_gba
();

95 
ª£t_gba
();

96 
synchr⁄ize
();

97 
quô
();

98 
dñay_us
(
u32
 
us_cou¡
);

99 
gë_ticks_us
(
u64
 *
tick_ªtu∫
);

100 
game_«me_ext
(
u8
 *
§c
, u8 *
buf„r
, u8 *
exãnsi⁄
);

101 
maö_wrôe_mem_ßve°©e
(
fûe_èg_ty≥
 
ßve°©e_fûe
);

102 
maö_ªad_ßve°©e
(
fûe_èg_ty≥
 
ßve°©e_fûe
);

105 #ifde‡
PSP_BUILD


107 
u32
 
fûe_Àngth
(
u8
 *
fûíame
, 
s32
 
dummy
);

109 
u32
 
ªÆ_‰ame_cou¡
;

110 
u32
 
vútuÆ_‰ame_cou¡
;

111 
u32
 
max_‰ameskù
;

112 
u32
 
num_skù≥d_‰ames
;

117 #ifde‡
GP2X_BUILD


119 
u64
 
‰ame_cou¡_öôül_time°amp
;

120 
u32
 
ªÆ_‰ame_cou¡
;

121 
u32
 
vútuÆ_‰ame_cou¡
;

122 
u32
 
max_‰ameskù
;

123 
u32
 
num_skù≥d_‰ames
;

128 #ifde‡
PC_BUILD


130 
u32
 
fûe_Àngth
(
u8
 *
dummy
, 
FILE
 *
Â
);

134 
	#cou¡_timî
(
timî_numbî
) \

135 
timî
[
timî_numbî
].
ªlﬂd
 = 0x10000 - 
vÆue
; \

136 if(
timî_numbî
 < 2) \

138 
u32
 
timî_ªlﬂd
 = \

139 
timî
[
timî_numbî
].
ªlﬂd
 <<Åimî[timî_numbî].
¥esˇÀ
; \

140 
	`sound_upd©e_‰equícy_°ï
(
timî_numbî
); \

142 

	)

143 
	#adju°_sound_buf„r
(
timî_numbî
, 
ch™√l
) \

144 if(
timî
[
timî_numbî
].
dúe˘_sound_ch™√ls
 & (0x01 << 
ch™√l
)) \

146 
dúe˘_sound_ch™√l
[
ch™√l
].
buf„r_ödex
 = \

147 (
dúe˘_sound_ch™√l
[
ch™√l
].
buf„r_ödex
 + 
buf„r_adju°
) % \

148 
BUFFER_SIZE
; \

150 

	)

151 
	#åiggî_timî
(
timî_numbî
) \

152 if(
vÆue
 & 0x80) \

154 if(
timî
[
timî_numbî
].
°©us
 =
TIMER_INACTIVE
) \

156 
u32
 
¥esˇÀ
 = 
¥esˇÀ_èbÀ
[
vÆue
 & 0x03]; \

157 
u32
 
timî_ªlﬂd
 = 
timî
[
timî_numbî
].
ªlﬂd
; \

159 if((
vÆue
 >> 2) & 0x01) \

160 
timî
[
timî_numbî
].
°©us
 = 
TIMER_CASCADE
; \

162 
timî
[
timî_numbî
].
°©us
 = 
TIMER_PRESCALE
; \

164 
timî
[
timî_numbî
].
¥esˇÀ
 =Örescale; \

165 
timî
[
timî_numbî
].
úq
 = (
vÆue
 >> 6) & 0x01; \

167 
	`addªss16
(
io_ªgi°îs
, 0x100 + (
timî_numbî
 * 4)) = \

168 -
timî_ªlﬂd
; \

170 
timî_ªlﬂd
 <<
¥esˇÀ
; \

171 
timî
[
timî_numbî
].
cou¡
 = 
timî_ªlﬂd
; \

173 if(
timî_ªlﬂd
 < 
execuã_cy˛es
) \

174 
execuã_cy˛es
 = 
timî_ªlﬂd
; \

176 if(
timî_numbî
 < 2) \

178 
u32
 
buf„r_adju°
 = \

179 (
u32
)((()(
˝u_ticks
 - 
timî
[
timî_numbî
].
°›_˝u_ticks
) * \

180 
sound_‰equícy
) / 16777216.0) * 2; \

182 
	`sound_upd©e_‰equícy_°ï
(
timî_numbî
); \

183 
	`adju°_sound_buf„r
(
timî_numbî
, 0); \

184 
	`adju°_sound_buf„r
(
timî_numbî
, 1); \

190 if(
timî
[
timî_numbî
].
°©us
 !
TIMER_INACTIVE
) \

192 
timî
[
timî_numbî
].
°©us
 = 
TIMER_INACTIVE
; \

193 
timî
[
timî_numbî
].
°›_˝u_ticks
 = 
˝u_ticks
; \

196 
	`addªss16
(
io_ªgi°îs
, 0x102 + (
timî_numbî
 * 4)Ë
vÆue
; \

197 

	)

198 
ch™ge_ext
(
u8
 *
§c
, u8 *
buf„r
, u8 *
exãnsi⁄
);

	@memory.c

20 
	~"comm⁄.h
"

22 
u32
 
lﬂd_fûe_zù
(
u8
 *
fûíame
);

26 
u32
 
	gwaô°©e_cy˛es_£quítül
[16][3] =

46 
u32
 
	ggamïak_waô°©e_£quítül
[2][3][3] =

60 
u16
 
	g∑Àâe_øm
[512];

61 
u16
 
	gﬂm_øm
[512];

62 
u16
 
	g∑Àâe_øm_c⁄vîãd
[512];

63 
u16
 
	gio_ªgi°îs
[1024 * 16];

64 
u8
 
	gewøm
[1024 * 256 * 2];

65 
u8
 
	giwøm
[1024 * 32 * 2];

66 
u8
 
	gvøm
[1024 * 96 * 2];

68 
u8
 
	gbios_rom
[1024 * 32];

69 
u32
 
	gbios_ªad_¥Ÿe˘
;

72 
u8
 
	ggamïak_backup
[1024 * 128];

75 
u8
 *
	ggamïak_rom
;

76 
u32
 
	ggamïak_size
;

78 
dma_å™s„r_ty≥
 
	gdma
[4];

80 
u8
 *
	gmem‹y_ªgi⁄s
[16];

81 
u32
 
	gmem‹y_limôs
[16];

85 
u32
 
	m∑ge_time°amp
;

86 
u32
 
	mphysiˇl_ödex
;

87 } 
	tgamïak_sw≠_íåy_ty≥
;

89 
u32
 
	ggamïak_øm_buf„r_size
;

90 
u32
 
	ggamïak_øm_∑ges
;

93 
gamïak_sw≠_íåy_ty≥
 *
	ggamïak_mem‹y_m≠
;

98 #ifde‡
PSP_BUILD


100 
fûe_èg_ty≥
 
	ggamïak_fûe_œrge
 = -1;

104 
fûe_èg_ty≥
 
	ggamïak_fûe_œrge
 = 
NULL
;

108 
u32
 
	gdúe˘_m≠_vøm
 = 0;

114 
u32
 
	gﬂm_upd©e
 = 1;

117 
u32
 
	ggbc_sound_upd©e
 = 0;

120 
u32
 
	ggbc_sound_wave_upd©e
 = 0;

123 
u32
 
	gbackup_upd©e
 = 0;

127 c⁄° 
u32
 
	gwrôe_backup_dñay
 = 10;

132 
	mBACKUP_SRAM
,

133 
	mBACKUP_FLASH
,

134 
	mBACKUP_EEPROM
,

135 
	mBACKUP_NONE


136 } 
	tbackup_ty≥_ty≥
;

140 
	mSRAM_SIZE_32KB
,

141 
	mSRAM_SIZE_64KB


142 } 
	t§am_size_ty≥
;

146 
backup_ty≥_ty≥
 
	gbackup_ty≥
 = 
BACKUP_NONE
;

147 
§am_size_ty≥
 
	g§am_size
 = 
SRAM_SIZE_32KB
;

151 
	mFLASH_BASE_MODE
,

152 
	mFLASH_ERASE_MODE
,

153 
	mFLASH_ID_MODE
,

154 
	mFLASH_WRITE_MODE
,

155 
	mFLASH_BANKSWITCH_MODE


156 } 
	tÊash_mode_ty≥
;

160 
	mFLASH_SIZE_64KB
,

161 
	mFLASH_SIZE_128KB


162 } 
	tÊash_size_ty≥
;

164 
Êash_mode_ty≥
 
	gÊash_mode
 = 
FLASH_BASE_MODE
;

165 
u32
 
	gÊash_comm™d_posôi⁄
 = 0;

166 
u8
 *
	gÊash_b™k_±r
 = 
gamïak_backup
;

168 
Êash_devi˚_id_ty≥
 
	gÊash_devi˚_id
 = 
FLASH_DEVICE_MACRONIX_64KB
;

169 
Êash_m™uÁ˘uªr_id_ty≥
 
	gÊash_m™uÁ˘uªr_id
 =

170 
FLASH_MANUFACTURER_MACRONIX
;

171 
Êash_size_ty≥
 
	gÊash_size
 = 
FLASH_SIZE_64KB
;

173 
u8
 
	$ªad_backup
(
u32
 
addªss
)

175 
u8
 
vÆue
;

177 if(
backup_ty≥
 =
BACKUP_NONE
)

178 
backup_ty≥
 = 
BACKUP_SRAM
;

180 if(
backup_ty≥
 =
BACKUP_SRAM
)

182 
vÆue
 = 
gamïak_backup
[
addªss
];

186 if(
Êash_mode
 =
FLASH_ID_MODE
)

189 if(
addªss
 == 0x0000)

190 
vÆue
 = 
Êash_m™uÁ˘uªr_id
;

194 if(
addªss
 == 0x0001)

195 
vÆue
 = 
Êash_devi˚_id
;

199 
vÆue
 = 
Êash_b™k_±r
[
addªss
];

202  
vÆue
;

203 
	}
}

205 
	#ªad_backup8
() \

206 
vÆue
 = 
	`ªad_backup
(
addªss
 & 0xFFFF) \

207 

	)

208 
	#ªad_backup16
() \

209 
vÆue
 = 0 \

210 

	)

211 
	#ªad_backup32
() \

212 
vÆue
 = 0 \

213 

	)

220 
	mEEPROM_512_BYTE
,

221 
	mEEPROM_8_KBYTE


222 } 
	tì¥om_size_ty≥
;

226 
	mEEPROM_BASE_MODE
,

227 
	mEEPROM_READ_MODE
,

228 
	mEEPROM_READ_HEADER_MODE
,

229 
	mEEPROM_ADDRESS_MODE
,

230 
	mEEPROM_WRITE_MODE
,

231 
	mEEPROM_WRITE_ADDRESS_MODE
,

232 
	mEEPROM_ADDRESS_FOOTER_MODE
,

233 
	mEEPROM_WRITE_FOOTER_MODE


234 } 
	tì¥om_mode_ty≥
;

237 
ì¥om_size_ty≥
 
	gì¥om_size
 = 
EEPROM_512_BYTE
;

238 
ì¥om_mode_ty≥
 
	gì¥om_mode
 = 
EEPROM_BASE_MODE
;

239 
u32
 
	gì¥om_addªss_Àngth
;

240 
u32
 
	gì¥om_addªss
 = 0;

241 
s32
 
	gì¥om_cou¡î
 = 0;

242 
u8
 
	gì¥om_buf„r
[8];

245 
fun˘i⁄_cc
 
	$wrôe_ì¥om
(
u32
 
addªss
, u32 
vÆue
)

247 
ì¥om_mode
)

249 
EEPROM_BASE_MODE
:

250 
backup_ty≥
 = 
BACKUP_EEPROM
;

251 
ì¥om_buf„r
[0] |(
vÆue
 & 0x01Ë<< (1 - 
ì¥om_cou¡î
);

252 
ì¥om_cou¡î
++;

253 if(
ì¥om_cou¡î
 == 2)

255 if(
ì¥om_size
 =
EEPROM_512_BYTE
)

256 
ì¥om_addªss_Àngth
 = 6;

258 
ì¥om_addªss_Àngth
 = 14;

260 
ì¥om_cou¡î
 = 0;

262 
ì¥om_buf„r
[0] & 0x03)

265 
ì¥om_mode
 = 
EEPROM_WRITE_ADDRESS_MODE
;

269 
ì¥om_mode
 = 
EEPROM_ADDRESS_MODE
;

272 
	`addªss16
(
ì¥om_buf„r
, 0) = 0;

276 
EEPROM_ADDRESS_MODE
:

277 
EEPROM_WRITE_ADDRESS_MODE
:

278 
ì¥om_buf„r
[
ì¥om_cou¡î
 / 8]

279 |(
vÆue
 & 0x01Ë<< (7 - (
ì¥om_cou¡î
 % 8));

280 
ì¥om_cou¡î
++;

281 if(
ì¥om_cou¡î
 =
ì¥om_addªss_Àngth
)

283 if(
ì¥om_size
 =
EEPROM_512_BYTE
)

285 
ì¥om_addªss
 =

286 (
	`addªss16
(
ì¥om_buf„r
, 0) >> 2) * 8;

290 
ì¥om_addªss
 = (((
u32
)
ì¥om_buf„r
[1] >> 2) |

291 ((
u32
)
ì¥om_buf„r
[0] << 6)) * 8;

294 
	`addªss16
(
ì¥om_buf„r
, 0) = 0;

295 
ì¥om_cou¡î
 = 0;

297 if(
ì¥om_mode
 =
EEPROM_ADDRESS_MODE
)

299 
ì¥om_mode
 = 
EEPROM_ADDRESS_FOOTER_MODE
;

303 
ì¥om_mode
 = 
EEPROM_WRITE_MODE
;

304 
	`mem£t
(
gamïak_backup
 + 
ì¥om_addªss
, 0, 8);

309 
EEPROM_WRITE_MODE
:

310 
gamïak_backup
[
ì¥om_addªss
 + (
ì¥om_cou¡î
 / 8)] |=

311 (
vÆue
 & 0x01Ë<< (7 - (
ì¥om_cou¡î
 % 8));

312 
ì¥om_cou¡î
++;

313 if(
ì¥om_cou¡î
 == 64)

315 
backup_upd©e
 = 
wrôe_backup_dñay
;

316 
ì¥om_cou¡î
 = 0;

317 
ì¥om_mode
 = 
EEPROM_WRITE_FOOTER_MODE
;

321 
EEPROM_ADDRESS_FOOTER_MODE
:

322 
EEPROM_WRITE_FOOTER_MODE
:

323 
ì¥om_cou¡î
 = 0;

324 if(
ì¥om_mode
 =
EEPROM_ADDRESS_FOOTER_MODE
)

326 
ì¥om_mode
 = 
EEPROM_READ_HEADER_MODE
;

330 
ì¥om_mode
 = 
EEPROM_BASE_MODE
;

334 
	}
}

336 
	#ªad_mem‹y_gamïak
(
ty≥
) \

337 
u32
 
gamïak_ödex
 = 
addªss
 >> 15; \

338 
u8
 *
m≠
 = 
mem‹y_m≠_ªad
[
gamïak_ödex
]; \

340 if(
m≠
 =
NULL
) \

341 
m≠
 = 
	`lﬂd_gamïak_∑ge
(
gamïak_ödex
 & 0x3FF); \

343 
vÆue
 = 
addªss
##
	`ty≥
(
m≠
,áddress & 0x7FFF) \

344 

	)

345 
	#ªad_›í8
() \

346 if(!(
ªg
[
REG_CPSR
] & 0x20)) \

347 
vÆue
 = 
	`ªad_mem‹y8
(
ªg
[
REG_PC
] + 4 + (
addªss
 & 0x03)); \

349 
vÆue
 = 
	`ªad_mem‹y8
(
ªg
[
REG_PC
] + 2 + (
addªss
 & 0x01)) \

350 

	)

351 
	#ªad_›í16
() \

352 if(!(
ªg
[
REG_CPSR
] & 0x20)) \

353 
vÆue
 = 
	`ªad_mem‹y16
(
ªg
[
REG_PC
] + 4 + (
addªss
 & 0x02)); \

355 
vÆue
 = 
	`ªad_mem‹y16
(
ªg
[
REG_PC
] + 2) \

356 

	)

357 
	#ªad_›í32
() \

358 if(!(
ªg
[
REG_CPSR
] & 0x20)) \

360 
vÆue
 = 
	`ªad_mem‹y32
(
ªg
[
REG_PC
] + 4); \

364 
u32
 
cuºít_ö°ru˘i⁄
 = 
	`ªad_mem‹y16
(
ªg
[
REG_PC
] + 2); \

365 
vÆue
 = 
cuºít_ö°ru˘i⁄
 | (current_instruction << 16); \

367 

	)

368 
u32
 
fun˘i⁄_cc
 
	$ªad_ì¥om
()

370 
u32
 
vÆue
;

372 
ì¥om_mode
)

374 
EEPROM_BASE_MODE
:

375 
vÆue
 = 1;

378 
EEPROM_READ_MODE
:

379 
vÆue
 = (
gamïak_backup
[
ì¥om_addªss
 + (
ì¥om_cou¡î
 / 8)] >>

380 (7 - (
ì¥om_cou¡î
 % 8))) & 0x01;

381 
ì¥om_cou¡î
++;

382 if(
ì¥om_cou¡î
 == 64)

384 
ì¥om_cou¡î
 = 0;

385 
ì¥om_mode
 = 
EEPROM_BASE_MODE
;

389 
EEPROM_READ_HEADER_MODE
:

390 
vÆue
 = 0;

391 
ì¥om_cou¡î
++;

392 if(
ì¥om_cou¡î
 == 4)

394 
ì¥om_mode
 = 
EEPROM_READ_MODE
;

395 
ì¥om_cou¡î
 = 0;

400 
vÆue
 = 0;

404  
vÆue
;

405 
	}
}

408 
	#ªad_mem‹y
(
ty≥
) \

409 
addªss
 >> 24) \

413 if(
ªg
[
REG_PC
] >= 0x4000) \

414 
vÆue
 = 
addªss
##
	`ty≥
(&
bios_ªad_¥Ÿe˘
,áddress & 0x03); \

416 
vÆue
 = 
addªss
##
	`ty≥
(
bios_rom
,áddress & 0x3FFF); \

421 
addªss
 = (address & 0x7FFF) + ((address & 0x38000) * 2) + 0x8000; \

422 
vÆue
 = 
addªss
##
	`ty≥
(
ewøm
,áddress); \

427 
vÆue
 = 
addªss
##
	`ty≥
(
iwøm
, (address & 0x7FFF) + 0x8000); \

432 
vÆue
 = 
addªss
##
	`ty≥
(
io_ªgi°îs
,áddress & 0x3FF); \

437 
vÆue
 = 
addªss
##
	`ty≥
(
∑Àâe_øm
,áddress & 0x3FF); \

442 
addªss
 &= 0x1FFFF; \

443 if(
addªss
 > 0x18000) \

444 
addªss
 -= 0x8000; \

446 
vÆue
 = 
addªss
##
	`ty≥
(
vøm
,áddress); \

451 
vÆue
 = 
addªss
##
	`ty≥
(
ﬂm_øm
,áddress & 0x3FF); \

460 if((
addªss
 & 0x1FFFFFFË>
gamïak_size
) \

462 
vÆue
 = 0; \

466 
	`ªad_mem‹y_gamïak
(
ty≥
); \

471 if((
addªss
 & 0x1FFFFFFË< 
gamïak_size
) \

473 
	`ªad_mem‹y_gamïak
(
ty≥
); \

477 
vÆue
 = 
	`ªad_ì¥om
(); \

484 
ªad_backup
##
	`ty≥
(); \

488 
ªad_›í
##
	`ty≥
(); \

491 

	)

492 
	#åiggî_dma
(
dma_numbî
) \

493 if(
vÆue
 & 0x8000) \

495 if(
dma
[
dma_numbî
].
°¨t_ty≥
 =
DMA_INACTIVE
) \

497 
u32
 
°¨t_ty≥
 = (
vÆue
 >> 12) & 0x03; \

498 
u32
 
de°_addªss
 = 
	`addªss32
(
io_ªgi°îs
, (
dma_numbî
 * 12) + 0xB4) & \

501 
dma
[
dma_numbî
].
dma_ch™√l
 = dma_number; \

502 
dma
[
dma_numbî
].
sour˚_addªss
 = \

503 
	`addªss32
(
io_ªgi°îs
, (
dma_numbî
 * 12) + 0xB0) & 0xFFFFFFF; \

504 
dma
[
dma_numbî
].
de°_addªss
 = dest_address; \

505 
dma
[
dma_numbî
].
sour˚_dúe˘i⁄
 = (
vÆue
 >> 7) & 0x03; \

506 
dma
[
dma_numbî
].
ª≥©_ty≥
 = (
vÆue
 >> 9) & 0x01; \

507 
dma
[
dma_numbî
].
°¨t_ty≥
 = start_type; \

508 
dma
[
dma_numbî
].
úq
 = (
vÆue
 >> 14) & 0x01; \

511 if((
dma_numbî
 >= 1) && (dma_number <= 2) && \

512 (
°¨t_ty≥
 =
DMA_START_SPECIAL
)) \

514 
dma
[
dma_numbî
].
Àngth_ty≥
 = 
DMA_32BIT
; \

515 
dma
[
dma_numbî
].
Àngth
 = 4; \

516 
dma
[
dma_numbî
].
de°_dúe˘i⁄
 = 
DMA_FIXED
; \

517 if(
de°_addªss
 == 0x40000A4) \

518 
dma
[
dma_numbî
].
dúe˘_sound_ch™√l
 = 
DMA_DIRECT_SOUND_B
; \

520 
dma
[
dma_numbî
].
dúe˘_sound_ch™√l
 = 
DMA_DIRECT_SOUND_A
; \

524 
u32
 
Àngth
 = \

525 
	`addªss16
(
io_ªgi°îs
, (
dma_numbî
 * 12) + 0xB8); \

527 if((
dma_numbî
 =3Ë&& ((
de°_addªss
 >> 24) == 0x0D) && \

528 ((
Àngth
 & 0x1F) == 17)) \

530 
ì¥om_size
 = 
EEPROM_8_KBYTE
; \

533 if(
dma_numbî
 < 3) \

534 
Àngth
 &= 0x3FFF; \

536 if(
Àngth
 == 0) \

538 if(
dma_numbî
 == 3) \

539 
Àngth
 = 0x10000; \

541 
Àngth
 = 0x04000; \

544 
dma
[
dma_numbî
].
Àngth
 =Üength; \

545 
dma
[
dma_numbî
].
Àngth_ty≥
 = (
vÆue
 >> 10) & 0x01; \

546 
dma
[
dma_numbî
].
de°_dúe˘i⁄
 = (
vÆue
 >> 5) & 0x03; \

549 
	`addªss16
(
io_ªgi°îs
, (
dma_numbî
 * 12Ë+ 0xBAË
vÆue
; \

550 if(
°¨t_ty≥
 =
DMA_START_IMMEDIATELY
) \

551  
	`dma_å™s„r
(
dma
 + 
dma_numbî
); \

556 
dma
[
dma_numbî
].
°¨t_ty≥
 = 
DMA_INACTIVE
; \

557 
dma
[
dma_numbî
].
dúe˘_sound_ch™√l
 = 
DMA_NO_DIRECT_SOUND
; \

558 
	`addªss16
(
io_ªgi°îs
, (
dma_numbî
 * 12Ë+ 0xBAË
vÆue
; \

560 

	)

562 
	#ac˚ss_ªgi°î8_high
(
addªss
) \

563 
vÆue
 = (vÆuê<< 8Ë| (
	`addªss8
(
io_ªgi°îs
, 
addªss
)) \

564 

	)

565 
	#ac˚ss_ªgi°î8_low
(
addªss
) \

566 
vÆue
 = ((
	`addªss8
(
io_ªgi°îs
, 
addªss
 + 1)) << 8) | value \

567 

	)

568 
	#ac˚ss_ªgi°î16_high
(
addªss
) \

569 
vÆue
 = (vÆuê<< 16Ë| (
	`addªss16
(
io_ªgi°îs
, 
addªss
)) \

570 

	)

571 
	#ac˚ss_ªgi°î16_low
(
addªss
) \

572 
vÆue
 = ((
	`addªss16
(
io_ªgi°îs
, 
addªss
 + 2)) << 16) | value \

573 

	)

574 
˝u_Æît_ty≥
 
fun˘i⁄_cc
 
	$wrôe_io_ªgi°î8
(
u32
 
addªss
, u32 
vÆue
)

576 
addªss
)

580 
u32
 
di•˙t
 = 
io_ªgi°îs
[
REG_DISPCNT
];

582 if((
vÆue
 & 0x07Ë!(
di•˙t
 & 0x07))

583 
ﬂm_upd©e
 = 1;

585 
	`addªss8
(
io_ªgi°îs
, 0x00Ë
vÆue
;

591 
	`addªss8
(
io_ªgi°îs
, 0x04) =

592 (
	`addªss8
(
io_ªgi°îs
, 0x04Ë& 0x07Ë| (
vÆue
 & ~0x07);

602 
	`ac˚ss_ªgi°î8_low
(0x28);

603 
	`ac˚ss_ªgi°î16_low
(0x28);

604 
afföe_ª„ªn˚_x
[0] = (
s32
)(
vÆue
 << 4) >> 4;

605 
	`addªss32
(
io_ªgi°îs
, 0x28Ë
vÆue
;

609 
	`ac˚ss_ªgi°î8_high
(0x28);

610 
	`ac˚ss_ªgi°î16_low
(0x28);

611 
afföe_ª„ªn˚_x
[0] = (
s32
)(
vÆue
 << 4) >> 4;

612 
	`addªss32
(
io_ªgi°îs
, 0x28Ë
vÆue
;

616 
	`ac˚ss_ªgi°î8_low
(0x2A);

617 
	`ac˚ss_ªgi°î16_high
(0x28);

618 
afföe_ª„ªn˚_x
[0] = (
s32
)(
vÆue
 << 4) >> 4;

619 
	`addªss32
(
io_ªgi°îs
, 0x28Ë
vÆue
;

623 
	`ac˚ss_ªgi°î8_high
(0x2A);

624 
	`ac˚ss_ªgi°î16_high
(0x28);

625 
afföe_ª„ªn˚_x
[0] = (
s32
)(
vÆue
 << 4) >> 4;

626 
	`addªss32
(
io_ªgi°îs
, 0x28Ë
vÆue
;

631 
	`ac˚ss_ªgi°î8_low
(0x2C);

632 
	`ac˚ss_ªgi°î16_low
(0x2C);

633 
afföe_ª„ªn˚_y
[0] = (
s32
)(
vÆue
 << 4) >> 4;

634 
	`addªss32
(
io_ªgi°îs
, 0x2CË
vÆue
;

638 
	`ac˚ss_ªgi°î8_high
(0x2C);

639 
	`ac˚ss_ªgi°î16_low
(0x2C);

640 
afföe_ª„ªn˚_y
[0] = (
s32
)(
vÆue
 << 4) >> 4;

641 
	`addªss32
(
io_ªgi°îs
, 0x2CË
vÆue
;

645 
	`ac˚ss_ªgi°î8_low
(0x2E);

646 
	`ac˚ss_ªgi°î16_high
(0x2C);

647 
afföe_ª„ªn˚_y
[0] = (
s32
)(
vÆue
 << 4) >> 4;

648 
	`addªss32
(
io_ªgi°îs
, 0x2CË
vÆue
;

652 
	`ac˚ss_ªgi°î8_high
(0x2E);

653 
	`ac˚ss_ªgi°î16_high
(0x2C);

654 
afföe_ª„ªn˚_y
[0] = (
s32
)(
vÆue
 << 4) >> 4;

655 
	`addªss32
(
io_ªgi°îs
, 0x2CË
vÆue
;

660 
	`ac˚ss_ªgi°î8_low
(0x38);

661 
	`ac˚ss_ªgi°î16_low
(0x38);

662 
afföe_ª„ªn˚_x
[1] = (
s32
)(
vÆue
 << 4) >> 4;

663 
	`addªss32
(
io_ªgi°îs
, 0x38Ë
vÆue
;

667 
	`ac˚ss_ªgi°î8_high
(0x38);

668 
	`ac˚ss_ªgi°î16_low
(0x38);

669 
afföe_ª„ªn˚_x
[1] = (
s32
)(
vÆue
 << 4) >> 4;

670 
	`addªss32
(
io_ªgi°îs
, 0x38Ë
vÆue
;

674 
	`ac˚ss_ªgi°î8_low
(0x3A);

675 
	`ac˚ss_ªgi°î16_high
(0x38);

676 
afföe_ª„ªn˚_x
[1] = (
s32
)(
vÆue
 << 4) >> 4;

677 
	`addªss32
(
io_ªgi°îs
, 0x38Ë
vÆue
;

681 
	`ac˚ss_ªgi°î8_high
(0x3A);

682 
	`ac˚ss_ªgi°î16_high
(0x38);

683 
afföe_ª„ªn˚_x
[1] = (
s32
)(
vÆue
 << 4) >> 4;

684 
	`addªss32
(
io_ªgi°îs
, 0x38Ë
vÆue
;

689 
	`ac˚ss_ªgi°î8_low
(0x3C);

690 
	`ac˚ss_ªgi°î16_low
(0x3C);

691 
afföe_ª„ªn˚_y
[1] = (
s32
)(
vÆue
 << 4) >> 4;

692 
	`addªss32
(
io_ªgi°îs
, 0x3CË
vÆue
;

696 
	`ac˚ss_ªgi°î8_high
(0x3C);

697 
	`ac˚ss_ªgi°î16_low
(0x3C);

698 
afföe_ª„ªn˚_y
[1] = (
s32
)(
vÆue
 << 4) >> 4;

699 
	`addªss32
(
io_ªgi°îs
, 0x3CË
vÆue
;

703 
	`ac˚ss_ªgi°î8_low
(0x3E);

704 
	`ac˚ss_ªgi°î16_high
(0x3C);

705 
afföe_ª„ªn˚_y
[1] = (
s32
)(
vÆue
 << 4) >> 4;

706 
	`addªss32
(
io_ªgi°îs
, 0x3CË
vÆue
;

710 
	`ac˚ss_ªgi°î8_high
(0x3E);

711 
	`ac˚ss_ªgi°î16_high
(0x3C);

712 
afföe_ª„ªn˚_y
[1] = (
s32
)(
vÆue
 << 4) >> 4;

713 
	`addªss32
(
io_ªgi°îs
, 0x3CË
vÆue
;

718 
	`ac˚ss_ªgi°î8_low
(0x60);

719 
	`gbc_sound_t⁄e_c⁄åﬁ_swìp
();

723 
	`ac˚ss_ªgi°î8_low
(0x60);

724 
	`gbc_sound_t⁄e_c⁄åﬁ_swìp
();

729 
	`ac˚ss_ªgi°î8_low
(0x62);

730 
	`gbc_sound_t⁄e_c⁄åﬁ_low
(0, 0x62);

734 
	`ac˚ss_ªgi°î8_high
(0x62);

735 
	`gbc_sound_t⁄e_c⁄åﬁ_low
(0, 0x62);

740 
	`ac˚ss_ªgi°î8_low
(0x64);

741 
	`gbc_sound_t⁄e_c⁄åﬁ_high
(0, 0x64);

745 
	`ac˚ss_ªgi°î8_high
(0x64);

746 
	`gbc_sound_t⁄e_c⁄åﬁ_high
(0, 0x64);

751 
	`ac˚ss_ªgi°î8_low
(0x68);

752 
	`gbc_sound_t⁄e_c⁄åﬁ_low
(1, 0x68);

756 
	`ac˚ss_ªgi°î8_high
(0x68);

757 
	`gbc_sound_t⁄e_c⁄åﬁ_low
(1, 0x68);

762 
	`ac˚ss_ªgi°î8_low
(0x6C);

763 
	`gbc_sound_t⁄e_c⁄åﬁ_high
(1, 0x6C);

767 
	`ac˚ss_ªgi°î8_high
(0x6C);

768 
	`gbc_sound_t⁄e_c⁄åﬁ_high
(1, 0x6C);

773 
	`ac˚ss_ªgi°î8_low
(0x70);

774 
	`gbc_sound_wave_c⁄åﬁ
();

778 
	`ac˚ss_ªgi°î8_high
(0x70);

779 
	`gbc_sound_wave_c⁄åﬁ
();

784 
	`ac˚ss_ªgi°î8_low
(0x72);

785 
	`gbc_sound_t⁄e_c⁄åﬁ_low_wave
();

789 
	`ac˚ss_ªgi°î8_high
(0x72);

790 
	`gbc_sound_t⁄e_c⁄åﬁ_low_wave
();

795 
	`ac˚ss_ªgi°î8_low
(0x74);

796 
	`gbc_sound_t⁄e_c⁄åﬁ_high_wave
();

800 
	`ac˚ss_ªgi°î8_high
(0x74);

801 
	`gbc_sound_t⁄e_c⁄åﬁ_high_wave
();

806 
	`ac˚ss_ªgi°î8_low
(0x78);

807 
	`gbc_sound_t⁄e_c⁄åﬁ_low
(3, 0x78);

811 
	`ac˚ss_ªgi°î8_high
(0x78);

812 
	`gbc_sound_t⁄e_c⁄åﬁ_low
(3, 0x78);

817 
	`ac˚ss_ªgi°î8_low
(0x7C);

818 
	`gbc_sound_noi£_c⁄åﬁ
();

822 
	`ac˚ss_ªgi°î8_high
(0x7C);

823 
	`gbc_sound_noi£_c⁄åﬁ
();

828 
	`ac˚ss_ªgi°î8_low
(0x80);

829 
	`gbc_åiggî_sound
();

833 
	`ac˚ss_ªgi°î8_high
(0x80);

834 
	`gbc_åiggî_sound
();

839 
	`ac˚ss_ªgi°î8_low
(0x82);

840 
	`åiggî_sound
();

844 
	`ac˚ss_ªgi°î8_high
(0x82);

845 
	`åiggî_sound
();

850 
	`sound_⁄
();

855 
gbc_sound_wave_upd©e
 = 1;

856 
	`addªss8
(
io_ªgi°îs
, 
addªss
Ë
vÆue
;

861 
	`sound_timî_queue8
(0, 
vÆue
);

866 
	`sound_timî_queue8
(1, 
vÆue
);

871 
	`ac˚ss_ªgi°î8_low
(0xBA);

872 
	`åiggî_dma
(0);

876 
	`ac˚ss_ªgi°î8_low
(0xC6);

877 
	`åiggî_dma
(1);

881 
	`ac˚ss_ªgi°î8_low
(0xD2);

882 
	`åiggî_dma
(2);

886 
	`ac˚ss_ªgi°î8_low
(0xDE);

887 
	`åiggî_dma
(3);

892 
	`ac˚ss_ªgi°î8_low
(0x100);

893 
	`cou¡_timî
(0);

897 
	`ac˚ss_ªgi°î8_high
(0x100);

898 
	`cou¡_timî
(0);

902 
	`ac˚ss_ªgi°î8_low
(0x104);

903 
	`cou¡_timî
(1);

907 
	`ac˚ss_ªgi°î8_high
(0x104);

908 
	`cou¡_timî
(1);

912 
	`ac˚ss_ªgi°î8_low
(0x108);

913 
	`cou¡_timî
(2);

917 
	`ac˚ss_ªgi°î8_high
(0x108);

918 
	`cou¡_timî
(2);

922 
	`ac˚ss_ªgi°î8_low
(0x10C);

923 
	`cou¡_timî
(3);

927 
	`ac˚ss_ªgi°î8_high
(0x10C);

928 
	`cou¡_timî
(3);

933 
	`ac˚ss_ªgi°î8_low
(0x102);

934 
	`åiggî_timî
(0);

938 
	`ac˚ss_ªgi°î8_low
(0x106);

939 
	`åiggî_timî
(1);

943 
	`ac˚ss_ªgi°î8_low
(0x10A);

944 
	`åiggî_timî
(2);

948 
	`ac˚ss_ªgi°î8_low
(0x10E);

949 
	`åiggî_timî
(3);

954 
	`addªss8
(
io_ªgi°îs
, 0x202Ë&~
vÆue
;

958 
	`addªss8
(
io_ªgi°îs
, 0x203Ë&~
vÆue
;

963 if((
vÆue
 & 0x01) == 0)

964 
ªg
[
CPU_HALT_STATE
] = 
CPU_HALT
;

966 
ªg
[
CPU_HALT_STATE
] = 
CPU_STOP
;

968  
CPU_ALERT_HALT
;

972 
	`addªss8
(
io_ªgi°îs
, 
addªss
Ë
vÆue
;

976  
CPU_ALERT_NONE
;

977 
	}
}

979 
˝u_Æît_ty≥
 
fun˘i⁄_cc
 
	$wrôe_io_ªgi°î16
(
u32
 
addªss
, u32 
vÆue
)

981 
addªss
)

985 
u32
 
di•˙t
 = 
io_ªgi°îs
[
REG_DISPCNT
];

986 if((
vÆue
 & 0x07Ë!(
di•˙t
 & 0x07))

987 
ﬂm_upd©e
 = 1;

989 
	`addªss16
(
io_ªgi°îs
, 0x00Ë
vÆue
;

995 
	`addªss16
(
io_ªgi°îs
, 0x04) =

996 (
	`addªss16
(
io_ªgi°îs
, 0x04Ë& 0x07Ë| (
vÆue
 & ~0x07);

1005 
	`ac˚ss_ªgi°î16_low
(0x28);

1006 
afföe_ª„ªn˚_x
[0] = (
s32
)(
vÆue
 << 4) >> 4;

1007 
	`addªss32
(
io_ªgi°îs
, 0x28Ë
vÆue
;

1011 
	`ac˚ss_ªgi°î16_high
(0x28);

1012 
afföe_ª„ªn˚_x
[0] = (
s32
)(
vÆue
 << 4) >> 4;

1013 
	`addªss32
(
io_ªgi°îs
, 0x28Ë
vÆue
;

1018 
	`ac˚ss_ªgi°î16_low
(0x2C);

1019 
afföe_ª„ªn˚_y
[0] = (
s32
)(
vÆue
 << 4) >> 4;

1020 
	`addªss32
(
io_ªgi°îs
, 0x2CË
vÆue
;

1024 
	`ac˚ss_ªgi°î16_high
(0x2C);

1025 
afföe_ª„ªn˚_y
[0] = (
s32
)(
vÆue
 << 4) >> 4;

1026 
	`addªss32
(
io_ªgi°îs
, 0x2CË
vÆue
;

1032 
	`ac˚ss_ªgi°î16_low
(0x38);

1033 
afföe_ª„ªn˚_x
[1] = (
s32
)(
vÆue
 << 4) >> 4;

1034 
	`addªss32
(
io_ªgi°îs
, 0x38Ë
vÆue
;

1038 
	`ac˚ss_ªgi°î16_high
(0x38);

1039 
afföe_ª„ªn˚_x
[1] = (
s32
)(
vÆue
 << 4) >> 4;

1040 
	`addªss32
(
io_ªgi°îs
, 0x38Ë
vÆue
;

1045 
	`ac˚ss_ªgi°î16_low
(0x3C);

1046 
afföe_ª„ªn˚_y
[1] = (
s32
)(
vÆue
 << 4) >> 4;

1047 
	`addªss32
(
io_ªgi°îs
, 0x3CË
vÆue
;

1051 
	`ac˚ss_ªgi°î16_high
(0x3C);

1052 
afföe_ª„ªn˚_y
[1] = (
s32
)(
vÆue
 << 4) >> 4;

1053 
	`addªss32
(
io_ªgi°îs
, 0x3CË
vÆue
;

1058 
	`gbc_sound_t⁄e_c⁄åﬁ_swìp
();

1063 
	`gbc_sound_t⁄e_c⁄åﬁ_low
(0, 0x62);

1068 
	`gbc_sound_t⁄e_c⁄åﬁ_high
(0, 0x64);

1073 
	`gbc_sound_t⁄e_c⁄åﬁ_low
(1, 0x68);

1078 
	`gbc_sound_t⁄e_c⁄åﬁ_high
(1, 0x6C);

1083 
	`gbc_sound_wave_c⁄åﬁ
();

1088 
	`gbc_sound_t⁄e_c⁄åﬁ_low_wave
();

1093 
	`gbc_sound_t⁄e_c⁄åﬁ_high_wave
();

1098 
	`gbc_sound_t⁄e_c⁄åﬁ_low
(3, 0x78);

1103 
	`gbc_sound_noi£_c⁄åﬁ
();

1108 
	`gbc_åiggî_sound
();

1113 
	`åiggî_sound
();

1118 
	`sound_⁄
();

1123 
gbc_sound_wave_upd©e
 = 1;

1124 
	`addªss16
(
io_ªgi°îs
, 
addªss
Ë
vÆue
;

1129 
	`sound_timî_queue16
(0, 
vÆue
);

1134 
	`sound_timî_queue16
(1, 
vÆue
);

1139 
	`åiggî_dma
(0);

1143 
	`åiggî_dma
(1);

1147 
	`åiggî_dma
(2);

1151 
	`åiggî_dma
(3);

1156 
	`cou¡_timî
(0);

1160 
	`cou¡_timî
(1);

1164 
	`cou¡_timî
(2);

1168 
	`cou¡_timî
(3);

1173 
	`åiggî_timî
(0);

1177 
	`åiggî_timî
(1);

1181 
	`åiggî_timî
(2);

1185 
	`åiggî_timî
(3);

1194 
	`addªss16
(
io_ªgi°îs
, 0x202Ë&~
vÆue
;

1203 if(((
vÆue
 >> 8) & 0x01) == 0)

1204 
ªg
[
CPU_HALT_STATE
] = 
CPU_HALT
;

1206 
ªg
[
CPU_HALT_STATE
] = 
CPU_STOP
;

1208  
CPU_ALERT_HALT
;

1211 
	`addªss16
(
io_ªgi°îs
, 
addªss
Ë
vÆue
;

1215  
CPU_ALERT_NONE
;

1216 
	}
}

1219 
˝u_Æît_ty≥
 
fun˘i⁄_cc
 
	$wrôe_io_ªgi°î32
(
u32
 
addªss
, u32 
vÆue
)

1221 
addªss
)

1225 
afföe_ª„ªn˚_x
[0] = (
s32
)(
vÆue
 << 4) >> 4;

1226 
	`addªss32
(
io_ªgi°îs
, 0x28Ë
vÆue
;

1231 
afföe_ª„ªn˚_y
[0] = (
s32
)(
vÆue
 << 4) >> 4;

1232 
	`addªss32
(
io_ªgi°îs
, 0x2CË
vÆue
;

1237 
afföe_ª„ªn˚_x
[1] = (
s32
)(
vÆue
 << 4) >> 4;

1238 
	`addªss32
(
io_ªgi°îs
, 0x38Ë
vÆue
;

1243 
afföe_ª„ªn˚_y
[1] = (
s32
)(
vÆue
 << 4) >> 4;

1244 
	`addªss32
(
io_ªgi°îs
, 0x3CË
vÆue
;

1249 
	`sound_timî_queue32
(0, 
vÆue
);

1254 
	`sound_timî_queue32
(1, 
vÆue
);

1259 
˝u_Æît_ty≥
 
Æît_low
 =

1260 
	`wrôe_io_ªgi°î16
(
addªss
, 
vÆue
 & 0xFFFF);

1262 
˝u_Æît_ty≥
 
Æît_high
 =

1263 
	`wrôe_io_ªgi°î16
(
addªss
 + 2, 
vÆue
 >> 16);

1265 if(
Æît_high
)

1266  
Æît_high
;

1268  
Æît_low
;

1272  
CPU_ALERT_NONE
;

1273 
	}
}

1275 
	#wrôe_∑Àâe8
(
addªss
, 
vÆue
) \

1276 

	)

1277 
	#wrôe_∑Àâe16
(
addªss
, 
vÆue
) \

1279 
u32
 
∑Àâe_addªss
 = 
addªss
; \

1280 
	`addªss16
(
∑Àâe_øm
, 
∑Àâe_addªss
Ë
vÆue
; \

1281 
	`c⁄vît_∑Àâe
(
vÆue
); \

1282 
	`addªss16
(
∑Àâe_øm_c⁄vîãd
, 
∑Àâe_addªss
Ë
vÆue
; \

1284 

	)

1285 
	#wrôe_∑Àâe32
(
addªss
, 
vÆue
) \

1287 
u32
 
∑Àâe_addªss
 = 
addªss
; \

1288 
u32
 
vÆue_high
 = 
vÆue
 >> 16; \

1289 
u32
 
vÆue_low
 = 
vÆue
 & 0xFFFF; \

1290 
	`addªss32
(
∑Àâe_øm
, 
∑Àâe_addªss
Ë
vÆue
; \

1291 
	`c⁄vît_∑Àâe
(
vÆue_high
); \

1292 
	`c⁄vît_∑Àâe
(
vÆue_low
); \

1293 
vÆue
 = (
vÆue_high
 << 16Ë| 
vÆue_low
; \

1294 
	`addªss32
(
∑Àâe_øm_c⁄vîãd
, 
∑Àâe_addªss
Ë
vÆue
; \

1296 

	)

1298 
fun˘i⁄_cc
 
	$wrôe_backup
(
u32
 
addªss
, u32 
vÆue
)

1300 
vÆue
 &= 0xFF;

1302 if(
backup_ty≥
 =
BACKUP_NONE
)

1303 
backup_ty≥
 = 
BACKUP_SRAM
;

1307 if((
addªss
 =0x5555Ë&& (
Êash_mode
 !
FLASH_WRITE_MODE
))

1309 if((
Êash_comm™d_posôi⁄
 =0Ë&& (
vÆue
 == 0xAA))

1311 
backup_ty≥
 = 
BACKUP_FLASH
;

1312 
Êash_comm™d_posôi⁄
 = 1;

1315 if(
Êash_comm™d_posôi⁄
 == 2)

1317 
vÆue
)

1323 if(
Êash_mode
 =
FLASH_BASE_MODE
)

1324 
Êash_mode
 = 
FLASH_ID_MODE
;

1330 if(
Êash_mode
 =
FLASH_BASE_MODE
)

1331 
Êash_mode
 = 
FLASH_ERASE_MODE
;

1336 if(
Êash_mode
 =
FLASH_ID_MODE
)

1337 
Êash_mode
 = 
FLASH_BASE_MODE
;

1342 if(
Êash_mode
 =
FLASH_BASE_MODE
)

1343 
Êash_mode
 = 
FLASH_WRITE_MODE
;

1349 
Êash_size
 = 
FLASH_SIZE_128KB
;

1350 if(
Êash_mode
 =
FLASH_BASE_MODE
)

1351 
Êash_mode
 = 
FLASH_BANKSWITCH_MODE
;

1356 if(
Êash_mode
 =
FLASH_ERASE_MODE
)

1358 if(
Êash_size
 =
FLASH_SIZE_64KB
)

1359 
	`mem£t
(
gamïak_backup
, 0xFF, 1024 * 64);

1361 
	`mem£t
(
gamïak_backup
, 0xFF, 1024 * 128);

1362 
backup_upd©e
 = 
wrôe_backup_dñay
;

1363 
Êash_mode
 = 
FLASH_BASE_MODE
;

1370 
Êash_comm™d_posôi⁄
 = 0;

1372 if(
backup_ty≥
 =
BACKUP_SRAM
)

1373 
gamïak_backup
[0x5555] = 
vÆue
;

1377 if((
addªss
 =0x2AAAË&& (
vÆue
 == 0x55) &&

1378 (
Êash_comm™d_posôi⁄
 == 1))

1380 
Êash_comm™d_posôi⁄
 = 2;

1384 if((
Êash_comm™d_posôi⁄
 == 2) &&

1385 (
Êash_mode
 =
FLASH_ERASE_MODE
Ë&& (
vÆue
 == 0x30))

1388 
	`mem£t
(
Êash_b™k_±r
 + (
addªss
 & 0xF000), 0xFF, 1024 * 4);

1389 
backup_upd©e
 = 
wrôe_backup_dñay
;

1390 
Êash_mode
 = 
FLASH_BASE_MODE
;

1391 
Êash_comm™d_posôi⁄
 = 0;

1395 if((
Êash_comm™d_posôi⁄
 == 0) &&

1396 (
Êash_mode
 =
FLASH_BANKSWITCH_MODE
Ë&& (
addªss
 == 0x0000) &&

1397 (
Êash_size
 =
FLASH_SIZE_128KB
))

1399 
Êash_b™k_±r
 = 
gamïak_backup
 + ((
vÆue
 & 0x01) * (1024 * 64));

1400 
Êash_mode
 = 
FLASH_BASE_MODE
;

1404 if((
Êash_comm™d_posôi⁄
 =0Ë&& (
Êash_mode
 =
FLASH_WRITE_MODE
))

1407 
backup_upd©e
 = 
wrôe_backup_dñay
;

1408 
Êash_b™k_±r
[
addªss
] = 
vÆue
;

1409 
Êash_mode
 = 
FLASH_BASE_MODE
;

1413 if(
backup_ty≥
 =
BACKUP_SRAM
)

1416 
backup_upd©e
 = 
wrôe_backup_dñay
;

1418 if(
addªss
 >= 0x8000)

1419 
§am_size
 = 
SRAM_SIZE_64KB
;

1420 
gamïak_backup
[
addªss
] = 
vÆue
;

1423 
	}
}

1425 
	#wrôe_backup8
() \

1426 
	`wrôe_backup
(
addªss
 & 0xFFFF, 
vÆue
) \

1427 

	)

1428 
	#wrôe_backup16
() \

1429 

	)

1430 
	#wrôe_backup32
() \

1431 

	)

1432 
	#wrôe_vøm8
() \

1433 
addªss
 &= ~0x01; \

1434 
	`addªss16
(
vøm
, 
addªss
Ë((
vÆue
 << 8) | value) \

1435 

	)

1436 
	#wrôe_vøm16
() \

1437 
	`addªss16
(
vøm
, 
addªss
Ë
vÆue
 \

1438 

	)

1439 
	#wrôe_vøm32
() \

1440 
	`addªss32
(
vøm
, 
addªss
Ë
vÆue
 \

1441 

	)

1447 
	mRTC_DISABLED
,

1448 
	mRTC_IDLE
,

1449 
	mRTC_COMMAND
,

1450 
	mRTC_OUTPUT_DATA
,

1451 
	mRTC_INPUT_DATA


1452 } 
	tπc_°©e_ty≥
;

1456 
	mRTC_COMMAND_RESET
 = 0x60,

1457 
	mRTC_COMMAND_WRITE_STATUS
 = 0x62,

1458 
	mRTC_COMMAND_READ_STATUS
 = 0x63,

1459 
	mRTC_COMMAND_OUTPUT_TIME_FULL
 = 0x65,

1460 
	mRTC_COMMAND_OUTPUT_TIME
 = 0x67

1461 } 
	tπc_comm™d_ty≥
;

1465 
	mRTC_WRITE_TIME
,

1466 
	mRTC_WRITE_TIME_FULL
,

1467 
	mRTC_WRITE_STATUS


1468 } 
	tπc_wrôe_mode_ty≥
;

1470 
πc_°©e_ty≥
 
	gπc_°©e
 = 
RTC_DISABLED
;

1471 
πc_wrôe_mode_ty≥
 
	gπc_wrôe_mode
;

1472 
u8
 
	gπc_ªgi°îs
[3];

1473 
u32
 
	gπc_comm™d
;

1474 
u32
 
	gπc_d©a
[12];

1475 
u32
 
	gπc_°©us
 = 0x40;

1476 
u32
 
	gπc_d©a_byãs
;

1477 
s32
 
	gπc_bô_cou¡
;

1479 
u32
 
	$ícode_bcd
(
u8
 
vÆue
)

1481  ((
vÆue
 / 10) << 4) | (value % 10);

1482 
	}
}

1484 
	#wrôe_πc_ªgi°î
(
ödex
, 
_vÆue
) \

1485 
upd©e_addªss
 = 0x80000C4 + (
ödex
 * 2); \

1486 
πc_ªgi°îs
[
ödex
] = 
_vÆue
; \

1487 
πc_∑ge_ödex
 = 
upd©e_addªss
 >> 15; \

1488 
m≠
 = 
mem‹y_m≠_ªad
[
πc_∑ge_ödex
]; \

1490 if(
m≠
 =
NULL
) \

1491 
m≠
 = 
	`lﬂd_gamïak_∑ge
(
πc_∑ge_ödex
 & 0x3FF); \

1493 
	`addªss16
(
m≠
, 
upd©e_addªss
 & 0x7FFFË
_vÆue
 \

1494 

	)

1495 
fun˘i⁄_cc
 
	$wrôe_πc
(
u32
 
addªss
, u32 
vÆue
)

1497 
u32
 
πc_∑ge_ödex
;

1498 
u32
 
upd©e_addªss
;

1499 
u8
 *
m≠
;

1501 
vÆue
 &= 0xFFFF;

1503 
addªss
)

1510 if(
πc_°©e
 =
RTC_DISABLED
)

1511 
πc_°©e
 = 
RTC_IDLE
;

1512 if(!(
πc_ªgi°îs
[0] & 0x04))

1513 
vÆue
 = (
πc_ªgi°îs
[0] & 0x02) | (value & ~0x02);

1514 if(
πc_ªgi°îs
[2] & 0x01)

1518 if((
πc_°©e
 =
RTC_IDLE
Ë&& (
πc_ªgi°îs
[0] == 0x01) &&

1519 (
vÆue
 == 0x05))

1522 
	`wrôe_πc_ªgi°î
(0, 
vÆue
);

1523 
πc_°©e
 = 
RTC_COMMAND
;

1524 
πc_comm™d
 = 0;

1525 
πc_bô_cou¡
 = 7;

1529 
	`wrôe_πc_ªgi°î
(0, 
vÆue
);

1530 
πc_°©e
)

1535 
RTC_COMMAND
:

1536 if(
πc_ªgi°îs
[0] & 0x01)

1538 
πc_comm™d
 |((
vÆue
 & 0x02Ë>> 1Ë<< 
πc_bô_cou¡
;

1539 
πc_bô_cou¡
--;

1543 if(
πc_bô_cou¡
 < 0)

1545 
πc_comm™d
)

1548 
RTC_COMMAND_RESET
:

1549 
πc_°©e
 = 
RTC_IDLE
;

1550 
	`mem£t
(
πc_ªgi°îs
, 0, (rtc_registers));

1554 
RTC_COMMAND_WRITE_STATUS
:

1555 
πc_°©e
 = 
RTC_INPUT_DATA
;

1556 
πc_d©a_byãs
 = 1;

1557 
πc_wrôe_mode
 = 
RTC_WRITE_STATUS
;

1561 
RTC_COMMAND_READ_STATUS
:

1562 
πc_°©e
 = 
RTC_OUTPUT_DATA
;

1563 
πc_d©a_byãs
 = 1;

1564 
πc_d©a
[0] = 
πc_°©us
;

1568 
RTC_COMMAND_OUTPUT_TIME_FULL
:

1570 
tm
 *
cuºít_time
;

1571 
time_t
 
cuºít_time_Ê©
;

1572 
u32
 
day_of_wìk
;

1574 
	`time
(&
cuºít_time_Ê©
);

1575 
cuºít_time
 = 
	`loˇ…ime
(&
cuºít_time_Ê©
);

1577 
day_of_wìk
 = 
cuºít_time
->
tm_wday
;

1578 if(
day_of_wìk
 == 0)

1579 
day_of_wìk
 = 6;

1581 
day_of_wìk
--;

1583 
πc_°©e
 = 
RTC_OUTPUT_DATA
;

1584 
πc_d©a_byãs
 = 7;

1585 
πc_d©a
[0] = 
	`ícode_bcd
(
cuºít_time
->
tm_yór
 % 100);

1586 
πc_d©a
[1] = 
	`ícode_bcd
(
cuºít_time
->
tm_m⁄
 + 1);

1587 
πc_d©a
[2] = 
	`ícode_bcd
(
cuºít_time
->
tm_mday
);

1588 
πc_d©a
[3] = 
	`ícode_bcd
(
day_of_wìk
);

1589 
πc_d©a
[4] = 
	`ícode_bcd
(
cuºít_time
->
tm_hour
);

1590 
πc_d©a
[5] = 
	`ícode_bcd
(
cuºít_time
->
tm_mö
);

1591 
πc_d©a
[6] = 
	`ícode_bcd
(
cuºít_time
->
tm_£c
);

1597 
RTC_COMMAND_OUTPUT_TIME
:

1599 
tm
 *
cuºít_time
;

1600 
time_t
 
cuºít_time_Ê©
;

1602 
	`time
(&
cuºít_time_Ê©
);

1603 
cuºít_time
 = 
	`loˇ…ime
(&
cuºít_time_Ê©
);

1605 
πc_°©e
 = 
RTC_OUTPUT_DATA
;

1606 
πc_d©a_byãs
 = 3;

1607 
πc_d©a
[0] = 
	`ícode_bcd
(
cuºít_time
->
tm_hour
);

1608 
πc_d©a
[1] = 
	`ícode_bcd
(
cuºít_time
->
tm_mö
);

1609 
πc_d©a
[2] = 
	`ícode_bcd
(
cuºít_time
->
tm_£c
);

1613 
πc_bô_cou¡
 = 0;

1619 
RTC_INPUT_DATA
:

1621 if(
πc_ªgi°îs
[1] & 0x02)

1624 if(!(
vÆue
 & 0x01))

1626 
πc_d©a
[
πc_bô_cou¡
 >> 3] |=

1627 ((
vÆue
 & 0x01Ë<< (7 - (
πc_bô_cou¡
 & 0x07)));

1631 
πc_bô_cou¡
++;

1633 if(
πc_bô_cou¡
 =(
πc_d©a_byãs
 * 8))

1635 
πc_°©e
 = 
RTC_IDLE
;

1636 
πc_wrôe_mode
)

1638 
RTC_WRITE_STATUS
:

1639 
πc_°©us
 = 
πc_d©a
[0];

1647 
RTC_OUTPUT_DATA
:

1649 if(!(
πc_ªgi°îs
[1] & 0x02))

1652 if(!(
vÆue
 & 0x01))

1654 
u8
 
cuºít_ouçut_byã
 = 
πc_ªgi°îs
[2];

1656 
cuºít_ouçut_byã
 =

1657 (
cuºít_ouçut_byã
 & ~0x02) |

1658 (((
πc_d©a
[
πc_bô_cou¡
 >> 3] >>

1659 (
πc_bô_cou¡
 & 0x07)) & 0x01) << 1);

1661 
	`wrôe_πc_ªgi°î
(0, 
cuºít_ouçut_byã
);

1666 
πc_bô_cou¡
++;

1668 if(
πc_bô_cou¡
 =(
πc_d©a_byãs
 * 8))

1670 
πc_°©e
 = 
RTC_IDLE
;

1671 
	`mem£t
(
πc_ªgi°îs
, 0, (rtc_registers));

1681 
	`wrôe_πc_ªgi°î
(2, 
vÆue
);

1687 
	`wrôe_πc_ªgi°î
(1, 
vÆue
);

1692 
	`wrôe_πc_ªgi°î
(2, 
vÆue
);

1695 
	}
}

1697 
	#wrôe_πc8
() \

1698 

	)

1699 
	#wrôe_πc16
() \

1700 
	`wrôe_πc
(
addªss
 & 0xFF, 
vÆue
) \

1701 

	)

1702 
	#wrôe_πc32
() \

1703 

	)

1704 
	#wrôe_mem‹y
(
ty≥
) \

1705 
addªss
 >> 24) \

1709 
addªss
 = (address & 0x7FFF) + ((address & 0x38000) * 2) + 0x8000; \

1710 
addªss
##
	`ty≥
(
ewøm
,áddªssË
vÆue
; \

1715 
addªss
##
	`ty≥
(
iwøm
, (addªs†& 0x7FFFË+ 0x8000Ë
vÆue
; \

1720  
wrôe_io_ªgi°î
##
	`ty≥
(
addªss
 & 0x3FF, 
vÆue
); \

1724 
wrôe_∑Àâe
##
	`ty≥
(
addªss
 & 0x3FF, 
vÆue
); \

1729 
addªss
 &= 0x1FFFF; \

1730 if(
addªss
 >= 0x18000) \

1731 
addªss
 -= 0x8000; \

1733 
wrôe_vøm
##
	`ty≥
(); \

1738 
ﬂm_upd©e
 = 1; \

1739 
addªss
##
	`ty≥
(
ﬂm_øm
,áddªs†& 0x3FFË
vÆue
; \

1744 
wrôe_πc
##
	`ty≥
(); \

1752 
	`wrôe_ì¥om
(
addªss
, 
vÆue
); \

1756 
wrôe_backup
##
	`ty≥
(); \

1759 

	)

1760 
u8
 
fun˘i⁄_cc
 
	$ªad_mem‹y8
(
u32
 
addªss
)

1762 
u8
 
vÆue
;

1763 
	`ªad_mem‹y
(8);

1764  
vÆue
;

1765 
	}
}

1767 
u16
 
fun˘i⁄_cc
 
	$ªad_mem‹y16_sig√d
(
u32
 
addªss
)

1769 
u16
 
vÆue
;

1771 if(
addªss
 & 0x01)

1773  (
s8
)
	`ªad_mem‹y8
(
addªss
);

1777 
	`ªad_mem‹y
(16);

1780  
vÆue
;

1781 
	}
}

1785 
u32
 
fun˘i⁄_cc
 
	$ªad_mem‹y16
(
u32
 
addªss
)

1787 
u32
 
vÆue
;

1789 if(
addªss
 & 0x01)

1791 
addªss
 &= ~0x01;

1792 
	`ªad_mem‹y
(16);

1793 
	`r‹
(
vÆue
, value, 8);

1797 
	`ªad_mem‹y
(16);

1800  
vÆue
;

1801 
	}
}

1804 
u32
 
fun˘i⁄_cc
 
	$ªad_mem‹y32
(
u32
 
addªss
)

1806 
u32
 
vÆue
;

1807 if(
addªss
 & 0x03)

1809 
u32
 
rŸ©e
 = (
addªss
 & 0x03) * 8;

1810 
addªss
 &= ~0x03;

1811 
	`ªad_mem‹y
(32);

1812 
	`r‹
(
vÆue
, vÆue, 
rŸ©e
);

1816 
	`ªad_mem‹y
(32);

1819  
vÆue
;

1820 
	}
}

1822 
˝u_Æît_ty≥
 
fun˘i⁄_cc
 
	$wrôe_mem‹y8
(
u32
 
addªss
, 
u8
 
vÆue
)

1824 
	`wrôe_mem‹y
(8);

1825  
CPU_ALERT_NONE
;

1826 
	}
}

1828 
˝u_Æît_ty≥
 
fun˘i⁄_cc
 
	$wrôe_mem‹y16
(
u32
 
addªss
, 
u16
 
vÆue
)

1830 
	`wrôe_mem‹y
(16);

1831  
CPU_ALERT_NONE
;

1832 
	}
}

1834 
˝u_Æît_ty≥
 
fun˘i⁄_cc
 
	$wrôe_mem‹y32
(
u32
 
addªss
, u32 
vÆue
)

1836 
	`wrôe_mem‹y
(32);

1837  
CPU_ALERT_NONE
;

1838 
	}
}

1840 
	gbackup_fûíame
[512];

1842 
u32
 
	$lﬂd_backup
(*
«me
)

1844 
	`fûe_›í
(
backup_fûe
, 
«me
, 
ªad
);

1846 if(
	`fûe_check_vÆid
(
backup_fûe
))

1848 
u32
 
backup_size
 = 
	`fûe_Àngth
(
«me
, 
backup_fûe
);

1850 
	`fûe_ªad
(
backup_fûe
, 
gamïak_backup
, 
backup_size
);

1852 
	`fûe_˛o£
(
backup_fûe
);

1855 
backup_size
)

1858 
backup_ty≥
 = 
BACKUP_EEPROM
;

1859 
ì¥om_size
 = 
EEPROM_512_BYTE
;

1863 
backup_ty≥
 = 
BACKUP_EEPROM
;

1864 
ì¥om_size
 = 
EEPROM_8_KBYTE
;

1868 
backup_ty≥
 = 
BACKUP_SRAM
;

1869 
§am_size
 = 
SRAM_SIZE_32KB
;

1874 
backup_ty≥
 = 
BACKUP_FLASH
;

1875 
§am_size
 = 
FLASH_SIZE_64KB
;

1879 
backup_ty≥
 = 
BACKUP_FLASH
;

1880 
Êash_size
 = 
FLASH_SIZE_128KB
;

1887 
backup_ty≥
 = 
BACKUP_NONE
;

1888 
	`mem£t
(
gamïak_backup
, 0xFF, 1024 * 128);

1892 
	}
}

1894 
u32
 
	$ßve_backup
(*
«me
)

1896 if(
backup_ty≥
 !
BACKUP_NONE
)

1898 
	`fûe_›í
(
backup_fûe
, 
«me
, 
wrôe
);

1900 if(
	`fûe_check_vÆid
(
backup_fûe
))

1902 
u32
 
backup_size
;

1904 
backup_ty≥
)

1906 
BACKUP_SRAM
:

1907 if(
§am_size
 =
SRAM_SIZE_32KB
)

1908 
backup_size
 = 0x8000;

1910 
backup_size
 = 0x10000;

1913 
BACKUP_FLASH
:

1914 if(
Êash_size
 =
FLASH_SIZE_64KB
)

1915 
backup_size
 = 0x10000;

1917 
backup_size
 = 0x20000;

1920 
BACKUP_EEPROM
:

1921 if(
ì¥om_size
 =
EEPROM_512_BYTE
)

1922 
backup_size
 = 0x200;

1924 
backup_size
 = 0x2000;

1928 
	`fûe_wrôe
(
backup_fûe
, 
gamïak_backup
, 
backup_size
);

1930 
	`fûe_˛o£
(
backup_fûe
);

1936 
	}
}

1938 
	$upd©e_backup
()

1940 if(
backup_upd©e
 !(
wrôe_backup_dñay
 + 1))

1941 
backup_upd©e
--;

1943 if(
backup_upd©e
 == 0)

1945 
	`ßve_backup
(
backup_fûíame
);

1946 
backup_upd©e
 = 
wrôe_backup_dñay
 + 1;

1948 
	}
}

1950 
	$upd©e_backup_f‹˚
()

1952 
	`ßve_backup
(
backup_fûíame
);

1953 
	}
}

1955 
	#CONFIG_FILENAME
 "game_c⁄fig.txt"

	)

1957 
u8
 *
	$skù_•a˚s
(
u8
 *
löe_±r
)

1959 *
löe_±r
 == ' ')

1960 
löe_±r
++;

1962  
löe_±r
;

1963 
	}
}

1965 
s32
 
	$∑r£_c⁄fig_löe
(
u8
 *
cuºít_löe
, u8 *
cuºít_v¨übÀ
, u8 *
cuºít_vÆue
)

1967 
u8
 *
löe_±r
 = 
cuºít_löe
;

1968 
u8
 *
löe_±r_√w
;

1970 if((
cuºít_löe
[0] == 0) || (current_line[0] == '#'))

1973 
löe_±r_√w
 = 
	`°rchr
(
löe_±r
, ' ');

1974 if(
löe_±r_√w
 =
NULL
)

1977 *
löe_±r_√w
 = 0;

1978 
	`°r˝y
(
cuºít_v¨übÀ
, 
löe_±r
);

1979 
löe_±r_√w
 = 
	`skù_•a˚s
(line_ptr_new + 1);

1981 if(*
löe_±r_√w
 != '=')

1984 
löe_±r_√w
 = 
	`skù_•a˚s
(line_ptr_new + 1);

1985 
	`°r˝y
(
cuºít_vÆue
, 
löe_±r_√w
);

1986 
löe_±r_√w
 = 
cuºít_vÆue
 + 
	`°æí
(current_value) - 1;

1987 if(*
löe_±r_√w
 == '\n')

1989 
löe_±r_√w
--;

1990 *
löe_±r_√w
 = 0;

1993 if(*
löe_±r_√w
 == '\r')

1994 *
löe_±r_√w
 = 0;

1997 
	}
}

1999 
s32
 
	$lﬂd_game_c⁄fig
(
u8
 *
gamïak_tôÀ
, u8 *
gamïak_code
, u8 *
gamïak_makî
)

2001 
u8
 
cuºít_löe
[256];

2002 
u8
 
cuºít_v¨übÀ
[256];

2003 
u8
 
cuºít_vÆue
[256];

2004 
u8
 
c⁄fig_∑th
[512];

2005 
u8
 *
löe_±r
;

2006 
u32
 
fgës_vÆue
;

2007 
FILE
 *
c⁄fig_fûe
;

2009 
idÀ_lo›_èrgë_pc
 = 0xFFFFFFFF;

2010 
iwøm_°ack_›timize
 = 1;

2011 
bios_rom
[0x39] = 0x00;

2012 
bios_rom
[0x2C] = 0x00;

2013 
å™¶©i⁄_g©e_èrgës
 = 0;

2014 
Êash_devi˚_id
 = 
FLASH_DEVICE_MACRONIX_64KB
;

2016 #i‡(
	`deföed
(
PSP_BUILD
Ë|| deföed(
ARM_ARCH
)Ë&& !deföed(
_WIN32_WCE
)

2017 
	`•rötf
(
c⁄fig_∑th
, "%s/%s", 
maö_∑th
, 
CONFIG_FILENAME
);

2019 
	`•rötf
(
c⁄fig_∑th
, "%s\\%s", 
maö_∑th
, 
CONFIG_FILENAME
);

2022 
c⁄fig_fûe
 = 
	`f›í
(
c⁄fig_∑th
, "rb");

2024 if(
c⁄fig_fûe
)

2026 
	`fgës
(
cuºít_löe
, 256, 
c⁄fig_fûe
))

2028 if(
	`∑r£_c⁄fig_löe
(
cuºít_löe
, 
cuºít_v¨übÀ
, 
cuºít_vÆue
)

2031 if(
	`°rcmp
(
cuºít_v¨übÀ
, "game_name") ||

2032 
	`°rcmp
(
cuºít_vÆue
, 
gamïak_tôÀ
))

2035 if(!
	`fgës
(
cuºít_löe
, 256, 
c⁄fig_fûe
) ||

2036 (
	`∑r£_c⁄fig_löe
(
cuºít_löe
, 
cuºít_v¨übÀ
,

2037 
cuºít_vÆue
) == -1) ||

2038 
	`°rcmp
(
cuºít_v¨übÀ
, "game_code") ||

2039 
	`°rcmp
(
cuºít_vÆue
, 
gamïak_code
))

2042 if(!
	`fgës
(
cuºít_löe
, 256, 
c⁄fig_fûe
) ||

2043 (
	`∑r£_c⁄fig_löe
(
cuºít_löe
, 
cuºít_v¨übÀ
,

2044 
cuºít_vÆue
) == -1) ||

2045 
	`°rcmp
(
cuºít_v¨übÀ
, "vender_code") ||

2046 
	`°rcmp
(
cuºít_vÆue
, 
gamïak_makî
))

2049 
	`fgës
(
cuºít_löe
, 256, 
c⁄fig_fûe
))

2051 if(
	`∑r£_c⁄fig_löe
(
cuºít_löe
, 
cuºít_v¨übÀ
, 
cuºít_vÆue
)

2054 if(!
	`°rcmp
(
cuºít_v¨übÀ
, "game_name"))

2056 
	`f˛o£
(
c⁄fig_fûe
);

2060 if(!
	`°rcmp
(
cuºít_v¨übÀ
, "idle_loop_eliminate_target"))

2061 
idÀ_lo›_èrgë_pc
 = 
	`°πﬁ
(
cuºít_vÆue
, 
NULL
, 16);

2063 if(!
	`°rcmp
(
cuºít_v¨übÀ
, "translation_gate_target"))

2065 if(
å™¶©i⁄_g©e_èrgës
 < 
MAX_TRANSLATION_GATES
)

2067 
å™¶©i⁄_g©e_èrgë_pc
[
å™¶©i⁄_g©e_èrgës
] =

2068 
	`°πﬁ
(
cuºít_vÆue
, 
NULL
, 16);

2069 
å™¶©i⁄_g©e_èrgës
++;

2073 if(!
	`°rcmp
(
cuºít_v¨übÀ
, "iwram_stack_optimize") &&

2074 !
	`°rcmp
(
cuºít_vÆue
, "no"))

2076 
iwøm_°ack_›timize
 = 0;

2079 if(!
	`°rcmp
(
cuºít_v¨übÀ
, "flash_rom_type") &&

2080 !
	`°rcmp
(
cuºít_vÆue
, "128KB"))

2082 
Êash_devi˚_id
 = 
FLASH_DEVICE_MACRONIX_128KB
;

2085 if(!
	`°rcmp
(
cuºít_v¨übÀ
, "bios_rom_hack_39") &&

2086 !
	`°rcmp
(
cuºít_vÆue
, "yes"))

2088 
bios_rom
[0x39] = 0xC0;

2091 if(!
	`°rcmp
(
cuºít_v¨übÀ
, "bios_rom_hack_2C") &&

2092 !
	`°rcmp
(
cuºít_vÆue
, "yes"))

2094 
bios_rom
[0x2C] = 0x02;

2099 
	`f˛o£
(
c⁄fig_fûe
);

2104 
	`f˛o£
(
c⁄fig_fûe
);

2108 
	}
}

2110 
s32
 
	$lﬂd_gamïak_øw
(*
«me
)

2112 
	`fûe_›í
(
gamïak_fûe
, 
«me
, 
ªad
);

2114 if(
	`fûe_check_vÆid
(
gamïak_fûe
))

2116 
u32
 
fûe_size
 = 
	`fûe_Àngth
(
«me
, 
gamïak_fûe
);

2120 if(
	`fûe_check_vÆid
(
gamïak_fûe_œrge
))

2121 
	`fûe_˛o£
(
gamïak_fûe_œrge
);

2125 if(
fûe_size
 <
gamïak_øm_buf„r_size
)

2127 
	`fûe_ªad
(
gamïak_fûe
, 
gamïak_rom
, 
fûe_size
);

2129 
	`fûe_˛o£
(
gamïak_fûe
);

2131 #ifde‡
PSP_BUILD


2132 
gamïak_fûe_œrge
 = -1;

2134 
gamïak_fûe_œrge
 = 
NULL
;

2140 
	`fûe_ªad
(
gamïak_fûe
, 
gamïak_rom
, 0x100);

2141 
gamïak_fûe_œrge
 = 
gamïak_fûe
;

2144  
fûe_size
;

2148 
	}
}

2150 
u8
 
	ggamïak_tôÀ
[13];

2151 
u8
 
	ggamïak_code
[5];

2152 
u8
 
	ggamïak_makî
[3];

2153 
u8
 
	ggamïak_fûíame
[512];

2155 
u32
 
	$lﬂd_gamïak
(*
«me
)

2157 *
dŸ_posôi⁄
 = 
	`°ºchr
(
«me
, '.');

2158 
s32
 
fûe_size
;

2159 
u8
 
chóts_fûíame
[256];

2161 if(!
	`°rcmp
(
dŸ_posôi⁄
, ".zip"))

2162 
fûe_size
 = 
	`lﬂd_fûe_zù
(
«me
);

2164 
fûe_size
 = 
	`lﬂd_gamïak_øw
(
«me
);

2168 if(
fûe_size
 != -1)

2170 
gamïak_size
 = (
fûe_size
 + 0x7FFF) & ~0x7FFF;

2172 
	`°r˝y
(
backup_fûíame
, 
«me
);

2173 
	`°∫˝y
(
gamïak_fûíame
, 
«me
, 512);

2174 
	`ch™ge_ext
(
gamïak_fûíame
, 
backup_fûíame
, ".sav");

2176 
	`lﬂd_backup
(
backup_fûíame
);

2178 
	`mem˝y
(
gamïak_tôÀ
, 
gamïak_rom
 + 0xA0, 12);

2179 
	`mem˝y
(
gamïak_code
, 
gamïak_rom
 + 0xAC, 4);

2180 
	`mem˝y
(
gamïak_makî
, 
gamïak_rom
 + 0xB0, 2);

2181 
gamïak_tôÀ
[12] = 0;

2182 
gamïak_code
[4] = 0;

2183 
gamïak_makî
[2] = 0;

2185 
	`lﬂd_game_c⁄fig
(
gamïak_tôÀ
, 
gamïak_code
, 
gamïak_makî
);

2186 
	`lﬂd_game_c⁄fig_fûe
();

2188 
	`ch™ge_ext
(
gamïak_fûíame
, 
chóts_fûíame
, ".cht");

2189 
	`add_chóts
(
chóts_fûíame
);

2195 
	}
}

2197 
s32
 
	$lﬂd_bios
(*
«me
)

2199 
	`fûe_›í
(
bios_fûe
, 
«me
, 
ªad
);

2201 if(
	`fûe_check_vÆid
(
bios_fûe
))

2203 
	`fûe_ªad
(
bios_fûe
, 
bios_rom
, 0x4000);

2207 
	`fûe_˛o£
(
bios_fûe
);

2212 
	}
}

2231 
	mDMA_REGION_IWRAM
,

2232 
	mDMA_REGION_EWRAM
,

2233 
	mDMA_REGION_VRAM
,

2234 
	mDMA_REGION_PALETTE_RAM
,

2235 
	mDMA_REGION_OAM_RAM
,

2236 
	mDMA_REGION_IO
,

2237 
	mDMA_REGION_GAMEPAK
,

2238 
	mDMA_REGION_EXT
,

2239 
	mDMA_REGION_BIOS
,

2240 
	mDMA_REGION_NULL


2241 } 
	tdma_ªgi⁄_ty≥
;

2243 
dma_ªgi⁄_ty≥
 
	gdma_ªgi⁄_m≠
[16] =

2245 
DMA_REGION_BIOS
,

2246 
DMA_REGION_NULL
,

2247 
DMA_REGION_EWRAM
,

2248 
DMA_REGION_IWRAM
,

2249 
DMA_REGION_IO
,

2250 
DMA_REGION_PALETTE_RAM
,

2251 
DMA_REGION_VRAM
,

2252 
DMA_REGION_OAM_RAM
,

2253 
DMA_REGION_GAMEPAK
,

2254 
DMA_REGION_GAMEPAK
,

2255 
DMA_REGION_GAMEPAK
,

2256 
DMA_REGION_GAMEPAK
,

2257 
DMA_REGION_GAMEPAK
,

2258 
DMA_REGION_EXT
,

2259 
DMA_REGION_EXT
,

2260 
DMA_REGION_EXT


2263 
	#dma_adju°_±r_öc
(
±r
, 
size
) \

2264 
±r
 +(
size
 / 8) \

2265 

	)

2266 
	#dma_adju°_±r_dec
(
±r
, 
size
) \

2267 
±r
 -(
size
 / 8) \

2268 

	)

2269 
	#dma_adju°_±r_fix
(
±r
, 
size
) \

2270 

	)

2271 
	#dma_adju°_±r_wrôeback
() \

2272 
dma
->
de°_addªss
 = 
de°_±r
 \

2273 

	)

2274 
	#dma_adju°_±r_ªlﬂd
() \

2275 

	)

2276 
	#dma_¥öt
(
§c_›
, 
de°_›
, 
å™s„r_size
, 
wb
) \

2277 
	`¥ötf
("dma from %x (%s)Åo %x (%s) for %x (%s) (%s) (%d) (pc %x)\n", \

2278 
§c_±r
, #§c_›, 
de°_±r
, #de°_›, 
Àngth
, #transfer_size, #wb, \

2279 
dma
->
úq
, 
ªg
[15]); \

2280 

	)

2281 
	#dma_smc_v¨s_§c
() \

2282 

	)

2283 
	#dma_smc_v¨s_de°
() \

2284 
u32
 
smc_åiggî
 = 0 \

2285 

	)

2286 
	#dma_v¨s_iwøm
(
ty≥
) \

2287 
dma_smc_v¨s_
##
	`ty≥
() \

2288 

	)

2289 
	#dma_v¨s_vøm
(
ty≥
) \

2290 

	)

2291 
	#dma_v¨s_∑Àâe_øm
(
ty≥
) \

2292 

	)

2293 
	#dma_ﬂm_øm_§c
() \

2294 

	)

2295 
	#dma_ﬂm_øm_de°
() \

2296 
ﬂm_upd©e
 = 1 \

2297 

	)

2298 
	#dma_v¨s_ﬂm_øm
(
ty≥
) \

2299 
dma_ﬂm_øm_
##
	`ty≥
() \

2300 

	)

2301 
	#dma_v¨s_io
(
ty≥
) \

2302 

	)

2303 
	#dma_£gmíãd_lﬂd_§c
() \

2304 
mem‹y_m≠_ªad
[
§c_cuºít_ªgi⁄
] \

2305 

	)

2306 
	#dma_£gmíãd_lﬂd_de°
() \

2307 
mem‹y_m≠_wrôe
[
de°_cuºít_ªgi⁄
] \

2308 

	)

2309 
	#dma_v¨s_gamïak
(
ty≥
) \

2310 
u32
 
ty≥
##
_√w_ªgi⁄
; \

2311 
u32
 
ty≥
##
_cuºít_ªgi⁄
 =Åy≥##
_±r
 >> 15; \

2312 
u8
 *
ty≥
##
_addªss_block
 = 
dma_£gmíãd_lﬂd_
##
	`ty≥
(); \

2313 if(
ty≥
##
_addªss_block
 =
NULL
) \

2315 if((
ty≥
##
_±r
 & 0x1FFFFFFË>
gamïak_size
) \

2317 
ty≥
##
_addªss_block
 = 
	`lﬂd_gamïak_∑ge
—y≥##
_cuºít_ªgi⁄
 & 0x3FF); \

2319 

	)

2320 
	#dma_v¨s_ewøm
(
ty≥
) \

2321 
dma_smc_v¨s_
##
	`ty≥
(); \

2322 
u32
 
ty≥
##
_√w_ªgi⁄
; \

2323 
u32
 
ty≥
##
_cuºít_ªgi⁄
 =Åy≥##
_±r
 >> 15; \

2324 
u8
 *
ty≥
##
_addªss_block
 = 
dma_£gmíãd_lﬂd_
##
	`ty≥
() \

2325 

	)

2326 
	#dma_v¨s_bios
(
ty≥
) \

2327 

	)

2328 
	#dma_v¨s_ext
(
ty≥
) \

2329 

	)

2330 
	#dma_ewøm_check_ªgi⁄
(
ty≥
) \

2331 
ty≥
##
_√w_ªgi⁄
 = (ty≥##
_±r
 >> 15); \

2332 if(
ty≥
##
_√w_ªgi⁄
 !ty≥##
_cuºít_ªgi⁄
) \

2334 
ty≥
##
_cuºít_ªgi⁄
 =Åy≥##
_√w_ªgi⁄
; \

2335 
ty≥
##
_addªss_block
 = 
dma_£gmíãd_lﬂd_
##
	`ty≥
(); \

2337 

	)

2338 
	#dma_gamïak_check_ªgi⁄
(
ty≥
) \

2339 
ty≥
##
_√w_ªgi⁄
 = (ty≥##
_±r
 >> 15); \

2340 if(
ty≥
##
_√w_ªgi⁄
 !ty≥##
_cuºít_ªgi⁄
) \

2342 
ty≥
##
_cuºít_ªgi⁄
 =Åy≥##
_√w_ªgi⁄
; \

2343 
ty≥
##
_addªss_block
 = 
dma_£gmíãd_lﬂd_
##
	`ty≥
(); \

2344 if(
ty≥
##
_addªss_block
 =
NULL
) \

2346 
ty≥
##
_addªss_block
 = \

2347 
	`lﬂd_gamïak_∑ge
(
ty≥
##
_cuºít_ªgi⁄
 & 0x3FF); \

2350 

	)

2351 
	#dma_ªad_iwøm
(
ty≥
, 
å™s„r_size
) \

2352 
ªad_vÆue
 = 
addªss
##
	`å™s„r_size
(
iwøm
 + 0x8000, 
ty≥
##
_±r
 & 0x7FFF) \

2353 

	)

2354 
	#dma_ªad_vøm
(
ty≥
, 
å™s„r_size
) \

2355 
ªad_vÆue
 = 
addªss
##
	`å™s„r_size
(
vøm
, 
ty≥
##
_±r
 & 0x1FFFF) \

2356 

	)

2357 
	#dma_ªad_io
(
ty≥
, 
å™s„r_size
) \

2358 
ªad_vÆue
 = 
addªss
##
	`å™s„r_size
(
io_ªgi°îs
, 
ty≥
##
_±r
 & 0x7FFF) \

2359 

	)

2360 
	#dma_ªad_ﬂm_øm
(
ty≥
, 
å™s„r_size
) \

2361 
ªad_vÆue
 = 
addªss
##
	`å™s„r_size
(
ﬂm_øm
, 
ty≥
##
_±r
 & 0x3FF) \

2362 

	)

2363 
	#dma_ªad_∑Àâe_øm
(
ty≥
, 
å™s„r_size
) \

2364 
ªad_vÆue
 = 
addªss
##
	`å™s„r_size
(
∑Àâe_øm
, 
ty≥
##
_±r
 & 0x3FF) \

2365 

	)

2366 
	#dma_ªad_ewøm
(
ty≥
, 
å™s„r_size
) \

2367 
	`dma_ewøm_check_ªgi⁄
(
ty≥
); \

2368 
ªad_vÆue
 = 
addªss
##
	`å™s„r_size
(
ty≥
##
_addªss_block
, \

2369 
ty≥
##
_±r
 & 0x7FFF) \

2370 

	)

2371 
	#dma_ªad_gamïak
(
ty≥
, 
å™s„r_size
) \

2372 
	`dma_gamïak_check_ªgi⁄
(
ty≥
); \

2373 
ªad_vÆue
 = 
addªss
##
	`å™s„r_size
(
ty≥
##
_addªss_block
, \

2374 
ty≥
##
_±r
 & 0x7FFF) \

2375 

	)

2378 
	#dma_ªad_bios
(
ty≥
, 
å™s„r_size
) \

2379 
ªad_vÆue
 = 0 \

2380 

	)

2381 
	#dma_ªad_ext
(
ty≥
, 
å™s„r_size
) \

2382 
ªad_vÆue
 = 
ªad_mem‹y
##
	`å™s„r_size
(
ty≥
##
_±r
) \

2383 

	)

2384 
	#dma_wrôe_iwøm
(
ty≥
, 
å™s„r_size
) \

2385 
addªss
##
	`å™s„r_size
(
iwøm
 + 0x8000, 
ty≥
##
_±r
 & 0x7FFFË
ªad_vÆue
; \

2386 
smc_åiggî
 |
addªss
##
	`å™s„r_size
(
iwøm
, 
ty≥
##
_±r
 & 0x7FFF) \

2387 

	)

2388 
	#dma_wrôe_vøm
(
ty≥
, 
å™s„r_size
) \

2389 
addªss
##
	`å™s„r_size
(
vøm
, 
ty≥
##
_±r
 & 0x1FFFFË
ªad_vÆue
 \

2390 

	)

2391 
	#dma_wrôe_io
(
ty≥
, 
å™s„r_size
) \

2392 
wrôe_io_ªgi°î
##
	`å™s„r_size
(
ty≥
##
_±r
 & 0x3FF, 
ªad_vÆue
) \

2393 

	)

2394 
	#dma_wrôe_ﬂm_øm
(
ty≥
, 
å™s„r_size
) \

2395 
addªss
##
	`å™s„r_size
(
ﬂm_øm
, 
ty≥
##
_±r
 & 0x3FFË
ªad_vÆue
 \

2396 

	)

2397 
	#dma_wrôe_∑Àâe_øm
(
ty≥
, 
å™s„r_size
) \

2398 
wrôe_∑Àâe
##
	`å™s„r_size
(
ty≥
##
_±r
 & 0x3FF, 
ªad_vÆue
) \

2399 

	)

2400 
	#dma_wrôe_ext
(
ty≥
, 
å™s„r_size
) \

2401 
wrôe_mem‹y
##
	`å™s„r_size
(
ty≥
##
_±r
, 
ªad_vÆue
) \

2402 

	)

2403 
	#dma_wrôe_ewøm
(
ty≥
, 
å™s„r_size
) \

2404 
	`dma_ewøm_check_ªgi⁄
(
ty≥
); \

2406 
addªss
##
	`å™s„r_size
(
ty≥
##
_addªss_block
,Åy≥##
_±r
 & 0x7FFF) = \

2407 
ªad_vÆue
; \

2408 
smc_åiggî
 |
addªss
##
	`å™s„r_size
(
ty≥
##
_addªss_block
, \

2409 (
ty≥
##
_±r
 & 0x7FFF) - 0x8000) \

2410 

	)

2411 
	#dma_ïûogue_iwøm
() \

2412 if(
smc_åiggî
) \

2415 
ªtu∫_vÆue
 = 
CPU_ALERT_SMC
; \

2417 

	)

2418 
	#dma_ïûogue_ewøm
() \

2419 if(
smc_åiggî
) \

2422 
ªtu∫_vÆue
 = 
CPU_ALERT_SMC
; \

2424 

	)

2425 
	#dma_ïûogue_vøm
() \

2426 

	)

2427 
	#dma_ïûogue_io
() \

2428 

	)

2429 
	#dma_ïûogue_ﬂm_øm
() \

2430 

	)

2431 
	#dma_ïûogue_∑Àâe_øm
() \

2432 

	)

2433 
	#dma_ïûogue_GAMEPAK
() \

2434 

	)

2435 
	#dma_ïûogue_ext
() \

2436 

	)

2437 
	#¥öt_löe
() \

2438 
	`dma_¥öt
(
§c_›
, 
de°_›
, 
å™s„r_size
, 
wb
); \

2439 

	)

2440 
	#dma_å™s„r_lo›_ªgi⁄
(
§c_ªgi⁄_ty≥
, 
de°_ªgi⁄_ty≥
, 
§c_›
, \

2441 
de°_›
, 
å™s„r_size
, 
wb
) \

2443 
dma_v¨s_
##
	`§c_ªgi⁄_ty≥
(
§c
); \

2444 
dma_v¨s_
##
	`de°_ªgi⁄_ty≥
(
de°
); \

2446 
i
 = 0; i < 
Àngth
; i++) \

2448 
dma_ªad_
##
	`§c_ªgi⁄_ty≥
(
§c
, 
å™s„r_size
); \

2449 
dma_wrôe_
##
	`de°_ªgi⁄_ty≥
(
de°
, 
å™s„r_size
); \

2450 
dma_adju°_±r_
##
	`§c_›
(
§c_±r
, 
å™s„r_size
); \

2451 
dma_adju°_±r_
##
	`de°_›
(
de°_±r
, 
å™s„r_size
); \

2453 
dma
->
sour˚_addªss
 = 
§c_±r
; \

2454 
dma_adju°_±r_
##
	`wb
(); \

2455 
dma_ïûogue_
##
	`de°_ªgi⁄_ty≥
(); \

2458 

	)

2459 
	#dma_å™s„r_lo›
(
§c_›
, 
de°_›
, 
å™s„r_size
, 
wb
); \

2461 
u32
 
§c_ªgi⁄
 = 
§c_±r
 >> 24; \

2462 
u32
 
de°_ªgi⁄
 = 
de°_±r
 >> 24; \

2463 
dma_ªgi⁄_ty≥
 
§c_ªgi⁄_ty≥
 = 
dma_ªgi⁄_m≠
[
§c_ªgi⁄
]; \

2464 
dma_ªgi⁄_ty≥
 
de°_ªgi⁄_ty≥
 = 
dma_ªgi⁄_m≠
[
de°_ªgi⁄
]; \

2466 
§c_ªgi⁄_ty≥
 | (
de°_ªgi⁄_ty≥
 << 4)) \

2468 (
DMA_REGION_BIOS
 | (
DMA_REGION_IWRAM
 << 4)): \

2469 
	`dma_å™s„r_lo›_ªgi⁄
(
bios
, 
iwøm
, 
§c_›
, 
de°_›
, \

2470 
å™s„r_size
, 
wb
); \

2472 (
DMA_REGION_IWRAM
 | (DMA_REGION_IWRAM << 4)): \

2473 
	`dma_å™s„r_lo›_ªgi⁄
(
iwøm
, iwøm, 
§c_›
, 
de°_›
, \

2474 
å™s„r_size
, 
wb
); \

2476 (
DMA_REGION_EWRAM
 | (
DMA_REGION_IWRAM
 << 4)): \

2477 
	`dma_å™s„r_lo›_ªgi⁄
(
ewøm
, 
iwøm
, 
§c_›
, 
de°_›
, \

2478 
å™s„r_size
, 
wb
); \

2480 (
DMA_REGION_VRAM
 | (
DMA_REGION_IWRAM
 << 4)): \

2481 
	`dma_å™s„r_lo›_ªgi⁄
(
vøm
, 
iwøm
, 
§c_›
, 
de°_›
, \

2482 
å™s„r_size
, 
wb
); \

2484 (
DMA_REGION_PALETTE_RAM
 | (
DMA_REGION_IWRAM
 << 4)): \

2485 
	`dma_å™s„r_lo›_ªgi⁄
(
∑Àâe_øm
, 
iwøm
, 
§c_›
, 
de°_›
, \

2486 
å™s„r_size
, 
wb
); \

2488 (
DMA_REGION_OAM_RAM
 | (
DMA_REGION_IWRAM
 << 4)): \

2489 
	`dma_å™s„r_lo›_ªgi⁄
(
ﬂm_øm
, 
iwøm
, 
§c_›
, 
de°_›
, \

2490 
å™s„r_size
, 
wb
); \

2492 (
DMA_REGION_IO
 | (
DMA_REGION_IWRAM
 << 4)): \

2493 
	`dma_å™s„r_lo›_ªgi⁄
(
io
, 
iwøm
, 
§c_›
, 
de°_›
, \

2494 
å™s„r_size
, 
wb
); \

2496 (
DMA_REGION_GAMEPAK
 | (
DMA_REGION_IWRAM
 << 4)): \

2497 
	`dma_å™s„r_lo›_ªgi⁄
(
gamïak
, 
iwøm
, 
§c_›
, 
de°_›
, \

2498 
å™s„r_size
, 
wb
); \

2500 (
DMA_REGION_EXT
 | (
DMA_REGION_IWRAM
 << 4)): \

2501 
	`dma_å™s„r_lo›_ªgi⁄
(
ext
, 
iwøm
, 
§c_›
, 
de°_›
, \

2502 
å™s„r_size
, 
wb
); \

2504 (
DMA_REGION_BIOS
 | (
DMA_REGION_EWRAM
 << 4)): \

2505 
	`dma_å™s„r_lo›_ªgi⁄
(
bios
, 
ewøm
, 
§c_›
, 
de°_›
, \

2506 
å™s„r_size
, 
wb
); \

2508 (
DMA_REGION_IWRAM
 | (
DMA_REGION_EWRAM
 << 4)): \

2509 
	`dma_å™s„r_lo›_ªgi⁄
(
iwøm
, 
ewøm
, 
§c_›
, 
de°_›
, \

2510 
å™s„r_size
, 
wb
); \

2512 (
DMA_REGION_EWRAM
 | (DMA_REGION_EWRAM << 4)): \

2513 
	`dma_å™s„r_lo›_ªgi⁄
(
ewøm
,Éwøm, 
§c_›
, 
de°_›
, \

2514 
å™s„r_size
, 
wb
); \

2516 (
DMA_REGION_VRAM
 | (
DMA_REGION_EWRAM
 << 4)): \

2517 
	`dma_å™s„r_lo›_ªgi⁄
(
vøm
, 
ewøm
, 
§c_›
, 
de°_›
, \

2518 
å™s„r_size
, 
wb
); \

2520 (
DMA_REGION_PALETTE_RAM
 | (
DMA_REGION_EWRAM
 << 4)): \

2521 
	`dma_å™s„r_lo›_ªgi⁄
(
∑Àâe_øm
, 
ewøm
, 
§c_›
, 
de°_›
, \

2522 
å™s„r_size
, 
wb
); \

2524 (
DMA_REGION_OAM_RAM
 | (
DMA_REGION_EWRAM
 << 4)): \

2525 
	`dma_å™s„r_lo›_ªgi⁄
(
ﬂm_øm
, 
ewøm
, 
§c_›
, 
de°_›
, \

2526 
å™s„r_size
, 
wb
); \

2528 (
DMA_REGION_IO
 | (
DMA_REGION_EWRAM
 << 4)): \

2529 
	`dma_å™s„r_lo›_ªgi⁄
(
io
, 
ewøm
, 
§c_›
, 
de°_›
, \

2530 
å™s„r_size
, 
wb
); \

2532 (
DMA_REGION_GAMEPAK
 | (
DMA_REGION_EWRAM
 << 4)): \

2533 
	`dma_å™s„r_lo›_ªgi⁄
(
gamïak
, 
ewøm
, 
§c_›
, 
de°_›
, \

2534 
å™s„r_size
, 
wb
); \

2536 (
DMA_REGION_EXT
 | (
DMA_REGION_EWRAM
 << 4)): \

2537 
	`dma_å™s„r_lo›_ªgi⁄
(
ext
, 
ewøm
, 
§c_›
, 
de°_›
, \

2538 
å™s„r_size
, 
wb
); \

2540 (
DMA_REGION_BIOS
 | (
DMA_REGION_VRAM
 << 4)): \

2541 
	`dma_å™s„r_lo›_ªgi⁄
(
bios
, 
vøm
, 
§c_›
, 
de°_›
, \

2542 
å™s„r_size
, 
wb
); \

2544 (
DMA_REGION_IWRAM
 | (
DMA_REGION_VRAM
 << 4)): \

2545 
	`dma_å™s„r_lo›_ªgi⁄
(
iwøm
, 
vøm
, 
§c_›
, 
de°_›
, \

2546 
å™s„r_size
, 
wb
); \

2548 (
DMA_REGION_EWRAM
 | (
DMA_REGION_VRAM
 << 4)): \

2549 
	`dma_å™s„r_lo›_ªgi⁄
(
ewøm
, 
vøm
, 
§c_›
, 
de°_›
, \

2550 
å™s„r_size
, 
wb
); \

2552 (
DMA_REGION_VRAM
 | (DMA_REGION_VRAM << 4)): \

2553 
	`dma_å™s„r_lo›_ªgi⁄
(
vøm
, vøm, 
§c_›
, 
de°_›
, \

2554 
å™s„r_size
, 
wb
); \

2556 (
DMA_REGION_PALETTE_RAM
 | (
DMA_REGION_VRAM
 << 4)): \

2557 
	`dma_å™s„r_lo›_ªgi⁄
(
∑Àâe_øm
, 
vøm
, 
§c_›
, 
de°_›
, \

2558 
å™s„r_size
, 
wb
); \

2560 (
DMA_REGION_OAM_RAM
 | (
DMA_REGION_VRAM
 << 4)): \

2561 
	`dma_å™s„r_lo›_ªgi⁄
(
ﬂm_øm
, 
vøm
, 
§c_›
, 
de°_›
, \

2562 
å™s„r_size
, 
wb
); \

2564 (
DMA_REGION_IO
 | (
DMA_REGION_VRAM
 << 4)): \

2565 
	`dma_å™s„r_lo›_ªgi⁄
(
io
, 
vøm
, 
§c_›
, 
de°_›
, \

2566 
å™s„r_size
, 
wb
); \

2568 (
DMA_REGION_GAMEPAK
 | (
DMA_REGION_VRAM
 << 4)): \

2569 
	`dma_å™s„r_lo›_ªgi⁄
(
gamïak
, 
vøm
, 
§c_›
, 
de°_›
, \

2570 
å™s„r_size
, 
wb
); \

2572 (
DMA_REGION_EXT
 | (
DMA_REGION_VRAM
 << 4)): \

2573 
	`dma_å™s„r_lo›_ªgi⁄
(
ext
, 
vøm
, 
§c_›
, 
de°_›
, \

2574 
å™s„r_size
, 
wb
); \

2576 (
DMA_REGION_BIOS
 | (
DMA_REGION_PALETTE_RAM
 << 4)): \

2577 
	`dma_å™s„r_lo›_ªgi⁄
(
bios
, 
∑Àâe_øm
, 
§c_›
, 
de°_›
, \

2578 
å™s„r_size
, 
wb
); \

2580 (
DMA_REGION_IWRAM
 | (
DMA_REGION_PALETTE_RAM
 << 4)): \

2581 
	`dma_å™s„r_lo›_ªgi⁄
(
iwøm
, 
∑Àâe_øm
, 
§c_›
, 
de°_›
, \

2582 
å™s„r_size
, 
wb
); \

2584 (
DMA_REGION_EWRAM
 | (
DMA_REGION_PALETTE_RAM
 << 4)): \

2585 
	`dma_å™s„r_lo›_ªgi⁄
(
ewøm
, 
∑Àâe_øm
, 
§c_›
, 
de°_›
, \

2586 
å™s„r_size
, 
wb
); \

2588 (
DMA_REGION_VRAM
 | (
DMA_REGION_PALETTE_RAM
 << 4)): \

2589 
	`dma_å™s„r_lo›_ªgi⁄
(
vøm
, 
∑Àâe_øm
, 
§c_›
, 
de°_›
, \

2590 
å™s„r_size
, 
wb
); \

2592 (
DMA_REGION_PALETTE_RAM
 | (DMA_REGION_PALETTE_RAM << 4)): \

2593 
	`dma_å™s„r_lo›_ªgi⁄
(
∑Àâe_øm
,ÖÆëã_øm, 
§c_›
, 
de°_›
, \

2594 
å™s„r_size
, 
wb
); \

2596 (
DMA_REGION_OAM_RAM
 | (
DMA_REGION_PALETTE_RAM
 << 4)): \

2597 
	`dma_å™s„r_lo›_ªgi⁄
(
ﬂm_øm
, 
∑Àâe_øm
, 
§c_›
, 
de°_›
, \

2598 
å™s„r_size
, 
wb
); \

2600 (
DMA_REGION_IO
 | (
DMA_REGION_PALETTE_RAM
 << 4)): \

2601 
	`dma_å™s„r_lo›_ªgi⁄
(
io
, 
∑Àâe_øm
, 
§c_›
, 
de°_›
, \

2602 
å™s„r_size
, 
wb
); \

2604 (
DMA_REGION_GAMEPAK
 | (
DMA_REGION_PALETTE_RAM
 << 4)): \

2605 
	`dma_å™s„r_lo›_ªgi⁄
(
gamïak
, 
∑Àâe_øm
, 
§c_›
, 
de°_›
, \

2606 
å™s„r_size
, 
wb
); \

2608 (
DMA_REGION_EXT
 | (
DMA_REGION_PALETTE_RAM
 << 4)): \

2609 
	`dma_å™s„r_lo›_ªgi⁄
(
ext
, 
∑Àâe_øm
, 
§c_›
, 
de°_›
, \

2610 
å™s„r_size
, 
wb
); \

2612 (
DMA_REGION_BIOS
 | (
DMA_REGION_OAM_RAM
 << 4)): \

2613 
	`dma_å™s„r_lo›_ªgi⁄
(
bios
, 
ﬂm_øm
, 
§c_›
, 
de°_›
, \

2614 
å™s„r_size
, 
wb
); \

2616 (
DMA_REGION_IWRAM
 | (
DMA_REGION_OAM_RAM
 << 4)): \

2617 
	`dma_å™s„r_lo›_ªgi⁄
(
iwøm
, 
ﬂm_øm
, 
§c_›
, 
de°_›
, \

2618 
å™s„r_size
, 
wb
); \

2620 (
DMA_REGION_EWRAM
 | (
DMA_REGION_OAM_RAM
 << 4)): \

2621 
	`dma_å™s„r_lo›_ªgi⁄
(
ewøm
, 
ﬂm_øm
, 
§c_›
, 
de°_›
, \

2622 
å™s„r_size
, 
wb
); \

2624 (
DMA_REGION_VRAM
 | (
DMA_REGION_OAM_RAM
 << 4)): \

2625 
	`dma_å™s„r_lo›_ªgi⁄
(
vøm
, 
ﬂm_øm
, 
§c_›
, 
de°_›
, \

2626 
å™s„r_size
, 
wb
); \

2628 (
DMA_REGION_PALETTE_RAM
 | (
DMA_REGION_OAM_RAM
 << 4)): \

2629 
	`dma_å™s„r_lo›_ªgi⁄
(
∑Àâe_øm
, 
ﬂm_øm
, 
§c_›
, 
de°_›
, \

2630 
å™s„r_size
, 
wb
); \

2632 (
DMA_REGION_OAM_RAM
 | (DMA_REGION_OAM_RAM << 4)): \

2633 
	`dma_å™s„r_lo›_ªgi⁄
(
ﬂm_øm
, oam_øm, 
§c_›
, 
de°_›
, \

2634 
å™s„r_size
, 
wb
); \

2636 (
DMA_REGION_IO
 | (
DMA_REGION_OAM_RAM
 << 4)): \

2637 
	`dma_å™s„r_lo›_ªgi⁄
(
io
, 
ﬂm_øm
, 
§c_›
, 
de°_›
, \

2638 
å™s„r_size
, 
wb
); \

2640 (
DMA_REGION_GAMEPAK
 | (
DMA_REGION_OAM_RAM
 << 4)): \

2641 
	`dma_å™s„r_lo›_ªgi⁄
(
gamïak
, 
ﬂm_øm
, 
§c_›
, 
de°_›
, \

2642 
å™s„r_size
, 
wb
); \

2644 (
DMA_REGION_EXT
 | (
DMA_REGION_OAM_RAM
 << 4)): \

2645 
	`dma_å™s„r_lo›_ªgi⁄
(
ext
, 
ﬂm_øm
, 
§c_›
, 
de°_›
, \

2646 
å™s„r_size
, 
wb
); \

2648 (
DMA_REGION_BIOS
 | (
DMA_REGION_IO
 << 4)): \

2649 
	`dma_å™s„r_lo›_ªgi⁄
(
bios
, 
io
, 
§c_›
, 
de°_›
, \

2650 
å™s„r_size
, 
wb
); \

2652 (
DMA_REGION_IWRAM
 | (
DMA_REGION_IO
 << 4)): \

2653 
	`dma_å™s„r_lo›_ªgi⁄
(
iwøm
, 
io
, 
§c_›
, 
de°_›
, \

2654 
å™s„r_size
, 
wb
); \

2656 (
DMA_REGION_EWRAM
 | (
DMA_REGION_IO
 << 4)): \

2657 
	`dma_å™s„r_lo›_ªgi⁄
(
ewøm
, 
io
, 
§c_›
, 
de°_›
, \

2658 
å™s„r_size
, 
wb
); \

2660 (
DMA_REGION_VRAM
 | (
DMA_REGION_IO
 << 4)): \

2661 
	`dma_å™s„r_lo›_ªgi⁄
(
vøm
, 
io
, 
§c_›
, 
de°_›
, \

2662 
å™s„r_size
, 
wb
); \

2664 (
DMA_REGION_PALETTE_RAM
 | (
DMA_REGION_IO
 << 4)): \

2665 
	`dma_å™s„r_lo›_ªgi⁄
(
∑Àâe_øm
, 
io
, 
§c_›
, 
de°_›
, \

2666 
å™s„r_size
, 
wb
); \

2668 (
DMA_REGION_OAM_RAM
 | (
DMA_REGION_IO
 << 4)): \

2669 
	`dma_å™s„r_lo›_ªgi⁄
(
ﬂm_øm
, 
io
, 
§c_›
, 
de°_›
, \

2670 
å™s„r_size
, 
wb
); \

2672 (
DMA_REGION_IO
 | (DMA_REGION_IO << 4)): \

2673 
	`dma_å™s„r_lo›_ªgi⁄
(
io
, io, 
§c_›
, 
de°_›
, \

2674 
å™s„r_size
, 
wb
); \

2676 (
DMA_REGION_GAMEPAK
 | (
DMA_REGION_IO
 << 4)): \

2677 
	`dma_å™s„r_lo›_ªgi⁄
(
gamïak
, 
io
, 
§c_›
, 
de°_›
, \

2678 
å™s„r_size
, 
wb
); \

2680 (
DMA_REGION_EXT
 | (
DMA_REGION_IO
 << 4)): \

2681 
	`dma_å™s„r_lo›_ªgi⁄
(
ext
, 
io
, 
§c_›
, 
de°_›
, \

2682 
å™s„r_size
, 
wb
); \

2684 (
DMA_REGION_BIOS
 | (
DMA_REGION_EXT
 << 4)): \

2685 
	`dma_å™s„r_lo›_ªgi⁄
(
bios
, 
ext
, 
§c_›
, 
de°_›
, \

2686 
å™s„r_size
, 
wb
); \

2688 (
DMA_REGION_IWRAM
 | (
DMA_REGION_EXT
 << 4)): \

2689 
	`dma_å™s„r_lo›_ªgi⁄
(
iwøm
, 
ext
, 
§c_›
, 
de°_›
, \

2690 
å™s„r_size
, 
wb
); \

2692 (
DMA_REGION_EWRAM
 | (
DMA_REGION_EXT
 << 4)): \

2693 
	`dma_å™s„r_lo›_ªgi⁄
(
ewøm
, 
ext
, 
§c_›
, 
de°_›
, \

2694 
å™s„r_size
, 
wb
); \

2696 (
DMA_REGION_VRAM
 | (
DMA_REGION_EXT
 << 4)): \

2697 
	`dma_å™s„r_lo›_ªgi⁄
(
vøm
, 
ext
, 
§c_›
, 
de°_›
, \

2698 
å™s„r_size
, 
wb
); \

2700 (
DMA_REGION_PALETTE_RAM
 | (
DMA_REGION_EXT
 << 4)): \

2701 
	`dma_å™s„r_lo›_ªgi⁄
(
∑Àâe_øm
, 
ext
, 
§c_›
, 
de°_›
, \

2702 
å™s„r_size
, 
wb
); \

2704 (
DMA_REGION_OAM_RAM
 | (
DMA_REGION_EXT
 << 4)): \

2705 
	`dma_å™s„r_lo›_ªgi⁄
(
ﬂm_øm
, 
ext
, 
§c_›
, 
de°_›
, \

2706 
å™s„r_size
, 
wb
); \

2708 (
DMA_REGION_IO
 | (
DMA_REGION_EXT
 << 4)): \

2709 
	`dma_å™s„r_lo›_ªgi⁄
(
io
, 
ext
, 
§c_›
, 
de°_›
, \

2710 
å™s„r_size
, 
wb
); \

2712 (
DMA_REGION_GAMEPAK
 | (
DMA_REGION_EXT
 << 4)): \

2713 
	`dma_å™s„r_lo›_ªgi⁄
(
gamïak
, 
ext
, 
§c_›
, 
de°_›
, \

2714 
å™s„r_size
, 
wb
); \

2716 (
DMA_REGION_EXT
 | (DMA_REGION_EXT << 3)): \

2717 
	`dma_å™s„r_lo›_ªgi⁄
(
ext
,Éxt, 
§c_›
, 
de°_›
, \

2718 
å™s„r_size
, 
wb
); \

2722 

	)

2723 
	#dma_å™s„r_ex∑nd
(
å™s„r_size
) \

2724 (
dma
->
de°_dúe˘i⁄
 << 2Ë| dma->
sour˚_dúe˘i⁄
) \

2727 
	`dma_å™s„r_lo›
(
öc
, inc, 
å™s„r_size
, 
wrôeback
); \

2730 
	`dma_å™s„r_lo›
(
dec
, 
öc
, 
å™s„r_size
, 
wrôeback
); \

2733 
	`dma_å™s„r_lo›
(
fix
, 
öc
, 
å™s„r_size
, 
wrôeback
); \

2739 
	`dma_å™s„r_lo›
(
öc
, 
dec
, 
å™s„r_size
, 
wrôeback
); \

2742 
	`dma_å™s„r_lo›
(
dec
, dec, 
å™s„r_size
, 
wrôeback
); \

2745 
	`dma_å™s„r_lo›
(
fix
, 
dec
, 
å™s„r_size
, 
wrôeback
); \

2751 
	`dma_å™s„r_lo›
(
öc
, 
fix
, 
å™s„r_size
, 
wrôeback
); \

2754 
	`dma_å™s„r_lo›
(
dec
, 
fix
, 
å™s„r_size
, 
wrôeback
); \

2757 
	`dma_å™s„r_lo›
(
fix
, fix, 
å™s„r_size
, 
wrôeback
); \

2763 
	`dma_å™s„r_lo›
(
öc
, inc, 
å™s„r_size
, 
ªlﬂd
); \

2766 
	`dma_å™s„r_lo›
(
dec
, 
öc
, 
å™s„r_size
, 
ªlﬂd
); \

2769 
	`dma_å™s„r_lo›
(
fix
, 
öc
, 
å™s„r_size
, 
ªlﬂd
); \

2774 

	)

2775 
˝u_Æît_ty≥
 
	$dma_å™s„r
(
dma_å™s„r_ty≥
 *
dma
)

2777 
u32
 
i
;

2778 
u32
 
Àngth
 = 
dma
->length;

2779 
u32
 
ªad_vÆue
;

2780 
u32
 
§c_±r
 = 
dma
->
sour˚_addªss
;

2781 
u32
 
de°_±r
 = 
dma
->
de°_addªss
;

2782 
˝u_Æît_ty≥
 
ªtu∫_vÆue
 = 
CPU_ALERT_NONE
;

2787 if((
de°_±r
 >> 24Ë!((de°_±∏+ 
Àngth
 - 1) >> 24))

2789 
u32
 
fú°_Àngth
 = ((
de°_±r
 & 0xFF000000) + 0x1000000) - dest_ptr;

2790 
u32
 
£c⁄d_Àngth
 = 
Àngth
 - 
fú°_Àngth
;

2791 
dma
->
Àngth
 = 
fú°_Àngth
;

2793 
	`dma_å™s„r
(
dma
);

2795 
dma
->
Àngth
 =Üength;

2797 
Àngth
 = 
£c⁄d_Àngth
;

2798 
de°_±r
 +
fú°_Àngth
;

2799 
§c_±r
 +
fú°_Àngth
;

2802 if(
dma
->
Àngth_ty≥
 =
DMA_16BIT
)

2804 
§c_±r
 &= ~0x01;

2805 
de°_±r
 &= ~0x01;

2806 
cy˛e_dma16_w‹ds
 +
Àngth
;

2807 
	`dma_å™s„r_ex∑nd
(16);

2811 
§c_±r
 &= ~0x03;

2812 
de°_±r
 &= ~0x03;

2813 
cy˛e_dma32_w‹ds
 +
Àngth
;

2814 
	`dma_å™s„r_ex∑nd
(32);

2817 if((
dma
->
ª≥©_ty≥
 =
DMA_NO_REPEAT
) ||

2818 (
dma
->
°¨t_ty≥
 =
DMA_START_IMMEDIATELY
))

2820 
dma
->
°¨t_ty≥
 = 
DMA_INACTIVE
;

2821 
	`addªss16
(
io_ªgi°îs
, (
dma
->
dma_ch™√l
 * 12) + 0xBA) &=

2825 if(
dma
->
úq
)

2827 
	`øi£_öãºu±
(
IRQ_DMA0
 << 
dma
->
dma_ch™√l
);

2828 
ªtu∫_vÆue
 = 
CPU_ALERT_IRQ
;

2831  
ªtu∫_vÆue
;

2832 
	}
}

2836 
	#m≠_ªgi⁄
(
ty≥
, 
°¨t
, 
íd
, 
múr‹_blocks
, 
ªgi⁄
) \

2837 
m≠_off£t
 = (
°¨t
) / 0x8000; map_offset < \

2838 ((
íd
Ë/ 0x8000); 
m≠_off£t
++) \

2840 
mem‹y_m≠_
##
ty≥
[
m≠_off£t
] = \

2841 ((
u8
 *)
ªgi⁄
Ë+ ((
m≠_off£t
 % 
múr‹_blocks
) * 0x8000); \

2843 

	)

2844 
	#m≠_nuŒ
(
ty≥
, 
°¨t
, 
íd
) \

2845 
m≠_off£t
 = 
°¨t
 / 0x8000; m≠_off£à< (
íd
 / 0x8000); \

2846 
m≠_off£t
++) \

2848 
mem‹y_m≠_
##
ty≥
[
m≠_off£t
] = 
NULL
; \

2850 

	)

2851 
	#m≠_øm_ªgi⁄
(
ty≥
, 
°¨t
, 
íd
, 
múr‹_blocks
, 
ªgi⁄
) \

2852 
m≠_off£t
 = (
°¨t
) / 0x8000; map_offset < \

2853 ((
íd
Ë/ 0x8000); 
m≠_off£t
++) \

2855 
mem‹y_m≠_
##
ty≥
[
m≠_off£t
] = \

2856 ((
u8
 *)
ªgi⁄
Ë+ ((
m≠_off£t
 % 
múr‹_blocks
) * 0x10000) + 0x8000; \

2858 

	)

2859 
	#m≠_vøm
(
ty≥
) \

2860 
m≠_off£t
 = 0x6000000 / 0x8000; map_offset < (0x7000000 / 0x8000); \

2861 
m≠_off£t
 += 4) \

2863 
mem‹y_m≠_
##
ty≥
[
m≠_off£t
] = 
vøm
; \

2864 
mem‹y_m≠_
##
ty≥
[
m≠_off£t
 + 1] = 
vøm
 + 0x8000; \

2865 
mem‹y_m≠_
##
ty≥
[
m≠_off£t
 + 2] = 
vøm
 + (0x8000 * 2); \

2866 
mem‹y_m≠_
##
ty≥
[
m≠_off£t
 + 3] = 
vøm
 + (0x8000 * 2); \

2868 

	)

2869 
	#m≠_vøm_fú°∑ge
(
ty≥
) \

2870 
m≠_off£t
 = 0x6000000 / 0x8000; map_offset < (0x7000000 / 0x8000); \

2871 
m≠_off£t
 += 4) \

2873 
mem‹y_m≠_
##
ty≥
[
m≠_off£t
] = 
vøm
; \

2874 
mem‹y_m≠_
##
ty≥
[
m≠_off£t
 + 1] = 
NULL
; \

2875 
mem‹y_m≠_
##
ty≥
[
m≠_off£t
 + 2] = 
NULL
; \

2876 
mem‹y_m≠_
##
ty≥
[
m≠_off£t
 + 3] = 
NULL
; \

2878 

	)

2881 
u32
 
	g∑ge_time
 = 0;

2883 
u32
 
	$evi˘_gamïak_∑ge
()

2886 
u32
 
∑ge_ödex
 = 0;

2887 
u32
 
physiˇl_ödex
;

2888 
u32
 
smÆÀ°
 = 
gamïak_mem‹y_m≠
[0].
∑ge_time°amp
;

2889 
u32
 
i
;

2891 
i
 = 1; i < 
gamïak_øm_∑ges
; i++)

2893 if(
gamïak_mem‹y_m≠
[
i
].
∑ge_time°amp
 <
smÆÀ°
)

2895 
smÆÀ°
 = 
gamïak_mem‹y_m≠
[
i
].
∑ge_time°amp
;

2896 
∑ge_ödex
 = 
i
;

2900 
physiˇl_ödex
 = 
gamïak_mem‹y_m≠
[
∑ge_ödex
].physical_index;

2902 
mem‹y_m≠_ªad
[(0x8000000 / (32 * 1024)Ë+ 
physiˇl_ödex
] = 
NULL
;

2903 
mem‹y_m≠_ªad
[(0xA000000 / (32 * 1024)Ë+ 
physiˇl_ödex
] = 
NULL
;

2904 
mem‹y_m≠_ªad
[(0xC000000 / (32 * 1024)Ë+ 
physiˇl_ödex
] = 
NULL
;

2906  
∑ge_ödex
;

2907 
	}
}

2909 
u8
 *
	$lﬂd_gamïak_∑ge
(
u32
 
physiˇl_ödex
)

2911 if(
physiˇl_ödex
 >(
gamïak_size
 >> 15))

2912  
gamïak_rom
;

2914 
u32
 
∑ge_ödex
 = 
	`evi˘_gamïak_∑ge
();

2915 
u32
 
∑ge_off£t
 = 
∑ge_ödex
 * (32 * 1024);

2916 
u8
 *
sw≠_loˇti⁄
 = 
gamïak_rom
 + 
∑ge_off£t
;

2918 
gamïak_mem‹y_m≠
[
∑ge_ödex
].
∑ge_time°amp
 = 
∑ge_time
;

2919 
gamïak_mem‹y_m≠
[
∑ge_ödex
].
physiˇl_ödex
 =Öhysical_index;

2920 
∑ge_time
++;

2922 
	`fûe_£ek
(
gamïak_fûe_œrge
, 
physiˇl_ödex
 * (32 * 1024), 
SEEK_SET
);

2923 
	`fûe_ªad
(
gamïak_fûe_œrge
, 
sw≠_loˇti⁄
, (32 * 1024));

2924 
mem‹y_m≠_ªad
[(0x8000000 / (32 * 1024)Ë+ 
physiˇl_ödex
] = 
sw≠_loˇti⁄
;

2925 
mem‹y_m≠_ªad
[(0xA000000 / (32 * 1024)Ë+ 
physiˇl_ödex
] = 
sw≠_loˇti⁄
;

2926 
mem‹y_m≠_ªad
[(0xC000000 / (32 * 1024)Ë+ 
physiˇl_ödex
] = 
sw≠_loˇti⁄
;

2929 if((
πc_°©e
 !
RTC_DISABLED
Ë&& (
physiˇl_ödex
 == 0))

2931 
	`mem˝y
(
sw≠_loˇti⁄
 + 0xC4, 
πc_ªgi°îs
, (rtc_registers));

2934  
sw≠_loˇti⁄
;

2935 
	}
}

2937 
	$öô_mem‹y_gamïak
()

2939 
u32
 
m≠_off£t
 = 0;

2941 if(
gamïak_size
 > 
gamïak_øm_buf„r_size
)

2945 
u32
 
i
;

2946 
i
 = 0; i < 
gamïak_øm_∑ges
; i++)

2948 
gamïak_mem‹y_m≠
[
i
].
∑ge_time°amp
 = 0;

2949 
gamïak_mem‹y_m≠
[
i
].
physiˇl_ödex
 = 0;

2952 
	`m≠_nuŒ
(
ªad
, 0x8000000, 0xD000000);

2956 
	`m≠_ªgi⁄
(
ªad
, 0x8000000, 0x8000000 + 
gamïak_size
, 1024, 
gamïak_rom
);

2957 
	`m≠_nuŒ
(
ªad
, 0x8000000 + 
gamïak_size
, 0xA000000);

2958 
	`m≠_ªgi⁄
(
ªad
, 0xA000000, 0xA000000 + 
gamïak_size
, 1024, 
gamïak_rom
);

2959 
	`m≠_nuŒ
(
ªad
, 0xA000000 + 
gamïak_size
, 0xC000000);

2960 
	`m≠_ªgi⁄
(
ªad
, 0xC000000, 0xC000000 + 
gamïak_size
, 1024, 
gamïak_rom
);

2961 
	`m≠_nuŒ
(
ªad
, 0xC000000 + 
gamïak_size
, 0xE000000);

2963 
	}
}

2965 
	$öô_gamïak_buf„r
()

2968 
gamïak_rom
 = 
NULL
;

2970 
gamïak_øm_buf„r_size
 = 32 * 1024 * 1024;

2971 
gamïak_rom
 = 
	`mÆloc
(
gamïak_øm_buf„r_size
);

2973 if(
gamïak_rom
 =
NULL
)

2976 
gamïak_øm_buf„r_size
 = 16 * 1024 * 1024;

2977 
gamïak_rom
 = 
	`mÆloc
(
gamïak_øm_buf„r_size
);

2979 
gamïak_rom
 =
NULL
)

2981 
gamïak_øm_buf„r_size
 -= (2 * 1024 * 1024);

2982 
gamïak_rom
 = 
	`mÆloc
(
gamïak_øm_buf„r_size
);

2988 
gamïak_øm_∑ges
 = 
gamïak_øm_buf„r_size
 / (32 * 1024);

2989 
gamïak_mem‹y_m≠
 = 
	`mÆloc
((
gamïak_sw≠_íåy_ty≥
) *

2990 
gamïak_øm_∑ges
);

2991 
	}
}

2993 
	$öô_mem‹y
()

2995 
u32
 
i
;

2996 
u32
 
m≠_off£t
 = 0;

2998 
mem‹y_ªgi⁄s
[0x00] = (
u8
 *)
bios_rom
;

2999 
mem‹y_ªgi⁄s
[0x01] = (
u8
 *)
bios_rom
;

3000 
mem‹y_ªgi⁄s
[0x02] = (
u8
 *)
ewøm
;

3001 
mem‹y_ªgi⁄s
[0x03] = (
u8
 *)
iwøm
 + 0x8000;

3002 
mem‹y_ªgi⁄s
[0x04] = (
u8
 *)
io_ªgi°îs
;

3003 
mem‹y_ªgi⁄s
[0x05] = (
u8
 *)
∑Àâe_øm
;

3004 
mem‹y_ªgi⁄s
[0x06] = (
u8
 *)
vøm
;

3005 
mem‹y_ªgi⁄s
[0x07] = (
u8
 *)
ﬂm_øm
;

3006 
mem‹y_ªgi⁄s
[0x08] = (
u8
 *)
gamïak_rom
;

3007 
mem‹y_ªgi⁄s
[0x09] = (
u8
 *)(
gamïak_rom
 + 0xFFFFFF);

3008 
mem‹y_ªgi⁄s
[0x0A] = (
u8
 *)
gamïak_rom
;

3009 
mem‹y_ªgi⁄s
[0x0B] = (
u8
 *)(
gamïak_rom
 + 0xFFFFFF);

3010 
mem‹y_ªgi⁄s
[0x0C] = (
u8
 *)
gamïak_rom
;

3011 
mem‹y_ªgi⁄s
[0x0D] = (
u8
 *)(
gamïak_rom
 + 0xFFFFFF);

3012 
mem‹y_ªgi⁄s
[0x0E] = (
u8
 *)
gamïak_backup
;

3014 
mem‹y_limôs
[0x00] = 0x3FFF;

3015 
mem‹y_limôs
[0x01] = 0x3FFF;

3016 
mem‹y_limôs
[0x02] = 0x3FFFF;

3017 
mem‹y_limôs
[0x03] = 0x7FFF;

3018 
mem‹y_limôs
[0x04] = 0x7FFF;

3019 
mem‹y_limôs
[0x05] = 0x3FF;

3020 
mem‹y_limôs
[0x06] = 0x17FFF;

3021 
mem‹y_limôs
[0x07] = 0x3FF;

3022 
mem‹y_limôs
[0x08] = 0x1FFFFFF;

3023 
mem‹y_limôs
[0x09] = 0x1FFFFFF;

3024 
mem‹y_limôs
[0x0A] = 0x1FFFFFF;

3025 
mem‹y_limôs
[0x0B] = 0x1FFFFFF;

3026 
mem‹y_limôs
[0x0C] = 0x1FFFFFF;

3027 
mem‹y_limôs
[0x0D] = 0x1FFFFFF;

3028 
mem‹y_limôs
[0x0E] = 0xFFFF;

3031 
	`m≠_ªgi⁄
(
ªad
, 0x0000000, 0x1000000, 1, 
bios_rom
);

3032 
	`m≠_nuŒ
(
ªad
, 0x1000000, 0x2000000);

3033 
	`m≠_øm_ªgi⁄
(
ªad
, 0x2000000, 0x3000000, 8, 
ewøm
);

3034 
	`m≠_øm_ªgi⁄
(
ªad
, 0x3000000, 0x4000000, 1, 
iwøm
);

3035 
	`m≠_ªgi⁄
(
ªad
, 0x4000000, 0x5000000, 1, 
io_ªgi°îs
);

3036 
	`m≠_nuŒ
(
ªad
, 0x5000000, 0x6000000);

3037 
	`m≠_nuŒ
(
ªad
, 0x6000000, 0x7000000);

3038 
	`m≠_vøm
(
ªad
);

3039 
	`m≠_nuŒ
(
ªad
, 0x7000000, 0x8000000);

3040 
	`öô_mem‹y_gamïak
();

3041 
	`m≠_nuŒ
(
ªad
, 0xE000000, 0x10000000);

3044 
	`m≠_nuŒ
(
wrôe
, 0x0000000, 0x2000000);

3045 
	`m≠_øm_ªgi⁄
(
wrôe
, 0x2000000, 0x3000000, 8, 
ewøm
);

3046 
	`m≠_øm_ªgi⁄
(
wrôe
, 0x3000000, 0x4000000, 1, 
iwøm
);

3047 
	`m≠_nuŒ
(
wrôe
, 0x4000000, 0x5000000);

3048 
	`m≠_nuŒ
(
wrôe
, 0x5000000, 0x6000000);

3062 if(
dúe˘_m≠_vøm
)

3064 
	`m≠_vøm
(
wrôe
);

3068 
	`m≠_nuŒ
(
wrôe
, 0x6000000, 0x7000000);

3071 
	`m≠_nuŒ
(
wrôe
, 0x7000000, 0x8000000);

3072 
	`m≠_nuŒ
(
wrôe
, 0x8000000, 0xE000000);

3073 
	`m≠_nuŒ
(
wrôe
, 0xE000000, 0x10000000);

3075 
	`mem£t
(
io_ªgi°îs
, 0, 0x8000);

3076 
	`mem£t
(
ﬂm_øm
, 0, 0x400);

3077 
	`mem£t
(
∑Àâe_øm
, 0, 0x400);

3078 
	`mem£t
(
iwøm
, 0, 0x10000);

3079 
	`mem£t
(
ewøm
, 0, 0x80000);

3080 
	`mem£t
(
vøm
, 0, 0x18000);

3082 
io_ªgi°îs
[
REG_DISPCNT
] = 0x80;

3083 
io_ªgi°îs
[
REG_P1
] = 0x3FF;

3084 
io_ªgi°îs
[
REG_BG2PA
] = 0x100;

3085 
io_ªgi°îs
[
REG_BG2PD
] = 0x100;

3086 
io_ªgi°îs
[
REG_BG3PA
] = 0x100;

3087 
io_ªgi°îs
[
REG_BG3PD
] = 0x100;

3088 
io_ªgi°îs
[
REG_RCNT
] = 0x8000;

3090 
backup_ty≥
 = 
BACKUP_NONE
;

3092 
§am_size
 = 
SRAM_SIZE_32KB
;

3093 
Êash_size
 = 
FLASH_SIZE_64KB
;

3095 
Êash_b™k_±r
 = 
gamïak_backup
;

3096 
Êash_comm™d_posôi⁄
 = 0;

3097 
ì¥om_size
 = 
EEPROM_512_BYTE
;

3098 
ì¥om_mode
 = 
EEPROM_BASE_MODE
;

3099 
ì¥om_addªss
 = 0;

3100 
ì¥om_cou¡î
 = 0;

3102 
Êash_mode
 = 
FLASH_BASE_MODE
;

3104 
πc_°©e
 = 
RTC_DISABLED
;

3105 
	`mem£t
(
πc_ªgi°îs
, 0, (rtc_registers));

3106 
bios_ªad_¥Ÿe˘
 = 0xe129f000;

3107 
	}
}

3109 
	$bios_ªgi⁄_ªad_Ælow
()

3111 
mem‹y_m≠_ªad
[0] = 
bios_rom
;

3112 
	}
}

3114 
	$bios_ªgi⁄_ªad_¥Ÿe˘
()

3116 #ifde‡
GP2X_BUILD


3117 
mem‹y_m≠_ªad
[0] = 
NULL
;

3119 
	}
}

3122 
	#ßve°©e_block
(
ty≥
) \

3123 
˝u_
##
ty≥
##
	`_ßve°©e
(
ßve°©e_fûe
); \

3124 
öput_
##
ty≥
##
	`_ßve°©e
(
ßve°©e_fûe
); \

3125 
maö_
##
ty≥
##
	`_ßve°©e
(
ßve°©e_fûe
); \

3126 
mem‹y_
##
ty≥
##
	`_ßve°©e
(
ßve°©e_fûe
); \

3127 
sound_
##
ty≥
##
	`_ßve°©e
(
ßve°©e_fûe
); \

3128 
video_
##
ty≥
##
	`_ßve°©e
(
ßve°©e_fûe
) \

3129 

	)

3130 
	$lﬂd_°©e
(*
ßve°©e_fûíame
)

3132 
	`fûe_›í
(
ßve°©e_fûe
, 
ßve°©e_fûíame
, 
ªad
);

3133 if(
	`fûe_check_vÆid
(
ßve°©e_fûe
))

3135 
cuºít_gamïak_fûíame
[512];

3136 
ßve°©e_gamïak_fûíame
[512];

3137 
u32
 
i
;

3138 
u32
 
cuºít_cﬁ‹
;

3140 
	`fûe_£ek
(
ßve°©e_fûe
, (240 * 160 * 2Ë+ (
time_t
), 
SEEK_SET
);

3142 
	`°r˝y
(
cuºít_gamïak_fûíame
, 
gamïak_fûíame
);

3144 
	`ßve°©e_block
(
ªad
);

3146 
	`fûe_˛o£
(
ßve°©e_fûe
);

3148 
	`Êush_å™¶©i⁄_ˇche_øm
();

3149 
	`Êush_å™¶©i⁄_ˇche_rom
();

3150 
	`Êush_å™¶©i⁄_ˇche_bios
();

3152 
ﬂm_upd©e
 = 1;

3153 
gbc_sound_upd©e
 = 1;

3154 if(
	`°rcmp
(
cuºít_gamïak_fûíame
, 
gamïak_fûíame
))

3156 
u32
 
dŸ_posôi⁄
 = 
	`°rc•n
(
cuºít_gamïak_fûíame
, ".");

3160 
	`°r˝y
(
gamïak_fûíame
, 
cuºít_gamïak_fûíame
);

3161 if(
	`°∫cmp
(
ßve°©e_fûíame
, 
cuºít_gamïak_fûíame
, 
dŸ_posôi⁄
))

3163 if(
	`lﬂd_gamïak
(
gamïak_fûíame
) != -1)

3165 
	`ª£t_gba
();

3167 
	`lﬂd_°©e
(
ßve°©e_fûíame
);

3171 
	`quô
();

3178 
i
 = 0; i < 512; i++)

3180 
cuºít_cﬁ‹
 = 
∑Àâe_øm
[
i
];

3181 
∑Àâe_øm_c⁄vîãd
[
i
] =

3182 
	`c⁄vît_∑Àâe
(
cuºít_cﬁ‹
);

3186 
i
 = 0; i < 4; i++)

3188 
gbc_sound_ch™√l
[
i
].
ßm∂e_d©a
 = 
squ¨e_∑âîn_duty
[2];

3190 
cuºít_debug_°©e
 = 
STEP
;

3191 
ö°ru˘i⁄_cou¡
 = 0;

3193 
ªg
[
CHANGED_PC_STATUS
] = 1;

3195 
	}
}

3197 
u8
 
	gßve°©e_wrôe_buf„r
[506947];

3198 
u8
 *
	gwrôe_mem_±r
;

3200 
	$ßve_°©e
(*
ßve°©e_fûíame
, 
u16
 *
s¸ìn_ˇ±uª
)

3202 
wrôe_mem_±r
 = 
ßve°©e_wrôe_buf„r
;

3203 
	`fûe_›í
(
ßve°©e_fûe
, 
ßve°©e_fûíame
, 
wrôe
);

3204 if(
	`fûe_check_vÆid
(
ßve°©e_fûe
))

3206 
time_t
 
cuºít_time
;

3207 
	`fûe_wrôe_mem
(
ßve°©e_fûe
, 
s¸ìn_ˇ±uª
, 240 * 160 * 2);

3209 
	`time
(&
cuºít_time
);

3210 
	`fûe_wrôe_mem_v¨übÀ
(
ßve°©e_fûe
, 
cuºít_time
);

3212 
	`ßve°©e_block
(
wrôe_mem
);

3213 
	`fûe_wrôe
(
ßve°©e_fûe
, 
ßve°©e_wrôe_buf„r
,

3214 (
ßve°©e_wrôe_buf„r
));

3216 
	`fûe_˛o£
(
ßve°©e_fûe
);

3218 
	}
}

3221 
	#mem‹y_ßve°©e_buûdî
(
ty≥
) \

3222 
mem‹y_
##
ty≥
##
	`_ßve°©e
(
fûe_èg_ty≥
 
ßve°©e_fûe
) \

3224 
u32
 
i
; \

3226 
fûe_
##
ty≥
##
	`_v¨übÀ
(
ßve°©e_fûe
, 
backup_ty≥
); \

3227 
fûe_
##
ty≥
##
	`_v¨übÀ
(
ßve°©e_fûe
, 
§am_size
); \

3228 
fûe_
##
ty≥
##
	`_v¨übÀ
(
ßve°©e_fûe
, 
Êash_mode
); \

3229 
fûe_
##
ty≥
##
	`_v¨übÀ
(
ßve°©e_fûe
, 
Êash_comm™d_posôi⁄
); \

3230 
fûe_
##
ty≥
##
	`_v¨übÀ
(
ßve°©e_fûe
, 
Êash_b™k_±r
); \

3231 
fûe_
##
ty≥
##
	`_v¨übÀ
(
ßve°©e_fûe
, 
Êash_devi˚_id
); \

3232 
fûe_
##
ty≥
##
	`_v¨übÀ
(
ßve°©e_fûe
, 
Êash_m™uÁ˘uªr_id
); \

3233 
fûe_
##
ty≥
##
	`_v¨übÀ
(
ßve°©e_fûe
, 
Êash_size
); \

3234 
fûe_
##
ty≥
##
	`_v¨übÀ
(
ßve°©e_fûe
, 
ì¥om_size
); \

3235 
fûe_
##
ty≥
##
	`_v¨übÀ
(
ßve°©e_fûe
, 
ì¥om_mode
); \

3236 
fûe_
##
ty≥
##
	`_v¨übÀ
(
ßve°©e_fûe
, 
ì¥om_addªss_Àngth
); \

3237 
fûe_
##
ty≥
##
	`_v¨übÀ
(
ßve°©e_fûe
, 
ì¥om_addªss
); \

3238 
fûe_
##
ty≥
##
	`_v¨übÀ
(
ßve°©e_fûe
, 
ì¥om_cou¡î
); \

3239 
fûe_
##
ty≥
##
	`_v¨übÀ
(
ßve°©e_fûe
, 
πc_°©e
); \

3240 
fûe_
##
ty≥
##
	`_v¨übÀ
(
ßve°©e_fûe
, 
πc_wrôe_mode
); \

3241 
fûe_
##
ty≥
##
	`_¨øy
(
ßve°©e_fûe
, 
πc_ªgi°îs
); \

3242 
fûe_
##
ty≥
##
	`_v¨übÀ
(
ßve°©e_fûe
, 
πc_comm™d
); \

3243 
fûe_
##
ty≥
##
	`_¨øy
(
ßve°©e_fûe
, 
πc_d©a
); \

3244 
fûe_
##
ty≥
##
	`_v¨übÀ
(
ßve°©e_fûe
, 
πc_°©us
); \

3245 
fûe_
##
ty≥
##
	`_v¨übÀ
(
ßve°©e_fûe
, 
πc_d©a_byãs
); \

3246 
fûe_
##
ty≥
##
	`_v¨übÀ
(
ßve°©e_fûe
, 
πc_bô_cou¡
); \

3247 
fûe_
##
ty≥
##
	`_¨øy
(
ßve°©e_fûe
, 
ì¥om_buf„r
); \

3248 
fûe_
##
ty≥
##
	`_¨øy
(
ßve°©e_fûe
, 
gamïak_fûíame
); \

3249 
fûe_
##
ty≥
##
	`_¨øy
(
ßve°©e_fûe
, 
dma
); \

3251 
fûe_
##
	`ty≥
(
ßve°©e_fûe
, 
iwøm
 + 0x8000, 0x8000); \

3252 
i
 = 0; i < 8; i++) \

3254 
fûe_
##
	`ty≥
(
ßve°©e_fûe
, 
ewøm
 + (
i
 * 0x10000) + 0x8000, 0x8000); \

3256 
fûe_
##
	`ty≥
(
ßve°©e_fûe
, 
vøm
, 0x18000); \

3257 
fûe_
##
	`ty≥
(
ßve°©e_fûe
, 
ﬂm_øm
, 0x400); \

3258 
fûe_
##
	`ty≥
(
ßve°©e_fûe
, 
∑Àâe_øm
, 0x400); \

3259 
fûe_
##
	`ty≥
(
ßve°©e_fûe
, 
io_ªgi°îs
, 0x8000); \

3262 if((
Êash_b™k_±r
 < 
gamïak_backup
) || \

3263 (
Êash_b™k_±r
 > (
gamïak_backup
 + (1024 * 64)))) \

3265 
Êash_b™k_±r
 = 
gamïak_backup
; \

3268 

	)

3269 
mem‹y_ßve°©e_buûdî
(
ªad
);

3270 
mem‹y_ßve°©e_buûdî
(
wrôe_mem
);

	@memory.h

20 #i‚de‡
MEMORY_H


21 
	#MEMORY_H


	)

25 
	mDMA_START_IMMEDIATELY
,

26 
	mDMA_START_VBLANK
,

27 
	mDMA_START_HBLANK
,

28 
	mDMA_START_SPECIAL
,

29 
	mDMA_INACTIVE


30 } 
	tdma_°¨t_ty≥
;

34 
	mDMA_16BIT
,

35 
	mDMA_32BIT


36 } 
	tdma_Àngth_ty≥
;

40 
	mDMA_NO_REPEAT
,

41 
	mDMA_REPEAT


42 } 
	tdma_ª≥©_ty≥
;

46 
	mDMA_INCREMENT
,

47 
	mDMA_DECREMENT
,

48 
	mDMA_FIXED
,

49 
	mDMA_RELOAD


50 } 
	tdma_ö¸emít_ty≥
;

54 
	mDMA_NO_IRQ
,

55 
	mDMA_TRIGGER_IRQ


56 } 
	tdma_úq_ty≥
;

60 
	mDMA_DIRECT_SOUND_A
,

61 
	mDMA_DIRECT_SOUND_B
,

62 
	mDMA_NO_DIRECT_SOUND


63 } 
	tdma_ds_ty≥
;

67 
u32
 
	mdma_ch™√l
;

68 
u32
 
	msour˚_addªss
;

69 
u32
 
	mde°_addªss
;

70 
u32
 
	mÀngth
;

71 
dma_ª≥©_ty≥
 
	mª≥©_ty≥
;

72 
dma_ds_ty≥
 
	mdúe˘_sound_ch™√l
;

73 
dma_ö¸emít_ty≥
 
	msour˚_dúe˘i⁄
;

74 
dma_ö¸emít_ty≥
 
	mde°_dúe˘i⁄
;

75 
dma_Àngth_ty≥
 
	mÀngth_ty≥
;

76 
dma_°¨t_ty≥
 
	m°¨t_ty≥
;

77 
dma_úq_ty≥
 
	múq
;

78 } 
	tdma_å™s„r_ty≥
;

82 
	mREG_DISPCNT
 = 0x000,

83 
	mREG_DISPSTAT
 = 0x002,

84 
	mREG_VCOUNT
 = 0x003,

85 
	mREG_BG0CNT
 = 0x004,

86 
	mREG_BG1CNT
 = 0x005,

87 
	mREG_BG2CNT
 = 0x006,

88 
	mREG_BG3CNT
 = 0x007,

89 
	mREG_BG0HOFS
 = 0x08,

90 
	mREG_BG0VOFS
 = 0x09,

91 
	mREG_BG1HOFS
 = 0x0A,

92 
	mREG_BG1VOFS
 = 0x0B,

93 
	mREG_BG2HOFS
 = 0x0C,

94 
	mREG_BG2VOFS
 = 0x0D,

95 
	mREG_BG3HOFS
 = 0x0E,

96 
	mREG_BG3VOFS
 = 0x0F,

97 
	mREG_BG2PA
 = 0x10,

98 
	mREG_BG2PB
 = 0x11,

99 
	mREG_BG2PC
 = 0x12,

100 
	mREG_BG2PD
 = 0x13,

101 
	mREG_BG2X_L
 = 0x14,

102 
	mREG_BG2X_H
 = 0x15,

103 
	mREG_BG2Y_L
 = 0x16,

104 
	mREG_BG2Y_H
 = 0x17,

105 
	mREG_BG3PA
 = 0x18,

106 
	mREG_BG3PB
 = 0x19,

107 
	mREG_BG3PC
 = 0x1A,

108 
	mREG_BG3PD
 = 0x1B,

109 
	mREG_BG3X_L
 = 0x1C,

110 
	mREG_BG3X_H
 = 0x1D,

111 
	mREG_BG3Y_L
 = 0x1E,

112 
	mREG_BG3Y_H
 = 0x1F,

113 
	mREG_WIN0H
 = 0x20,

114 
	mREG_WIN1H
 = 0x21,

115 
	mREG_WIN0V
 = 0x22,

116 
	mREG_WIN1V
 = 0x23,

117 
	mREG_WININ
 = 0x24,

118 
	mREG_WINOUT
 = 0x25,

119 
	mREG_BLDCNT
 = 0x28,

120 
	mREG_BLDALPHA
 = 0x29,

121 
	mREG_BLDY
 = 0x2A,

122 
	mREG_TM0D
 = 0x80,

123 
	mREG_TM0CNT
 = 0x81,

124 
	mREG_TM1D
 = 0x82,

125 
	mREG_TM1CNT
 = 0x83,

126 
	mREG_TM2D
 = 0x84,

127 
	mREG_TM2CNT
 = 0x85,

128 
	mREG_TM3D
 = 0x86,

129 
	mREG_TM3CNT
 = 0x87,

130 
	mREG_P1
 = 0x098,

131 
	mREG_P1CNT
 = 0x099,

132 
	mREG_RCNT
 = 0x9A,

133 
	mREG_IE
 = 0x100,

134 
	mREG_IF
 = 0x101,

135 
	mREG_IME
 = 0x104,

136 
	mREG_HALTCNT
 = 0x180

137 } 
	th¨dw¨e_ªgi°î
;

141 
	mFLASH_DEVICE_MACRONIX_64KB
 = 0x1C,

142 
	mFLASH_DEVICE_AMTEL_64KB
 = 0x3D,

143 
	mFLASH_DEVICE_SST_64K
 = 0xD4,

144 
	mFLASH_DEVICE_PANASONIC_64KB
 = 0x1B,

145 
	mFLASH_DEVICE_MACRONIX_128KB
 = 0x09

146 } 
	tÊash_devi˚_id_ty≥
;

150 
	mFLASH_MANUFACTURER_MACRONIX
 = 0xC2,

151 
	mFLASH_MANUFACTURER_AMTEL
 = 0x1F,

152 
	mFLASH_MANUFACTURER_PANASONIC
 = 0x32,

153 
	mFLASH_MANUFACTURER_SST
 = 0xBF

154 } 
	tÊash_m™uÁ˘uªr_id_ty≥
;

156 
u8
 
fun˘i⁄_cc
 
ªad_mem‹y8
(
u32
 
addªss
);

157 
u32
 
fun˘i⁄_cc
 
ªad_mem‹y16
(u32 
addªss
);

158 
u16
 
fun˘i⁄_cc
 
ªad_mem‹y16_sig√d
(
u32
 
addªss
);

159 
u32
 
fun˘i⁄_cc
 
ªad_mem‹y32
(u32 
addªss
);

160 
˝u_Æît_ty≥
 
fun˘i⁄_cc
 
wrôe_mem‹y8
(
u32
 
addªss
, 
u8
 
vÆue
);

161 
˝u_Æît_ty≥
 
fun˘i⁄_cc
 
wrôe_mem‹y16
(
u32
 
addªss
, 
u16
 
vÆue
);

162 
˝u_Æît_ty≥
 
fun˘i⁄_cc
 
wrôe_mem‹y32
(
u32
 
addªss
, u32 
vÆue
);

164 
u8
 *
mem‹y_ªgi⁄s
[16];

165 
u32
 
mem‹y_limôs
[16];

168 
u32
 
waô°©e_cy˛es_£quítül
[16][3];

170 
u32
 
gamïak_size
;

171 
u8
 
gamïak_tôÀ
[13];

172 
u8
 
gamïak_code
[5];

173 
u8
 
gamïak_makî
[3];

174 
u8
 
gamïak_fûíame
[512];

176 
˝u_Æît_ty≥
 
dma_å™s„r
(
dma_å™s„r_ty≥
 *
dma
);

177 
u8
 *
mem‹y_ªgi⁄
(
u32
 
addªss
, u32 *
mem‹y_limô
);

178 
u32
 
lﬂd_gamïak
(*
«me
);

179 
u32
 
lﬂd_backup
(*
«me
);

180 
s32
 
lﬂd_bios
(*
«me
);

181 
upd©e_backup
();

182 
upd©e_backup_f‹˚
();

183 
öô_mem‹y
();

184 
öô_gamïak_buf„r
();

185 
bios_ªgi⁄_ªad_Ælow
();

186 
bios_ªgi⁄_ªad_¥Ÿe˘
();

187 
u8
 *
lﬂd_gamïak_∑ge
(
u32
 
physiˇl_ödex
);

188 
mem‹y_wrôe_mem_ßve°©e
(
fûe_èg_ty≥
 
ßve°©e_fûe
);

189 
mem‹y_ªad_ßve°©e
(
fûe_èg_ty≥
 
ßve°©e_fûe
);

190 
lﬂd_°©e
(*
ßve°©e_fûíame
);

191 
ßve_°©e
(*
ßve°©e_fûíame
, 
u16
 *
s¸ìn_ˇ±uª
);

193 
u8
 *
gamïak_rom
;

194 
u32
 
gamïak_øm_buf„r_size
;

195 
u32
 
ﬂm_upd©e
;

196 
u32
 
gbc_sound_upd©e
;

197 
u32
 
gbc_sound_wave_upd©e
;

198 
dma_å™s„r_ty≥
 
dma
[4];

200 
u8
 *
wrôe_mem_±r
;

202 
u16
 
∑Àâe_øm
[512];

203 
u16
 
ﬂm_øm
[512];

204 
u16
 
∑Àâe_øm_c⁄vîãd
[512];

205 
u16
 
io_ªgi°îs
[1024 * 16];

206 
u8
 
ewøm
[1024 * 256 * 2];

207 
u8
 
iwøm
[1024 * 32 * 2];

208 
u8
 
vøm
[1024 * 96 * 2];

210 
u8
 
bios_rom
[1024 * 32];

211 
u32
 
bios_ªad_¥Ÿe˘
;

213 
u8
 *
mem‹y_m≠_ªad
[8 * 1024];

214 
u32
 *
ªg
;

215 
u8
 *
mem‹y_m≠_wrôe
[8 * 1024];

217 
Êash_devi˚_id_ty≥
 
Êash_devi˚_id
;

	@psp/mips_emit.h

20 #i‚de‡
MIPS_EMIT_H


21 
	#MIPS_EMIT_H


	)

23 
u32
 
mùs_upd©e_gba
(u32 
pc
);

27 
mùs_ödúe˘_bønch_¨m
(
u32
 
addªss
);

28 
mùs_ödúe˘_bønch_thumb
(
u32
 
addªss
);

29 
mùs_ödúe˘_bønch_duÆ
(
u32
 
addªss
);

31 
u32
 
execuã_ªad_˝§
();

32 
u32
 
execuã_ªad_•§
();

33 
execuã_swi
(
u32
 
pc
);

35 
u32
 
execuã_•§_ª°‹e
(u32 
addªss
);

36 
execuã_°‹e_˝§
(
u32
 
√w_˝§
, u32 
°‹e_mask
);

37 
execuã_°‹e_•§
(
u32
 
√w_•§
, u32 
°‹e_mask
);

39 
u32
 
execuã_•§_ª°‹e_body
(u32 
addªss
);

40 
u32
 
execuã_°‹e_˝§_body
(u32 
_˝§
, u32 
°‹e_mask
, u32 
addªss
);

42 
u32
 
execuã_l¶_Êags_ªg
(u32 
vÆue
, u32 
shi·
);

43 
u32
 
execuã_l§_Êags_ªg
(u32 
vÆue
, u32 
shi·
);

44 
u32
 
execuã_a§_Êags_ªg
(u32 
vÆue
, u32 
shi·
);

45 
u32
 
execuã_r‹_Êags_ªg
(u32 
vÆue
, u32 
shi·
);

47 
execuã_Æig√d_°‹e32
(
u32
 
addªss
, u32 
vÆue
);

48 
u32
 
execuã_Æig√d_lﬂd32
(u32 
addªss
);

50 
°ï_debug_mùs
(
u32
 
pc
);

52 
ªg_check
();

56 
	mmùs_ªg_zîo
,

57 
	mmùs_ªg_©
,

58 
	mmùs_ªg_v0
,

59 
	mmùs_ªg_v1
,

60 
	mmùs_ªg_a0
,

61 
	mmùs_ªg_a1
,

62 
	mmùs_ªg_a2
,

63 
	mmùs_ªg_a3
,

64 
	mmùs_ªg_t0
,

65 
	mmùs_ªg_t1
,

66 
	mmùs_ªg_t2
,

67 
	mmùs_ªg_t3
,

68 
	mmùs_ªg_t4
,

69 
	mmùs_ªg_t5
,

70 
	mmùs_ªg_t6
,

71 
	mmùs_ªg_t7
,

72 
	mmùs_ªg_s0
,

73 
	mmùs_ªg_s1
,

74 
	mmùs_ªg_s2
,

75 
	mmùs_ªg_s3
,

76 
	mmùs_ªg_s4
,

77 
	mmùs_ªg_s5
,

78 
	mmùs_ªg_s6
,

79 
	mmùs_ªg_s7
,

80 
	mmùs_ªg_t8
,

81 
	mmùs_ªg_t9
,

82 
	mmùs_ªg_k0
,

83 
	mmùs_ªg_k1
,

84 
	mmùs_ªg_gp
,

85 
	mmùs_ªg_•
,

86 
	mmùs_ªg_Â
,

87 
	mmùs_ªg_ø


88 } 
	tmùs_ªg_numbî
;

92 
	mmùs_•ecül_¶l
 = 0x00,

93 
	mmùs_•ecül_§l
 = 0x02,

94 
	mmùs_•ecül_§a
 = 0x03,

95 
	mmùs_•ecül_¶lv
 = 0x04,

96 
	mmùs_•ecül_§lv
 = 0x06,

97 
	mmùs_•ecül_§av
 = 0x07,

98 
	mmùs_•ecül_jr
 = 0x08,

99 
	mmùs_•ecül_jÆr
 = 0x09,

100 
	mmùs_•ecül_movz
 = 0x0A,

101 
	mmùs_•ecül_movn
 = 0x0B,

102 
	mmùs_•ecül_mfhi
 = 0x10,

103 
	mmùs_•ecül_mthi
 = 0x11,

104 
	mmùs_•ecül_mÊo
 = 0x12,

105 
	mmùs_•ecül_méo
 = 0x13,

106 
	mmùs_•ecül_mu…
 = 0x18,

107 
	mmùs_•ecül_mu…u
 = 0x19,

108 
	mmùs_•ecül_div
 = 0x1A,

109 
	mmùs_•ecül_divu
 = 0x1B,

110 
	mmùs_•ecül_madd
 = 0x1C,

111 
	mmùs_•ecül_maddu
 = 0x1D,

112 
	mmùs_•ecül_add
 = 0x20,

113 
	mmùs_•ecül_addu
 = 0x21,

114 
	mmùs_•ecül_sub
 = 0x22,

115 
	mmùs_•ecül_subu
 = 0x23,

116 
	mmùs_•ecül_™d
 = 0x24,

117 
	mmùs_•ecül_‹
 = 0x25,

118 
	mmùs_•ecül_x‹
 = 0x26,

119 
	mmùs_•ecül_n‹
 = 0x27,

120 
	mmùs_•ecül_¶t
 = 0x2A,

121 
	mmùs_•ecül_¶tu
 = 0x2B

122 } 
	tmùs_fun˘i⁄_•ecül
;

126 
	mmùs_•ecül3_ext
 = 0x00,

127 
	mmùs_•ecül3_ös
 = 0x04,

128 
	mmùs_•ecül3_bshÊ
 = 0x20

129 } 
	tmùs_fun˘i⁄_•ecül3
;

133 
	mmùs_ªgimm_b…z
 = 0x00,

134 
	mmùs_ªgimm_b…zÆ
 = 0x10

135 } 
	tmùs_fun˘i⁄_ªgimm
;

139 
	mmùs_›code_•ecül
 = 0x00,

140 
	mmùs_›code_ªgimm
 = 0x01,

141 
	mmùs_›code_j
 = 0x02,

142 
	mmùs_›code_jÆ
 = 0x03,

143 
	mmùs_›code_beq
 = 0x04,

144 
	mmùs_›code_b√
 = 0x05,

145 
	mmùs_›code_bÀz
 = 0x06,

146 
	mmùs_›code_bgtz
 = 0x07,

147 
	mmùs_›code_addi
 = 0x08,

148 
	mmùs_›code_addiu
 = 0x09,

149 
	mmùs_›code_¶ti
 = 0x0A,

150 
	mmùs_›code_¶tiu
 = 0x0B,

151 
	mmùs_›code_™di
 = 0x0C,

152 
	mmùs_›code_‹i
 = 0x0D,

153 
	mmùs_›code_x‹i
 = 0x0E,

154 
	mmùs_›code_lui
 = 0x0F,

155 
	mmùs_›code_Œo
 = 0x18,

156 
	mmùs_›code_lhi
 = 0x19,

157 
	mmùs_›code_å≠
 = 0x1A,

158 
	mmùs_›code_•ecül2
 = 0x1C,

159 
	mmùs_›code_•ecül3
 = 0x1F,

160 
	mmùs_›code_lb
 = 0x20,

161 
	mmùs_›code_lh
 = 0x21,

162 
	mmùs_›code_lw
 = 0x23,

163 
	mmùs_›code_lbu
 = 0x24,

164 
	mmùs_›code_lhu
 = 0x25,

165 
	mmùs_›code_sb
 = 0x28,

166 
	mmùs_›code_sh
 = 0x29,

167 
	mmùs_›code_sw
 = 0x2B,

168 } 
	tmùs_›code
;

170 
	#mùs_emô_ªg
(
›code
, 
rs
, 
π
, 
rd
, 
shi·
, 
fun˘i⁄
) \

171 *((
u32
 *)
å™¶©i⁄_±r
Ë(
mùs_›code_
##
›code
 << 26) | \

172 (
rs
 << 21Ë| (
π
 << 16Ë| (
rd
 << 11Ë| (
shi·
 << 6Ë| 
fun˘i⁄
; \

173 
å™¶©i⁄_±r
 += 4 \

174 

	)

175 
	#mùs_emô_•ecül
(
fun˘i⁄
, 
rs
, 
π
, 
rd
, 
shi·
) \

176 *((
u32
 *)
å™¶©i⁄_±r
Ë(
mùs_›code_•ecül
 << 26) | \

177 (
rs
 << 21Ë| (
π
 << 16Ë| (
rd
 << 11Ë| (
shi·
 << 6) | \

178 
mùs_•ecül_
##
fun˘i⁄
; \

179 
å™¶©i⁄_±r
 += 4 \

180 

	)

181 
	#mùs_emô_•ecül3
(
fun˘i⁄
, 
rs
, 
π
, 
imm_a
, 
imm_b
) \

182 *((
u32
 *)
å™¶©i⁄_±r
Ë(
mùs_›code_•ecül3
 << 26) | \

183 (
rs
 << 21Ë| (
π
 << 16Ë| (
imm_a
 << 11Ë| (
imm_b
 << 6) | \

184 
mùs_•ecül3_
##
fun˘i⁄
; \

185 
å™¶©i⁄_±r
 += 4 \

186 

	)

187 
	#mùs_emô_imm
(
›code
, 
rs
, 
π
, 
immedüã
) \

188 *((
u32
 *)
å™¶©i⁄_±r
Ë(
mùs_›code_
##
›code
 << 26) | \

189 (
rs
 << 21Ë| (
π
 << 16Ë| (
immedüã
 & 0xFFFF); \

190 
å™¶©i⁄_±r
 += 4 \

191 

	)

192 
	#mùs_emô_ªgimm
(
fun˘i⁄
, 
rs
, 
immedüã
) \

193 *((
u32
 *)
å™¶©i⁄_±r
Ë(
mùs_›code_ªgimm
 << 26) | \

194 (
rs
 << 21Ë| (
mùs_ªgimm_
##
fun˘i⁄
 << 16Ë| (
immedüã
 & 0xFFFF); \

195 
å™¶©i⁄_±r
 += 4 \

196 

	)

197 
	#mùs_emô_jump
(
›code
, 
off£t
) \

198 *((
u32
 *)
å™¶©i⁄_±r
Ë(
mùs_›code_
##
›code
 << 26) | \

199 (
off£t
 & 0x3FFFFFF); \

200 
å™¶©i⁄_±r
 += 4 \

201 

	)

202 
	#mùs_ªœtive_off£t
(
sour˚
, 
off£t
) \

203 (((
u32
)
off£t
 - ((u32)
sour˚
 + 4)) / 4) \

204 

	)

205 
	#mùs_absﬁuã_off£t
(
off£t
) \

206 ((
u32
)
off£t
 / 4) \

207 

	)

208 
	#mùs_emô_addu
(
rd
, 
rs
, 
π
) \

209 
	`mùs_emô_•ecül
(
addu
, 
rs
, 
π
, 
rd
, 0) \

210 

	)

211 
	#mùs_emô_subu
(
rd
, 
rs
, 
π
) \

212 
	`mùs_emô_•ecül
(
subu
, 
rs
, 
π
, 
rd
, 0) \

213 

	)

214 
	#mùs_emô_x‹
(
rd
, 
rs
, 
π
) \

215 
	`mùs_emô_•ecül
(
x‹
, 
rs
, 
π
, 
rd
, 0) \

216 

	)

217 
	#mùs_emô_add
(
rd
, 
rs
, 
π
) \

218 
	`mùs_emô_•ecül
(
™d
, 
rs
, 
π
, 
rd
, 0) \

219 

	)

220 
	#mùs_emô_sub
(
rd
, 
rs
, 
π
) \

221 
	`mùs_emô_•ecül
(
sub
, 
rs
, 
π
, 
rd
, 0) \

222 

	)

223 
	#mùs_emô_™d
(
rd
, 
rs
, 
π
) \

224 
	`mùs_emô_•ecül
(
™d
, 
rs
, 
π
, 
rd
, 0) \

225 

	)

226 
	#mùs_emô_‹
(
rd
, 
rs
, 
π
) \

227 
	`mùs_emô_•ecül
(
‹
, 
rs
, 
π
, 
rd
, 0) \

228 

	)

229 
	#mùs_emô_n‹
(
rd
, 
rs
, 
π
) \

230 
	`mùs_emô_•ecül
(
n‹
, 
rs
, 
π
, 
rd
, 0) \

231 

	)

232 
	#mùs_emô_¶t
(
rd
, 
rs
, 
π
) \

233 
	`mùs_emô_•ecül
(
¶t
, 
rs
, 
π
, 
rd
, 0) \

234 

	)

235 
	#mùs_emô_¶tu
(
rd
, 
rs
, 
π
) \

236 
	`mùs_emô_•ecül
(
¶tu
, 
rs
, 
π
, 
rd
, 0) \

237 

	)

238 
	#mùs_emô_¶lv
(
rd
, 
π
, 
rs
) \

239 
	`mùs_emô_•ecül
(
¶lv
, 
rs
, 
π
, 
rd
, 0) \

240 

	)

241 
	#mùs_emô_§lv
(
rd
, 
π
, 
rs
) \

242 
	`mùs_emô_•ecül
(
§lv
, 
rs
, 
π
, 
rd
, 0) \

243 

	)

244 
	#mùs_emô_§av
(
rd
, 
π
, 
rs
) \

245 
	`mùs_emô_•ecül
(
§av
, 
rs
, 
π
, 
rd
, 0) \

246 

	)

247 
	#mùs_emô_rŸrv
(
rd
, 
π
, 
rs
) \

248 
	`mùs_emô_•ecül
(
§lv
, 
rs
, 
π
, 
rd
, 1) \

249 

	)

250 
	#mùs_emô_¶l
(
rd
, 
π
, 
shi·
) \

251 
	`mùs_emô_•ecül
(
¶l
, 0, 
π
, 
rd
, 
shi·
) \

252 

	)

253 
	#mùs_emô_§l
(
rd
, 
π
, 
shi·
) \

254 
	`mùs_emô_•ecül
(
§l
, 0, 
π
, 
rd
, 
shi·
) \

255 

	)

256 
	#mùs_emô_§a
(
rd
, 
π
, 
shi·
) \

257 
	`mùs_emô_•ecül
(
§a
, 0, 
π
, 
rd
, 
shi·
) \

258 

	)

259 
	#mùs_emô_rŸr
(
rd
, 
π
, 
shi·
) \

260 
	`mùs_emô_•ecül
(
§l
, 1, 
π
, 
rd
, 
shi·
) \

261 

	)

262 
	#mùs_emô_mfhi
(
rd
) \

263 
	`mùs_emô_•ecül
(
mfhi
, 0, 0, 
rd
, 0) \

264 

	)

265 
	#mùs_emô_mÊo
(
rd
) \

266 
	`mùs_emô_•ecül
(
mÊo
, 0, 0, 
rd
, 0) \

267 

	)

268 
	#mùs_emô_mthi
(
rs
) \

269 
	`mùs_emô_•ecül
(
mthi
, 
rs
, 0, 0, 0) \

270 

	)

271 
	#mùs_emô_méo
(
rs
) \

272 
	`mùs_emô_•ecül
(
méo
, 
rs
, 0, 0, 0) \

273 

	)

274 
	#mùs_emô_mu…
(
rs
, 
π
) \

275 
	`mùs_emô_•ecül
(
mu…
, 
rs
, 
π
, 0, 0) \

276 

	)

277 
	#mùs_emô_mu…u
(
rs
, 
π
) \

278 
	`mùs_emô_•ecül
(
mu…u
, 
rs
, 
π
, 0, 0) \

279 

	)

280 
	#mùs_emô_div
(
rs
, 
π
) \

281 
	`mùs_emô_•ecül
(
div
, 
rs
, 
π
, 0, 0) \

282 

	)

283 
	#mùs_emô_divu
(
rs
, 
π
) \

284 
	`mùs_emô_•ecül
(
divu
, 
rs
, 
π
, 0, 0) \

285 

	)

286 
	#mùs_emô_madd
(
rs
, 
π
) \

287 
	`mùs_emô_•ecül
(
madd
, 
rs
, 
π
, 0, 0) \

288 

	)

289 
	#mùs_emô_maddu
(
rs
, 
π
) \

290 
	`mùs_emô_•ecül
(
maddu
, 
rs
, 
π
, 0, 0) \

291 

	)

292 
	#mùs_emô_movn
(
rd
, 
rs
, 
π
) \

293 
	`mùs_emô_•ecül
(
movn
, 
rs
, 
π
, 
rd
, 0) \

294 

	)

295 
	#mùs_emô_movz
(
rd
, 
rs
, 
π
) \

296 
	`mùs_emô_•ecül
(
movz
, 
rs
, 
π
, 
rd
, 0) \

297 

	)

298 
	#mùs_emô_lb
(
π
, 
rs
, 
off£t
) \

299 
	`mùs_emô_imm
(
lb
, 
rs
, 
π
, 
off£t
) \

300 

	)

301 
	#mùs_emô_lbu
(
π
, 
rs
, 
off£t
) \

302 
	`mùs_emô_imm
(
lbu
, 
rs
, 
π
, 
off£t
) \

303 

	)

304 
	#mùs_emô_lh
(
π
, 
rs
, 
off£t
) \

305 
	`mùs_emô_imm
(
lh
, 
rs
, 
π
, 
off£t
) \

306 

	)

307 
	#mùs_emô_lhu
(
π
, 
rs
, 
off£t
) \

308 
	`mùs_emô_imm
(
lhu
, 
rs
, 
π
, 
off£t
) \

309 

	)

310 
	#mùs_emô_lw
(
π
, 
rs
, 
off£t
) \

311 
	`mùs_emô_imm
(
lw
, 
rs
, 
π
, 
off£t
) \

312 

	)

313 
	#mùs_emô_sb
(
π
, 
rs
, 
off£t
) \

314 
	`mùs_emô_imm
(
sb
, 
rs
, 
π
, 
off£t
) \

315 

	)

316 
	#mùs_emô_sh
(
π
, 
rs
, 
off£t
) \

317 
	`mùs_emô_imm
(
sh
, 
rs
, 
π
, 
off£t
) \

318 

	)

319 
	#mùs_emô_sw
(
π
, 
rs
, 
off£t
) \

320 
	`mùs_emô_imm
(
sw
, 
rs
, 
π
, 
off£t
) \

321 

	)

322 
	#mùs_emô_lui
(
π
, 
imm
) \

323 
	`mùs_emô_imm
(
lui
, 0, 
π
, 
imm
) \

324 

	)

325 
	#mùs_emô_addiu
(
π
, 
rs
, 
imm
) \

326 
	`mùs_emô_imm
(
addiu
, 
rs
, 
π
, 
imm
) \

327 

	)

328 
	#mùs_emô_x‹i
(
π
, 
rs
, 
imm
) \

329 
	`mùs_emô_imm
(
x‹i
, 
rs
, 
π
, 
imm
) \

330 

	)

331 
	#mùs_emô_‹i
(
π
, 
rs
, 
imm
) \

332 
	`mùs_emô_imm
(
‹i
, 
rs
, 
π
, 
imm
) \

333 

	)

334 
	#mùs_emô_™di
(
π
, 
rs
, 
imm
) \

335 
	`mùs_emô_imm
(
™di
, 
rs
, 
π
, 
imm
) \

336 

	)

337 
	#mùs_emô_¶ti
(
π
, 
rs
, 
imm
) \

338 
	`mùs_emô_imm
(
¶ti
, 
rs
, 
π
, 
imm
) \

339 

	)

340 
	#mùs_emô_¶tiu
(
π
, 
rs
, 
imm
) \

341 
	`mùs_emô_imm
(
¶tiu
, 
rs
, 
π
, 
imm
) \

342 

	)

343 
	#mùs_emô_ext
(
π
, 
rs
, 
pos
, 
size
) \

344 
	`mùs_emô_•ecül3
(
ext
, 
rs
, 
π
, (
size
 - 1), 
pos
) \

345 

	)

346 
	#mùs_emô_ös
(
π
, 
rs
, 
pos
, 
size
) \

347 
	`mùs_emô_•ecül3
(
ös
, 
rs
, 
π
, (
pos
 + 
size
 - 1),Öos) \

348 

	)

352 
	#mùs_emô_b_fûÀr
(
ty≥
, 
rs
, 
π
, 
wrôeback_loˇti⁄
) \

353 (
wrôeback_loˇti⁄
Ë
å™¶©i⁄_±r
; \

354 
	`mùs_emô_imm
(
ty≥
, 
rs
, 
π
, 0) \

355 

	)

358 
	#mùs_emô_j_fûÀr
(
wrôeback_loˇti⁄
) \

359 (
wrôeback_loˇti⁄
Ë
å™¶©i⁄_±r
; \

360 
	`mùs_emô_jump
(
j
, 0) \

361 

	)

362 
	#mùs_emô_b
(
ty≥
, 
rs
, 
π
, 
off£t
) \

363 
	`mùs_emô_imm
(
ty≥
, 
rs
, 
π
, 
off£t
) \

364 

	)

365 
	#mùs_emô_j
(
off£t
) \

366 
	`mùs_emô_jump
(
j
, 
off£t
) \

367 

	)

368 
	#mùs_emô_jÆ
(
off£t
) \

369 
	`mùs_emô_jump
(
jÆ
, 
off£t
) \

370 

	)

371 
	#mùs_emô_jr
(
rs
) \

372 
	`mùs_emô_•ecül
(
jr
, 
rs
, 0, 0, 0) \

373 

	)

374 
	#mùs_emô_b…zÆ
(
rs
, 
off£t
) \

375 
	`mùs_emô_ªgimm
(
b…zÆ
, 
rs
, 
off£t
) \

376 

	)

377 
	#mùs_emô_n›
() \

378 
	`mùs_emô_¶l
(
ªg_zîo
,Ñeg_zero, 0) \

379 

	)

380 
	#ªg_ba£
 
mùs_ªg_s0


	)

381 
	#ªg_cy˛es
 
mùs_ªg_s1


	)

382 
	#ªg_a0
 
mùs_ªg_a0


	)

383 
	#ªg_a1
 
mùs_ªg_a1


	)

384 
	#ªg_a2
 
mùs_ªg_a2


	)

385 
	#ªg_rv
 
mùs_ªg_v0


	)

386 
	#ªg_pc
 
mùs_ªg_s3


	)

387 
	#ªg_ãmp
 
mùs_ªg_©


	)

388 
	#ªg_zîo
 
mùs_ªg_zîo


	)

390 
	#ªg_n_ˇche
 
mùs_ªg_s4


	)

391 
	#ªg_z_ˇche
 
mùs_ªg_s5


	)

392 
	#ªg_c_ˇche
 
mùs_ªg_s6


	)

393 
	#ªg_v_ˇche
 
mùs_ªg_s7


	)

395 
	#ªg_r0
 
mùs_ªg_v1


	)

396 
	#ªg_r1
 
mùs_ªg_a3


	)

397 
	#ªg_r2
 
mùs_ªg_t0


	)

398 
	#ªg_r3
 
mùs_ªg_t1


	)

399 
	#ªg_r4
 
mùs_ªg_t2


	)

400 
	#ªg_r5
 
mùs_ªg_t3


	)

401 
	#ªg_r6
 
mùs_ªg_t4


	)

402 
	#ªg_r7
 
mùs_ªg_t5


	)

403 
	#ªg_r8
 
mùs_ªg_t6


	)

404 
	#ªg_r9
 
mùs_ªg_t7


	)

405 
	#ªg_r10
 
mùs_ªg_s2


	)

406 
	#ªg_r11
 
mùs_ªg_t8


	)

407 
	#ªg_r12
 
mùs_ªg_t9


	)

408 
	#ªg_r13
 
mùs_ªg_gp


	)

409 
	#ªg_r14
 
mùs_ªg_Â


	)

413 
u32
 
	g¨m_to_mùs_ªg
[] =

415 
ªg_r0
,

416 
ªg_r1
,

417 
ªg_r2
,

418 
ªg_r3
,

419 
ªg_r4
,

420 
ªg_r5
,

421 
ªg_r6
,

422 
ªg_r7
,

423 
ªg_r8
,

424 
ªg_r9
,

425 
ªg_r10
,

426 
ªg_r11
,

427 
ªg_r12
,

428 
ªg_r13
,

429 
ªg_r14
,

430 
ªg_a0
,

431 
ªg_a1
,

432 
ªg_a2
,

433 
ªg_ãmp


436 
	#¨m_ªg_a0
 15

	)

437 
	#¨m_ªg_a1
 16

	)

438 
	#¨m_ªg_a2
 17

	)

439 
	#¨m_ªg_ãmp
 18

	)

441 
	#gíî©e_lﬂd_ªg
(
úeg
, 
ªg_ödex
) \

442 
	`mùs_emô_addu
(
úeg
, 
¨m_to_mùs_ªg
[
ªg_ödex
], 
ªg_zîo
) \

443 

	)

444 
	#gíî©e_lﬂd_imm
(
úeg
, 
imm
) \

445 if(((
s32
)
imm
 >= -32768) && ((s32)imm <= 32767)) \

447 
	`mùs_emô_addiu
(
úeg
, 
ªg_zîo
, 
imm
); \

451 if(((
u32
)
imm
 >> 16) == 0x0000) \

453 
	`mùs_emô_‹i
(
úeg
, 
ªg_zîo
, 
imm
); \

457 
	`mùs_emô_lui
(
úeg
, 
imm
 >> 16); \

459 if(((
u32
)
imm
 & 0x0000FFFF) != 0x00000000) \

461 
	`mùs_emô_‹i
(
úeg
, iªg, 
imm
 & 0xFFFF); \

465 

	)

466 
	#gíî©e_lﬂd_pc
(
úeg
, 
√w_pc
) \

468 
s32
 
pc_dñè
 = 
√w_pc
 - 
°‹ed_pc
; \

469 if((
pc_dñè
 >= -32768) && (pc_delta <= 32767)) \

471 
	`mùs_emô_addiu
(
úeg
, 
ªg_pc
, 
pc_dñè
); \

475 
	`gíî©e_lﬂd_imm
(
úeg
, 
√w_pc
); \

478 

	)

479 
	#gíî©e_°‹e_ªg
(
úeg
, 
ªg_ödex
) \

480 
	`mùs_emô_addu
(
¨m_to_mùs_ªg
[
ªg_ödex
], 
úeg
, 
ªg_zîo
) \

481 

	)

482 
	#gíî©e_shi·_À·
(
úeg
, 
imm
) \

483 
	`mùs_emô_¶l
(
úeg
, iªg, 
imm
) \

484 

	)

485 
	#gíî©e_shi·_right
(
úeg
, 
imm
) \

486 
	`mùs_emô_§l
(
úeg
, iªg, 
imm
) \

487 

	)

488 
	#gíî©e_shi·_right_¨ôhmëic
(
úeg
, 
imm
) \

489 
	`mùs_emô_§a
(
úeg
, iªg, 
imm
) \

490 

	)

491 
	#gíî©e_rŸ©e_right
(
úeg
, 
imm
) \

492 
	`mùs_emô_rŸr
(
úeg
, iªg, 
imm
) \

493 

	)

494 
	#gíî©e_add
(
úeg_de°
, 
úeg_§c
) \

495 
	`mùs_emô_addu
(
úeg_de°
, iªg_de°, 
úeg_§c
) \

496 

	)

497 
	#gíî©e_sub
(
úeg_de°
, 
úeg_§c
) \

498 
	`mùs_emô_subu
(
úeg_de°
, iªg_de°, 
úeg_§c
) \

499 

	)

500 
	#gíî©e_‹
(
úeg_de°
, 
úeg_§c
) \

501 
	`mùs_emô_‹
(
úeg_de°
, iªg_de°, 
úeg_§c
) \

502 

	)

503 
	#gíî©e_x‹
(
úeg_de°
, 
úeg_§c
) \

504 
	`mùs_emô_x‹
(
úeg_de°
, iªg_de°, 
úeg_§c
) \

505 

	)

506 
	#gíî©e_Æu_imm
(
imm_ty≥
, 
ªg_ty≥
, 
úeg_de°
, 
úeg_§c
, 
imm
) \

507 if(((
s32
)
imm
 >= -32768) && ((s32)imm <= 32767)) \

509 
mùs_emô_
##
	`imm_ty≥
(
úeg_de°
, 
úeg_§c
, 
imm
); \

513 
	`gíî©e_lﬂd_imm
(
ªg_ãmp
, 
imm
); \

514 
mùs_emô_
##
	`ªg_ty≥
(
úeg_de°
, 
úeg_§c
, 
ªg_ãmp
); \

516 

	)

517 
	#gíî©e_Æu_immu
(
imm_ty≥
, 
ªg_ty≥
, 
úeg_de°
, 
úeg_§c
, 
imm
) \

518 if(((
u32
)
imm
 >= 0) && ((u32)imm <= 65535)) \

520 
mùs_emô_
##
	`imm_ty≥
(
úeg_de°
, 
úeg_§c
, 
imm
); \

524 
	`gíî©e_lﬂd_imm
(
ªg_ãmp
, 
imm
); \

525 
mùs_emô_
##
	`ªg_ty≥
(
úeg_de°
, 
úeg_§c
, 
ªg_ãmp
); \

527 

	)

528 
	#gíî©e_add_imm
(
úeg
, 
imm
) \

529 
	`gíî©e_Æu_imm
(
addiu
, 
add
, 
úeg
, iªg, 
imm
) \

530 

	)

531 
	#gíî©e_sub_imm
(
úeg
, 
imm
) \

532 
	`gíî©e_Æu_imm
(
addiu
, 
add
, 
úeg
, iªg, -
imm
) \

533 

	)

534 
	#gíî©e_x‹_imm
(
úeg
, 
imm
) \

535 
	`gíî©e_Æu_immu
(
x‹i
, 
x‹
, 
úeg
, iªg, 
imm
) \

536 

	)

537 
	#gíî©e_add_ªg_ªg_imm
(
úeg_de°
, 
úeg_§c
, 
imm
) \

538 
	`gíî©e_Æu_imm
(
addiu
, 
add
, 
úeg_de°
, 
úeg_§c
, 
imm
) \

539 

	)

540 
	#gíî©e_™d_imm
(
úeg
, 
imm
) \

541 
	`gíî©e_Æu_immu
(
™di
, 
™d
, 
úeg
, iªg, 
imm
) \

542 

	)

543 
	#gíî©e_mov
(
úeg_de°
, 
úeg_§c
) \

544 
	`mùs_emô_addu
(
úeg_de°
, 
úeg_§c
, 
ªg_zîo
) \

545 

	)

546 
	#gíî©e_mu…ùly_s64
() \

547 
	`mùs_emô_mu…
(
¨m_to_mùs_ªg
[
rm
],árm_to_mùs_ªg[
rs
]) \

548 

	)

549 
	#gíî©e_mu…ùly_u64
() \

550 
	`mùs_emô_mu…u
(
¨m_to_mùs_ªg
[
rm
],árm_to_mùs_ªg[
rs
]) \

551 

	)

552 
	#gíî©e_mu…ùly_s64_add
() \

553 
	`mùs_emô_madd
(
¨m_to_mùs_ªg
[
rm
],árm_to_mùs_ªg[
rs
]) \

554 

	)

555 
	#gíî©e_mu…ùly_u64_add
() \

556 
	`mùs_emô_maddu
(
¨m_to_mùs_ªg
[
rm
],árm_to_mùs_ªg[
rs
]) \

557 

	)

558 
	#gíî©e_fun˘i⁄_ˇŒ
(
fun˘i⁄_loˇti⁄
) \

559 
	`mùs_emô_jÆ
(
	`mùs_absﬁuã_off£t
(
fun˘i⁄_loˇti⁄
)); \

560 
	`mùs_emô_n›
() \

561 

	)

562 
	#gíî©e_fun˘i⁄_ˇŒ_sw≠_dñay
(
fun˘i⁄_loˇti⁄
) \

564 
u32
 
dñay_ö°ru˘i⁄
 = 
	`addªss32
(
å™¶©i⁄_±r
, -4); \

565 
å™¶©i⁄_±r
 -= 4; \

566 
	`mùs_emô_jÆ
(
	`mùs_absﬁuã_off£t
(
fun˘i⁄_loˇti⁄
)); \

567 
	`addªss32
(
å™¶©i⁄_±r
, 0Ë
dñay_ö°ru˘i⁄
; \

568 
å™¶©i⁄_±r
 += 4; \

570 

	)

571 
	#gíî©e_sw≠_dñay
() \

573 
u32
 
dñay_ö°ru˘i⁄
 = 
	`addªss32
(
å™¶©i⁄_±r
, -8); \

574 
u32
 
bønch_ö°ru˘i⁄
 = 
	`addªss32
(
å™¶©i⁄_±r
, -4); \

575 
bønch_ö°ru˘i⁄
 = (branch_instruction & 0xFFFF0000) | \

576 (((
bønch_ö°ru˘i⁄
 & 0x0000FFFF) + 1) & 0x0000FFFF); \

577 
	`addªss32
(
å™¶©i⁄_±r
, -8Ë
bønch_ö°ru˘i⁄
; \

578 
	`addªss32
(
å™¶©i⁄_±r
, -4Ë
dñay_ö°ru˘i⁄
; \

580 

	)

581 
	#gíî©e_cy˛e_upd©e
() \

582 if(
cy˛e_cou¡
 != 0) \

584 
	`mùs_emô_addiu
(
ªg_cy˛es
,Ñeg_cy˛es, -
cy˛e_cou¡
); \

585 
cy˛e_cou¡
 = 0; \

587 

	)

588 
	#gíî©e_cy˛e_upd©e_f‹˚
() \

589 
	`mùs_emô_addiu
(
ªg_cy˛es
,Ñeg_cy˛es, -
cy˛e_cou¡
); \

590 
cy˛e_cou¡
 = 0 \

591 

	)

592 
	#gíî©e_bønch_∑tch_c⁄dôi⁄Æ
(
de°
, 
off£t
) \

593 *((
u16
 *)(
de°
)Ë
	`mùs_ªœtive_off£t
(de°, 
off£t
) \

594 

	)

595 
	#gíî©e_bønch_∑tch_unc⁄dôi⁄Æ
(
de°
, 
off£t
) \

596 *((
u32
 *)(
de°
)Ë(
mùs_›code_j
 << 26) | \

597 ((
	`mùs_absﬁuã_off£t
(
off£t
)) & 0x3FFFFFF) \

598 

	)

599 
	#gíî©e_bønch_no_cy˛e_upd©e
(
wrôeback_loˇti⁄
, 
√w_pc
) \

600 if(
pc
 =
idÀ_lo›_èrgë_pc
) \

602 
	`gíî©e_lﬂd_pc
(
ªg_a0
, 
√w_pc
); \

603 
	`gíî©e_fun˘i⁄_ˇŒ_sw≠_dñay
(
mùs_upd©e_gba
); \

604 
	`mùs_emô_j_fûÀr
(
wrôeback_loˇti⁄
); \

605 
	`mùs_emô_n›
(); \

609 
	`gíî©e_lﬂd_pc
(
ªg_a0
, 
√w_pc
); \

610 
	`mùs_emô_b…zÆ
(
ªg_cy˛es
, \

611 
	`mùs_ªœtive_off£t
(
å™¶©i⁄_±r
, 
upd©e_åampﬁöe
)); \

612 
	`gíî©e_sw≠_dñay
(); \

613 
	`mùs_emô_j_fûÀr
(
wrôeback_loˇti⁄
); \

614 
	`mùs_emô_n›
(); \

616 

	)

617 
	#gíî©e_bønch_cy˛e_upd©e
(
wrôeback_loˇti⁄
, 
√w_pc
) \

618 
	`gíî©e_cy˛e_upd©e
(); \

619 
	`gíî©e_bønch_no_cy˛e_upd©e
(
wrôeback_loˇti⁄
, 
√w_pc
) \

620 

	)

621 
	#gíî©e_c⁄dôi⁄Æ_bønch
(
úeg_a
, 
úeg_b
, 
ty≥
, 
wrôeback_loˇti⁄
) \

622 
gíî©e_bønch_fûÀr_
##
	`ty≥
(
úeg_a
, 
úeg_b
, 
wrôeback_loˇti⁄
) \

623 

	)

626 
	#gíî©e_ödúe˘_bønch_cy˛e_upd©e
(
ty≥
) \

627 
	`mùs_emô_j
(
	`mùs_absﬁuã_off£t
(
mùs_ödúe˘_bønch_
##
ty≥
)); \

628 
	`gíî©e_cy˛e_upd©e_f‹˚
() \

629 

	)

630 
	#gíî©e_ödúe˘_bønch_no_cy˛e_upd©e
(
ty≥
) \

631 
	`mùs_emô_j
(
	`mùs_absﬁuã_off£t
(
mùs_ödúe˘_bønch_
##
ty≥
)); \

632 
	`mùs_emô_n›
() \

633 

	)

634 
	#gíî©e_block_¥ﬁogue
() \

635 
upd©e_åampﬁöe
 = 
å™¶©i⁄_±r
; \

636 
__asm__
 \

639 "ˇchê8, 0(%0)" : : "r"(
å™¶©i⁄_±r
) \

642 
	`mùs_emô_j
(
	`mùs_absﬁuã_off£t
(
mùs_upd©e_gba
)); \

643 
	`mùs_emô_n›
(); \

644 
	`gíî©e_lﬂd_imm
(
ªg_pc
, 
°‹ed_pc
) \

645 

	)

646 
	#å™¶©e_övÆid©e_dˇche
() \

647 
	`s˚Kî√lDˇcheWrôebackAŒ
() \

648 

	)

649 
	#block_¥ﬁogue_size
 8

	)

651 
	#check_gíî©e_n_Êag
 \

652 (
Êag_°©us
 & 0x08) \

653 

	)

654 
	#check_gíî©e_z_Êag
 \

655 (
Êag_°©us
 & 0x04) \

656 

	)

657 
	#check_gíî©e_c_Êag
 \

658 (
Êag_°©us
 & 0x02) \

659 

	)

660 
	#check_gíî©e_v_Êag
 \

661 (
Êag_°©us
 & 0x01) \

662 

	)

663 
	#gíî©e_lﬂd_ªg_pc
(
úeg
, 
ªg_ödex
, 
pc_off£t
) \

664 if(
ªg_ödex
 =
REG_PC
) \

666 
	`gíî©e_lﬂd_pc
(
úeg
, (
pc
 + 
pc_off£t
)); \

670 
	`gíî©e_lﬂd_ªg
(
úeg
, 
ªg_ödex
); \

672 

	)

673 
	#check_lﬂd_ªg_pc
(
¨m_ªg
, 
ªg_ödex
, 
pc_off£t
) \

674 if(
ªg_ödex
 =
REG_PC
) \

676 
ªg_ödex
 = 
¨m_ªg
; \

677 
	`gíî©e_lﬂd_pc
(
¨m_to_mùs_ªg
[
¨m_ªg
], (
pc
 + 
pc_off£t
)); \

679 

	)

680 
	#check_°‹e_ªg_pc_no_Êags
(
ªg_ödex
) \

681 if(
ªg_ödex
 =
REG_PC
) \

683 
	`gíî©e_ödúe˘_bønch_¨m
(); \

685 

	)

686 
	#check_°‹e_ªg_pc_Êags
(
ªg_ödex
) \

687 if(
ªg_ödex
 =
REG_PC
) \

689 
	`gíî©e_fun˘i⁄_ˇŒ
(
execuã_•§_ª°‹e
); \

690 
	`gíî©e_ödúe˘_bønch_duÆ
(); \

692 

	)

693 
	#gíî©e_shi·_imm_l¶_no_Êags
(
¨m_ªg
, 
_rm
, 
_shi·
) \

694 
	`check_lﬂd_ªg_pc
(
¨m_ªg
, 
_rm
, 8); \

695 if(
_shi·
 != 0) \

697 
	`mùs_emô_¶l
(
¨m_to_mùs_ªg
[
¨m_ªg
],árm_to_mùs_ªg[
_rm
], 
_shi·
); \

698 
_rm
 = 
¨m_ªg
; \

700 

	)

701 
	#gíî©e_shi·_imm_l§_no_Êags
(
¨m_ªg
, 
_rm
, 
_shi·
) \

702 if(
_shi·
 != 0) \

704 
	`check_lﬂd_ªg_pc
(
¨m_ªg
, 
_rm
, 8); \

705 
	`mùs_emô_§l
(
¨m_to_mùs_ªg
[
¨m_ªg
],árm_to_mùs_ªg[
_rm
], 
_shi·
); \

709 
	`mùs_emô_addu
(
¨m_to_mùs_ªg
[
¨m_ªg
], 
ªg_zîo
,Ñeg_zero); \

711 
_rm
 = 
¨m_ªg
 \

712 

	)

713 
	#gíî©e_shi·_imm_a§_no_Êags
(
¨m_ªg
, 
_rm
, 
_shi·
) \

714 
	`check_lﬂd_ªg_pc
(
¨m_ªg
, 
_rm
, 8); \

715 if(
_shi·
 != 0) \

717 
	`mùs_emô_§a
(
¨m_to_mùs_ªg
[
¨m_ªg
],árm_to_mùs_ªg[
_rm
], 
_shi·
); \

721 
	`mùs_emô_§a
(
¨m_to_mùs_ªg
[
¨m_ªg
],árm_to_mùs_ªg[
_rm
], 31); \

723 
_rm
 = 
¨m_ªg
 \

724 

	)

725 
	#gíî©e_shi·_imm_r‹_no_Êags
(
¨m_ªg
, 
_rm
, 
_shi·
) \

726 
	`check_lﬂd_ªg_pc
(
¨m_ªg
, 
_rm
, 8); \

727 if(
_shi·
 != 0) \

729 
	`mùs_emô_rŸr
(
¨m_to_mùs_ªg
[
¨m_ªg
],árm_to_mùs_ªg[
_rm
], 
_shi·
); \

733 
	`mùs_emô_§l
(
¨m_to_mùs_ªg
[
¨m_ªg
],árm_to_mùs_ªg[
_rm
], 1); \

734 
	`mùs_emô_ös
(
¨m_to_mùs_ªg
[
¨m_ªg
], 
ªg_c_ˇche
, 31, 1); \

736 
_rm
 = 
¨m_ªg
 \

737 

	)

738 
	#gíî©e_shi·_imm_l¶_Êags
(
¨m_ªg
, 
_rm
, 
_shi·
) \

739 
	`check_lﬂd_ªg_pc
(
¨m_ªg
, 
_rm
, 8); \

740 if(
_shi·
 != 0) \

742 
	`mùs_emô_ext
(
ªg_c_ˇche
, 
¨m_to_mùs_ªg
[
_rm
], (32 - 
_shi·
), 1); \

743 
	`mùs_emô_¶l
(
¨m_to_mùs_ªg
[
¨m_ªg
],árm_to_mùs_ªg[
_rm
], 
_shi·
); \

744 
_rm
 = 
¨m_ªg
; \

746 

	)

747 
	#gíî©e_shi·_imm_l§_Êags
(
¨m_ªg
, 
_rm
, 
_shi·
) \

748 
	`check_lﬂd_ªg_pc
(
¨m_ªg
, 
_rm
, 8); \

749 if(
_shi·
 != 0) \

751 
	`mùs_emô_ext
(
ªg_c_ˇche
, 
¨m_to_mùs_ªg
[
_rm
], (
_shi·
 - 1), 1); \

752 
	`mùs_emô_§l
(
¨m_to_mùs_ªg
[
¨m_ªg
],árm_to_mùs_ªg[
_rm
], 
_shi·
); \

756 
	`mùs_emô_§l
(
ªg_c_ˇche
, 
¨m_to_mùs_ªg
[
_rm
], 31); \

757 
	`mùs_emô_addu
(
¨m_to_mùs_ªg
[
¨m_ªg
], 
ªg_zîo
,Ñeg_zero); \

759 
_rm
 = 
¨m_ªg
 \

760 

	)

761 
	#gíî©e_shi·_imm_a§_Êags
(
¨m_ªg
, 
_rm
, 
_shi·
) \

762 
	`check_lﬂd_ªg_pc
(
¨m_ªg
, 
_rm
, 8); \

763 if(
_shi·
 != 0) \

765 
	`mùs_emô_ext
(
ªg_c_ˇche
, 
¨m_to_mùs_ªg
[
_rm
], (
_shi·
 - 1), 1); \

766 
	`mùs_emô_§a
(
¨m_to_mùs_ªg
[
¨m_ªg
],árm_to_mùs_ªg[
_rm
], 
_shi·
); \

770 
	`mùs_emô_§a
(
¨m_to_mùs_ªg
[
¨m_ªg
],árm_to_mùs_ªg[
_rm
], 31); \

771 
	`mùs_emô_™di
(
ªg_c_ˇche
, 
¨m_to_mùs_ªg
[
¨m_ªg
], 1); \

773 
_rm
 = 
¨m_ªg
 \

774 

	)

775 
	#gíî©e_shi·_imm_r‹_Êags
(
¨m_ªg
, 
_rm
, 
_shi·
) \

776 
	`check_lﬂd_ªg_pc
(
¨m_ªg
, 
_rm
, 8); \

777 if(
_shi·
 != 0) \

779 
	`mùs_emô_ext
(
ªg_c_ˇche
, 
¨m_to_mùs_ªg
[
_rm
], (
_shi·
 - 1), 1); \

780 
	`mùs_emô_rŸr
(
¨m_to_mùs_ªg
[
¨m_ªg
],árm_to_mùs_ªg[
_rm
], 
_shi·
); \

784 
	`mùs_emô_™di
(
ªg_ãmp
, 
¨m_to_mùs_ªg
[
_rm
], 1); \

785 
	`mùs_emô_§l
(
¨m_to_mùs_ªg
[
¨m_ªg
],árm_to_mùs_ªg[
_rm
], 1); \

786 
	`mùs_emô_ös
(
¨m_to_mùs_ªg
[
¨m_ªg
], 
ªg_c_ˇche
, 31, 1); \

787 
	`mùs_emô_addu
(
ªg_c_ˇche
, 
ªg_ãmp
, 
ªg_zîo
); \

789 
_rm
 = 
¨m_ªg
 \

790 

	)

791 
	#gíî©e_shi·_ªg_l¶_no_Êags
(
_rm
, 
_rs
) \

792 
	`mùs_emô_¶tiu
(
ªg_ãmp
, 
¨m_to_mùs_ªg
[
_rs
], 32); \

793 
	`mùs_emô_¶lv
(
ªg_a0
, 
¨m_to_mùs_ªg
[
_rm
],árm_to_mùs_ªg[
_rs
]); \

794 
	`mùs_emô_movz
(
ªg_a0
, 
ªg_zîo
, 
ªg_ãmp
) \

795 

	)

796 
	#gíî©e_shi·_ªg_l§_no_Êags
(
_rm
, 
_rs
) \

797 
	`mùs_emô_¶tiu
(
ªg_ãmp
, 
¨m_to_mùs_ªg
[
_rs
], 32); \

798 
	`mùs_emô_§lv
(
ªg_a0
, 
¨m_to_mùs_ªg
[
_rm
],árm_to_mùs_ªg[
_rs
]); \

799 
	`mùs_emô_movz
(
ªg_a0
, 
ªg_zîo
, 
ªg_ãmp
) \

800 

	)

801 
	#gíî©e_shi·_ªg_a§_no_Êags
(
_rm
, 
_rs
) \

802 
	`mùs_emô_¶tiu
(
ªg_ãmp
, 
¨m_to_mùs_ªg
[
_rs
], 32); \

803 
	`mùs_emô_b
(
b√
, 
ªg_ãmp
, 
ªg_zîo
, 2); \

804 
	`mùs_emô_§av
(
ªg_a0
, 
¨m_to_mùs_ªg
[
_rm
],árm_to_mùs_ªg[
_rs
]); \

805 
	`mùs_emô_§a
(
ªg_a0
,Ñeg_a0, 31) \

806 

	)

807 
	#gíî©e_shi·_ªg_r‹_no_Êags
(
_rm
, 
_rs
) \

808 
	`mùs_emô_rŸrv
(
ªg_a0
, 
¨m_to_mùs_ªg
[
_rm
],árm_to_mùs_ªg[
_rs
]) \

809 

	)

810 
	#gíî©e_shi·_ªg_l¶_Êags
(
_rm
, 
_rs
) \

811 
	`gíî©e_lﬂd_ªg_pc
(
ªg_a0
, 
_rm
, 12); \

812 
	`gíî©e_lﬂd_ªg_pc
(
ªg_a1
, 
_rs
, 8); \

813 
	`gíî©e_fun˘i⁄_ˇŒ_sw≠_dñay
(
execuã_l¶_Êags_ªg
) \

814 

	)

815 
	#gíî©e_shi·_ªg_l§_Êags
(
_rm
, 
_rs
) \

816 
	`gíî©e_lﬂd_ªg_pc
(
ªg_a0
, 
_rm
, 12); \

817 
	`gíî©e_lﬂd_ªg_pc
(
ªg_a1
, 
_rs
, 8) \

818 
	`gíî©e_fun˘i⁄_ˇŒ_sw≠_dñay
(
execuã_l§_Êags_ªg
) \

819 

	)

820 
	#gíî©e_shi·_ªg_a§_Êags
(
_rm
, 
_rs
) \

821 
	`gíî©e_lﬂd_ªg_pc
(
ªg_a0
, 
_rm
, 12); \

822 
	`gíî©e_lﬂd_ªg_pc
(
ªg_a1
, 
_rs
, 8) \

823 
	`gíî©e_fun˘i⁄_ˇŒ_sw≠_dñay
(
execuã_a§_Êags_ªg
) \

824 

	)

825 
	#gíî©e_shi·_ªg_r‹_Êags
(
_rm
, 
_rs
) \

826 
	`mùs_emô_b
(
beq
, 
¨m_to_mùs_ªg
[
_rs
], 
ªg_zîo
, 3); \

827 
	`mùs_emô_addiu
(
ªg_ãmp
, 
¨m_to_mùs_ªg
[
_rs
], -1); \

828 
	`mùs_emô_§lv
(
ªg_ãmp
, 
¨m_to_mùs_ªg
[
_rm
],Ñeg_temp); \

829 
	`mùs_emô_™di
(
ªg_c_ˇche
, 
ªg_ãmp
, 1); \

830 
	`mùs_emô_rŸrv
(
ªg_a0
, 
¨m_to_mùs_ªg
[
_rm
],árm_to_mùs_ªg[
_rs
]) \

831 

	)

832 
	#gíî©e_shi·_imm
(
¨m_ªg
, 
«me
, 
Êags_›
) \

833 
u32
 
shi·
 = (
›code
 >> 7) & 0x1F; \

834 
gíî©e_shi·_imm_
##
«me
##
_
##
	`Êags_›
(
¨m_ªg
, 
rm
, 
shi·
) \

835 

	)

836 
	#gíî©e_shi·_ªg
(
¨m_ªg
, 
«me
, 
Êags_›
) \

837 
u32
 
rs
 = ((
›code
 >> 8) & 0x0F); \

838 
gíî©e_shi·_ªg_
##
«me
##
_
##
	`Êags_›
(
rm
, 
rs
); \

839 
rm
 = 
¨m_ªg
 \

840 

	)

845 
	#gíî©e_lﬂd_rm_sh_buûdî
(
Êags_›
) \

846 
u32
 
gíî©e_lﬂd_rm_sh_
##
	`Êags_›
(u32 
rm
) \

848 (
›code
 >> 4) & 0x07) \

853 
	`gíî©e_shi·_imm
(
¨m_ªg_a0
, 
l¶
, 
Êags_›
); \

860 
	`gíî©e_shi·_ªg
(
¨m_ªg_a0
, 
l¶
, 
Êags_›
); \

867 
	`gíî©e_shi·_imm
(
¨m_ªg_a0
, 
l§
, 
Êags_›
); \

874 
	`gíî©e_shi·_ªg
(
¨m_ªg_a0
, 
l§
, 
Êags_›
); \

881 
	`gíî©e_shi·_imm
(
¨m_ªg_a0
, 
a§
, 
Êags_›
); \

888 
	`gíî©e_shi·_ªg
(
¨m_ªg_a0
, 
a§
, 
Êags_›
); \

895 
	`gíî©e_shi·_imm
(
¨m_ªg_a0
, 
r‹
, 
Êags_›
); \

902 
	`gíî©e_shi·_ªg
(
¨m_ªg_a0
, 
r‹
, 
Êags_›
); \

907  
rm
; \

909 

	)

910 
	#ªad_mem‹y_c⁄°™t_u8
(
addªss
) \

911 
	`ªad_mem‹y8
(
addªss
) \

912 

	)

913 
	#ªad_mem‹y_c⁄°™t_u16
(
addªss
) \

914 
	`ªad_mem‹y16
(
addªss
) \

915 

	)

916 
	#ªad_mem‹y_c⁄°™t_u32
(
addªss
) \

917 
	`ªad_mem‹y32
(
addªss
) \

918 

	)

919 
	#ªad_mem‹y_c⁄°™t_s8
(
addªss
) \

920 (
s8
)
	`ªad_mem‹y8
(
addªss
) \

921 

	)

922 
	#ªad_mem‹y_c⁄°™t_s16
(
addªss
) \

923 (
s16
)
	`ªad_mem‹y16_sig√d
(
addªss
) \

924 

	)

925 
	#gíî©e_lﬂd_mem‹y_u8
(
úeg
, 
off£t
) \

926 
	`mùs_emô_lbu
(
úeg
, iªg, 
off£t
) \

927 

	)

928 
	#gíî©e_lﬂd_mem‹y_u16
(
úeg
, 
off£t
) \

929 
	`mùs_emô_lhu
(
úeg
, iªg, 
off£t
) \

930 

	)

931 
	#gíî©e_lﬂd_mem‹y_u32
(
úeg
, 
off£t
) \

932 
	`mùs_emô_lw
(
úeg
, iªg, 
off£t
) \

933 

	)

934 
	#gíî©e_lﬂd_mem‹y_s8
(
úeg
, 
off£t
) \

935 
	`mùs_emô_lb
(
úeg
, iªg, 
off£t
) \

936 

	)

937 
	#gíî©e_lﬂd_mem‹y_s16
(
úeg
, 
off£t
) \

938 
	`mùs_emô_lh
(
úeg
, iªg, 
off£t
) \

939 

	)

940 
	#gíî©e_lﬂd_mem‹y
(
ty≥
, 
úeg
, 
addªss
) \

942 
u32
 
_addªss
 = (u32)(
addªss
); \

943 
u32
 
_addªss_hi
 = (
_addªss
 + 0x8000) >> 16; \

944 
	`gíî©e_lﬂd_imm
(
úeg
, 
addªss
); \

945 
	`mùs_emô_lui
(
úeg
, 
_addªss_hi
 >> 16) \

946 
gíî©e_lﬂd_mem‹y_
##
	`ty≥
(
úeg
, 
_addªss
 - (
_addªss_hi
 << 16)); \

948 

	)

949 
	#gíî©e_known_addªss_lﬂd_buûdî
(
ty≥
) \

950 
u32
 
gíî©e_known_addªss_lﬂd_
##
	`ty≥
(u32 
rd
, u32 
addªss
) \

952 
addªss
 >> 24) \

958 
u32
 
imm
 = 
ªad_mem‹y_c⁄°™t_
##
	`ty≥
(
addªss
); \

959 
	`gíî©e_lﬂd_imm
(
¨m_to_mùs_ªg
[
rd
], 
imm
); \

964 
	`gíî©e_lﬂd_mem‹y
(
ty≥
, 
¨m_to_mùs_ªg
[
rd
], (
u8
 *)
ewøm
 + \

965 (
addªss
 & 0x7FFF) + ((address & 0x38000) * 2) + 0x8000); \

969 
	`gíî©e_lﬂd_mem‹y
(
ty≥
, 
¨m_to_mùs_ªg
[
rd
], (
u8
 *)
iwøm
 + \

970 (
addªss
 & 0x7FFF) + 0x8000); \

976 
u32
 
imm
 = 
ªad_mem‹y_c⁄°™t_
##
	`ty≥
(
addªss
); \

977 
	`gíî©e_lﬂd_imm
(
¨m_to_mùs_ªg
[
rd
], 
imm
); \

984 

	)

985 
	#gíî©e_block_exåa_v¨s
() \

986 
u32
 
°‹ed_pc
 = 
pc
; \

987 
u8
 *
upd©e_åampﬁöe
 \

988 

	)

989 
	#gíî©e_block_exåa_v¨s_¨m
() \

990 
	`gíî©e_block_exåa_v¨s
(); \

991 
	`gíî©e_lﬂd_rm_sh_buûdî
(
Êags
); \

992 
	`gíî©e_lﬂd_rm_sh_buûdî
(
no_Êags
); \

1000 
u32
 
	`gíî©e_lﬂd_off£t_sh
(u32 
rm
) \

1002 (
›code
 >> 5) & 0x03) \

1007 
	`gíî©e_shi·_imm
(
¨m_ªg_a1
, 
l¶
, 
no_Êags
); \

1014 
	`gíî©e_shi·_imm
(
¨m_ªg_a1
, 
l§
, 
no_Êags
); \

1021 
	`gíî©e_shi·_imm
(
¨m_ªg_a1
, 
a§
, 
no_Êags
); \

1028 
	`gíî©e_shi·_imm
(
¨m_ªg_a1
, 
r‹
, 
no_Êags
); \

1033  
rm
; \

1036 
	`gíî©e_ödúe˘_bønch_¨m
() \

1038 if(
c⁄dôi⁄
 == 0x0E) \

1040 
	`gíî©e_ödúe˘_bønch_cy˛e_upd©e
(
¨m
); \

1044 
	`gíî©e_ödúe˘_bønch_no_cy˛e_upd©e
(
¨m
); \

1048 
	`gíî©e_ödúe˘_bønch_duÆ
() \

1050 if(
c⁄dôi⁄
 == 0x0E) \

1052 
	`gíî©e_ödúe˘_bønch_cy˛e_upd©e
(
duÆ
); \

1056 
	`gíî©e_ödúe˘_bønch_no_cy˛e_upd©e
(
duÆ
); \

1059 

	)

1060 
	#gíî©e_block_exåa_v¨s_thumb
() \

1061 
	`gíî©e_block_exåa_v¨s
() \

1062 

	)

1067 
u32
 
	$execuã_•§_ª°‹e_body
(
u32
 
addªss
)

1069 
	`£t_˝u_mode
(
˝u_modes
[
ªg
[
REG_CPSR
] & 0x1F]);

1070 if((
io_ªgi°îs
[
REG_IE
] & io_ªgi°îs[
REG_IF
]) &&

1071 
io_ªgi°îs
[
REG_IME
] && ((
ªg
[
REG_CPSR
] & 0x80) == 0))

1073 
ªg_mode
[
MODE_IRQ
][6] = 
addªss
 + 4;

1074 
•§
[
MODE_IRQ
] = 
ªg
[
REG_CPSR
];

1075 
ªg
[
REG_CPSR
] = 0xD2;

1076 
addªss
 = 0x00000018;

1077 
	`£t_˝u_mode
(
MODE_IRQ
);

1080 if(
ªg
[
REG_CPSR
] & 0x20)

1081 
addªss
 |= 0x01;

1083  
addªss
;

1084 
	}
}

1088 
	mCONDITION_TRUE
,

1089 
	mCONDITION_FALSE
,

1090 
	mCONDITION_EQUAL
,

1091 
	mCONDITION_NOT_EQUAL


1092 } 
	tc⁄dôi⁄_check_ty≥
;

1095 
	#gíî©e_c⁄dôi⁄_eq
() \

1096 
	`mùs_emô_b_fûÀr
(
beq
, 
ªg_z_ˇche
, 
ªg_zîo
, 
back∑tch_addªss
); \

1097 
	`gíî©e_cy˛e_upd©e_f‹˚
() \

1098 

	)

1099 
	#gíî©e_c⁄dôi⁄_√
() \

1100 
	`mùs_emô_b_fûÀr
(
b√
, 
ªg_z_ˇche
, 
ªg_zîo
, 
back∑tch_addªss
); \

1101 
	`gíî©e_cy˛e_upd©e_f‹˚
() \

1102 

	)

1103 
	#gíî©e_c⁄dôi⁄_cs
() \

1104 
	`mùs_emô_b_fûÀr
(
beq
, 
ªg_c_ˇche
, 
ªg_zîo
, 
back∑tch_addªss
); \

1105 
	`gíî©e_cy˛e_upd©e_f‹˚
() \

1106 

	)

1107 
	#gíî©e_c⁄dôi⁄_cc
() \

1108 
	`mùs_emô_b_fûÀr
(
b√
, 
ªg_c_ˇche
, 
ªg_zîo
, 
back∑tch_addªss
); \

1109 
	`gíî©e_cy˛e_upd©e_f‹˚
() \

1110 

	)

1111 
	#gíî©e_c⁄dôi⁄_mi
() \

1112 
	`mùs_emô_b_fûÀr
(
beq
, 
ªg_n_ˇche
, 
ªg_zîo
, 
back∑tch_addªss
); \

1113 
	`gíî©e_cy˛e_upd©e_f‹˚
() \

1114 

	)

1115 
	#gíî©e_c⁄dôi⁄_∂
() \

1116 
	`mùs_emô_b_fûÀr
(
b√
, 
ªg_n_ˇche
, 
ªg_zîo
, 
back∑tch_addªss
); \

1117 
	`gíî©e_cy˛e_upd©e_f‹˚
() \

1118 

	)

1119 
	#gíî©e_c⁄dôi⁄_vs
() \

1120 
	`mùs_emô_b_fûÀr
(
beq
, 
ªg_v_ˇche
, 
ªg_zîo
, 
back∑tch_addªss
); \

1121 
	`gíî©e_cy˛e_upd©e_f‹˚
() \

1122 

	)

1123 
	#gíî©e_c⁄dôi⁄_vc
() \

1124 
	`mùs_emô_b_fûÀr
(
b√
, 
ªg_v_ˇche
, 
ªg_zîo
, 
back∑tch_addªss
); \

1125 
	`gíî©e_cy˛e_upd©e_f‹˚
() \

1126 

	)

1127 
	#gíî©e_c⁄dôi⁄_hi
() \

1128 
	`mùs_emô_x‹i
(
ªg_ãmp
, 
ªg_c_ˇche
, 1); \

1129 
	`mùs_emô_‹
(
ªg_ãmp
,Ñeg_ãmp, 
ªg_z_ˇche
); \

1130 
	`mùs_emô_b_fûÀr
(
b√
, 
ªg_ãmp
, 
ªg_zîo
, 
back∑tch_addªss
); \

1131 
	`gíî©e_cy˛e_upd©e_f‹˚
() \

1132 

	)

1133 
	#gíî©e_c⁄dôi⁄_ls
() \

1134 
	`mùs_emô_x‹i
(
ªg_ãmp
, 
ªg_c_ˇche
, 1); \

1135 
	`mùs_emô_‹
(
ªg_ãmp
,Ñeg_ãmp, 
ªg_z_ˇche
); \

1136 
	`mùs_emô_b_fûÀr
(
beq
, 
ªg_ãmp
, 
ªg_zîo
, 
back∑tch_addªss
); \

1137 
	`gíî©e_cy˛e_upd©e_f‹˚
() \

1138 

	)

1139 
	#gíî©e_c⁄dôi⁄_ge
() \

1140 
	`mùs_emô_b_fûÀr
(
b√
, 
ªg_n_ˇche
, 
ªg_v_ˇche
, 
back∑tch_addªss
); \

1141 
	`gíî©e_cy˛e_upd©e_f‹˚
() \

1142 

	)

1143 
	#gíî©e_c⁄dôi⁄_…
() \

1144 
	`mùs_emô_b_fûÀr
(
beq
, 
ªg_n_ˇche
, 
ªg_v_ˇche
, 
back∑tch_addªss
); \

1145 
	`gíî©e_cy˛e_upd©e_f‹˚
() \

1146 

	)

1147 
	#gíî©e_c⁄dôi⁄_gt
() \

1148 
	`mùs_emô_x‹
(
ªg_ãmp
, 
ªg_n_ˇche
, 
ªg_v_ˇche
); \

1149 
	`mùs_emô_‹
(
ªg_ãmp
,Ñeg_ãmp, 
ªg_z_ˇche
); \

1150 
	`mùs_emô_b_fûÀr
(
b√
, 
ªg_ãmp
, 
ªg_zîo
, 
back∑tch_addªss
); \

1151 
	`gíî©e_cy˛e_upd©e_f‹˚
() \

1152 

	)

1153 
	#gíî©e_c⁄dôi⁄_À
() \

1154 
	`mùs_emô_x‹
(
ªg_ãmp
, 
ªg_n_ˇche
, 
ªg_v_ˇche
); \

1155 
	`mùs_emô_‹
(
ªg_ãmp
,Ñeg_ãmp, 
ªg_z_ˇche
); \

1156 
	`mùs_emô_b_fûÀr
(
beq
, 
ªg_ãmp
, 
ªg_zîo
, 
back∑tch_addªss
); \

1157 
	`gíî©e_cy˛e_upd©e_f‹˚
() \

1158 

	)

1159 
	#gíî©e_c⁄dôi⁄
() \

1160 
c⁄dôi⁄
) \

1163 
	`gíî©e_c⁄dôi⁄_eq
(); \

1167 
	`gíî©e_c⁄dôi⁄_√
(); \

1171 
	`gíî©e_c⁄dôi⁄_cs
(); \

1175 
	`gíî©e_c⁄dôi⁄_cc
(); \

1179 
	`gíî©e_c⁄dôi⁄_mi
(); \

1183 
	`gíî©e_c⁄dôi⁄_∂
(); \

1187 
	`gíî©e_c⁄dôi⁄_vs
(); \

1191 
	`gíî©e_c⁄dôi⁄_vc
(); \

1195 
	`gíî©e_c⁄dôi⁄_hi
(); \

1199 
	`gíî©e_c⁄dôi⁄_ls
(); \

1203 
	`gíî©e_c⁄dôi⁄_ge
(); \

1207 
	`gíî©e_c⁄dôi⁄_…
(); \

1211 
	`gíî©e_c⁄dôi⁄_gt
(); \

1215 
	`gíî©e_c⁄dôi⁄_À
(); \

1224 

	)

1225 
	#gíî©e_bønch
() \

1227 if(
c⁄dôi⁄
 == 0x0E) \

1229 
	`gíî©e_bønch_cy˛e_upd©e
( \

1230 
block_exôs
[
block_exô_posôi⁄
].
bønch_sour˚
, \

1231 
block_exôs
[
block_exô_posôi⁄
].
bønch_èrgë
); \

1235 
	`gíî©e_bønch_no_cy˛e_upd©e
( \

1236 
block_exôs
[
block_exô_posôi⁄
].
bønch_sour˚
, \

1237 
block_exôs
[
block_exô_posôi⁄
].
bønch_èrgë
); \

1239 
block_exô_posôi⁄
++; \

1241 

	)

1242 
	#gíî©e_›_™d_ªg
(
_rd
, 
_∫
, 
_rm
) \

1243 
	`mùs_emô_™d
(
_rd
, 
_∫
, 
_rm
) \

1244 

	)

1245 
	#gíî©e_›_‹r_ªg
(
_rd
, 
_∫
, 
_rm
) \

1246 
	`mùs_emô_‹
(
_rd
, 
_∫
, 
_rm
) \

1247 

	)

1248 
	#gíî©e_›_e‹_ªg
(
_rd
, 
_∫
, 
_rm
) \

1249 
	`mùs_emô_x‹
(
_rd
, 
_∫
, 
_rm
) \

1250 

	)

1251 
	#gíî©e_›_bic_ªg
(
_rd
, 
_∫
, 
_rm
) \

1252 
	`mùs_emô_n‹
(
ªg_ãmp
, 
_rm
, 
ªg_zîo
); \

1253 
	`mùs_emô_™d
(
_rd
, 
_∫
, 
ªg_ãmp
) \

1254 

	)

1255 
	#gíî©e_›_sub_ªg
(
_rd
, 
_∫
, 
_rm
) \

1256 
	`mùs_emô_subu
(
_rd
, 
_∫
, 
_rm
) \

1257 

	)

1258 
	#gíî©e_›_rsb_ªg
(
_rd
, 
_∫
, 
_rm
) \

1259 
	`mùs_emô_subu
(
_rd
, 
_rm
, 
_∫
) \

1260 

	)

1261 
	#gíî©e_›_sbc_ªg
(
_rd
, 
_∫
, 
_rm
) \

1262 
	`mùs_emô_subu
(
_rd
, 
_∫
, 
_rm
); \

1263 
	`mùs_emô_x‹i
(
ªg_ãmp
, 
ªg_c_ˇche
, 1); \

1264 
	`mùs_emô_subu
(
_rd
, _rd, 
ªg_ãmp
) \

1265 

	)

1266 
	#gíî©e_›_rsc_ªg
(
_rd
, 
_∫
, 
_rm
) \

1267 
	`mùs_emô_addu
(
ªg_ãmp
, 
_rm
, 
ªg_c_ˇche
); \

1268 
	`mùs_emô_addiu
(
ªg_ãmp
,Ñeg_temp, -1); \

1269 
	`mùs_emô_subu
(
_rd
, 
ªg_ãmp
, 
_∫
) \

1270 

	)

1271 
	#gíî©e_›_add_ªg
(
_rd
, 
_∫
, 
_rm
) \

1272 
	`mùs_emô_addu
(
_rd
, 
_∫
, 
_rm
) \

1273 

	)

1274 
	#gíî©e_›_adc_ªg
(
_rd
, 
_∫
, 
_rm
) \

1275 
	`mùs_emô_addu
(
ªg_ãmp
, 
_rm
, 
ªg_c_ˇche
); \

1276 
	`mùs_emô_addu
(
_rd
, 
_∫
, 
ªg_ãmp
) \

1277 

	)

1278 
	#gíî©e_›_mov_ªg
(
_rd
, 
_∫
, 
_rm
) \

1279 
	`mùs_emô_addu
(
_rd
, 
_rm
, 
ªg_zîo
) \

1280 

	)

1281 
	#gíî©e_›_mvn_ªg
(
_rd
, 
_∫
, 
_rm
) \

1282 
	`mùs_emô_n‹
(
_rd
, 
_rm
, 
ªg_zîo
) \

1283 

	)

1284 
	#gíî©e_›_imm_wøµî
(
«me
, 
_rd
, 
_∫
) \

1285 if(
imm
 != 0) \

1287 
	`gíî©e_lﬂd_imm
(
ªg_a0
, 
imm
); \

1288 
gíî©e_›_
##
«me
##
	`_ªg
(
_rd
, 
_∫
, 
ªg_a0
); \

1292 
gíî©e_›_
##
«me
##
	`_ªg
(
_rd
, 
_∫
, 
ªg_zîo
); \

1294 

	)

1295 
	#gíî©e_›_™d_imm
(
_rd
, 
_∫
) \

1296 
	`gíî©e_Æu_immu
(
™di
, 
™d
, 
_rd
, 
_∫
, 
imm
) \

1297 

	)

1298 
	#gíî©e_›_‹r_imm
(
_rd
, 
_∫
) \

1299 
	`gíî©e_Æu_immu
(
‹i
, 
‹
, 
_rd
, 
_∫
, 
imm
) \

1300 

	)

1301 
	#gíî©e_›_e‹_imm
(
_rd
, 
_∫
) \

1302 
	`gíî©e_Æu_immu
(
x‹i
, 
x‹
, 
_rd
, 
_∫
, 
imm
) \

1303 

	)

1304 
	#gíî©e_›_bic_imm
(
_rd
, 
_∫
) \

1305 
	`gíî©e_Æu_immu
(
™di
, 
™d
, 
_rd
, 
_∫
, (~
imm
)) \

1306 

	)

1307 
	#gíî©e_›_sub_imm
(
_rd
, 
_∫
) \

1308 
	`gíî©e_Æu_imm
(
addiu
, 
addu
, 
_rd
, 
_∫
, (-
imm
)) \

1309 

	)

1310 
	#gíî©e_›_rsb_imm
(
_rd
, 
_∫
) \

1311 if(
imm
 != 0) \

1313 
	`gíî©e_lﬂd_imm
(
ªg_ãmp
, 
imm
); \

1314 
	`mùs_emô_subu
(
_rd
, 
ªg_ãmp
, 
_∫
); \

1318 
	`mùs_emô_subu
(
_rd
, 
ªg_zîo
, 
_∫
); \

1320 

	)

1321 
	#gíî©e_›_sbc_imm
(
_rd
, 
_∫
) \

1322 
	`gíî©e_›_imm_wøµî
(
sbc
, 
_rd
, 
_∫
) \

1323 

	)

1324 
	#gíî©e_›_rsc_imm
(
_rd
, 
_∫
) \

1325 
	`gíî©e_›_imm_wøµî
(
rsc
, 
_rd
, 
_∫
) \

1326 

	)

1327 
	#gíî©e_›_add_imm
(
_rd
, 
_∫
) \

1328 
	`gíî©e_Æu_imm
(
addiu
, 
addu
, 
_rd
, 
_∫
, 
imm
) \

1329 

	)

1330 
	#gíî©e_›_adc_imm
(
_rd
, 
_∫
) \

1331 
	`gíî©e_›_imm_wøµî
(
adc
, 
_rd
, 
_∫
) \

1332 

	)

1333 
	#gíî©e_›_mov_imm
(
_rd
, 
_∫
) \

1334 
	`gíî©e_lﬂd_imm
(
_rd
, 
imm
) \

1335 

	)

1336 
	#gíî©e_›_mvn_imm
(
_rd
, 
_∫
) \

1337 
	`gíî©e_lﬂd_imm
(
_rd
, (~
imm
)) \

1338 

	)

1339 
	#gíî©e_›_logic_Êags
(
_rd
) \

1340 if(
check_gíî©e_n_Êag
) \

1342 
	`mùs_emô_§l
(
ªg_n_ˇche
, 
_rd
, 31); \

1344 if(
check_gíî©e_z_Êag
) \

1346 
	`mùs_emô_¶tiu
(
ªg_z_ˇche
, 
_rd
, 1); \

1348 

	)

1349 
	#gíî©e_›_sub_Êags_¥ﬁogue
(
_∫
, 
_rm
) \

1350 if(
check_gíî©e_c_Êag
) \

1352 
	`mùs_emô_¶tu
(
ªg_c_ˇche
, 
_∫
, 
_rm
); \

1353 
	`mùs_emô_x‹i
(
ªg_c_ˇche
,Ñeg_c_cache, 1); \

1355 if(
check_gíî©e_v_Êag
) \

1357 
	`mùs_emô_¶t
(
ªg_v_ˇche
, 
_∫
, 
_rm
); \

1359 

	)

1360 
	#gíî©e_›_sub_Êags_ïûogue
(
_rd
) \

1361 
	`gíî©e_›_logic_Êags
(
_rd
); \

1362 if(
check_gíî©e_v_Êag
) \

1364 if(!
check_gíî©e_n_Êag
) \

1366 
	`mùs_emô_§l
(
ªg_n_ˇche
, 
_rd
, 31); \

1368 
	`mùs_emô_x‹
(
ªg_v_ˇche
,Ñeg_v_ˇche, 
ªg_n_ˇche
); \

1370 

	)

1371 
	#gíî©e_add_Êags_¥ﬁogue
(
_∫
, 
_rm
) \

1372 if(
check_gíî©e_c_Êag
 | 
check_gíî©e_v_Êag
) \

1374 
	`mùs_emô_addu
(
ªg_c_ˇche
, 
_∫
, 
ªg_zîo
); \

1376 if(
check_gíî©e_v_Êag
) \

1378 
	`mùs_emô_¶t
(
ªg_v_ˇche
, 
_rm
, 
ªg_zîo
); \

1380 

	)

1381 
	#gíî©e_add_Êags_ïûogue
(
_rd
) \

1382 if(
check_gíî©e_v_Êag
) \

1384 
	`mùs_emô_¶t
(
ªg_a0
, 
_rd
, 
ªg_c_ˇche
); \

1385 
	`mùs_emô_x‹
(
ªg_v_ˇche
,Ñeg_v_ˇche, 
ªg_a0
); \

1387 if(
check_gíî©e_c_Êag
) \

1389 
	`mùs_emô_¶tu
(
ªg_c_ˇche
, 
_rd
,Ñeg_c_cache); \

1391 
	`gíî©e_›_logic_Êags
(
_rd
) \

1392 

	)

1393 
	#gíî©e_›_™ds_ªg
(
_rd
, 
_∫
, 
_rm
) \

1394 
	`mùs_emô_™d
(
_rd
, 
_∫
, 
_rm
); \

1395 
	`gíî©e_›_logic_Êags
(
_rd
) \

1396 

	)

1397 
	#gíî©e_›_‹rs_ªg
(
_rd
, 
_∫
, 
_rm
) \

1398 
	`mùs_emô_‹
(
_rd
, 
_∫
, 
_rm
); \

1399 
	`gíî©e_›_logic_Êags
(
_rd
) \

1400 

	)

1401 
	#gíî©e_›_e‹s_ªg
(
_rd
, 
_∫
, 
_rm
) \

1402 
	`mùs_emô_x‹
(
_rd
, 
_∫
, 
_rm
); \

1403 
	`gíî©e_›_logic_Êags
(
_rd
) \

1404 

	)

1405 
	#gíî©e_›_bics_ªg
(
_rd
, 
_∫
, 
_rm
) \

1406 
	`mùs_emô_n‹
(
ªg_ãmp
, 
_rm
, 
ªg_zîo
); \

1407 
	`mùs_emô_™d
(
_rd
, 
_∫
, 
ªg_ãmp
); \

1408 
	`gíî©e_›_logic_Êags
(
_rd
) \

1409 

	)

1410 
	#gíî©e_›_subs_ªg
(
_rd
, 
_∫
, 
_rm
) \

1411 
	`gíî©e_›_sub_Êags_¥ﬁogue
(
_∫
, 
_rm
); \

1412 
	`mùs_emô_subu
(
_rd
, 
_∫
, 
_rm
); \

1413 
	`gíî©e_›_sub_Êags_ïûogue
(
_rd
) \

1414 

	)

1415 
	#gíî©e_›_rsbs_ªg
(
_rd
, 
_∫
, 
_rm
) \

1416 
	`gíî©e_›_sub_Êags_¥ﬁogue
(
_rm
, 
_∫
); \

1417 
	`mùs_emô_subu
(
_rd
, 
_rm
, 
_∫
); \

1418 
	`gíî©e_›_sub_Êags_ïûogue
(
_rd
) \

1419 

	)

1420 
	#gíî©e_›_sbcs_ªg
(
_rd
, 
_∫
, 
_rm
) \

1421 
	`mùs_emô_subu
(
_rd
, 
_∫
, 
_rm
); \

1422 
	`mùs_emô_x‹i
(
ªg_ãmp
, 
ªg_c_ˇche
, 1); \

1423 
	`gíî©e_›_sub_Êags_¥ﬁogue
(
_rd
, 
ªg_ãmp
); \

1424 
	`mùs_emô_subu
(
_rd
, _rd, 
ªg_ãmp
); \

1425 
	`gíî©e_›_sub_Êags_ïûogue
(
_rd
) \

1426 

	)

1427 
	#gíî©e_›_rscs_ªg
(
_rd
, 
_∫
, 
_rm
) \

1428 
	`mùs_emô_addu
(
ªg_ãmp
, 
_rm
, 
ªg_c_ˇche
); \

1429 
	`mùs_emô_addiu
(
ªg_ãmp
,Ñeg_temp, -1); \

1430 
	`gíî©e_›_sub_Êags_¥ﬁogue
(
ªg_ãmp
, 
_∫
); \

1431 
	`mùs_emô_subu
(
_rd
, 
ªg_ãmp
, 
_∫
); \

1432 
	`gíî©e_›_sub_Êags_ïûogue
(
_rd
) \

1433 

	)

1434 
	#gíî©e_›_adds_ªg
(
_rd
, 
_∫
, 
_rm
) \

1435 
	`gíî©e_add_Êags_¥ﬁogue
(
_∫
, 
_rm
); \

1436 
	`mùs_emô_addu
(
_rd
, 
_∫
, 
_rm
); \

1437 
	`gíî©e_add_Êags_ïûogue
(
_rd
) \

1438 

	)

1439 
	#gíî©e_›_adcs_ªg
(
_rd
, 
_∫
, 
_rm
) \

1440 
	`mùs_emô_addu
(
ªg_ãmp
, 
_rm
, 
ªg_c_ˇche
); \

1441 
	`gíî©e_add_Êags_¥ﬁogue
(
_∫
, 
_rm
); \

1442 
	`mùs_emô_addu
(
_rd
, 
_∫
, 
ªg_ãmp
); \

1443 
	`gíî©e_add_Êags_ïûogue
(
_rd
) \

1444 

	)

1445 
	#gíî©e_›_movs_ªg
(
_rd
, 
_∫
, 
_rm
) \

1446 
	`mùs_emô_addu
(
_rd
, 
_rm
, 
ªg_zîo
); \

1447 
	`gíî©e_›_logic_Êags
(
_rd
) \

1448 

	)

1449 
	#gíî©e_›_mvns_ªg
(
_rd
, 
_∫
, 
_rm
) \

1450 
	`mùs_emô_n‹
(
_rd
, 
_rm
, 
ªg_zîo
); \

1451 
	`gíî©e_›_logic_Êags
(
_rd
) \

1452 

	)

1453 
	#gíî©e_›_√g_ªg
(
_rd
, 
_∫
, 
_rm
) \

1454 
	`gíî©e_›_subs_ªg
(
_rd
, 
ªg_zîo
, 
_rm
) \

1455 

	)

1456 
	#gíî©e_›_muls_ªg
(
_rd
, 
_∫
, 
_rm
) \

1457 
	`mùs_emô_mu…u
(
_∫
, 
_rm
); \

1458 
	`mùs_emô_mÊo
(
_rd
); \

1459 
	`gíî©e_›_logic_Êags
(
_rd
) \

1460 

	)

1461 
	#gíî©e_›_cmp_ªg
(
_rd
, 
_∫
, 
_rm
) \

1462 
	`gíî©e_›_subs_ªg
(
ªg_ãmp
, 
_∫
, 
_rm
) \

1463 

	)

1464 
	#gíî©e_›_cmn_ªg
(
_rd
, 
_∫
, 
_rm
) \

1465 
	`gíî©e_›_adds_ªg
(
ªg_ãmp
, 
_∫
, 
_rm
) \

1466 

	)

1467 
	#gíî©e_›_t°_ªg
(
_rd
, 
_∫
, 
_rm
) \

1468 
	`gíî©e_›_™ds_ªg
(
ªg_ãmp
, 
_∫
, 
_rm
) \

1469 

	)

1470 
	#gíî©e_›_ãq_ªg
(
_rd
, 
_∫
, 
_rm
) \

1471 
	`gíî©e_›_e‹s_ªg
(
ªg_ãmp
, 
_∫
, 
_rm
) \

1472 

	)

1473 
	#gíî©e_›_™ds_imm
(
_rd
, 
_∫
) \

1474 
	`gíî©e_Æu_immu
(
™di
, 
™d
, 
_rd
, 
_∫
, 
imm
); \

1475 
	`gíî©e_›_logic_Êags
(
_rd
) \

1476 

	)

1477 
	#gíî©e_›_‹rs_imm
(
_rd
, 
_∫
) \

1478 
	`gíî©e_Æu_immu
(
‹i
, 
‹
, 
_rd
, 
_∫
, 
imm
); \

1479 
	`gíî©e_›_logic_Êags
(
_rd
) \

1480 

	)

1481 
	#gíî©e_›_e‹s_imm
(
_rd
, 
_∫
) \

1482 
	`gíî©e_Æu_immu
(
x‹i
, 
x‹
, 
_rd
, 
_∫
, 
imm
); \

1483 
	`gíî©e_›_logic_Êags
(
_rd
) \

1484 

	)

1485 
	#gíî©e_›_bics_imm
(
_rd
, 
_∫
) \

1486 
	`gíî©e_Æu_immu
(
™di
, 
™d
, 
_rd
, 
_∫
, (~
imm
)); \

1487 
	`gíî©e_›_logic_Êags
(
_rd
) \

1488 

	)

1489 
	#gíî©e_›_subs_imm
(
_rd
, 
_∫
) \

1490 
	`gíî©e_›_imm_wøµî
(
subs
, 
_rd
, 
_∫
) \

1491 

	)

1492 
	#gíî©e_›_rsbs_imm
(
_rd
, 
_∫
) \

1493 
	`gíî©e_›_imm_wøµî
(
rsbs
, 
_rd
, 
_∫
) \

1494 

	)

1495 
	#gíî©e_›_sbcs_imm
(
_rd
, 
_∫
) \

1496 
	`gíî©e_›_imm_wøµî
(
sbcs
, 
_rd
, 
_∫
) \

1497 

	)

1498 
	#gíî©e_›_rscs_imm
(
_rd
, 
_∫
) \

1499 
	`gíî©e_›_imm_wøµî
(
rscs
, 
_rd
, 
_∫
) \

1500 

	)

1501 
	#gíî©e_›_adds_imm
(
_rd
, 
_∫
) \

1502 
	`gíî©e_›_imm_wøµî
(
adds
, 
_rd
, 
_∫
) \

1503 

	)

1504 
	#gíî©e_›_adcs_imm
(
_rd
, 
_∫
) \

1505 
	`gíî©e_›_imm_wøµî
(
adcs
, 
_rd
, 
_∫
) \

1506 

	)

1507 
	#gíî©e_›_movs_imm
(
_rd
, 
_∫
) \

1508 
	`gíî©e_lﬂd_imm
(
_rd
, 
imm
); \

1509 
	`gíî©e_›_logic_Êags
(
_rd
) \

1510 

	)

1511 
	#gíî©e_›_mvns_imm
(
_rd
, 
_∫
) \

1512 
	`gíî©e_lﬂd_imm
(
_rd
, (~
imm
)); \

1513 
	`gíî©e_›_logic_Êags
(
_rd
) \

1514 

	)

1515 
	#gíî©e_›_cmp_imm
(
_rd
, 
_∫
) \

1516 
	`gíî©e_›_imm_wøµî
(
cmp
, 
_rd
, 
_∫
) \

1517 

	)

1518 
	#gíî©e_›_cmn_imm
(
_rd
, 
_∫
) \

1519 
	`gíî©e_›_imm_wøµî
(
cmn
, 
_rd
, 
_∫
) \

1520 

	)

1521 
	#gíî©e_›_t°_imm
(
_rd
, 
_∫
) \

1522 
	`gíî©e_›_™ds_imm
(
ªg_ãmp
, 
_∫
) \

1523 

	)

1524 
	#gíî©e_›_ãq_imm
(
_rd
, 
_∫
) \

1525 
	`gíî©e_›_e‹s_imm
(
ªg_ãmp
, 
_∫
) \

1526 

	)

1527 
	#¨m_gíî©e_›_lﬂd_yes
() \

1528 
	`gíî©e_lﬂd_ªg_pc
(
ªg_a1
, 
∫
, 8) \

1529 

	)

1530 
	#¨m_gíî©e_›_lﬂd_no
() \

1531 

	)

1532 
	#¨m_›_check_yes
() \

1533 
	`check_lﬂd_ªg_pc
(
¨m_ªg_a1
, 
∫
, 8) \

1534 

	)

1535 
	#¨m_›_check_no
() \

1536 

	)

1537 
	#¨m_gíî©e_›_ªg_Êags
(
«me
, 
lﬂd_›
) \

1538 
	`¨m_decode_d©a_¥oc_ªg
(); \

1539 if(
check_gíî©e_c_Êag
) \

1541 
rm
 = 
	`gíî©e_lﬂd_rm_sh_Êags
(rm); \

1545 
rm
 = 
	`gíî©e_lﬂd_rm_sh_no_Êags
(rm); \

1548 
¨m_›_check_
##
	`lﬂd_›
(); \

1549 
gíî©e_›_
##
«me
##
	`_ªg
(
¨m_to_mùs_ªg
[
rd
],árm_to_mùs_ªg[
∫
], \

1550 
¨m_to_mùs_ªg
[
rm
]) \

1551 

	)

1552 
	#¨m_gíî©e_›_ªg
(
«me
, 
lﬂd_›
) \

1553 
	`¨m_decode_d©a_¥oc_ªg
(); \

1554 
rm
 = 
	`gíî©e_lﬂd_rm_sh_no_Êags
(rm); \

1555 
¨m_›_check_
##
	`lﬂd_›
(); \

1556 
gíî©e_›_
##
«me
##
	`_ªg
(
¨m_to_mùs_ªg
[
rd
],árm_to_mùs_ªg[
∫
], \

1557 
¨m_to_mùs_ªg
[
rm
]) \

1558 

	)

1559 
	#¨m_gíî©e_›_imm
(
«me
, 
lﬂd_›
) \

1560 
	`¨m_decode_d©a_¥oc_imm
(); \

1561 
¨m_›_check_
##
	`lﬂd_›
(); \

1562 
gíî©e_›_
##
«me
##
	`_imm
(
¨m_to_mùs_ªg
[
rd
],árm_to_mùs_ªg[
∫
]) \

1563 

	)

1564 
	#¨m_d©a_¥oc
(
«me
, 
ty≥
, 
Êags_›
) \

1566 
¨m_gíî©e_›_
##
	`ty≥
(
«me
, 
yes
); \

1567 
check_°‹e_ªg_pc_
##
	`Êags_›
(
rd
); \

1569 

	)

1570 
	#¨m_d©a_¥oc_ã°
(
«me
, 
ty≥
) \

1572 
¨m_gíî©e_›_
##
	`ty≥
(
«me
, 
yes
); \

1574 

	)

1575 
	#¨m_d©a_¥oc_u«ry
(
«me
, 
ty≥
, 
Êags_›
) \

1577 
¨m_gíî©e_›_
##
	`ty≥
(
«me
, 
no
); \

1578 
check_°‹e_ªg_pc_
##
	`Êags_›
(
rd
); \

1580 

	)

1581 
	#¨m_mu…ùly_Êags_yes
(
_rd
) \

1582 
	`gíî©e_›_logic_Êags
(
_rd
) \

1583 

	)

1584 
	#¨m_mu…ùly_Êags_no
(
_rd
) \

1585 

	)

1586 
	#¨m_mu…ùly_add_no
() \

1587 
	`mùs_emô_mÊo
(
¨m_to_mùs_ªg
[
rd
]) \

1588 

	)

1589 
	#¨m_mu…ùly_add_yes
() \

1590 
	`mùs_emô_mÊo
(
ªg_ãmp
); \

1591 
	`mùs_emô_addu
(
¨m_to_mùs_ªg
[
rd
], 
ªg_ãmp
,árm_to_mùs_ªg[
∫
]) \

1592 

	)

1593 
	#¨m_mu…ùly
(
add_›
, 
Êags
) \

1595 
	`¨m_decode_mu…ùly
(); \

1596 
	`mùs_emô_mu…u
(
¨m_to_mùs_ªg
[
rm
],árm_to_mùs_ªg[
rs
]); \

1597 
¨m_mu…ùly_add_
##
	`add_›
(); \

1598 
¨m_mu…ùly_Êags_
##
	`Êags
(
¨m_to_mùs_ªg
[
rd
]); \

1600 

	)

1601 
	#¨m_mu…ùly_l⁄g_Êags_yes
(
_rdlo
, 
_rdhi
) \

1602 
	`mùs_emô_¶tiu
(
ªg_z_ˇche
, 
_rdlo
, 1); \

1603 
	`mùs_emô_¶tiu
(
ªg_a0
, 
_rdhi
, 1); \

1604 
	`mùs_emô_™d
(
ªg_z_ˇche
,Ñeg_z_ˇche, 
ªg_a0
); \

1605 
	`mùs_emô_§l
(
ªg_n_ˇche
, 
_rdhi
, 31); \

1606 

	)

1607 
	#¨m_mu…ùly_l⁄g_Êags_no
(
_rdlo
, 
_rdhi
) \

1608 

	)

1609 
	#¨m_mu…ùly_l⁄g_add_yes
(
«me
) \

1610 
	`mùs_emô_méo
(
¨m_to_mùs_ªg
[
rdlo
]); \

1611 
	`mùs_emô_mthi
(
¨m_to_mùs_ªg
[
rdhi
]); \

1612 
gíî©e_mu…ùly_
##
	`«me
() \

1613 

	)

1614 
	#¨m_mu…ùly_l⁄g_add_no
(
«me
) \

1615 
gíî©e_mu…ùly_
##
	`«me
() \

1616 

	)

1617 
	#¨m_mu…ùly_l⁄g
(
«me
, 
add_›
, 
Êags
) \

1619 
	`¨m_decode_mu…ùly_l⁄g
(); \

1620 
¨m_mu…ùly_l⁄g_add_
##
	`add_›
(
«me
); \

1621 
	`mùs_emô_mÊo
(
¨m_to_mùs_ªg
[
rdlo
]); \

1622 
	`mùs_emô_mfhi
(
¨m_to_mùs_ªg
[
rdhi
]); \

1623 
¨m_mu…ùly_l⁄g_Êags_
##
	`Êags
(
¨m_to_mùs_ªg
[
rdlo
], \

1624 
¨m_to_mùs_ªg
[
rdhi
]); \

1626 

	)

1627 
	#¨m_p§_ªad
(
›_ty≥
, 
p§_ªg
) \

1628 
	`gíî©e_fun˘i⁄_ˇŒ
(
execuã_ªad_
##
p§_ªg
); \

1629 
	`gíî©e_°‹e_ªg
(
ªg_rv
, 
rd
) \

1630 

	)

1631 
u32
 
	$execuã_°‹e_˝§_body
(
u32
 
_˝§
, u32 
°‹e_mask
, u32 
addªss
)

1633 
ªg
[
REG_CPSR
] = 
_˝§
;

1634 if(
°‹e_mask
 & 0xFF)

1636 
	`£t_˝u_mode
(
˝u_modes
[
_˝§
 & 0x1F]);

1637 if((
io_ªgi°îs
[
REG_IE
] & io_ªgi°îs[
REG_IF
]) &&

1638 
io_ªgi°îs
[
REG_IME
] && ((
_˝§
 & 0x80) == 0))

1640 
ªg_mode
[
MODE_IRQ
][6] = 
addªss
 + 4;

1641 
•§
[
MODE_IRQ
] = 
_˝§
;

1642 
ªg
[
REG_CPSR
] = 0xD2;

1643 
	`£t_˝u_mode
(
MODE_IRQ
);

1649 
	}
}

1651 
	#¨m_p§_lﬂd_√w_ªg
() \

1652 
	`gíî©e_lﬂd_ªg
(
ªg_a0
, 
rm
) \

1653 

	)

1654 
	#¨m_p§_lﬂd_√w_imm
() \

1655 
	`gíî©e_lﬂd_imm
(
ªg_a0
, 
imm
) \

1656 

	)

1657 
	#¨m_p§_°‹e
(
›_ty≥
, 
p§_ªg
) \

1658 
¨m_p§_lﬂd_√w_
##
	`›_ty≥
(); \

1659 
	`gíî©e_lﬂd_imm
(
ªg_a1
, 
p§_masks
[
p§_fõld
]); \

1660 
	`gíî©e_lﬂd_pc
(
ªg_a2
, (
pc
 + 4)); \

1661 
	`gíî©e_fun˘i⁄_ˇŒ_sw≠_dñay
(
execuã_°‹e_
##
p§_ªg
) \

1662 

	)

1663 
	#¨m_p§
(
›_ty≥
, 
å™s„r_ty≥
, 
p§_ªg
) \

1665 
¨m_decode_p§_
##
	`›_ty≥
(); \

1666 
¨m_p§_
##
	`å™s„r_ty≥
(
›_ty≥
, 
p§_ªg
); \

1668 

	)

1669 
	#¨m_ac˚ss_mem‹y_lﬂd
(
mem_ty≥
) \

1670 
cy˛e_cou¡
 += 2; \

1671 
	`mùs_emô_jÆ
(
	`mùs_absﬁuã_off£t
(
execuã_lﬂd_
##
mem_ty≥
)); \

1672 
	`gíî©e_lﬂd_pc
(
ªg_a1
, (
pc
 + 8)); \

1673 
	`gíî©e_°‹e_ªg
(
ªg_rv
, 
rd
); \

1674 
	`check_°‹e_ªg_pc_no_Êags
(
rd
) \

1675 

	)

1676 
	#¨m_ac˚ss_mem‹y_°‹e
(
mem_ty≥
) \

1677 
cy˛e_cou¡
++; \

1678 
	`gíî©e_lﬂd_pc
(
ªg_a2
, (
pc
 + 4)); \

1679 
	`gíî©e_lﬂd_ªg_pc
(
ªg_a1
, 
rd
, 12); \

1680 
	`gíî©e_fun˘i⁄_ˇŒ_sw≠_dñay
(
execuã_°‹e_
##
mem_ty≥
) \

1681 

	)

1682 
	#¨m_ac˚ss_mem‹y_ªg_¥e_up
() \

1683 
	`mùs_emô_addu
(
ªg_a0
, 
¨m_to_mùs_ªg
[
∫
],árm_to_mùs_ªg[
rm
]) \

1684 

	)

1685 
	#¨m_ac˚ss_mem‹y_ªg_¥e_down
() \

1686 
	`mùs_emô_subu
(
ªg_a0
, 
¨m_to_mùs_ªg
[
∫
],árm_to_mùs_ªg[
rm
]) \

1687 

	)

1688 
	#¨m_ac˚ss_mem‹y_ªg_¥e
(
adju°_dú
) \

1689 
	`check_lﬂd_ªg_pc
(
¨m_ªg_a0
, 
∫
, 8); \

1690 
¨m_ac˚ss_mem‹y_ªg_¥e_
##
	`adju°_dú
() \

1691 

	)

1692 
	#¨m_ac˚ss_mem‹y_ªg_¥e_wb
(
adju°_dú
) \

1693 
	`¨m_ac˚ss_mem‹y_ªg_¥e
(
adju°_dú
); \

1694 
	`gíî©e_°‹e_ªg
(
ªg_a0
, 
∫
) \

1695 

	)

1696 
	#¨m_ac˚ss_mem‹y_ªg_po°_up
() \

1697 
	`mùs_emô_addu
(
¨m_to_mùs_ªg
[
∫
],árm_to_mips_reg[rn], \

1698 
¨m_to_mùs_ªg
[
rm
]) \

1699 

	)

1700 
	#¨m_ac˚ss_mem‹y_ªg_po°_down
() \

1701 
	`mùs_emô_subu
(
¨m_to_mùs_ªg
[
∫
],árm_to_mips_reg[rn], \

1702 
¨m_to_mùs_ªg
[
rm
]) \

1703 

	)

1704 
	#¨m_ac˚ss_mem‹y_ªg_po°
(
adju°_dú
) \

1705 
	`gíî©e_lﬂd_ªg
(
ªg_a0
, 
∫
); \

1706 
¨m_ac˚ss_mem‹y_ªg_po°_
##
	`adju°_dú
() \

1707 

	)

1708 
	#¨m_ac˚ss_mem‹y_imm_¥e_up
() \

1709 
	`mùs_emô_addiu
(
ªg_a0
, 
¨m_to_mùs_ªg
[
∫
], 
off£t
) \

1710 

	)

1711 
	#¨m_ac˚ss_mem‹y_imm_¥e_down
() \

1712 
	`mùs_emô_addiu
(
ªg_a0
, 
¨m_to_mùs_ªg
[
∫
], -
off£t
) \

1713 

	)

1714 
	#¨m_ac˚ss_mem‹y_imm_¥e
(
adju°_dú
) \

1715 
	`check_lﬂd_ªg_pc
(
¨m_ªg_a0
, 
∫
, 8); \

1716 
¨m_ac˚ss_mem‹y_imm_¥e_
##
	`adju°_dú
() \

1717 

	)

1718 
	#¨m_ac˚ss_mem‹y_imm_¥e_wb
(
adju°_dú
) \

1719 
	`¨m_ac˚ss_mem‹y_imm_¥e
(
adju°_dú
); \

1720 
	`gíî©e_°‹e_ªg
(
ªg_a0
, 
∫
) \

1721 

	)

1722 
	#¨m_ac˚ss_mem‹y_imm_po°_up
() \

1723 
	`mùs_emô_addiu
(
¨m_to_mùs_ªg
[
∫
],árm_to_mùs_ªg[∫], 
off£t
) \

1724 

	)

1725 
	#¨m_ac˚ss_mem‹y_imm_po°_down
() \

1726 
	`mùs_emô_addiu
(
¨m_to_mùs_ªg
[
∫
],árm_to_mùs_ªg[∫], -
off£t
) \

1727 

	)

1728 
	#¨m_ac˚ss_mem‹y_imm_po°
(
adju°_dú
) \

1729 
	`gíî©e_lﬂd_ªg
(
ªg_a0
, 
∫
); \

1730 
¨m_ac˚ss_mem‹y_imm_po°_
##
	`adju°_dú
() \

1731 

	)

1732 
	#¨m_d©a_å™s_ªg
(
adju°_›
, 
adju°_dú
) \

1733 
	`¨m_decode_d©a_å™s_ªg
(); \

1734 
rm
 = 
	`gíî©e_lﬂd_off£t_sh
(rm); \

1735 
¨m_ac˚ss_mem‹y_ªg_
##
	`adju°_›
(
adju°_dú
) \

1736 

	)

1737 
	#¨m_d©a_å™s_imm
(
adju°_›
, 
adju°_dú
) \

1738 
	`¨m_decode_d©a_å™s_imm
(); \

1739 
¨m_ac˚ss_mem‹y_imm_
##
	`adju°_›
(
adju°_dú
) \

1740 

	)

1741 
	#¨m_d©a_å™s_hÆf_ªg
(
adju°_›
, 
adju°_dú
) \

1742 
	`¨m_decode_hÆf_å™s_r
(); \

1743 
¨m_ac˚ss_mem‹y_ªg_
##
	`adju°_›
(
adju°_dú
) \

1744 

	)

1745 
	#¨m_d©a_å™s_hÆf_imm
(
adju°_›
, 
adju°_dú
) \

1746 
	`¨m_decode_hÆf_å™s_of
(); \

1747 
¨m_ac˚ss_mem‹y_imm_
##
	`adju°_›
(
adju°_dú
) \

1748 

	)

1749 
	#¨m_ac˚ss_mem‹y
(
ac˚ss_ty≥
, 
dúe˘i⁄
, 
adju°_›
, 
mem_ty≥
, \

1750 
off£t_ty≥
) \

1752 
¨m_d©a_å™s_
##
	`off£t_ty≥
(
adju°_›
, 
dúe˘i⁄
); \

1753 
¨m_ac˚ss_mem‹y_
##
	`ac˚ss_ty≥
(
mem_ty≥
); \

1755 

	)

1756 
	#w‹d_bô_cou¡
(
w‹d
) \

1757 (
bô_cou¡
[
w‹d
 >> 8] + bit_count[word & 0xFF]) \

1758 

	)

1759 
	#•röt_no
(
ac˚ss_ty≥
, 
¥e_›
, 
po°_›
, 
wb
) \

1760 

	)

1761 
	#•röt_yes
(
ac˚ss_ty≥
, 
¥e_›
, 
po°_›
, 
wb
) \

1762 
	`¥ötf
("sbit on %s %s %s %s\n", #access_type, #pre_op, #post_op, #wb) \

1763 

	)

1764 
	#¨m_block_mem‹y_lﬂd
() \

1765 
	`gíî©e_fun˘i⁄_ˇŒ_sw≠_dñay
(
execuã_Æig√d_lﬂd32
); \

1766 
	`gíî©e_°‹e_ªg
(
ªg_rv
, 
i
) \

1767 

	)

1768 
	#¨m_block_mem‹y_°‹e
() \

1769 
	`gíî©e_lﬂd_ªg_pc
(
ªg_a1
, 
i
, 8); \

1770 
	`gíî©e_fun˘i⁄_ˇŒ_sw≠_dñay
(
execuã_Æig√d_°‹e32
) \

1771 

	)

1772 
	#¨m_block_mem‹y_föÆ_lﬂd
() \

1773 
	`¨m_block_mem‹y_lﬂd
() \

1774 

	)

1775 
	#¨m_block_mem‹y_föÆ_°‹e
() \

1776 
	`gíî©e_lﬂd_pc
(
ªg_a2
, (
pc
 + 4)); \

1777 
	`mùs_emô_jÆ
(
	`mùs_absﬁuã_off£t
(
execuã_°‹e_u32
)); \

1778 
	`gíî©e_lﬂd_ªg
(
ªg_a1
, 
i
) \

1779 

	)

1780 
	#¨m_block_mem‹y_adju°_pc_°‹e
() \

1781 

	)

1782 
	#¨m_block_mem‹y_adju°_pc_lﬂd
() \

1783 if(
ªg_li°
 & 0x8000) \

1785 
	`gíî©e_mov
(
ªg_a0
, 
ªg_rv
); \

1786 
	`gíî©e_ödúe˘_bønch_¨m
(); \

1788 

	)

1789 
	#¨m_block_mem‹y_•_lﬂd
() \

1790 
	`mùs_emô_lw
(
¨m_to_mùs_ªg
[
i
], 
ªg_a1
, 
off£t
); \

1791 

	)

1792 
	#¨m_block_mem‹y_•_°‹e
() \

1794 
u32
 
°‹e_ªg
 = 
i
; \

1795 
	`check_lﬂd_ªg_pc
(
¨m_ªg_a0
, 
°‹e_ªg
, 8); \

1796 
	`mùs_emô_sw
(
¨m_to_mùs_ªg
[
°‹e_ªg
], 
ªg_a1
, 
off£t
); \

1798 

	)

1799 
	#¨m_block_mem‹y_•_adju°_pc_°‹e
() \

1800 

	)

1801 
	#¨m_block_mem‹y_•_adju°_pc_lﬂd
() \

1802 if(
ªg_li°
 & 0x8000) \

1804 
	`gíî©e_ödúe˘_bønch_¨m
(); \

1806 

	)

1807 
	#¨m_block_mem‹y_off£t_down_a
() \

1808 
	`mùs_emô_addiu
(
ªg_a2
, 
ba£_ªg
, (-((
	`w‹d_bô_cou¡
(
ªg_li°
) * 4) - 4))) \

1809 

	)

1810 
	#¨m_block_mem‹y_off£t_down_b
() \

1811 
	`mùs_emô_addiu
(
ªg_a2
, 
ba£_ªg
, (
	`w‹d_bô_cou¡
(
ªg_li°
) * -4)) \

1812 

	)

1813 
	#¨m_block_mem‹y_off£t_no
() \

1814 
	`mùs_emô_addu
(
ªg_a2
, 
ba£_ªg
, 
ªg_zîo
) \

1815 

	)

1816 
	#¨m_block_mem‹y_off£t_up
() \

1817 
	`mùs_emô_addiu
(
ªg_a2
, 
ba£_ªg
, 4) \

1818 

	)

1819 
	#¨m_block_mem‹y_wrôeback_down
() \

1820 
	`mùs_emô_addiu
(
ba£_ªg
, ba£_ªg, (-(
	`w‹d_bô_cou¡
(
ªg_li°
) * 4))) \

1821 

	)

1822 
	#¨m_block_mem‹y_wrôeback_up
() \

1823 
	`mùs_emô_addiu
(
ba£_ªg
, ba£_ªg, (
	`w‹d_bô_cou¡
(
ªg_li°
) * 4)) \

1824 

	)

1825 
	#¨m_block_mem‹y_wrôeback_no
()

	)

1829 
	#¨m_block_mem‹y_wrôeback_lﬂd
(
wrôeback_ty≥
) \

1830 if(!((
ªg_li°
 >> 
∫
) & 0x01)) \

1832 
¨m_block_mem‹y_wrôeback_
##
	`wrôeback_ty≥
(); \

1834 

	)

1835 
	#¨m_block_mem‹y_wrôeback_°‹e
(
wrôeback_ty≥
) \

1836 
¨m_block_mem‹y_wrôeback_
##
	`wrôeback_ty≥
() \

1837 

	)

1838 
	#¨m_block_mem‹y
(
ac˚ss_ty≥
, 
off£t_ty≥
, 
wrôeback_ty≥
, 
s_bô
) \

1840 
	`¨m_decode_block_å™s
(); \

1841 
u32
 
i
; \

1842 
u32
 
off£t
 = 0; \

1843 
u32
 
ba£_ªg
 = 
¨m_to_mùs_ªg
[
∫
]; \

1845 
¨m_block_mem‹y_off£t_
##
	`off£t_ty≥
(); \

1846 
¨m_block_mem‹y_wrôeback_
##
	`ac˚ss_ty≥
(
wrôeback_ty≥
); \

1848 if((
∫
 =
REG_SP
Ë&& 
iwøm_°ack_›timize
) \

1850 
	`mùs_emô_™di
(
ªg_a1
, 
ªg_a2
, 0x7FFC); \

1851 
	`gíî©e_lﬂd_imm
(
ªg_a0
, ((
u32
)(
iwøm
 + 0x8000))); \

1852 
	`mùs_emô_addu
(
ªg_a1
,Ñeg_a1, 
ªg_a0
); \

1854 
i
 = 0; i < 16; i++) \

1856 if((
ªg_li°
 >> 
i
) & 0x01) \

1858 
cy˛e_cou¡
++; \

1859 
¨m_block_mem‹y_•_
##
	`ac˚ss_ty≥
(); \

1860 
off£t
 += 4; \

1864 
¨m_block_mem‹y_•_adju°_pc_
##
	`ac˚ss_ty≥
(); \

1868 
	`mùs_emô_ös
(
ªg_a2
, 
ªg_zîo
, 0, 2); \

1870 
i
 = 0; i < 16; i++) \

1872 if((
ªg_li°
 >> 
i
) & 0x01) \

1874 
cy˛e_cou¡
++; \

1875 
	`mùs_emô_addiu
(
ªg_a0
, 
ªg_a2
, 
off£t
); \

1876 if(
ªg_li°
 & ~((2 << 
i
) - 1)) \

1878 
¨m_block_mem‹y_
##
	`ac˚ss_ty≥
(); \

1879 
off£t
 += 4; \

1883 
¨m_block_mem‹y_föÆ_
##
	`ac˚ss_ty≥
(); \

1889 
¨m_block_mem‹y_adju°_pc_
##
	`ac˚ss_ty≥
(); \

1892 

	)

1893 
	#¨m_block_wrôeback_no
()

	)

1895 
	#¨m_block_wrôeback_yes
() \

1896 
	`mùs_emô_addu
(
¨m_to_mùs_ªg
[
∫
], 
ªg_a2
, 
ªg_zîo
) \

1897 

	)

1898 
	#¨m_block_addªss_¥ódju°_up_fuŒ
(
wb
) \

1899 
	`mùs_emô_addiu
(
ªg_a2
, 
¨m_to_mùs_ªg
[
∫
], \

1900 ((
	`w‹d_bô_cou¡
(
ªg_li°
)) * 4)); \

1901 
¨m_block_wrôeback_
##
	`wb
() \

1902 

	)

1903 
	#¨m_block_addªss_¥ódju°_up
(
wb
) \

1904 
	`mùs_emô_addiu
(
ªg_a2
, 
¨m_to_mùs_ªg
[
∫
], 4); \

1905 
¨m_block_wrôeback_
##
	`wb
() \

1906 

	)

1907 
	#¨m_block_addªss_¥ódju°_down_fuŒ
(
wb
) \

1908 
	`mùs_emô_addiu
(
ªg_a2
, 
¨m_to_mùs_ªg
[
∫
], \

1909 -((
	`w‹d_bô_cou¡
(
ªg_li°
)) * 4)); \

1910 
¨m_block_wrôeback_
##
	`wb
() \

1911 

	)

1912 
	#¨m_block_addªss_¥ódju°_down
(
wb
) \

1913 
	`mùs_emô_addiu
(
ªg_a2
, 
¨m_to_mùs_ªg
[
∫
], \

1914 -(((
	`w‹d_bô_cou¡
(
ªg_li°
)) * 4) - 4)); \

1915 
¨m_block_wrôeback_
##
	`wb
()

	)

1917 
	#¨m_block_addªss_¥ódju°_no
(
wb
) \

1918 
	`mùs_emô_addu
(
ªg_a2
, 
¨m_to_mùs_ªg
[
∫
], 
ªg_zîo
) \

1919 

	)

1920 
	#¨m_block_addªss_po°adju°_no
() \

1921 

	)

1922 
	#¨m_block_addªss_po°adju°_up
() \

1923 
	`mùs_emô_addiu
(
¨m_to_mùs_ªg
[
∫
], 
ªg_a2
, \

1924 ((
	`w‹d_bô_cou¡
(
ªg_li°
)) * 4)) \

1925 

	)

1926 
	#¨m_block_addªss_po°adju°_down
() \

1927 
	`mùs_emô_addiu
(
¨m_to_mùs_ªg
[
∫
], 
ªg_a2
, \

1928 -((
	`w‹d_bô_cou¡
(
ªg_li°
)) * 4)) \

1929 

	)

1930 
	#•röt_no
(
ac˚ss_ty≥
, 
¥e_›
, 
po°_›
, 
wb
) \

1931 

	)

1932 
	#•röt_yes
(
ac˚ss_ty≥
, 
¥e_›
, 
po°_›
, 
wb
) \

1933 
	`¥ötf
("sbit on %s %s %s %s\n", #access_type, #pre_op, #post_op, #wb) \

1934 

	)

1935 
	#¨m_block_mem‹y_lﬂd
() \

1936 
	`gíî©e_fun˘i⁄_ˇŒ_sw≠_dñay
(
execuã_Æig√d_lﬂd32
); \

1937 
	`gíî©e_°‹e_ªg
(
ªg_rv
, 
i
) \

1938 

	)

1939 
	#¨m_block_mem‹y_°‹e
() \

1940 
	`gíî©e_lﬂd_ªg_pc
(
ªg_a1
, 
i
, 8); \

1941 
	`gíî©e_fun˘i⁄_ˇŒ_sw≠_dñay
(
execuã_Æig√d_°‹e32
) \

1942 

	)

1943 
	#¨m_block_mem‹y_föÆ_lﬂd
() \

1944 
	`¨m_block_mem‹y_lﬂd
() \

1945 

	)

1946 
	#¨m_block_mem‹y_föÆ_°‹e
() \

1947 
	`gíî©e_lﬂd_pc
(
ªg_a2
, (
pc
 + 4)); \

1948 
	`mùs_emô_jÆ
(
	`mùs_absﬁuã_off£t
(
execuã_°‹e_u32
)); \

1949 
	`gíî©e_lﬂd_ªg
(
ªg_a1
, 
i
) \

1950 

	)

1951 
	#¨m_block_mem‹y_adju°_pc_°‹e
() \

1952 

	)

1953 
	#¨m_block_mem‹y_adju°_pc_lﬂd
() \

1954 if(
ªg_li°
 & 0x8000) \

1956 
	`gíî©e_mov
(
ªg_a0
, 
ªg_rv
); \

1957 
	`gíî©e_ödúe˘_bønch_¨m
(); \

1959 

	)

1960 
	#¨m_block_mem‹y_•_lﬂd
() \

1961 
	`mùs_emô_lw
(
¨m_to_mùs_ªg
[
i
], 
ªg_a1
, 
off£t
); \

1962 

	)

1963 
	#¨m_block_mem‹y_•_°‹e
() \

1965 
u32
 
°‹e_ªg
 = 
i
; \

1966 
	`check_lﬂd_ªg_pc
(
¨m_ªg_a0
, 
°‹e_ªg
, 8); \

1967 
	`mùs_emô_sw
(
¨m_to_mùs_ªg
[
°‹e_ªg
], 
ªg_a1
, 
off£t
); \

1969 

	)

1970 
	#¨m_block_mem‹y_•_adju°_pc_°‹e
() \

1971 

	)

1972 
	#¨m_block_mem‹y_•_adju°_pc_lﬂd
() \

1973 if(
ªg_li°
 & 0x8000) \

1975 
	`gíî©e_ödúe˘_bønch_¨m
(); \

1977 

	)

1978 
	#ﬁd_¨m_block_mem‹y
(
ac˚ss_ty≥
, 
¥e_›
, 
po°_›
, 
wb
, 
s_bô
) \

1980 
	`¨m_decode_block_å™s
(); \

1981 
u32
 
i
; \

1982 
u32
 
off£t
 = 0; \

1983 
u32
 
ba£_ªg
 = 
¨m_to_mùs_ªg
[
∫
]; \

1985 
¨m_block_addªss_¥ódju°_
##
	`¥e_›
(
wb
); \

1986 
¨m_block_addªss_po°adju°_
##
	`po°_›
(); \

1988 
•röt_
##
	`s_bô
(
ac˚ss_ty≥
, 
¥e_›
, 
po°_›
, 
wb
); \

1990 if((
∫
 =
REG_SP
Ë&& 
iwøm_°ack_›timize
) \

1992 
	`mùs_emô_™di
(
ªg_a1
, 
ªg_a2
, 0x7FFC); \

1993 
	`gíî©e_lﬂd_imm
(
ªg_a0
, ((
u32
)(
iwøm
 + 0x8000))); \

1994 
	`mùs_emô_addu
(
ªg_a1
,Ñeg_a1, 
ªg_a0
); \

1996 
i
 = 0; i < 16; i++) \

1998 if((
ªg_li°
 >> 
i
) & 0x01) \

2000 
cy˛e_cou¡
++; \

2001 
¨m_block_mem‹y_•_
##
	`ac˚ss_ty≥
(); \

2002 
off£t
 += 4; \

2006 
¨m_block_mem‹y_•_adju°_pc_
##
	`ac˚ss_ty≥
(); \

2010 
	`mùs_emô_ös
(
ªg_a2
, 
ªg_zîo
, 0, 2); \

2012 
i
 = 0; i < 16; i++) \

2014 if((
ªg_li°
 >> 
i
) & 0x01) \

2016 
cy˛e_cou¡
++; \

2017 
	`mùs_emô_addiu
(
ªg_a0
, 
ªg_a2
, 
off£t
); \

2018 if(
ªg_li°
 & ~((2 << 
i
) - 1)) \

2020 
¨m_block_mem‹y_
##
	`ac˚ss_ty≥
(); \

2021 
off£t
 += 4; \

2025 
¨m_block_mem‹y_föÆ_
##
	`ac˚ss_ty≥
(); \

2031 
¨m_block_mem‹y_adju°_pc_
##
	`ac˚ss_ty≥
(); \

2033 }

	)

2039 
	#¨m_sw≠
(
ty≥
) \

2041 
	`¨m_decode_sw≠
(); \

2042 
cy˛e_cou¡
 += 3; \

2043 
	`mùs_emô_jÆ
(
	`mùs_absﬁuã_off£t
(
execuã_lﬂd_
##
ty≥
)); \

2044 
	`gíî©e_lﬂd_ªg
(
ªg_a0
, 
∫
); \

2045 
	`gíî©e_mov
(
ªg_a2
, 
ªg_rv
); \

2046 
	`gíî©e_lﬂd_ªg
(
ªg_a0
, 
∫
); \

2047 
	`mùs_emô_jÆ
(
	`mùs_absﬁuã_off£t
(
execuã_°‹e_
##
ty≥
)); \

2048 
	`gíî©e_lﬂd_ªg
(
ªg_a1
, 
rm
); \

2049 
	`gíî©e_°‹e_ªg
(
ªg_a2
, 
rd
); \

2051 

	)

2052 
	#thumb_gíî©e_›_lﬂd_yes
(
_rs
) \

2053 
	`gíî©e_lﬂd_ªg
(
ªg_a1
, 
_rs
) \

2054 

	)

2055 
	#thumb_gíî©e_›_lﬂd_no
(
_rs
) \

2056 

	)

2057 
	#thumb_gíî©e_›_ªg
(
«me
, 
_rd
, 
_rs
, 
_∫
) \

2058 
gíî©e_›_
##
«me
##
	`_ªg
(
¨m_to_mùs_ªg
[
_rd
], \

2059 
¨m_to_mùs_ªg
[
_rs
],árm_to_mùs_ªg[
_∫
]) \

2060 

	)

2061 
	#thumb_gíî©e_›_imm
(
«me
, 
_rd
, 
_rs
, 
_∫
) \

2062 
gíî©e_›_
##
«me
##
	`_imm
(
¨m_to_mùs_ªg
[
_rd
],árm_to_mùs_ªg[
_rs
]) \

2063 

	)

2067 
	#thumb_d©a_¥oc
(
ty≥
, 
«me
, 
∫_ty≥
, 
_rd
, 
_rs
, 
_∫
) \

2069 
thumb_decode_
##
	`ty≥
(); \

2070 
thumb_gíî©e_›_
##
	`∫_ty≥
(
«me
, 
_rd
, 
_rs
, 
_∫
); \

2072 

	)

2073 
	#thumb_d©a_¥oc_ã°
(
ty≥
, 
«me
, 
∫_ty≥
, 
_rs
, 
_∫
) \

2075 
thumb_decode_
##
	`ty≥
(); \

2076 
thumb_gíî©e_›_
##
	`∫_ty≥
(
«me
, 0, 
_rs
, 
_∫
); \

2078 

	)

2079 
	#thumb_d©a_¥oc_u«ry
(
ty≥
, 
«me
, 
∫_ty≥
, 
_rd
, 
_∫
) \

2081 
thumb_decode_
##
	`ty≥
(); \

2082 
thumb_gíî©e_›_
##
	`∫_ty≥
(
«me
, 
_rd
, 0, 
_∫
); \

2084 

	)

2085 
	#check_°‹e_ªg_pc_thumb
(
_rd
) \

2086 if(
_rd
 =
REG_PC
) \

2088 
	`gíî©e_ödúe˘_bønch_cy˛e_upd©e
(
thumb
); \

2090 

	)

2091 
	#thumb_d©a_¥oc_hi
(
«me
) \

2093 
	`thumb_decode_húeg_›
(); \

2094 
u32
 
de°_rd
 = 
rd
; \

2095 
	`check_lﬂd_ªg_pc
(
¨m_ªg_a0
, 
rs
, 4); \

2096 
	`check_lﬂd_ªg_pc
(
¨m_ªg_a1
, 
rd
, 4); \

2097 
gíî©e_›_
##
«me
##
	`_ªg
(
¨m_to_mùs_ªg
[
de°_rd
],árm_to_mùs_ªg[
rd
], \

2098 
¨m_to_mùs_ªg
[
rs
]); \

2099 
	`check_°‹e_ªg_pc_thumb
(
de°_rd
); \

2101 

	)

2116 
	#thumb_d©a_¥oc_ã°_hi
(
«me
) \

2118 
	`thumb_decode_húeg_›
(); \

2119 
	`check_lﬂd_ªg_pc
(
¨m_ªg_a0
, 
rs
, 4); \

2120 
	`check_lﬂd_ªg_pc
(
¨m_ªg_a1
, 
rd
, 4); \

2121 
gíî©e_›_
##
«me
##
	`_ªg
(
ªg_ãmp
, 
¨m_to_mùs_ªg
[
rd
], \

2122 
¨m_to_mùs_ªg
[
rs
]); \

2124 

	)

2125 
	#thumb_d©a_¥oc_mov_hi
() \

2127 
	`thumb_decode_húeg_›
(); \

2128 
	`check_lﬂd_ªg_pc
(
¨m_ªg_a0
, 
rs
, 4); \

2129 
	`mùs_emô_addu
(
¨m_to_mùs_ªg
[
rd
],árm_to_mùs_ªg[
rs
], 
ªg_zîo
); \

2130 
	`check_°‹e_ªg_pc_thumb
(
rd
); \

2132 

	)

2133 
	#thumb_lﬂd_pc
(
_rd
) \

2135 
	`thumb_decode_imm
(); \

2136 
	`gíî©e_lﬂd_pc
(
¨m_to_mùs_ªg
[
_rd
], (((
pc
 & ~2Ë+ 4Ë+ (
imm
 * 4))); \

2138 

	)

2139 
	#thumb_lﬂd_•
(
_rd
) \

2141 
	`thumb_decode_imm
(); \

2142 
	`mùs_emô_addiu
(
¨m_to_mùs_ªg
[
_rd
], 
ªg_r13
, (
imm
 * 4)); \

2144 

	)

2145 
	#thumb_adju°_•
(
vÆue
) \

2147 
	`thumb_decode_add_•
(); \

2148 
	`mùs_emô_addiu
(
ªg_r13
,Ñeg_r13, (
vÆue
)); \

2150 

	)

2155 
	#thumb_gíî©e_shi·_imm
(
«me
) \

2156 if(
check_gíî©e_c_Êag
) \

2158 
gíî©e_shi·_imm_
##
«me
##
	`_Êags
(
rd
, 
rs
, 
imm
); \

2162 
gíî©e_shi·_imm_
##
«me
##
	`_no_Êags
(
rd
, 
rs
, 
imm
); \

2164 if(
rs
 !
rd
) \

2166 
	`mùs_emô_addu
(
¨m_to_mùs_ªg
[
rd
],árm_to_mùs_ªg[
rs
], 
ªg_zîo
); \

2168 

	)

2169 
	#thumb_gíî©e_shi·_ªg
(
«me
) \

2171 
u32
 
‹igöÆ_rd
 = 
rd
; \

2172 if(
check_gíî©e_c_Êag
) \

2174 
gíî©e_shi·_ªg_
##
«me
##
	`_Êags
(
rd
, 
rs
); \

2178 
gíî©e_shi·_ªg_
##
«me
##
	`_no_Êags
(
rd
, 
rs
); \

2180 
	`mùs_emô_addu
(
¨m_to_mùs_ªg
[
‹igöÆ_rd
], 
ªg_a0
, 
ªg_zîo
); \

2182 

	)

2183 
	#thumb_shi·
(
decode_ty≥
, 
›_ty≥
, 
vÆue_ty≥
) \

2185 
thumb_decode_
##
	`decode_ty≥
(); \

2186 
thumb_gíî©e_shi·_
##
	`vÆue_ty≥
(
›_ty≥
); \

2187 
	`gíî©e_›_logic_Êags
(
¨m_to_mùs_ªg
[
rd
]); \

2189 

	)

2192 
	#thumb_ac˚ss_mem‹y_lﬂd
(
mem_ty≥
, 
ªg_rd
) \

2193 
cy˛e_cou¡
 += 2; \

2194 
	`mùs_emô_jÆ
(
	`mùs_absﬁuã_off£t
(
execuã_lﬂd_
##
mem_ty≥
)); \

2195 
	`gíî©e_lﬂd_pc
(
ªg_a1
, (
pc
 + 4)); \

2196 
	`gíî©e_°‹e_ªg
(
ªg_rv
, 
ªg_rd
) \

2197 

	)

2198 
	#thumb_ac˚ss_mem‹y_°‹e
(
mem_ty≥
, 
ªg_rd
) \

2199 
cy˛e_cou¡
++; \

2200 
	`gíî©e_lﬂd_pc
(
ªg_a2
, (
pc
 + 2)); \

2201 
	`mùs_emô_jÆ
(
	`mùs_absﬁuã_off£t
(
execuã_°‹e_
##
mem_ty≥
)); \

2202 
	`gíî©e_lﬂd_ªg
(
ªg_a1
, 
ªg_rd
) \

2203 

	)

2204 
	#thumb_ac˚ss_mem‹y_gíî©e_addªss_pc_ªœtive
(
off£t
, 
ªg_rb
, \

2205 
ªg_ro
) \

2206 
	`gíî©e_lﬂd_pc
(
ªg_a0
, (
off£t
)) \

2207 

	)

2208 
	#thumb_ac˚ss_mem‹y_gíî©e_addªss_ªg_imm
(
off£t
, 
ªg_rb
, 
ªg_ro
) \

2209 
	`mùs_emô_addiu
(
ªg_a0
, 
¨m_to_mùs_ªg
[
ªg_rb
], (
off£t
)) \

2210 

	)

2211 
	#thumb_ac˚ss_mem‹y_gíî©e_addªss_ªg_ªg
(
off£t
, 
ªg_rb
, 
ªg_ro
) \

2212 
	`mùs_emô_addu
(
ªg_a0
, 
¨m_to_mùs_ªg
[
ªg_rb
],árm_to_mùs_ªg[
ªg_ro
]) \

2213 

	)

2214 
	#thumb_ac˚ss_mem‹y
(
ac˚ss_ty≥
, 
›_ty≥
, 
ªg_rd
, 
ªg_rb
, 
ªg_ro
, \

2215 
addªss_ty≥
, 
off£t
, 
mem_ty≥
) \

2217 
thumb_decode_
##
	`›_ty≥
(); \

2218 
thumb_ac˚ss_mem‹y_gíî©e_addªss_
##
	`addªss_ty≥
(
off£t
, 
ªg_rb
, \

2219 
ªg_ro
); \

2220 
thumb_ac˚ss_mem‹y_
##
	`ac˚ss_ty≥
(
mem_ty≥
, 
ªg_rd
); \

2222 

	)

2224 
	#thumb_block_addªss_¥ódju°_no
(
ba£_ªg
) \

2225 
	`mùs_emô_addu
(
ªg_a2
, 
¨m_to_mùs_ªg
[
ba£_ªg
], 
ªg_zîo
) \

2226 

	)

2227 
	#thumb_block_addªss_¥ódju°_up
(
ba£_ªg
) \

2228 
	`mùs_emô_addiu
(
ªg_a2
, 
¨m_to_mùs_ªg
[
ba£_ªg
], \

2229 (
bô_cou¡
[
ªg_li°
] * 4)); \

2230 
	`mùs_emô_addu
(
¨m_to_mùs_ªg
[
ba£_ªg
], 
ªg_a2
, 
ªg_zîo
) \

2231 

	)

2232 
	#thumb_block_addªss_¥ódju°_down
(
ba£_ªg
) \

2233 
	`mùs_emô_addiu
(
ªg_a2
, 
¨m_to_mùs_ªg
[
ba£_ªg
], \

2234 -(
bô_cou¡
[
ªg_li°
] * 4)); \

2235 
	`mùs_emô_addu
(
¨m_to_mùs_ªg
[
ba£_ªg
], 
ªg_a2
, 
ªg_zîo
) \

2236 

	)

2237 
	#thumb_block_addªss_¥ódju°_push_Ã
(
ba£_ªg
) \

2238 
	`mùs_emô_addiu
(
ªg_a2
, 
¨m_to_mùs_ªg
[
ba£_ªg
], \

2239 -((
bô_cou¡
[
ªg_li°
] + 1) * 4)); \

2240 
	`mùs_emô_addu
(
¨m_to_mùs_ªg
[
ba£_ªg
], 
ªg_a2
, 
ªg_zîo
) \

2241 

	)

2242 
	#thumb_block_addªss_po°adju°_no
(
ba£_ªg
) \

2243 

	)

2244 
	#thumb_block_addªss_po°adju°_up
(
ba£_ªg
) \

2245 
	`mùs_emô_addiu
(
¨m_to_mùs_ªg
[
ba£_ªg
], 
ªg_a2
, \

2246 (
bô_cou¡
[
ªg_li°
] * 4)) \

2247 

	)

2248 
	#thumb_block_addªss_po°adju°_down
(
ba£_ªg
) \

2249 
	`mùs_emô_addiu
(
¨m_to_mùs_ªg
[
ba£_ªg
], 
ªg_a2
, \

2250 -(
bô_cou¡
[
ªg_li°
] * 4)) \

2251 

	)

2252 
	#thumb_block_addªss_po°adju°_p›_pc
(
ba£_ªg
) \

2253 
	`mùs_emô_addiu
(
¨m_to_mùs_ªg
[
ba£_ªg
], 
ªg_a2
, \

2254 ((
bô_cou¡
[
ªg_li°
] * 4) + 4)) \

2255 

	)

2256 
	#thumb_block_addªss_po°adju°_push_Ã
(
ba£_ªg
) \

2257 

	)

2258 
	#thumb_block_mem‹y_lﬂd
() \

2259 
	`gíî©e_fun˘i⁄_ˇŒ_sw≠_dñay
(
execuã_Æig√d_lﬂd32
); \

2260 
	`gíî©e_°‹e_ªg
(
ªg_rv
, 
i
) \

2261 

	)

2262 
	#thumb_block_mem‹y_°‹e
() \

2263 
	`mùs_emô_jÆ
(
	`mùs_absﬁuã_off£t
(
execuã_Æig√d_°‹e32
)); \

2264 
	`gíî©e_lﬂd_ªg
(
ªg_a1
, 
i
) \

2265 

	)

2266 
	#thumb_block_mem‹y_föÆ_lﬂd
() \

2267 
	`thumb_block_mem‹y_lﬂd
() \

2268 

	)

2269 
	#thumb_block_mem‹y_föÆ_°‹e
() \

2270 
	`gíî©e_lﬂd_pc
(
ªg_a2
, (
pc
 + 2)); \

2271 
	`mùs_emô_jÆ
(
	`mùs_absﬁuã_off£t
(
execuã_°‹e_u32
)); \

2272 
	`gíî©e_lﬂd_ªg
(
ªg_a1
, 
i
) \

2273 

	)

2274 
	#thumb_block_mem‹y_föÆ_no
(
ac˚ss_ty≥
) \

2275 
thumb_block_mem‹y_föÆ_
##
	`ac˚ss_ty≥
() \

2276 

	)

2277 
	#thumb_block_mem‹y_föÆ_up
(
ac˚ss_ty≥
) \

2278 
thumb_block_mem‹y_föÆ_
##
	`ac˚ss_ty≥
() \

2279 

	)

2280 
	#thumb_block_mem‹y_föÆ_down
(
ac˚ss_ty≥
) \

2281 
thumb_block_mem‹y_föÆ_
##
	`ac˚ss_ty≥
() \

2282 

	)

2283 
	#thumb_block_mem‹y_föÆ_push_Ã
(
ac˚ss_ty≥
) \

2284 
thumb_block_mem‹y_
##
	`ac˚ss_ty≥
() \

2285 

	)

2286 
	#thumb_block_mem‹y_föÆ_p›_pc
(
ac˚ss_ty≥
) \

2287 
thumb_block_mem‹y_
##
	`ac˚ss_ty≥
() \

2288 

	)

2289 
	#thumb_block_mem‹y_exåa_no
() \

2290 

	)

2291 
	#thumb_block_mem‹y_exåa_up
() \

2292 

	)

2293 
	#thumb_block_mem‹y_exåa_down
() \

2294 

	)

2295 
	#thumb_block_mem‹y_exåa_push_Ã
() \

2296 
	`mùs_emô_addiu
(
ªg_a0
, 
ªg_a2
, (
bô_cou¡
[
ªg_li°
] * 4)); \

2297 
	`mùs_emô_jÆ
(
	`mùs_absﬁuã_off£t
(
execuã_Æig√d_°‹e32
)); \

2298 
	`gíî©e_lﬂd_ªg
(
ªg_a1
, 
REG_LR
) \

2299 

	)

2300 
	#thumb_block_mem‹y_exåa_p›_pc
() \

2301 
	`mùs_emô_jÆ
(
	`mùs_absﬁuã_off£t
(
execuã_Æig√d_lﬂd32
)); \

2302 
	`mùs_emô_addiu
(
ªg_a0
, 
ªg_a2
, (
bô_cou¡
[
ªg_li°
] * 4)); \

2303 
	`gíî©e_mov
(
ªg_a0
, 
ªg_rv
); \

2304 
	`gíî©e_ödúe˘_bønch_cy˛e_upd©e
(
thumb
) \

2305 

	)

2306 
	#thumb_block_mem‹y_•_lﬂd
() \

2307 
	`mùs_emô_lw
(
¨m_to_mùs_ªg
[
i
], 
ªg_a1
, 
off£t
) \

2308 

	)

2309 
	#thumb_block_mem‹y_•_°‹e
() \

2310 
	`mùs_emô_sw
(
¨m_to_mùs_ªg
[
i
], 
ªg_a1
, 
off£t
) \

2311 

	)

2312 
	#thumb_block_mem‹y_•_exåa_no
() \

2313 

	)

2314 
	#thumb_block_mem‹y_•_exåa_up
() \

2315 

	)

2316 
	#thumb_block_mem‹y_•_exåa_down
() \

2317 

	)

2318 
	#thumb_block_mem‹y_•_exåa_p›_pc
() \

2319 
	`mùs_emô_lw
(
ªg_a0
, 
ªg_a1
, (
bô_cou¡
[
ªg_li°
] * 4)); \

2320 
	`gíî©e_ödúe˘_bønch_cy˛e_upd©e
(
thumb
) \

2321 

	)

2322 
	#thumb_block_mem‹y_•_exåa_push_Ã
() \

2323 
	`mùs_emô_sw
(
ªg_r14
, 
ªg_a1
, (
bô_cou¡
[
ªg_li°
] * 4)) \

2324 

	)

2325 
	#thumb_block_mem‹y
(
ac˚ss_ty≥
, 
¥e_›
, 
po°_›
, 
ba£_ªg
) \

2327 
	`thumb_decode_æi°
(); \

2328 
u32
 
i
; \

2329 
u32
 
off£t
 = 0; \

2331 
thumb_block_addªss_¥ódju°_
##
	`¥e_›
(
ba£_ªg
); \

2332 
thumb_block_addªss_po°adju°_
##
	`po°_›
(
ba£_ªg
); \

2334 if((
ba£_ªg
 =
REG_SP
Ë&& 
iwøm_°ack_›timize
) \

2336 
	`mùs_emô_™di
(
ªg_a1
, 
ªg_a2
, 0x7FFC); \

2337 
	`gíî©e_lﬂd_imm
(
ªg_a0
, ((
u32
)(
iwøm
 + 0x8000))); \

2338 
	`gíî©e_add
(
ªg_a1
, 
ªg_a0
); \

2340 
i
 = 0; i < 8; i++) \

2342 if((
ªg_li°
 >> 
i
) & 0x01) \

2344 
cy˛e_cou¡
++; \

2345 
thumb_block_mem‹y_•_
##
	`ac˚ss_ty≥
(); \

2346 
off£t
 += 4; \

2350 
thumb_block_mem‹y_•_exåa_
##
	`po°_›
(); \

2354 
	`mùs_emô_ös
(
ªg_a2
, 
ªg_zîo
, 0, 2); \

2356 
i
 = 0; i < 8; i++) \

2358 if((
ªg_li°
 >> 
i
) & 0x01) \

2360 
cy˛e_cou¡
++; \

2361 
	`mùs_emô_addiu
(
ªg_a0
, 
ªg_a2
, 
off£t
); \

2362 if(
ªg_li°
 & ~((2 << 
i
) - 1)) \

2364 
thumb_block_mem‹y_
##
	`ac˚ss_ty≥
(); \

2365 
off£t
 += 4; \

2369 
thumb_block_mem‹y_föÆ_
##
	`po°_›
(
ac˚ss_ty≥
); \

2375 
thumb_block_mem‹y_exåa_
##
	`po°_›
(); \

2377 }

	)

2381 
	#thumb_c⁄dôi⁄Æ_bønch
(
c⁄dôi⁄
) \

2383 
c⁄dôi⁄_check_ty≥
 
c⁄dôi⁄_check
; \

2384 
gíî©e_c⁄dôi⁄_
##
	`c⁄dôi⁄
(); \

2385 
	`gíî©e_bønch_no_cy˛e_upd©e
( \

2386 
block_exôs
[
block_exô_posôi⁄
].
bønch_sour˚
, \

2387 
block_exôs
[
block_exô_posôi⁄
].
bønch_èrgë
); \

2388 
	`gíî©e_bønch_∑tch_c⁄dôi⁄Æ
(
back∑tch_addªss
, 
å™¶©i⁄_±r
); \

2389 
block_exô_posôi⁄
++; \

2391 

	)

2392 
	#¨m_c⁄dôi⁄Æ_block_hódî
() \

2393 
	`gíî©e_c⁄dôi⁄
(); \

2394 

	)

2395 
	#¨m_b
() \

2396 
	`gíî©e_bønch
() \

2397 

	)

2398 
	#¨m_bl
() \

2399 
	`gíî©e_lﬂd_pc
(
ªg_r14
, (
pc
 + 4)); \

2400 
	`gíî©e_bønch
() \

2401 

	)

2402 
	#¨m_bx
() \

2403 
	`¨m_decode_bønchx
(); \

2404 
	`gíî©e_lﬂd_ªg
(
ªg_a0
, 
∫
); \

2406 
	`gíî©e_ödúe˘_bønch_duÆ
() \

2407 

	)

2408 
	#¨m_swi
() \

2409 
	`gíî©e_swi_hÀ_h™dÀr
((
›code
 >> 16) & 0xFF); \

2410 
	`gíî©e_lﬂd_pc
(
ªg_a0
, (
pc
 + 4)); \

2411 
	`gíî©e_fun˘i⁄_ˇŒ_sw≠_dñay
(
execuã_swi
); \

2412 
	`gíî©e_bønch
() \

2413 

	)

2414 
	#thumb_b
() \

2415 
	`gíî©e_bønch_cy˛e_upd©e
( \

2416 
block_exôs
[
block_exô_posôi⁄
].
bønch_sour˚
, \

2417 
block_exôs
[
block_exô_posôi⁄
].
bønch_èrgë
); \

2418 
block_exô_posôi⁄
++ \

2419 

	)

2420 
	#thumb_bl
() \

2421 
	`gíî©e_lﬂd_pc
(
ªg_r14
, ((
pc
 + 2) | 0x01)); \

2422 
	`gíî©e_bønch_cy˛e_upd©e
( \

2423 
block_exôs
[
block_exô_posôi⁄
].
bønch_sour˚
, \

2424 
block_exôs
[
block_exô_posôi⁄
].
bønch_èrgë
); \

2425 
block_exô_posôi⁄
++ \

2426 

	)

2427 
	#thumb_blh
() \

2429 
	`thumb_decode_bønch
(); \

2430 
	`gíî©e_Æu_imm
(
addiu
, 
addu
, 
ªg_a0
, 
ªg_r14
, (
off£t
 * 2)); \

2431 
	`gíî©e_lﬂd_pc
(
ªg_r14
, ((
pc
 + 2) | 0x01)); \

2432 
	`gíî©e_ödúe˘_bønch_cy˛e_upd©e
(
duÆ
); \

2435 

	)

2436 
	#thumb_bx
() \

2438 
	`thumb_decode_húeg_›
(); \

2439 
	`gíî©e_lﬂd_ªg_pc
(
ªg_a0
, 
rs
, 4); \

2441 
	`gíî©e_ödúe˘_bønch_cy˛e_upd©e
(
duÆ
); \

2443 

	)

2444 
	#thumb_swi
() \

2445 
	`gíî©e_swi_hÀ_h™dÀr
(
›code
 & 0xFF); \

2446 
	`gíî©e_lﬂd_pc
(
ªg_a0
, (
pc
 + 2)); \

2447 
	`gíî©e_fun˘i⁄_ˇŒ_sw≠_dñay
(
execuã_swi
); \

2448 
	`gíî©e_bønch_cy˛e_upd©e
( \

2449 
block_exôs
[
block_exô_posôi⁄
].
bønch_sour˚
, \

2450 
block_exôs
[
block_exô_posôi⁄
].
bønch_èrgë
); \

2451 
block_exô_posôi⁄
++ \

2452 

	)

2453 
u8
 
	gswi_hÀ_h™dÀ
[256] =

2500 
	#gíî©e_swi_hÀ_h™dÀr
(
_swi_numbî
) \

2502 
u32
 
swi_numbî
 = 
_swi_numbî
; \

2503 if(
swi_hÀ_h™dÀ
[
swi_numbî
]) \

2506 if(
swi_numbî
 == 0x06) \

2508 
	`mùs_emô_div
(
ªg_r0
, 
ªg_r1
); \

2509 
	`mùs_emô_mÊo
(
ªg_r0
); \

2510 
	`mùs_emô_mfhi
(
ªg_r1
); \

2511 
	`mùs_emô_§a
(
ªg_a0
, 
ªg_r0
, 31); \

2512 
	`mùs_emô_x‹
(
ªg_r3
, 
ªg_r0
, 
ªg_a0
); \

2513 
	`mùs_emô_subu
(
ªg_r3
,Ñeg_r3, 
ªg_a0
); \

2518 

	)

2519 
	#gíî©e_å™¶©i⁄_g©e
(
ty≥
) \

2520 
	`gíî©e_lﬂd_pc
(
ªg_a0
, 
pc
); \

2521 
	`gíî©e_ödúe˘_bønch_no_cy˛e_upd©e
(
ty≥
) \

2522 

	)

2523 
	#gíî©e_°ï_debug
() \

2524 
	`gíî©e_lﬂd_imm
(
ªg_a0
, 
pc
); \

2525 
	`gíî©e_fun˘i⁄_ˇŒ
(
°ï_debug_mùs
) \

2526 

	)

2527 
	#gíî©e_upd©e_pc_ªg
() \

2528 
	`gíî©e_lﬂd_pc
(
ªg_a0
, 
pc
); \

2529 
	`mùs_emô_sw
(
ªg_a0
, 
ªg_ba£
, (
REG_PC
 * 4)) \

2530 

	)

	@sound.c

21 
	~"comm⁄.h
"

22 
	~<SDL.h
>

23 
u32
 
	gglobÆ_íabÀ_audio
 = 1;

25 
dúe˘_sound_°ru˘
 
	gdúe˘_sound_ch™√l
[2];

26 
gbc_sound_°ru˘
 
	ggbc_sound_ch™√l
[4];

28 #i‡
deföed
(
GP2X_BUILD
Ë|| deföed(
TAVI_BUILD
)

29 
u32
 
	gsound_‰equícy
 = 44100;

31 
u32
 
	gsound_‰equícy
 = 44100;

34 
SDL_AudioS≥c
 
	gsound_£âögs
;

35 
SDL_muãx
 *
	gsound_muãx
;

36 
SDL_c⁄d
 *
	gsound_cv
;

38 #i‚de‡
PSP_BUILD


39 
u32
 
	gaudio_buf„r_size_numbî
 = 7;

41 
u32
 
	gaudio_buf„r_size_numbî
 = 1;

44 
u32
 
	gaudio_buf„r_size
;

45 
u32
 
	gsound_⁄
 = 0;

46 
s16
 
	gsound_buf„r
[
BUFFER_SIZE
];

47 
u32
 
	gsound_buf„r_ba£
 = 0;

49 
u32
 
	gsound_œ°_˝u_ticks
 = 0;

50 
fixed16_16
 
	ggbc_sound_tick_°ï
;

54 
	#sound_timî_queue
(
size
, 
vÆue
) \

55 *((
s
##
size
 *)(
ds
->
fifo
 + ds->
fifo_t›
)Ë
vÆue
; \

56 
ds
->
fifo_t›
 = (ds->fifo_top + 1) % 32; \

57 

	)

58 
	$sound_timî_queue8
(
u32
 
ch™√l
, 
u8
 
vÆue
)

60 
dúe˘_sound_°ru˘
 *
ds
 = 
dúe˘_sound_ch™√l
 + 
ch™√l
;

61 
	`sound_timî_queue
(8, 
vÆue
);

62 
	}
}

64 
	$sound_timî_queue16
(
u32
 
ch™√l
, 
u16
 
vÆue
)

66 
dúe˘_sound_°ru˘
 *
ds
 = 
dúe˘_sound_ch™√l
 + 
ch™√l
;

67 
	`sound_timî_queue
(8, 
vÆue
 & 0xFF);

68 
	`sound_timî_queue
(8, 
vÆue
 >> 8);

69 
	}
}

71 
	$sound_timî_queue32
(
u32
 
ch™√l
, u32 
vÆue
)

73 
dúe˘_sound_°ru˘
 *
ds
 = 
dúe˘_sound_ch™√l
 + 
ch™√l
;

75 
	`sound_timî_queue
(8, 
vÆue
 & 0xFF);

76 
	`sound_timî_queue
(8, (
vÆue
 >> 8) & 0xFF);

77 
	`sound_timî_queue
(8, (
vÆue
 >> 16) & 0xFF);

78 
	`sound_timî_queue
(8, 
vÆue
 >> 24);

79 
	}
}

86 
	#ªndî_ßm∂e_nuŒ
() \

87 

	)

88 
	#ªndî_ßm∂e_À·
() \

89 
sound_buf„r
[
buf„r_ödex
] +
cuºít_ßm∂e
 + \

90 
	`Â16_16_to_u32
((
√xt_ßm∂e
 - 
cuºít_ßm∂e
Ë* 
fifo_‰a˘i⁄Æ
) \

91 

	)

92 
	#ªndî_ßm∂e_right
() \

93 
sound_buf„r
[
buf„r_ödex
 + 1] +
cuºít_ßm∂e
 + \

94 
	`Â16_16_to_u32
((
√xt_ßm∂e
 - 
cuºít_ßm∂e
Ë* 
fifo_‰a˘i⁄Æ
) \

95 

	)

96 
	#ªndî_ßm∂e_bŸh
() \

97 
de°_ßm∂e
 = 
cuºít_ßm∂e
 + \

98 
	`Â16_16_to_u32
((
√xt_ßm∂e
 - 
cuºít_ßm∂e
Ë* 
fifo_‰a˘i⁄Æ
); \

99 
sound_buf„r
[
buf„r_ödex
] +
de°_ßm∂e
; \

100 
sound_buf„r
[
buf„r_ödex
 + 1] +
de°_ßm∂e
 \

101 

	)

102 
	#ªndî_ßm∂es
(
ty≥
) \

103 
fifo_‰a˘i⁄Æ
 <= 0xFFFF) \

105 
ªndî_ßm∂e_
##
	`ty≥
(); \

106 
fifo_‰a˘i⁄Æ
 +
‰equícy_°ï
; \

107 
buf„r_ödex
 = (buf„r_ödex + 2Ë% 
BUFFER_SIZE
; \

109 

	)

110 
	$sound_timî
(
fixed16_16
 
‰equícy_°ï
, 
u32
 
ch™√l
)

112 
dúe˘_sound_°ru˘
 *
ds
 = 
dúe˘_sound_ch™√l
 + 
ch™√l
;

114 
fixed16_16
 
fifo_‰a˘i⁄Æ
 = 
ds
->fifo_fractional;

115 
u32
 
buf„r_ödex
 = 
ds
->buffer_index;

116 
s16
 
cuºít_ßm∂e
, 
√xt_ßm∂e
, 
de°_ßm∂e
;

118 
cuºít_ßm∂e
 = 
ds
->
fifo
[ds->
fifo_ba£
] << 4;

119 
ds
->
fifo_ba£
 = (ds->fifo_base + 1) % 32;

120 
√xt_ßm∂e
 = 
ds
->
fifo
[ds->
fifo_ba£
] << 4;

122 if(
sound_⁄
 == 1)

124 if(
ds
->
vﬁume
 =
DIRECT_SOUND_VOLUME_50
)

126 
cuºít_ßm∂e
 >>= 1;

127 
√xt_ßm∂e
 >>= 1;

130 
ds
->
°©us
)

132 
DIRECT_SOUND_INACTIVE
:

133 
	`ªndî_ßm∂es
(
nuŒ
);

136 
DIRECT_SOUND_RIGHT
:

137 
	`ªndî_ßm∂es
(
right
);

140 
DIRECT_SOUND_LEFT
:

141 
	`ªndî_ßm∂es
(
À·
);

144 
DIRECT_SOUND_LEFTRIGHT
:

145 
	`ªndî_ßm∂es
(
bŸh
);

151 
	`ªndî_ßm∂es
(
nuŒ
);

154 
ds
->
buf„r_ödex
 = buffer_index;

155 
ds
->
fifo_‰a˘i⁄Æ
 = 
	`Â16_16_‰a˘i⁄Æ_∑π
(fifo_fractional);

157 if(((
ds
->
fifo_t›
 - ds->
fifo_ba£
) % 32) <= 16)

159 if(
dma
[1].
dúe˘_sound_ch™√l
 =
ch™√l
)

160 
	`dma_å™s„r
(
dma
 + 1);

162 if(
dma
[2].
dúe˘_sound_ch™√l
 =
ch™√l
)

163 
	`dma_å™s„r
(
dma
 + 2);

165 
	}
}

167 
	$sound_ª£t_fifo
(
u32
 
ch™√l
)

169 
dúe˘_sound_°ru˘
 *
ds
 = 
dúe˘_sound_ch™√l
;

171 
	`mem£t
(
ds
->
fifo
, 0, 32);

172 
	}
}

184 
s8
 
	gsqu¨e_∑âîn_duty
[4][8] =

192 
s8
 
	gwave_ßm∂es
[64];

194 
u32
 
	gnoi£_èbÀ15
[1024];

195 
u32
 
	gnoi£_èbÀ7
[4];

197 
u32
 
	ggbc_sound_ma°î_vﬁume_èbÀ
[4] = { 1, 2, 4, 0 };

199 
u32
 
	ggbc_sound_ch™√l_vﬁume_èbÀ
[8] =

201 
fixed_div
(0, 7, 12),

202 
fixed_div
(1, 7, 12),

203 
fixed_div
(2, 7, 12),

204 
fixed_div
(3, 7, 12),

205 
fixed_div
(4, 7, 12),

206 
fixed_div
(5, 7, 12),

207 
fixed_div
(6, 7, 12),

208 
fixed_div
(7, 7, 12)

211 
u32
 
	ggbc_sound_ívñ›e_vﬁume_èbÀ
[16] =

213 
fixed_div
(0, 15, 14),

214 
fixed_div
(1, 15, 14),

215 
fixed_div
(2, 15, 14),

216 
fixed_div
(3, 15, 14),

217 
fixed_div
(4, 15, 14),

218 
fixed_div
(5, 15, 14),

219 
fixed_div
(6, 15, 14),

220 
fixed_div
(7, 15, 14),

221 
fixed_div
(8, 15, 14),

222 
fixed_div
(9, 15, 14),

223 
fixed_div
(10, 15, 14),

224 
fixed_div
(11, 15, 14),

225 
fixed_div
(12, 15, 14),

226 
fixed_div
(13, 15, 14),

227 
fixed_div
(14, 15, 14),

228 
fixed_div
(15, 15, 14)

231 
u32
 
	ggbc_sound_buf„r_ödex
 = 0;

232 
u32
 
	ggbc_sound_œ°_˝u_ticks
 = 0;

233 
u32
 
	ggbc_sound_∑πül_ticks
 = 0;

235 
u32
 
	ggbc_sound_ma°î_vﬁume_À·
;

236 
u32
 
	ggbc_sound_ma°î_vﬁume_right
;

237 
u32
 
	ggbc_sound_ma°î_vﬁume
;

239 
	#upd©e_vﬁume_ch™√l_ívñ›e
(
ch™√l
) \

240 
vﬁume_
##
ch™√l
 = 
gbc_sound_ívñ›e_vﬁume_èbÀ
[
ívñ›e_vﬁume
] * \

241 
gbc_sound_ch™√l_vﬁume_èbÀ
[
gbc_sound_ma°î_vﬁume_
##
ch™√l
] * \

242 
gbc_sound_ma°î_vﬁume_èbÀ
[
gbc_sound_ma°î_vﬁume
] \

243 

	)

244 
	#upd©e_vﬁume_ch™√l_n€nvñ›e
(
ch™√l
) \

245 
vﬁume_
##
ch™√l
 = 
gs
->
wave_vﬁume
 * \

246 
gbc_sound_ch™√l_vﬁume_èbÀ
[
gbc_sound_ma°î_vﬁume_
##
ch™√l
] * \

247 
gbc_sound_ma°î_vﬁume_èbÀ
[
gbc_sound_ma°î_vﬁume
] \

248 

	)

249 
	#upd©e_vﬁume
(
ty≥
) \

250 
upd©e_vﬁume_ch™√l_
##
	`ty≥
(
À·
); \

251 
upd©e_vﬁume_ch™√l_
##
	`ty≥
(
right
) \

252 

	)

253 
	#upd©e_t⁄e_swìp
() \

254 if(
gs
->
swìp_°©us
) \

256 
u32
 
swìp_ticks
 = 
gs
->sweep_ticks - 1; \

258 if(
swìp_ticks
 == 0) \

260 
u32
 
øã
 = 
gs
->rate; \

262 if(
gs
->
swìp_dúe˘i⁄
) \

263 
øã
 =Ñ©ê- (øã >> 
gs
->
swìp_shi·
); \

265 
øã
 =Ñ©ê+ (øã >> 
gs
->
swìp_shi·
); \

267 if(
øã
 > 2048) \

268 
øã
 = 2048; \

270 
‰equícy_°ï
 = 
	`Êﬂt_to_Â16_16
(((131072.0 / (2048 - 
øã
)) * 8.0) / \

271 
sound_‰equícy
); \

273 
gs
->
‰equícy_°ï
 = frequency_step; \

274 
gs
->
øã
 =Ñate; \

276 
swìp_ticks
 = 
gs
->
swìp_öôül_ticks
; \

278 
gs
->
swìp_ticks
 = sweep_ticks; \

280 

	)

281 
	#upd©e_t⁄e_noswìp
() \

282 

	)

283 
	#upd©e_t⁄e_ívñ›e
() \

284 if(
gs
->
ívñ›e_°©us
) \

286 
u32
 
ívñ›e_ticks
 = 
gs
->envelope_ticks - 1; \

287 
ívñ›e_vﬁume
 = 
gs
->envelope_volume; \

289 if(
ívñ›e_ticks
 == 0) \

291 if(
gs
->
ívñ›e_dúe˘i⁄
) \

293 if(
ívñ›e_vﬁume
 != 15) \

294 
ívñ›e_vﬁume
 = 
gs
->envelope_volume + 1; \

298 if(
ívñ›e_vﬁume
 != 0) \

299 
ívñ›e_vﬁume
 = 
gs
->envelope_volume - 1; \

302 
	`upd©e_vﬁume
(
ívñ›e
); \

304 
gs
->
ívñ›e_vﬁume
 =Énvelope_volume; \

305 
gs
->
ívñ›e_ticks
 = gs->
ívñ›e_öôül_ticks
; \

309 
gs
->
ívñ›e_ticks
 =Énvelope_ticks; \

312 

	)

313 
	#upd©e_t⁄e_n€nvñ›e
() \

314 

	)

315 
	#gbc_sound_synchr⁄ize
() \

316 ((
gbc_sound_buf„r_ödex
 - 
sound_buf„r_ba£
Ë% 
BUFFER_SIZE
) > \

317 (
audio_buf„r_size
 * 2)) \

319 
	`SDL_C⁄dWaô
(
sound_cv
, 
sound_muãx
); \

321 

	)

322 
	#upd©e_t⁄e_cou¡îs
(
ívñ›e_›
, 
swìp_›
) \

323 
tick_cou¡î
 +
gbc_sound_tick_°ï
; \

324 if(
tick_cou¡î
 > 0xFFFF) \

326 if(
gs
->
Àngth_°©us
) \

328 
u32
 
Àngth_ticks
 = 
gs
->length_ticks - 1; \

329 
gs
->
Àngth_ticks
 =Üength_ticks; \

331 if(
Àngth_ticks
 == 0) \

333 
gs
->
a˘ive_Êag
 = 0; \

338 
upd©e_t⁄e_
##
	`ívñ›e_›
(); \

339 
upd©e_t⁄e_
##
	`swìp_›
(); \

341 
tick_cou¡î
 &= 0xFFFF; \

343 

	)

344 
	#gbc_sound_ªndî_ßm∂e_right
() \

345 
sound_buf„r
[
buf„r_ödex
 + 1] +(
cuºít_ßm∂e
 * 
vﬁume_right
) >> 22 \

346 

	)

347 
	#gbc_sound_ªndî_ßm∂e_À·
() \

348 
sound_buf„r
[
buf„r_ödex
] +(
cuºít_ßm∂e
 * 
vﬁume_À·
) >> 22 \

349 

	)

350 
	#gbc_sound_ªndî_ßm∂e_bŸh
() \

351 
	`gbc_sound_ªndî_ßm∂e_right
(); \

352 
	`gbc_sound_ªndî_ßm∂e_À·
() \

353 

	)

354 
	#gbc_sound_ªndî_ßm∂es
(
ty≥
, 
ßm∂e_Àngth
, 
ívñ›e_›
, 
swìp_›
) \

355 
i
 = 0; i < 
buf„r_ticks
; i++) \

357 
cuºít_ßm∂e
 = \

358 
ßm∂e_d©a
[
	`Â16_16_to_u32
(
ßm∂e_ödex
Ë% 
ßm∂e_Àngth
]; \

359 
gbc_sound_ªndî_ßm∂e_
##
	`ty≥
(); \

361 
ßm∂e_ödex
 +
‰equícy_°ï
; \

362 
buf„r_ödex
 = (buf„r_ödex + 2Ë% 
BUFFER_SIZE
; \

364 
	`upd©e_t⁄e_cou¡îs
(
ívñ›e_›
, 
swìp_›
); \

366 

	)

367 
	#gbc_noi£_wøp_fuŒ
 32767

	)

369 
	#gbc_noi£_wøp_hÆf
 126

	)

371 
	#gë_noi£_ßm∂e_fuŒ
() \

372 
cuºít_ßm∂e
 = \

373 ((
s32
)(
noi£_èbÀ15
[
	`Â16_16_to_u32
(
ßm∂e_ödex
) >> 5] << \

374 (
	`Â16_16_to_u32
(
ßm∂e_ödex
) & 0x1F)) >> 31) & 0x0F \

375 

	)

376 
	#gë_noi£_ßm∂e_hÆf
() \

377 
cuºít_ßm∂e
 = \

378 ((
s32
)(
noi£_èbÀ7
[
	`Â16_16_to_u32
(
ßm∂e_ödex
) >> 5] << \

379 (
	`Â16_16_to_u32
(
ßm∂e_ödex
) & 0x1F)) >> 31) & 0x0F \

380 

	)

381 
	#gbc_sound_ªndî_noi£
(
ty≥
, 
noi£_ty≥
, 
ívñ›e_›
, 
swìp_›
) \

382 
i
 = 0; i < 
buf„r_ticks
; i++) \

384 
gë_noi£_ßm∂e_
##
	`noi£_ty≥
(); \

385 
gbc_sound_ªndî_ßm∂e_
##
	`ty≥
(); \

387 
ßm∂e_ödex
 +
‰equícy_°ï
; \

389 if(
ßm∂e_ödex
 >
	`u32_to_Â16_16
(
gbc_noi£_wøp_
##
noi£_ty≥
)) \

390 
ßm∂e_ödex
 -
	`u32_to_Â16_16
(
gbc_noi£_wøp_
##
noi£_ty≥
); \

392 
buf„r_ödex
 = (buf„r_ödex + 2Ë% 
BUFFER_SIZE
; \

393 
	`upd©e_t⁄e_cou¡îs
(
ívñ›e_›
, 
swìp_›
); \

395 

	)

396 
	#gbc_sound_ªndî_ch™√l
(
ty≥
, 
ßm∂e_Àngth
, 
ívñ›e_›
, 
swìp_›
) \

397 
buf„r_ödex
 = 
gbc_sound_buf„r_ödex
; \

398 
ßm∂e_ödex
 = 
gs
->sample_index; \

399 
‰equícy_°ï
 = 
gs
->frequency_step; \

400 
tick_cou¡î
 = 
gs
->tick_counter; \

402 
	`upd©e_vﬁume
(
ívñ›e_›
); \

404 
gs
->
°©us
) \

406 
GBC_SOUND_INACTIVE
: \

409 
GBC_SOUND_LEFT
: \

410 
gbc_sound_ªndî_
##
	`ty≥
(
À·
, 
ßm∂e_Àngth
, 
ívñ›e_›
, 
swìp_›
); \

413 
GBC_SOUND_RIGHT
: \

414 
gbc_sound_ªndî_
##
	`ty≥
(
right
, 
ßm∂e_Àngth
, 
ívñ›e_›
, 
swìp_›
); \

417 
GBC_SOUND_LEFTRIGHT
: \

418 
gbc_sound_ªndî_
##
	`ty≥
(
bŸh
, 
ßm∂e_Àngth
, 
ívñ›e_›
, 
swìp_›
); \

422 
gs
->
ßm∂e_ödex
 = sample_index; \

423 
gs
->
tick_cou¡î
 =Åick_counter; \

424 

	)

425 
	#gbc_sound_lﬂd_wave_øm
(
b™k
) \

426 
wave_b™k
 = 
wave_ßm∂es
 + (
b™k
 * 32); \

427 
i
 = 0, 
i2
 = 0; i < 16; i++, i2 += 2) \

429 
cuºít_ßm∂e
 = 
wave_øm
[
i
]; \

430 
wave_b™k
[
i2
] = (((
cuºít_ßm∂e
 >> 4) & 0x0F) - 8); \

431 
wave_b™k
[
i2
 + 1] = ((
cuºít_ßm∂e
 & 0x0F) - 8); \

433 

	)

434 
	$synchr⁄ize_sound
()

436 
	`SDL_LockMuãx
(
sound_muãx
);

438 
	`gbc_sound_synchr⁄ize
();

440 
	`SDL_U∆ockMuãx
(
sound_muãx
);

441 
	}
}

443 
	$upd©e_gbc_sound
(
u32
 
˝u_ticks
)

445 
fixed16_16
 
buf„r_ticks
 = 
	`Êﬂt_to_Â16_16
((()(
˝u_ticks
 -

446 
gbc_sound_œ°_˝u_ticks
Ë* 
sound_‰equícy
) / 16777216.0);

447 
u32
 
i
, 
i2
;

448 
gbc_sound_°ru˘
 *
gs
 = 
gbc_sound_ch™√l
;

449 
fixed16_16
 
ßm∂e_ödex
, 
‰equícy_°ï
;

450 
fixed16_16
 
tick_cou¡î
;

451 
u32
 
buf„r_ödex
;

452 
s32
 
vﬁume_À·
, 
vﬁume_right
;

453 
u32
 
ívñ›e_vﬁume
;

454 
s32
 
cuºít_ßm∂e
;

455 
u32
 
sound_°©us
 = 
	`addªss16
(
io_ªgi°îs
, 0x84) & 0xFFF0;

456 
s8
 *
ßm∂e_d©a
;

457 
s8
 *
wave_b™k
;

458 
u8
 *
wave_øm
 = ((u8 *)
io_ªgi°îs
) + 0x90;

460 
gbc_sound_∑πül_ticks
 +
	`Â16_16_‰a˘i⁄Æ_∑π
(
buf„r_ticks
);

461 
buf„r_ticks
 = 
	`Â16_16_to_u32
(buffer_ticks);

463 if(
gbc_sound_∑πül_ticks
 > 0xFFFF)

465 
buf„r_ticks
 += 1;

466 
gbc_sound_∑πül_ticks
 &= 0xFFFF;

469 
	`SDL_LockMuãx
(
sound_muãx
);

470 if(
synchr⁄ize_Êag
)

472 if(((
gbc_sound_buf„r_ödex
 - 
sound_buf„r_ba£
Ë% 
BUFFER_SIZE
) >

473 (
audio_buf„r_size
 * 3 / 2))

475 ((
gbc_sound_buf„r_ödex
 - 
sound_buf„r_ba£
Ë% 
BUFFER_SIZE
) >

476 (
audio_buf„r_size
 * 3 / 2))

478 
	`SDL_C⁄dWaô
(
sound_cv
, 
sound_muãx
);

481 #ifde‡
PSP_BUILD


482 if(
cuºít_‰ameskù_ty≥
 =
auto_‰ameskù
)

484 
	`s˚Di•œyWaôVbœnkSèπ
();

485 
ªÆ_‰ame_cou¡
 = 0;

486 
vútuÆ_‰ame_cou¡
 = 0;

511 if(
sound_⁄
 == 1)

513 
gs
 = 
gbc_sound_ch™√l
 + 0;

514 if(
gs
->
a˘ive_Êag
)

516 
sound_°©us
 |= 0x01;

517 
ßm∂e_d©a
 = 
gs
->sample_data;

518 
ívñ›e_vﬁume
 = 
gs
->envelope_volume;

519 
	`gbc_sound_ªndî_ch™√l
(
ßm∂es
, 8, 
ívñ›e
, 
swìp
);

522 
gs
 = 
gbc_sound_ch™√l
 + 1;

523 if(
gs
->
a˘ive_Êag
)

525 
sound_°©us
 |= 0x02;

526 
ßm∂e_d©a
 = 
gs
->sample_data;

527 
ívñ›e_vﬁume
 = 
gs
->envelope_volume;

528 
	`gbc_sound_ªndî_ch™√l
(
ßm∂es
, 8, 
ívñ›e
, 
noswìp
);

531 
gs
 = 
gbc_sound_ch™√l
 + 2;

532 if(
gbc_sound_wave_upd©e
)

534 if(
gs
->
wave_b™k
 == 1)

536 
	`gbc_sound_lﬂd_wave_øm
(1);

540 
	`gbc_sound_lﬂd_wave_øm
(0);

543 
gbc_sound_wave_upd©e
 = 0;

546 if((
gs
->
a˘ive_Êag
Ë&& (gs->
ma°î_íabÀ
))

548 
sound_°©us
 |= 0x04;

549 
ßm∂e_d©a
 = 
wave_ßm∂es
;

550 if(
gs
->
wave_ty≥
 == 0)

552 if(
gs
->
wave_b™k
 == 1)

553 
ßm∂e_d©a
 += 32;

555 
	`gbc_sound_ªndî_ch™√l
(
ßm∂es
, 32, 
n€nvñ›e
, 
noswìp
);

559 
	`gbc_sound_ªndî_ch™√l
(
ßm∂es
, 64, 
n€nvñ›e
, 
noswìp
);

563 
gs
 = 
gbc_sound_ch™√l
 + 3;

564 if(
gs
->
a˘ive_Êag
)

566 
sound_°©us
 |= 0x08;

567 
ívñ›e_vﬁume
 = 
gs
->envelope_volume;

569 if(
gs
->
noi£_ty≥
 == 1)

571 
	`gbc_sound_ªndî_ch™√l
(
noi£
, 
hÆf
, 
ívñ›e
, 
noswìp
);

575 
	`gbc_sound_ªndî_ch™√l
(
noi£
, 
fuŒ
, 
ívñ›e
, 
noswìp
);

580 
	`addªss16
(
io_ªgi°îs
, 0x84Ë
sound_°©us
;

582 
	`SDL_C⁄dSig«l
(
sound_cv
);

584 
	`SDL_U∆ockMuãx
(
sound_muãx
);

586 
gbc_sound_œ°_˝u_ticks
 = 
˝u_ticks
;

587 
gbc_sound_buf„r_ödex
 =

588 (
gbc_sound_buf„r_ödex
 + (
buf„r_ticks
 * 2)Ë% 
BUFFER_SIZE
;

589 
	}
}

591 
	#sound_c›y_n‹mÆ
() \

592 
cuºít_ßm∂e
 = 
sour˚
[
i
] \

593 

	)

594 
	#sound_c›y
(
sour˚_off£t
, 
Àngth
, 
ªndî_ty≥
) \

595 
_Àngth
 = (
Àngth
) / 2; \

596 
sour˚
 = (
s16
 *)(
sound_buf„r
 + 
sour˚_off£t
); \

597 
i
 = 0; i < 
_Àngth
; i++) \

599 
sound_c›y_
##
	`ªndî_ty≥
(); \

600 if(
cuºít_ßm∂e
 > 2047) \

601 
cuºít_ßm∂e
 = 2047; \

602 if(
cuºít_ßm∂e
 < -2048) \

603 
cuºít_ßm∂e
 = -2048; \

605 
°ªam_ba£
[
i
] = 
cuºít_ßm∂e
 << 4; \

606 
sour˚
[
i
] = 0; \

608 

	)

609 
	#sound_c›y_nuŒ
(
sour˚_off£t
, 
Àngth
) \

610 
_Àngth
 = (
Àngth
) / 2; \

611 
sour˚
 = (
s16
 *)(
sound_buf„r
 + 
sour˚_off£t
); \

612 
i
 = 0; i < 
_Àngth
; i++) \

614 
°ªam_ba£
[
i
] = 0; \

615 
sour˚
[
i
] = 0; \

617 

	)

619 
	$sound_ˇŒback
(*
u£rd©a
, 
Uöt8
 *
°ªam
, 
Àngth
)

621 
u32
 
ßm∂e_Àngth
 = 
Àngth
 / 2;

622 
u32
 
_Àngth
;

623 
u32
 
i
;

624 
s16
 *
°ªam_ba£
 = (s16 *)
°ªam
;

625 
s16
 *
sour˚
;

626 
s32
 
cuºít_ßm∂e
;

628 
	`SDL_LockMuãx
(
sound_muãx
);

630 ((
gbc_sound_buf„r_ödex
 - 
sound_buf„r_ba£
Ë% 
BUFFER_SIZE
) <

631 
Àngth
)

633 
	`SDL_C⁄dWaô
(
sound_cv
, 
sound_muãx
);

636 if(
globÆ_íabÀ_audio
)

638 if((
sound_buf„r_ba£
 + 
ßm∂e_Àngth
Ë>
BUFFER_SIZE
)

640 
u32
 
∑πül_Àngth
 = (
BUFFER_SIZE
 - 
sound_buf„r_ba£
) * 2;

641 
	`sound_c›y
(
sound_buf„r_ba£
, 
∑πül_Àngth
, 
n‹mÆ
);

642 
sour˚
 = (
s16
 *)
sound_buf„r
;

643 
	`sound_c›y
(0, 
Àngth
 - 
∑πül_Àngth
, 
n‹mÆ
);

644 
sound_buf„r_ba£
 = (
Àngth
 - 
∑πül_Àngth
) / 2;

648 
	`sound_c›y
(
sound_buf„r_ba£
, 
Àngth
, 
n‹mÆ
);

649 
sound_buf„r_ba£
 +
ßm∂e_Àngth
;

654 if((
sound_buf„r_ba£
 + 
ßm∂e_Àngth
Ë>
BUFFER_SIZE
)

656 
u32
 
∑πül_Àngth
 = (
BUFFER_SIZE
 - 
sound_buf„r_ba£
) * 2;

657 
	`sound_c›y_nuŒ
(
sound_buf„r_ba£
, 
∑πül_Àngth
);

658 
sour˚
 = (
s16
 *)
sound_buf„r
;

659 
	`sound_c›y
(0, 
Àngth
 - 
∑πül_Àngth
, 
n‹mÆ
);

660 
sound_buf„r_ba£
 = (
Àngth
 - 
∑πül_Àngth
) / 2;

664 
	`sound_c›y_nuŒ
(
sound_buf„r_ba£
, 
Àngth
);

665 
sound_buf„r_ba£
 +
ßm∂e_Àngth
;

669 
	`SDL_C⁄dSig«l
(
sound_cv
);

671 
	`SDL_U∆ockMuãx
(
sound_muãx
);

672 
	}
}

680 
	$öô_noi£_èbÀ
(
u32
 *
èbÀ
, u32 
≥riod
, u32 
bô_Àngth
)

682 
u32
 
shi·_ªgi°î
 = 0xFF;

683 
u32
 
mask
 = ~(1 << 
bô_Àngth
);

684 
s32
 
èbÀ_pos
, 
bô_pos
;

685 
u32
 
cuºít_íåy
;

686 
u32
 
èbÀ_≥riod
 = (
≥riod
 + 31) / 32;

691 
èbÀ_pos
 = 0;ÅabÀ_po†< 
èbÀ_≥riod
;Åable_pos++)

693 
cuºít_íåy
 = 0;

694 
bô_pos
 = 31; bit_pos >= 0; bit_pos--)

696 
cuºít_íåy
 |(
shi·_ªgi°î
 & 0x01Ë<< 
bô_pos
;

698 
shi·_ªgi°î
 =

699 ((1 & (
shi·_ªgi°î
 ^ (shi·_ªgi°î >> 1))Ë<< 
bô_Àngth
) |

700 ((
shi·_ªgi°î
 >> 1Ë& 
mask
);

703 
èbÀ
[
èbÀ_pos
] = 
cuºít_íåy
;

705 
	}
}

707 
	$ª£t_sound
()

709 
dúe˘_sound_°ru˘
 *
ds
 = 
dúe˘_sound_ch™√l
;

710 
gbc_sound_°ru˘
 *
gs
 = 
gbc_sound_ch™√l
;

711 
u32
 
i
;

713 
sound_⁄
 = 0;

714 
sound_buf„r_ba£
 = 0;

715 
sound_œ°_˝u_ticks
 = 0;

716 
	`mem£t
(
sound_buf„r
, 0, 
audio_buf„r_size
);

718 
i
 = 0; i < 2; i++, 
ds
++)

720 
ds
->
buf„r_ödex
 = 0;

721 
ds
->
°©us
 = 
DIRECT_SOUND_INACTIVE
;

722 
ds
->
fifo_t›
 = 0;

723 
ds
->
fifo_ba£
 = 0;

724 
ds
->
fifo_‰a˘i⁄Æ
 = 0;

725 
ds
->
œ°_˝u_ticks
 = 0;

726 
	`mem£t
(
ds
->
fifo
, 0, 32);

729 
gbc_sound_buf„r_ödex
 = 0;

730 
gbc_sound_œ°_˝u_ticks
 = 0;

731 
gbc_sound_∑πül_ticks
 = 0;

733 
gbc_sound_ma°î_vﬁume_À·
 = 0;

734 
gbc_sound_ma°î_vﬁume_right
 = 0;

735 
gbc_sound_ma°î_vﬁume
 = 0;

736 
	`mem£t
(
wave_ßm∂es
, 0, 64);

738 
i
 = 0; i < 4; i++, 
gs
++)

740 
gs
->
°©us
 = 
GBC_SOUND_INACTIVE
;

741 
gs
->
ßm∂e_d©a
 = 
squ¨e_∑âîn_duty
[2];

742 
gs
->
a˘ive_Êag
 = 0;

744 
	}
}

746 
	$sound_exô
()

748 
gbc_sound_buf„r_ödex
 =

749 (
sound_buf„r_ba£
 + 
audio_buf„r_size
Ë% 
BUFFER_SIZE
;

750 
	`SDL_Pau£Audio
(1);

751 
	`SDL_C⁄dSig«l
(
sound_cv
);

752 
	}
}

754 
	$öô_sound
()

756 #ifde‡
PSP_BUILD


757 
audio_buf„r_size
 = (
audio_buf„r_size_numbî
 * 1024) + 3072;

758 #ñi‡
	`deföed
(
TAVI_BUILD
Ë|| deföed(
ARM_ARCH
)

759 
audio_buf„r_size
 = 16 << 
audio_buf„r_size_numbî
;

762 
audio_buf„r_size
 = 16384;

765 
SDL_AudioS≥c
 
desúed_•ec
 =

767 
sound_‰equícy
,

768 
AUDIO_S16
,

771 
audio_buf„r_size
 / 4,

774 
sound_ˇŒback
,

775 
NULL


778 
gbc_sound_tick_°ï
 =

779 
	`Êﬂt_to_Â16_16
(256.0 / 
sound_‰equícy
);

781 
	`öô_noi£_èbÀ
(
noi£_èbÀ15
, 32767, 14);

782 
	`öô_noi£_èbÀ
(
noi£_èbÀ7
, 127, 6);

784 
	`ª£t_sound
();

786 
	`SDL_O≥nAudio
(&
desúed_•ec
, &
sound_£âögs
);

787 
sound_‰equícy
 = 
sound_£âögs
.
‰eq
;

788 
sound_muãx
 = 
	`SDL_Cª©eMuãx
();

789 
sound_cv
 = 
	`SDL_Cª©eC⁄d
();

790 
	`SDL_Pau£Audio
(0);

791 
	}
}

793 
	#sound_ßve°©e_buûdî
(
ty≥
) \

794 
sound_
##
ty≥
##
	`_ßve°©e
(
fûe_èg_ty≥
 
ßve°©e_fûe
) \

796 
fûe_
##
ty≥
##
	`_v¨übÀ
(
ßve°©e_fûe
, 
sound_⁄
); \

797 
fûe_
##
ty≥
##
	`_v¨übÀ
(
ßve°©e_fûe
, 
sound_buf„r_ba£
); \

798 
fûe_
##
ty≥
##
	`_v¨übÀ
(
ßve°©e_fûe
, 
sound_œ°_˝u_ticks
); \

799 
fûe_
##
ty≥
##
	`_v¨übÀ
(
ßve°©e_fûe
, 
gbc_sound_buf„r_ödex
); \

800 
fûe_
##
ty≥
##
	`_v¨übÀ
(
ßve°©e_fûe
, 
gbc_sound_œ°_˝u_ticks
); \

801 
fûe_
##
ty≥
##
	`_v¨übÀ
(
ßve°©e_fûe
, 
gbc_sound_∑πül_ticks
); \

802 
fûe_
##
ty≥
##
	`_v¨übÀ
(
ßve°©e_fûe
, 
gbc_sound_ma°î_vﬁume_À·
); \

803 
fûe_
##
ty≥
##
	`_v¨übÀ
(
ßve°©e_fûe
, 
gbc_sound_ma°î_vﬁume_right
); \

804 
fûe_
##
ty≥
##
	`_v¨übÀ
(
ßve°©e_fûe
, 
gbc_sound_ma°î_vﬁume
); \

805 
fûe_
##
ty≥
##
	`_¨øy
(
ßve°©e_fûe
, 
wave_ßm∂es
); \

806 
fûe_
##
ty≥
##
	`_¨øy
(
ßve°©e_fûe
, 
dúe˘_sound_ch™√l
); \

807 
fûe_
##
ty≥
##
	`_¨øy
(
ßve°©e_fûe
, 
gbc_sound_ch™√l
); \

809 

	)

810 
sound_ßve°©e_buûdî
(
ªad
);

811 
sound_ßve°©e_buûdî
(
wrôe_mem
);

	@sound.h

20 #i‚de‡
SOUND_H


21 
	#SOUND_H


	)

23 
	#BUFFER_SIZE
 65536

	)

28 #ifde‡
PSP_BUILD


30 
	#SOUND_BUFFER_SIZE
 4096

	)

34 
	#SOUND_BUFFER_SIZE
 16384

	)

40 
	mDIRECT_SOUND_INACTIVE
,

41 
	mDIRECT_SOUND_RIGHT
,

42 
	mDIRECT_SOUND_LEFT
,

43 
	mDIRECT_SOUND_LEFTRIGHT


44 } 
	tdúe˘_sound_°©us_ty≥
;

48 
	mDIRECT_SOUND_VOLUME_50
,

49 
	mDIRECT_SOUND_VOLUME_100


50 } 
	tdúe˘_sound_vﬁume_ty≥
;

54 
s8
 
	mfifo
[32];

55 
u32
 
	mfifo_ba£
;

56 
u32
 
	mfifo_t›
;

57 
fixed16_16
 
	mfifo_‰a˘i⁄Æ
;

60 
u32
 
	mbuf„r_ödex
;

61 
dúe˘_sound_°©us_ty≥
 
	m°©us
;

62 
dúe˘_sound_vﬁume_ty≥
 
	mvﬁume
;

63 
u32
 
	mœ°_˝u_ticks
;

64 } 
	tdúe˘_sound_°ru˘
;

68 
	mGBC_SOUND_INACTIVE
,

69 
	mGBC_SOUND_RIGHT
,

70 
	mGBC_SOUND_LEFT
,

71 
	mGBC_SOUND_LEFTRIGHT


72 } 
	tgbc_sound_°©us_ty≥
;

77 
u32
 
	møã
;

78 
fixed16_16
 
	m‰equícy_°ï
;

79 
fixed16_16
 
	mßm∂e_ödex
;

80 
fixed16_16
 
	mtick_cou¡î
;

81 
u32
 
	mtŸÆ_vﬁume
;

82 
u32
 
	mívñ›e_öôül_vﬁume
;

83 
u32
 
	mívñ›e_vﬁume
;

84 
u32
 
	mívñ›e_dúe˘i⁄
;

85 
u32
 
	mívñ›e_°©us
;

86 
u32
 
	mívñ›e_°ï
;

87 
u32
 
	mívñ›e_ticks
;

88 
u32
 
	mívñ›e_öôül_ticks
;

89 
u32
 
	mswìp_°©us
;

90 
u32
 
	mswìp_dúe˘i⁄
;

91 
u32
 
	mswìp_ticks
;

92 
u32
 
	mswìp_öôül_ticks
;

93 
u32
 
	mswìp_shi·
;

94 
u32
 
	mÀngth_°©us
;

95 
u32
 
	mÀngth_ticks
;

96 
u32
 
	mnoi£_ty≥
;

97 
u32
 
	mwave_ty≥
;

98 
u32
 
	mwave_b™k
;

99 
u32
 
	mwave_vﬁume
;

100 
gbc_sound_°©us_ty≥
 
	m°©us
;

101 
u32
 
	ma˘ive_Êag
;

102 
u32
 
	mma°î_íabÀ
;

103 
s8
 *
	mßm∂e_d©a
;

104 } 
	tgbc_sound_°ru˘
;

106 
dúe˘_sound_°ru˘
 
dúe˘_sound_ch™√l
[2];

107 
gbc_sound_°ru˘
 
gbc_sound_ch™√l
[4];

108 
s8
 
squ¨e_∑âîn_duty
[4][8];

109 
u32
 
gbc_sound_ma°î_vﬁume_À·
;

110 
u32
 
gbc_sound_ma°î_vﬁume_right
;

111 
u32
 
gbc_sound_ma°î_vﬁume
;

113 
u32
 
sound_‰equícy
;

114 
u32
 
sound_⁄
;

116 
u32
 
globÆ_íabÀ_audio
;

117 
u32
 
íabÀ_low_∑ss_fûãr
;

118 
u32
 
audio_buf„r_size_numbî
;

120 
SDL_muãx
 *
sound_muãx
;

121 
SDL_c⁄d
 *
sound_cv
;

123 
sound_timî_queue8
(
u32
 
ch™√l
, 
u8
 
vÆue
);

124 
sound_timî_queue16
(
u32
 
ch™√l
, 
u16
 
vÆue
);

125 
sound_timî_queue32
(
u32
 
ch™√l
, u32 
vÆue
);

126 
sound_timî
(
fixed16_16
 
‰equícy_°ï
, 
u32
 
ch™√l
);

127 
sound_ª£t_fifo
(
u32
 
ch™√l
);

128 
upd©e_gbc_sound
(
u32
 
˝u_ticks
);

129 
öô_sound
();

130 
sound_wrôe_mem_ßve°©e
(
fûe_èg_ty≥
 
ßve°©e_fûe
);

131 
sound_ªad_ßve°©e
(
fûe_èg_ty≥
 
ßve°©e_fûe
);

133 
	#gbc_sound_t⁄e_c⁄åﬁ_low
(
ch™√l
, 
addªss
) \

135 
u32
 
öôül_vﬁume
 = (
vÆue
 >> 12) & 0x0F; \

136 
u32
 
ívñ›e_ticks
 = ((
vÆue
 >> 8) & 0x07) * 4; \

137 
gbc_sound_ch™√l
[
ch™√l
].
Àngth_ticks
 = 64 - (
vÆue
 & 0x3F); \

138 
gbc_sound_ch™√l
[
ch™√l
].
ßm∂e_d©a
 = \

139 
squ¨e_∑âîn_duty
[(
vÆue
 >> 6) & 0x03]; \

140 
gbc_sound_ch™√l
[
ch™√l
].
ívñ›e_dúe˘i⁄
 = (
vÆue
 >> 11) & 0x01; \

141 
gbc_sound_ch™√l
[
ch™√l
].
ívñ›e_öôül_vﬁume
 = 
öôül_vﬁume
; \

142 
gbc_sound_ch™√l
[
ch™√l
].
ívñ›e_vﬁume
 = 
öôül_vﬁume
; \

143 
gbc_sound_ch™√l
[
ch™√l
].
ívñ›e_öôül_ticks
 = 
ívñ›e_ticks
; \

144 
gbc_sound_ch™√l
[
ch™√l
].
ívñ›e_ticks
 =Énvelope_ticks; \

145 
gbc_sound_ch™√l
[
ch™√l
].
ívñ›e_°©us
 = (
ívñ›e_ticks
 != 0); \

146 
gbc_sound_ch™√l
[
ch™√l
].
ívñ›e_vﬁume
 = 
öôül_vﬁume
; \

147 
gbc_sound_upd©e
 = 1; \

148 
	`addªss16
(
io_ªgi°îs
, 
addªss
Ë
vÆue
; \

150 

	)

151 
	#gbc_sound_t⁄e_c⁄åﬁ_high
(
ch™√l
, 
addªss
) \

153 
u32
 
øã
 = 
vÆue
 & 0x7FF; \

154 
gbc_sound_ch™√l
[
ch™√l
].
øã
 =Ñate; \

155 
gbc_sound_ch™√l
[
ch™√l
].
‰equícy_°ï
 = \

156 
	`Êﬂt_to_Â16_16
(((131072.0 / (2048 - 
øã
)Ë* 8.0Ë/ 
sound_‰equícy
); \

157 
gbc_sound_ch™√l
[
ch™√l
].
Àngth_°©us
 = (
vÆue
 >> 14) & 0x01; \

158 if(
vÆue
 & 0x8000) \

160 
gbc_sound_ch™√l
[
ch™√l
].
a˘ive_Êag
 = 1; \

161 
gbc_sound_ch™√l
[
ch™√l
].
ßm∂e_ödex
 -
	`Êﬂt_to_Â16_16
(1.0 / 12.0); \

162 
gbc_sound_ch™√l
[
ch™√l
].
ívñ›e_ticks
 = \

163 
gbc_sound_ch™√l
[
ch™√l
].
ívñ›e_öôül_ticks
; \

164 
gbc_sound_ch™√l
[
ch™√l
].
ívñ›e_vﬁume
 = \

165 
gbc_sound_ch™√l
[
ch™√l
].
ívñ›e_öôül_vﬁume
; \

168 
gbc_sound_upd©e
 = 1; \

169 
	`addªss16
(
io_ªgi°îs
, 
addªss
Ë
vÆue
; \

171 

	)

172 
	#gbc_sound_t⁄e_c⁄åﬁ_swìp
() \

174 
u32
 
swìp_ticks
 = ((
vÆue
 >> 4) & 0x07) * 2; \

175 
gbc_sound_ch™√l
[0].
swìp_shi·
 = 
vÆue
 & 0x07; \

176 
gbc_sound_ch™√l
[0].
swìp_dúe˘i⁄
 = (
vÆue
 >> 3) & 0x01; \

177 
gbc_sound_ch™√l
[0].
swìp_°©us
 = (
vÆue
 != 8); \

178 
gbc_sound_ch™√l
[0].
swìp_ticks
 = sweep_ticks; \

179 
gbc_sound_ch™√l
[0].
swìp_öôül_ticks
 = 
swìp_ticks
; \

180 
gbc_sound_upd©e
 = 1; \

181 
	`addªss16
(
io_ªgi°îs
, 0x60Ë
vÆue
; \

183 

	)

184 
	#gbc_sound_wave_c⁄åﬁ
() \

186 
gbc_sound_ch™√l
[2].
wave_ty≥
 = (
vÆue
 >> 5) & 0x01; \

187 
gbc_sound_ch™√l
[2].
wave_b™k
 = (
vÆue
 >> 6) & 0x01; \

188 if(
vÆue
 & 0x80) \

190 
gbc_sound_ch™√l
[2].
ma°î_íabÀ
 = 1; \

194 
gbc_sound_ch™√l
[2].
ma°î_íabÀ
 = 0; \

197 
gbc_sound_upd©e
 = 1; \

198 
	`addªss16
(
io_ªgi°îs
, 0x70Ë
vÆue
; \

200 

	)

201 
u32
 
	ggbc_sound_wave_vﬁume
[4] = { 0, 16384, 8192, 4096 };

203 
	#gbc_sound_t⁄e_c⁄åﬁ_low_wave
() \

205 
gbc_sound_ch™√l
[2].
Àngth_ticks
 = 256 - (
vÆue
 & 0xFF); \

206 if((
vÆue
 >> 15) & 0x01) \

208 
gbc_sound_ch™√l
[2].
wave_vﬁume
 = 12288; \

212 
gbc_sound_ch™√l
[2].
wave_vﬁume
 = \

213 
gbc_sound_wave_vﬁume
[(
vÆue
 >> 13) & 0x03]; \

215 
gbc_sound_upd©e
 = 1; \

216 
	`addªss16
(
io_ªgi°îs
, 0x72Ë
vÆue
; \

218 

	)

219 
	#gbc_sound_t⁄e_c⁄åﬁ_high_wave
() \

221 
u32
 
øã
 = 
vÆue
 & 0x7FF; \

222 
gbc_sound_ch™√l
[2].
øã
 =Ñate; \

223 
gbc_sound_ch™√l
[2].
‰equícy_°ï
 = \

224 
	`Êﬂt_to_Â16_16
((2097152.0 / (2048 - 
øã
)Ë/ 
sound_‰equícy
); \

225 
gbc_sound_ch™√l
[2].
Àngth_°©us
 = (
vÆue
 >> 14) & 0x01; \

226 if(
vÆue
 & 0x8000) \

228 
gbc_sound_ch™√l
[2].
ßm∂e_ödex
 = 0; \

229 
gbc_sound_ch™√l
[2].
a˘ive_Êag
 = 1; \

231 
gbc_sound_upd©e
 = 1; \

232 
	`addªss16
(
io_ªgi°îs
, 0x74Ë
vÆue
; \

234 

	)

235 
	#gbc_sound_noi£_c⁄åﬁ
() \

237 
u32
 
dividög_øtio
 = 
vÆue
 & 0x07; \

238 
u32
 
‰equícy_shi·
 = (
vÆue
 >> 4) & 0x0F; \

239 if(
dividög_øtio
 == 0) \

241 
gbc_sound_ch™√l
[3].
‰equícy_°ï
 = \

242 
	`Êﬂt_to_Â16_16
(1048576.0 / (1 << (
‰equícy_shi·
 + 1)) / \

243 
sound_‰equícy
); \

247 
gbc_sound_ch™√l
[3].
‰equícy_°ï
 = \

248 
	`Êﬂt_to_Â16_16
(524288.0 / (
dividög_øtio
 * \

249 (1 << (
‰equícy_shi·
 + 1))Ë/ 
sound_‰equícy
); \

251 
gbc_sound_ch™√l
[3].
noi£_ty≥
 = (
vÆue
 >> 3) & 0x01; \

252 
gbc_sound_ch™√l
[3].
Àngth_°©us
 = (
vÆue
 >> 14) & 0x01; \

253 if(
vÆue
 & 0x8000) \

255 
gbc_sound_ch™√l
[3].
ßm∂e_ödex
 = 0; \

256 
gbc_sound_ch™√l
[3].
a˘ive_Êag
 = 1; \

257 
gbc_sound_ch™√l
[3].
ívñ›e_ticks
 = \

258 
gbc_sound_ch™√l
[3].
ívñ›e_öôül_ticks
; \

259 
gbc_sound_ch™√l
[3].
ívñ›e_vﬁume
 = \

260 
gbc_sound_ch™√l
[3].
ívñ›e_öôül_vﬁume
; \

262 
gbc_sound_upd©e
 = 1; \

263 
	`addªss16
(
io_ªgi°îs
, 0x7CË
vÆue
; \

265 

	)

266 
	#gbc_åiggî_sound_ch™√l
(
ch™√l
) \

267 
gbc_sound_ma°î_vﬁume_right
 = 
vÆue
 & 0x07; \

268 
gbc_sound_ma°î_vﬁume_À·
 = (
vÆue
 >> 4) & 0x07; \

269 
gbc_sound_ch™√l
[
ch™√l
].
°©us
 = ((
vÆue
 >> (channel + 8)) & 0x01) | \

270 ((
vÆue
 >> (
ch™√l
 + 11)) & 0x03) \

271 

	)

272 
	#gbc_åiggî_sound
() \

274 
	`gbc_åiggî_sound_ch™√l
(0); \

275 
	`gbc_åiggî_sound_ch™√l
(1); \

276 
	`gbc_åiggî_sound_ch™√l
(2); \

277 
	`gbc_åiggî_sound_ch™√l
(3); \

278 
	`addªss16
(
io_ªgi°îs
, 0x80Ë
vÆue
; \

280 

	)

281 
	#åiggî_sound
() \

283 
timî
[0].
dúe˘_sound_ch™√ls
 = (((
vÆue
 >> 10) & 0x01) == 0) | \

284 ((((
vÆue
 >> 14) & 0x01) == 0) << 1); \

285 
timî
[1].
dúe˘_sound_ch™√ls
 = (((
vÆue
 >> 10) & 0x01) == 1) | \

286 ((((
vÆue
 >> 14) & 0x01) == 1) << 1); \

287 
dúe˘_sound_ch™√l
[0].
vﬁume
 = (
vÆue
 >> 2) & 0x01; \

288 
dúe˘_sound_ch™√l
[0].
°©us
 = (
vÆue
 >> 8) & 0x03; \

289 
dúe˘_sound_ch™√l
[1].
vﬁume
 = (
vÆue
 >> 3) & 0x01; \

290 
dúe˘_sound_ch™√l
[1].
°©us
 = (
vÆue
 >> 12) & 0x03; \

291 
gbc_sound_ma°î_vﬁume
 = 
vÆue
 & 0x03; \

293 if((
vÆue
 >> 11) & 0x01) \

294 
	`sound_ª£t_fifo
(0); \

295 if((
vÆue
 >> 15) & 0x01) \

296 
	`sound_ª£t_fifo
(1); \

297 
	`addªss16
(
io_ªgi°îs
, 0x82Ë
vÆue
; \

299 

	)

300 
	#sound_⁄
() \

301 if(
vÆue
 & 0x80) \

303 if(
sound_⁄
 != 1) \

305 
sound_⁄
 = 1; \

310 
u32
 
i
; \

311 
i
 = 0; i < 4; i++) \

313 
gbc_sound_ch™√l
[
i
].
a˘ive_Êag
 = 0; \

315 
sound_⁄
 = 0; \

317 
	`addªss16
(
io_ªgi°îs
, 0x84) = \

318 (
	`addªss16
(
io_ªgi°îs
, 0x84Ë& 0x000FË| (
vÆue
 & 0xFFF0); \

319 

	)

320 
	#sound_upd©e_‰equícy_°ï
(
timî_numbî
) \

321 
timî
[
timî_numbî
].
‰equícy_°ï
 = \

322 
	`Êﬂt_to_Â16_16
(16777216.0 / (
timî_ªlﬂd
 * 
sound_‰equícy
)) \

323 

	)

325 
ª£t_sound
();

326 
sound_exô
();

	@video.c

20 
	~"comm⁄.h
"

21 
	~"f⁄t.h
"

23 #ifde‡
PSP_BUILD


25 
	~<p•˘æ.h
>

27 
	~<p•kî√l.h
>

28 
	~<p•debug.h
>

29 
	~<p•di•œy.h
>

31 
	~<p•gu.h
>

32 
	~<p•powî.h
>

33 
	~<p•πc.h
>

35 *
	gs¸ìn_vîãx
 = (*)0x441FC100;

36 
u32
 *
	gge_cmd
 = (u32 *)0x441FC000;

37 
u16
 *
	gp•_gu_vøm_ba£
 = (u16 *)(0x44000000);

38 
u32
 *
	gge_cmd_±r
 = (u32 *)0x441FC000;

39 
u32
 
	ggecbid
;

40 
u32
 
	gvideo_dúe˘
 = 0;

42 
u32
 
__©åibuã__
((
	$Æig√d
(16))Ë
di•œy_li°
[32];

44 
	#GBA_SCREEN_WIDTH
 240

	)

45 
	#GBA_SCREEN_HEIGHT
 160

	)

47 
	#PSP_SCREEN_WIDTH
 480

	)

48 
	#PSP_SCREEN_HEIGHT
 272

	)

49 
	#PSP_LINE_SIZE
 512

	)

51 
	#PSP_ALL_BUTTON_MASK
 0xFFFF

	)

53 
	#GE_CMD_FBP
 0x9C

	)

54 
	#GE_CMD_FBW
 0x9D

	)

55 
	#GE_CMD_TBP0
 0xA0

	)

56 
	#GE_CMD_TBW0
 0xA8

	)

57 
	#GE_CMD_TSIZE0
 0xB8

	)

58 
	#GE_CMD_TFLUSH
 0xCB

	)

59 
	#GE_CMD_CLEAR
 0xD3

	)

60 
	#GE_CMD_VTYPE
 0x12

	)

61 
	#GE_CMD_BASE
 0x10

	)

62 
	#GE_CMD_VADDR
 0x01

	)

63 
	#GE_CMD_IADDR
 0x02

	)

64 
	#GE_CMD_PRIM
 0x04

	)

65 
	#GE_CMD_FINISH
 0x0F

	)

66 
	#GE_CMD_SIGNAL
 0x0C

	)

67 
	#GE_CMD_NOP
 0x00

	)

69 
	#GE_CMD
(
cmd
, 
›î™d
) \

70 *
ge_cmd_±r
 = (((
GE_CMD_
##
cmd
Ë<< 24Ë| (
›î™d
)); \

71 
ge_cmd_±r
++ \

72 

	)

73 
u16
 *
s¸ìn_ãxtuª
 = (u16 *)(0x4000000 + (512 * 272 * 2));

74 
u16
 *
cuºít_s¸ìn_ãxtuª
 = (u16 *)(0x4000000 + (512 * 272 * 2));

75 
u16
 *
s¸ìn_pixñs
 = (u16 *)(0x4000000 + (512 * 272 * 2));

76 
u32
 
s¸ìn_pôch
 = 240;

78 
	$Ge_Föish_CÆlback
(
id
, *
¨g
)

80 
	}
}

82 
	#gë_s¸ìn_pixñs
() \

83 
s¸ìn_pixñs
 \

84 

	)

85 
	#gë_s¸ìn_pôch
() \

86 
s¸ìn_pôch
 \

87 

	)

90 #ifde‡
GP2X_BUILD


91 
	~"SDL_gp2x.h
"

92 
SDL_SurÁ˚
 *
	ghw_s¸ìn
;

94 
SDL_SurÁ˚
 *
	gs¸ìn
;

95 c⁄° 
u32
 
	gvideo_sˇÀ
 = 1;

97 
	#gë_s¸ìn_pixñs
() \

98 ((
u16
 *)
s¸ìn
->
pixñs
) \

99 

	)

100 
	#gë_s¸ìn_pôch
() \

101 (
s¸ìn
->
pôch
 / 2) \

102 

	)

105 
ªndî_sˇ∆öe_c⁄dôi⁄Æ_tûe
(
u32
 
°¨t
, u32 
íd
, 
u16
 *
sˇ∆öe
,

106 
u32
 
íabÀ_Êags
, u32 
di•˙t
, u32 
bld˙t
, 
tûe_œyî_ªndî_°ru˘


107 *
œyî_ªndîîs
);

108 
ªndî_sˇ∆öe_c⁄dôi⁄Æ_bôm≠
(
u32
 
°¨t
, u32 
íd
, 
u16
 *
sˇ∆öe
,

109 
u32
 
íabÀ_Êags
, u32 
di•˙t
, u32 
bld˙t
, 
bôm≠_œyî_ªndî_°ru˘


110 *
œyî_ªndîîs
);

112 
	#no_›
 \

113 

	)

118 
	#tûe_lookup_∑Àâe_fuŒ
(
∑Àâe
, 
sour˚
) \

119 
cuºít_pixñ
 = 
∑Àâe
[
sour˚
]; \

120 
	`c⁄vît_∑Àâe
(
cuºít_pixñ
) \

121 

	)

122 
	#tûe_lookup_∑Àâe
(
∑Àâe
, 
sour˚
) \

123 
cuºít_pixñ
 = 
∑Àâe
[
sour˚
]; \

124 

	)

126 #ifde‡
RENDER_COLOR16_NORMAL


128 
	#tûe_ex∑nd_ba£_n‹mÆ
(
ödex
) \

129 
	`tûe_ex∑nd_ba£_cﬁ‹16
(
ödex
) \

130 

	)

133 
	#tûe_ex∑nd_ba£_n‹mÆ
(
ödex
) \

134 
	`tûe_lookup_∑Àâe
(
∑Àâe
, 
cuºít_pixñ
); \

135 
de°_±r
[
ödex
] = 
cuºít_pixñ
 \

136 

	)

139 
	#tûe_ex∑nd_å™•¨ít_n‹mÆ
(
ödex
) \

140 
	`tûe_ex∑nd_ba£_n‹mÆ
(
ödex
) \

141 

	)

142 
	#tûe_ex∑nd_c›y
(
ödex
) \

143 
de°_±r
[
ödex
] = 
c›y_±r
[index] \

144 

	)

146 
	#adv™˚_de°_±r_ba£
(
dñè
) \

147 
de°_±r
 +
dñè
 \

148 

	)

149 
	#adv™˚_de°_±r_å™•¨ít
(
dñè
) \

150 
	`adv™˚_de°_±r_ba£
(
dñè
) \

151 

	)

152 
	#adv™˚_de°_±r_c›y
(
dñè
) \

153 
	`adv™˚_de°_±r_ba£
(
dñè
); \

154 
c›y_±r
 +
dñè
 \

155 

	)

157 
	#cﬁ‹_comböe_mask_a
(
œyî
) \

158 ((
io_ªgi°îs
[
REG_BLDCNT
] >> 
œyî
) & 0x01) \

159 

	)

163 
	#cﬁ‹_comböe_mask
(
œyî
) \

164 (
	`cﬁ‹_comböe_mask_a
(
œyî
) | \

165 ((
io_ªgi°îs
[
REG_BLDCNT
] >> (
œyî
 + 7)) & 0x02)) << 9 \

166 

	)

171 
	#tûe_ex∑nd_ba£_Æpha
(
ödex
) \

172 
de°_±r
[
ödex
] = 
cuºít_pixñ
 | 
pixñ_comböe
 \

173 

	)

174 
	#tûe_ex∑nd_ba£_bg
(
ödex
) \

175 
de°_±r
[
ödex
] = 
bg_comböe
 \

176 

	)

182 
	#tûe_ex∑nd_å™•¨ít_Æpha
(
ödex
) \

183 
de°_±r
[
ödex
] = (de°_±r[ödex] << 16Ë| 
cuºít_pixñ
 | 
pixñ_comböe
 \

184 

	)

187 
	#tûe_ex∑nd_å™•¨ít_Æpha_obj
(
ödex
) \

188 
de°
 = 
de°_±r
[
ödex
]; \

189 if(
de°
 & 0x00000100) \

191 
de°_±r
[
ödex
] = (
de°
 & 0xFFFF0000Ë| 
cuºít_pixñ
 | 
pixñ_comböe
; \

195 
de°_±r
[
ödex
] = (
de°
 << 16Ë| 
cuºít_pixñ
 | 
pixñ_comböe
; \

197 

	)

203 
	#tûe_ex∑nd_ba£_cﬁ‹16
(
ödex
) \

204 
de°_±r
[
ödex
] = 
cuºít_pixñ
 | 
pixñ_comböe
 \

205 

	)

206 
	#tûe_ex∑nd_å™•¨ít_cﬁ‹16
(
ödex
) \

207 
	`tûe_ex∑nd_ba£_cﬁ‹16
(
ödex
) \

208 

	)

209 
	#tûe_ex∑nd_ba£_cﬁ‹32
(
ödex
) \

210 
	`tûe_ex∑nd_ba£_cﬁ‹16
(
ödex
) \

211 

	)

212 
	#tûe_ex∑nd_å™•¨ít_cﬁ‹32
(
ödex
) \

213 
	`tûe_ex∑nd_ba£_cﬁ‹16
(
ödex
) \

214 

	)

218 
	#tûe_8bµ_pixñ_›_mask
(
›_∑øm
) \

219 
cuºít_pixñ
 = 
cuºít_pixñs
 & 0xFF \

220 

	)

221 
	#tûe_8bµ_pixñ_›_shi·_mask
(
shi·
) \

222 
cuºít_pixñ
 = (
cuºít_pixñs
 >> 
shi·
) & 0xFF \

223 

	)

224 
	#tûe_8bµ_pixñ_›_shi·
(
shi·
) \

225 
cuºít_pixñ
 = 
cuºít_pixñs
 >> 
shi·
 \

226 

	)

227 
	#tûe_8bµ_pixñ_›_n⁄e
(
shi·
) \

228 

	)

232 
	#tûe_8bµ_døw_ba£_n‹mÆ
(
ödex
) \

233 
	`tûe_ex∑nd_ba£_n‹mÆ
(
ödex
) \

234 

	)

235 
	#tûe_8bµ_døw_ba£_Æpha
(
ödex
) \

236 if(
cuºít_pixñ
) \

238 
	`tûe_ex∑nd_ba£_Æpha
(
ödex
); \

242 
	`tûe_ex∑nd_ba£_bg
(
ödex
); \

244 

	)

246 
	#tûe_8bµ_døw_ba£_cﬁ‹16
(
ödex
) \

247 
	`tûe_8bµ_døw_ba£_Æpha
(
ödex
) \

248 

	)

249 
	#tûe_8bµ_døw_ba£_cﬁ‹32
(
ödex
) \

250 
	`tûe_8bµ_døw_ba£_Æpha
(
ödex
) \

251 

	)

253 
	#tûe_8bµ_døw_ba£
(
ödex
, 
›
, 
›_∑øm
, 
Æpha_›
) \

254 
tûe_8bµ_pixñ_›_
##
	`›
(
›_∑øm
); \

255 
tûe_8bµ_døw_ba£_
##
	`Æpha_›
(
ödex
) \

256 

	)

260 
	#tûe_8bµ_døw_å™•¨ít
(
ödex
, 
›
, 
›_∑øm
, 
Æpha_›
) \

261 
tûe_8bµ_pixñ_›_
##
	`›
(
›_∑øm
); \

262 if(
cuºít_pixñ
) \

264 
tûe_ex∑nd_å™•¨ít_
##
	`Æpha_›
(
ödex
); \

266 

	)

267 
	#tûe_8bµ_døw_c›y
(
ödex
, 
›
, 
›_∑øm
, 
Æpha_›
) \

268 
tûe_8bµ_pixñ_›_
##
	`›
(
›_∑øm
); \

269 if(
cuºít_pixñ
) \

271 
	`tûe_ex∑nd_c›y
(
ödex
); \

273 

	)

276 
	#gë_tûe_8bµ
() \

277 
cuºít_tûe
 = *
m≠_±r
; \

278 
tûe_±r
 = 
tûe_ba£
 + ((
cuºít_tûe
 & 0x3FF) * 64) \

279 

	)

283 
	#tûe_8bµ_døw_four_noÊù
(
ödex
, 
comböe_›
, 
Æpha_›
) \

284 
tûe_8bµ_døw_
##
	`comböe_›
(
ödex
 + 0, 
mask
, 0, 
Æpha_›
); \

285 
tûe_8bµ_døw_
##
	`comböe_›
(
ödex
 + 1, 
shi·_mask
, 8, 
Æpha_›
); \

286 
tûe_8bµ_døw_
##
	`comböe_›
(
ödex
 + 2, 
shi·_mask
, 16, 
Æpha_›
); \

287 
tûe_8bµ_døw_
##
	`comböe_›
(
ödex
 + 3, 
shi·
, 24, 
Æpha_›
) \

288 

	)

292 
	#tûe_8bµ_døw_four_Êù
(
ödex
, 
comböe_›
, 
Æpha_›
) \

293 
tûe_8bµ_døw_
##
	`comböe_›
(
ödex
 + 3, 
mask
, 0, 
Æpha_›
); \

294 
tûe_8bµ_døw_
##
	`comböe_›
(
ödex
 + 2, 
shi·_mask
, 8, 
Æpha_›
); \

295 
tûe_8bµ_døw_
##
	`comböe_›
(
ödex
 + 1, 
shi·_mask
, 16, 
Æpha_›
); \

296 
tûe_8bµ_døw_
##
	`comböe_›
(
ödex
 + 0, 
shi·
, 24, 
Æpha_›
) \

297 

	)

298 
	#tûe_8bµ_døw_four_ba£
(
ödex
, 
Æpha_›
, 
Êù_›
) \

299 
tûe_8bµ_døw_four_
##
	`Êù_›
(
ödex
, 
ba£
, 
Æpha_›
) \

300 

	)

307 
	#tûe_8bµ_døw_four_å™•¨ít
(
ödex
, 
Æpha_›
, 
Êù_›
) \

308 if(
cuºít_pixñs
 != 0) \

310 
tûe_8bµ_døw_four_
##
	`Êù_›
(
ödex
, 
å™•¨ít
, 
Æpha_›
); \

312 

	)

313 
	#tûe_8bµ_døw_four_c›y
(
ödex
, 
Æpha_›
, 
Êù_›
) \

314 if(
cuºít_pixñs
 != 0) \

316 
tûe_8bµ_døw_four_
##
	`Êù_›
(
ödex
, 
c›y
, 
Æpha_›
); \

318 

	)

321 
	#∑πül_tûe_8bµ
(
comböe_›
, 
Æpha_›
) \

322 
i
 = 0; i < 
∑πül_tûe_run
; i++) \

324 
tûe_8bµ_døw_
##
	`comböe_›
(0, 
mask
, 0, 
Æpha_›
); \

325 
cuºít_pixñs
 >>= 8; \

326 
adv™˚_de°_±r_
##
	`comböe_›
(1); \

328 

	)

334 
	#∑πül_tûe_right_noÊù_8bµ
(
comböe_›
, 
Æpha_›
) \

335 if(
∑πül_tûe_off£t
 >= 4) \

337 
cuºít_pixñs
 = *((
u32
 *)(
tûe_±r
 + 4)) >> \

338 ((
∑πül_tûe_off£t
 - 4) * 8); \

339 
	`∑πül_tûe_8bµ
(
comböe_›
, 
Æpha_›
); \

343 
∑πül_tûe_run
 -= 4; \

344 
cuºít_pixñs
 = *((
u32
 *)
tûe_±r
Ë>> (
∑πül_tûe_off£t
 * 8); \

345 
	`∑πül_tûe_8bµ
(
comböe_›
, 
Æpha_›
); \

346 
cuºít_pixñs
 = *((
u32
 *)(
tûe_±r
 + 4)); \

347 
tûe_8bµ_døw_four_
##
	`comböe_›
(0, 
Æpha_›
, 
noÊù
); \

348 
adv™˚_de°_±r_
##
	`comböe_›
(4); \

350 

	)

355 
	#∑πül_tûe_mid_noÊù_8bµ
(
comböe_›
, 
Æpha_›
) \

356 if(
∑πül_tûe_off£t
 >= 4) \

358 
cuºít_pixñs
 = *((
u32
 *)(
tûe_±r
 + 4)) >> \

359 ((
∑πül_tûe_off£t
 - 4) * 8); \

360 
	`∑πül_tûe_8bµ
(
comböe_›
, 
Æpha_›
); \

364 
cuºít_pixñs
 = *((
u32
 *)
tûe_±r
Ë>> (
∑πül_tûe_off£t
 * 8); \

365 if((
∑πül_tûe_off£t
 + 
∑πül_tûe_run
) > 4) \

367 
u32
 
ﬁd_run
 = 
∑πül_tûe_run
; \

368 
∑πül_tûe_run
 = 4 - 
∑πül_tûe_off£t
; \

369 
	`∑πül_tûe_8bµ
(
comböe_›
, 
Æpha_›
); \

370 
∑πül_tûe_run
 = 
ﬁd_run
 -Öartial_tile_run; \

371 
cuºít_pixñs
 = *((
u32
 *)(
tûe_±r
 + 4)); \

372 
	`∑πül_tûe_8bµ
(
comböe_›
, 
Æpha_›
); \

376 
	`∑πül_tûe_8bµ
(
comböe_›
, 
Æpha_›
); \

379 

	)

384 
	#∑πül_tûe_À·_noÊù_8bµ
(
comböe_›
, 
Æpha_›
) \

385 if(
∑πül_tûe_run
 >= 4) \

387 
cuºít_pixñs
 = *((
u32
 *)
tûe_±r
); \

388 
tûe_8bµ_døw_four_
##
	`comböe_›
(0, 
Æpha_›
, 
noÊù
); \

389 
adv™˚_de°_±r_
##
	`comböe_›
(4); \

390 
tûe_±r
 += 4; \

391 
∑πül_tûe_run
 -= 4; \

394 
cuºít_pixñs
 = *((
u32
 *)(
tûe_±r
)); \

395 
	`∑πül_tûe_8bµ
(
comböe_›
, 
Æpha_›
) \

396 

	)

400 
	#tûe_noÊù_8bµ
(
comböe_›
, 
Æpha_›
) \

401 
cuºít_pixñs
 = *((
u32
 *)
tûe_±r
); \

402 
tûe_8bµ_døw_four_
##
	`comböe_›
(0, 
Æpha_›
, 
noÊù
); \

403 
cuºít_pixñs
 = *((
u32
 *)(
tûe_±r
 + 4)); \

404 
tûe_8bµ_døw_four_
##
	`comböe_›
(4, 
Æpha_›
, 
noÊù
) \

405 

	)

409 
	#∑πül_tûe_Êù_8bµ
(
comböe_›
, 
Æpha_›
) \

410 
i
 = 0; i < 
∑πül_tûe_run
; i++) \

412 
tûe_8bµ_døw_
##
	`comböe_›
(0, 
shi·
, 24, 
Æpha_›
); \

413 
cuºít_pixñs
 <<= 8; \

414 
adv™˚_de°_±r_
##
	`comböe_›
(1); \

416 

	)

417 
	#∑πül_tûe_right_Êù_8bµ
(
comböe_›
, 
Æpha_›
) \

418 if(
∑πül_tûe_off£t
 >= 4) \

420 
cuºít_pixñs
 = *((
u32
 *)
tûe_±r
Ë<< ((
∑πül_tûe_off£t
 - 4) * 8); \

421 
	`∑πül_tûe_Êù_8bµ
(
comböe_›
, 
Æpha_›
); \

425 
∑πül_tûe_run
 -= 4; \

426 
cuºít_pixñs
 = *((
u32
 *)(
tûe_±r
 + 4)) << \

427 ((
∑πül_tûe_off£t
 - 4) * 8); \

428 
	`∑πül_tûe_Êù_8bµ
(
comböe_›
, 
Æpha_›
); \

429 
cuºít_pixñs
 = *((
u32
 *)
tûe_±r
); \

430 
tûe_8bµ_døw_four_
##
	`comböe_›
(0, 
Æpha_›
, 
Êù
); \

431 
adv™˚_de°_±r_
##
	`comböe_›
(4); \

433 

	)

434 
	#∑πül_tûe_mid_Êù_8bµ
(
comböe_›
, 
Æpha_›
) \

435 if(
∑πül_tûe_off£t
 >= 4) \

437 
cuºít_pixñs
 = *((
u32
 *)
tûe_±r
Ë<< ((
∑πül_tûe_off£t
 - 4) * 8); \

438 
	`∑πül_tûe_Êù_8bµ
(
comböe_›
, 
Æpha_›
); \

442 
cuºít_pixñs
 = *((
u32
 *)(
tûe_±r
 + 4)) << \

443 ((
∑πül_tûe_off£t
 - 4) * 8); \

445 if((
∑πül_tûe_off£t
 + 
∑πül_tûe_run
) > 4) \

447 
u32
 
ﬁd_run
 = 
∑πül_tûe_run
; \

448 
∑πül_tûe_run
 = 4 - 
∑πül_tûe_off£t
; \

449 
	`∑πül_tûe_Êù_8bµ
(
comböe_›
, 
Æpha_›
); \

450 
∑πül_tûe_run
 = 
ﬁd_run
 -Öartial_tile_run; \

451 
cuºít_pixñs
 = *((
u32
 *)(
tûe_±r
)); \

452 
	`∑πül_tûe_Êù_8bµ
(
comböe_›
, 
Æpha_›
); \

456 
	`∑πül_tûe_Êù_8bµ
(
comböe_›
, 
Æpha_›
); \

459 

	)

460 
	#∑πül_tûe_À·_Êù_8bµ
(
comböe_›
, 
Æpha_›
) \

461 if(
∑πül_tûe_run
 >= 4) \

463 
cuºít_pixñs
 = *((
u32
 *)(
tûe_±r
 + 4)); \

464 
tûe_8bµ_døw_four_
##
	`comböe_›
(0, 
Æpha_›
, 
Êù
); \

465 
adv™˚_de°_±r_
##
	`comböe_›
(4); \

466 
tûe_±r
 -= 4; \

467 
∑πül_tûe_run
 -= 4; \

470 
cuºít_pixñs
 = *((
u32
 *)(
tûe_±r
 + 4)); \

471 
	`∑πül_tûe_Êù_8bµ
(
comböe_›
, 
Æpha_›
) \

472 

	)

473 
	#tûe_Êù_8bµ
(
comböe_›
, 
Æpha_›
) \

474 
cuºít_pixñs
 = *((
u32
 *)(
tûe_±r
 + 4)); \

475 
tûe_8bµ_døw_four_
##
	`comböe_›
(0, 
Æpha_›
, 
Êù
); \

476 
cuºít_pixñs
 = *((
u32
 *)
tûe_±r
); \

477 
tûe_8bµ_døw_four_
##
	`comböe_›
(4, 
Æpha_›
, 
Êù
) \

478 

	)

482 
	#tûe_4bµ_pixñ_›_mask
(
›_∑øm
) \

483 
cuºít_pixñ
 = 
cuºít_pixñs
 & 0x0F \

484 

	)

485 
	#tûe_4bµ_pixñ_›_shi·_mask
(
shi·
) \

486 
cuºít_pixñ
 = (
cuºít_pixñs
 >> 
shi·
) & 0x0F \

487 

	)

488 
	#tûe_4bµ_pixñ_›_shi·
(
shi·
) \

489 
cuºít_pixñ
 = 
cuºít_pixñs
 >> 
shi·
 \

490 

	)

491 
	#tûe_4bµ_pixñ_›_n⁄e
(
›_∑øm
) \

492 

	)

499 
	#tûe_4bµ_døw_ba£_n‹mÆ
(
ödex
) \

500 if(
cuºít_pixñ
) \

502 
cuºít_pixñ
 |
cuºít_∑Àâe
; \

503 
	`tûe_ex∑nd_ba£_n‹mÆ
(
ödex
); \

507 
	`tûe_ex∑nd_ba£_n‹mÆ
(
ödex
); \

509 

	)

511 
	#tûe_4bµ_døw_ba£_Æpha
(
ödex
) \

512 if(
cuºít_pixñ
) \

514 
cuºít_pixñ
 |
cuºít_∑Àâe
; \

515 
	`tûe_ex∑nd_ba£_Æpha
(
ödex
); \

519 
	`tûe_ex∑nd_ba£_bg
(
ödex
); \

521 

	)

522 
	#tûe_4bµ_døw_ba£_cﬁ‹16
(
ödex
) \

523 
	`tûe_4bµ_døw_ba£_Æpha
(
ödex
) \

524 

	)

525 
	#tûe_4bµ_døw_ba£_cﬁ‹32
(
ödex
) \

526 
	`tûe_4bµ_døw_ba£_Æpha
(
ödex
) \

527 

	)

529 
	#tûe_4bµ_døw_ba£
(
ödex
, 
›
, 
›_∑øm
, 
Æpha_›
) \

530 
tûe_4bµ_pixñ_›_
##
	`›
(
›_∑øm
); \

531 
tûe_4bµ_døw_ba£_
##
	`Æpha_›
(
ödex
) \

532 

	)

536 
	#tûe_4bµ_døw_å™•¨ít
(
ödex
, 
›
, 
›_∑øm
, 
Æpha_›
) \

537 
tûe_4bµ_pixñ_›_
##
	`›
(
›_∑øm
); \

538 if(
cuºít_pixñ
) \

540 
cuºít_pixñ
 |
cuºít_∑Àâe
; \

541 
tûe_ex∑nd_å™•¨ít_
##
	`Æpha_›
(
ödex
); \

543 

	)

544 
	#tûe_4bµ_døw_c›y
(
ödex
, 
›
, 
›_∑øm
, 
Æpha_›
) \

545 
tûe_4bµ_pixñ_›_
##
	`›
(
›_∑øm
); \

546 if(
cuºít_pixñ
) \

548 
cuºít_pixñ
 |
cuºít_∑Àâe
; \

549 
	`tûe_ex∑nd_c›y
(
ödex
); \

551 

	)

556 
	#tûe_4bµ_døw_eight_ba£_zîo
(
vÆue
) \

557 
de°_±r
[0] = 
vÆue
; \

558 
de°_±r
[1] = 
vÆue
; \

559 
de°_±r
[2] = 
vÆue
; \

560 
de°_±r
[3] = 
vÆue
; \

561 
de°_±r
[4] = 
vÆue
; \

562 
de°_±r
[5] = 
vÆue
; \

563 
de°_±r
[6] = 
vÆue
; \

564 
de°_±r
[7] = 
vÆue
 \

565 

	)

570 
	#tûe_4bµ_døw_eight_ba£_zîo_Æpha
() \

571 
	`tûe_4bµ_døw_eight_ba£_zîo
(
bg_comböe
) \

572 

	)

573 
	#tûe_4bµ_døw_eight_ba£_zîo_cﬁ‹16
() \

574 
	`tûe_4bµ_døw_eight_ba£_zîo_Æpha
() \

575 

	)

576 
	#tûe_4bµ_døw_eight_ba£_zîo_cﬁ‹32
() \

577 
	`tûe_4bµ_døw_eight_ba£_zîo_Æpha
() \

578 

	)

583 #ifde‡
RENDER_COLOR16_NORMAL


585 
	#tûe_4bµ_døw_eight_ba£_zîo_n‹mÆ
() \

586 
cuºít_pixñ
 = 0; \

587 
	`tûe_4bµ_døw_eight_ba£_zîo
(
cuºít_pixñ
) \

588 

	)

591 
	#tûe_4bµ_døw_eight_ba£_zîo_n‹mÆ
() \

592 
cuºít_pixñ
 = 
∑Àâe
[0]; \

593 
	`tûe_4bµ_døw_eight_ba£_zîo
(
cuºít_pixñ
) \

594 

	)

600 
	#tûe_4bµ_døw_eight_noÊù
(
comböe_›
, 
Æpha_›
) \

601 
tûe_4bµ_døw_
##
	`comböe_›
(0, 
mask
, 0, 
Æpha_›
); \

602 
tûe_4bµ_døw_
##
	`comböe_›
(1, 
shi·_mask
, 4, 
Æpha_›
); \

603 
tûe_4bµ_døw_
##
	`comböe_›
(2, 
shi·_mask
, 8, 
Æpha_›
); \

604 
tûe_4bµ_døw_
##
	`comböe_›
(3, 
shi·_mask
, 12, 
Æpha_›
); \

605 
tûe_4bµ_døw_
##
	`comböe_›
(4, 
shi·_mask
, 16, 
Æpha_›
); \

606 
tûe_4bµ_døw_
##
	`comböe_›
(5, 
shi·_mask
, 20, 
Æpha_›
); \

607 
tûe_4bµ_døw_
##
	`comböe_›
(6, 
shi·_mask
, 24, 
Æpha_›
); \

608 
tûe_4bµ_døw_
##
	`comböe_›
(7, 
shi·
, 28, 
Æpha_›
) \

609 

	)

613 
	#tûe_4bµ_døw_eight_Êù
(
comböe_›
, 
Æpha_›
) \

614 
tûe_4bµ_døw_
##
	`comböe_›
(7, 
mask
, 0, 
Æpha_›
); \

615 
tûe_4bµ_døw_
##
	`comböe_›
(6, 
shi·_mask
, 4, 
Æpha_›
); \

616 
tûe_4bµ_døw_
##
	`comböe_›
(5, 
shi·_mask
, 8, 
Æpha_›
); \

617 
tûe_4bµ_døw_
##
	`comböe_›
(4, 
shi·_mask
, 12, 
Æpha_›
); \

618 
tûe_4bµ_døw_
##
	`comböe_›
(3, 
shi·_mask
, 16, 
Æpha_›
); \

619 
tûe_4bµ_døw_
##
	`comböe_›
(2, 
shi·_mask
, 20, 
Æpha_›
); \

620 
tûe_4bµ_døw_
##
	`comböe_›
(1, 
shi·_mask
, 24, 
Æpha_›
); \

621 
tûe_4bµ_døw_
##
	`comböe_›
(0, 
shi·
, 28, 
Æpha_›
) \

622 

	)

627 
	#tûe_4bµ_døw_eight_ba£
(
Æpha_›
, 
Êù_›
) \

628 if(
cuºít_pixñs
 != 0) \

630 
tûe_4bµ_døw_eight_
##
	`Êù_›
(
ba£
, 
Æpha_›
); \

634 
tûe_4bµ_døw_eight_ba£_zîo_
##
	`Æpha_›
(); \

636 

	)

641 
	#tûe_4bµ_døw_eight_å™•¨ít
(
Æpha_›
, 
Êù_›
) \

642 if(
cuºít_pixñs
 != 0) \

644 
tûe_4bµ_døw_eight_
##
	`Êù_›
(
å™•¨ít
, 
Æpha_›
); \

646 

	)

648 
	#tûe_4bµ_døw_eight_c›y
(
Æpha_›
, 
Êù_›
) \

649 if(
cuºít_pixñs
 != 0) \

651 
tûe_4bµ_døw_eight_
##
	`Êù_›
(
c›y
, 
Æpha_›
); \

653 

	)

657 
	#gë_tûe_4bµ
() \

658 
cuºít_tûe
 = *
m≠_±r
; \

659 
cuºít_∑Àâe
 = (
cuºít_tûe
 >> 12) << 4; \

660 
tûe_±r
 = 
tûe_ba£
 + ((
cuºít_tûe
 & 0x3FF) * 32); \

661 

	)

665 
	#∑πül_tûe_4bµ
(
comböe_›
, 
Æpha_›
) \

666 
i
 = 0; i < 
∑πül_tûe_run
; i++) \

668 
tûe_4bµ_døw_
##
	`comböe_›
(0, 
mask
, 0, 
Æpha_›
); \

669 
cuºít_pixñs
 >>= 4; \

670 
adv™˚_de°_±r_
##
	`comböe_›
(1); \

672 

	)

678 
	#∑πül_tûe_right_noÊù_4bµ
(
comböe_›
, 
Æpha_›
) \

679 
cuºít_pixñs
 = *((
u32
 *)
tûe_±r
Ë>> (
∑πül_tûe_off£t
 * 4); \

680 
	`∑πül_tûe_4bµ
(
comböe_›
, 
Æpha_›
) \

681 

	)

685 
	#∑πül_tûe_mid_noÊù_4bµ
(
comböe_›
, 
Æpha_›
) \

686 
	`∑πül_tûe_right_noÊù_4bµ
(
comböe_›
, 
Æpha_›
) \

687 

	)

692 
	#∑πül_tûe_À·_noÊù_4bµ
(
comböe_›
, 
Æpha_›
) \

693 
cuºít_pixñs
 = *((
u32
 *)
tûe_±r
); \

694 
	`∑πül_tûe_4bµ
(
comböe_›
, 
Æpha_›
) \

695 

	)

698 
	#tûe_noÊù_4bµ
(
comböe_›
, 
Æpha_›
) \

699 
cuºít_pixñs
 = *((
u32
 *)
tûe_±r
); \

700 
tûe_4bµ_døw_eight_
##
	`comböe_›
(
Æpha_›
, 
noÊù
) \

701 

	)

705 
	#∑πül_tûe_Êù_4bµ
(
comböe_›
, 
Æpha_›
) \

706 
i
 = 0; i < 
∑πül_tûe_run
; i++) \

708 
tûe_4bµ_døw_
##
	`comböe_›
(0, 
shi·
, 28, 
Æpha_›
); \

709 
cuºít_pixñs
 <<= 4; \

710 
adv™˚_de°_±r_
##
	`comböe_›
(1); \

712 

	)

713 
	#∑πül_tûe_right_Êù_4bµ
(
comböe_›
, 
Æpha_›
) \

714 
cuºít_pixñs
 = *((
u32
 *)
tûe_±r
Ë<< (
∑πül_tûe_off£t
 * 4); \

715 
	`∑πül_tûe_Êù_4bµ
(
comböe_›
, 
Æpha_›
) \

716 

	)

717 
	#∑πül_tûe_mid_Êù_4bµ
(
comböe_›
, 
Æpha_›
) \

718 
	`∑πül_tûe_right_Êù_4bµ
(
comböe_›
, 
Æpha_›
) \

719 

	)

720 
	#∑πül_tûe_À·_Êù_4bµ
(
comböe_›
, 
Æpha_›
) \

721 
cuºít_pixñs
 = *((
u32
 *)
tûe_±r
); \

722 
	`∑πül_tûe_Êù_4bµ
(
comböe_›
, 
Æpha_›
) \

723 

	)

724 
	#tûe_Êù_4bµ
(
comböe_›
, 
Æpha_›
) \

725 
cuºít_pixñs
 = *((
u32
 *)
tûe_±r
); \

726 
tûe_4bµ_døw_eight_
##
	`comböe_›
(
Æpha_›
, 
Êù
) \

727 

	)

732 
	#sögÀ_tûe_m≠
(
tûe_ty≥
, 
comböe_›
, 
cﬁ‹_dïth
, 
Æpha_›
) \

733 
gë_tûe_
##
	`cﬁ‹_dïth
(); \

734 if(
cuºít_tûe
 & 0x800) \

735 
tûe_±r
 +
vîtiˇl_pixñ_Êù
; \

737 if(
cuºít_tûe
 & 0x400) \

739 
tûe_ty≥
##
_Êù_
##
	`cﬁ‹_dïth
(
comböe_›
, 
Æpha_›
); \

743 
tûe_ty≥
##
_noÊù_
##
	`cﬁ‹_dïth
(
comböe_›
, 
Æpha_›
); \

745 

	)

750 
	#mu…ùÀ_tûe_m≠
(
comböe_›
, 
cﬁ‹_dïth
, 
Æpha_›
) \

751 
i
 = 0; i < 
tûe_run
; i++) \

753 
	`sögÀ_tûe_m≠
(
tûe
, 
comböe_›
, 
cﬁ‹_dïth
, 
Æpha_›
); \

754 
adv™˚_de°_±r_
##
	`comböe_›
(8); \

755 
m≠_±r
++; \

757 

	)

761 
	#∑πül_tûe_right_m≠
(
comböe_›
, 
cﬁ‹_dïth
, 
Æpha_›
) \

762 
	`sögÀ_tûe_m≠
(
∑πül_tûe_right
, 
comböe_›
, 
cﬁ‹_dïth
, 
Æpha_›
); \

763 
m≠_±r
++ \

764 

	)

768 
	#∑πül_tûe_mid_m≠
(
comböe_›
, 
cﬁ‹_dïth
, 
Æpha_›
) \

769 
	`sögÀ_tûe_m≠
(
∑πül_tûe_mid
, 
comböe_›
, 
cﬁ‹_dïth
, 
Æpha_›
) \

770 

	)

774 
	#∑πül_tûe_À·_m≠
(
comböe_›
, 
cﬁ‹_dïth
, 
Æpha_›
) \

775 
	`sögÀ_tûe_m≠
(
∑πül_tûe_À·
, 
comböe_›
, 
cﬁ‹_dïth
, 
Æpha_›
) \

776 

	)

780 
	#obj_adv™˚_noÊù_4bµ
() \

781 
tûe_±r
 += 32 \

782 

	)

786 
	#obj_adv™˚_noÊù_8bµ
() \

787 
tûe_±r
 += 64 \

788 

	)

792 
	#obj_adv™˚_Êù_4bµ
() \

793 
tûe_±r
 -= 32 \

794 

	)

798 
	#obj_adv™˚_Êù_8bµ
() \

799 
tûe_±r
 -= 64 \

800 

	)

806 
	#mu…ùÀ_tûe_obj
(
comböe_›
, 
cﬁ‹_dïth
, 
Æpha_›
, 
Êù_›
) \

807 
i
 = 0; i < 
tûe_run
; i++) \

809 
tûe_
##
Êù_›
##
_
##
	`cﬁ‹_dïth
(
comböe_›
, 
Æpha_›
); \

810 
obj_adv™˚_
##
Êù_›
##
_
##
	`cﬁ‹_dïth
(); \

811 
adv™˚_de°_±r_
##
	`comböe_›
(8); \

813 

	)

817 
	#∑πül_tûe_right_obj
(
comböe_›
, 
cﬁ‹_dïth
, 
Æpha_›
, 
Êù_›
) \

818 
∑πül_tûe_right_
##
Êù_›
##
_
##
	`cﬁ‹_dïth
(
comböe_›
, 
Æpha_›
); \

819 
obj_adv™˚_
##
Êù_›
##
_
##
	`cﬁ‹_dïth
() \

820 

	)

823 
	#∑πül_tûe_mid_obj
(
comböe_›
, 
cﬁ‹_dïth
, 
Æpha_›
, 
Êù_›
) \

824 
∑πül_tûe_mid_
##
Êù_›
##
_
##
	`cﬁ‹_dïth
(
comböe_›
, 
Æpha_›
) \

825 

	)

828 
	#∑πül_tûe_À·_obj
(
comböe_›
, 
cﬁ‹_dïth
, 
Æpha_›
, 
Êù_›
) \

829 
∑πül_tûe_À·_
##
Êù_›
##
_
##
	`cﬁ‹_dïth
(
comböe_›
, 
Æpha_›
) \

830 

	)

834 
	#tûe_exåa_v¨übÀs_8bµ
() \

835 

	)

836 
	#tûe_exåa_v¨übÀs_4bµ
() \

837 
u32
 
cuºít_∑Àâe
 \

838 

	)

842 
	#tûe_width_4bµ
 4

	)

843 
	#tûe_size_4bµ
 32

	)

844 
	#tûe_width_8bµ
 8

	)

845 
	#tûe_size_8bµ
 64

	)

850 
	#tûe_ªndî
(
cﬁ‹_dïth
, 
comböe_›
, 
Æpha_›
) \

852 
u32
 
vîtiˇl_pixñ_off£t
 = (
vîtiˇl_off£t
 % 8) * \

853 
tûe_width_
##
cﬁ‹_dïth
; \

854 
u32
 
vîtiˇl_pixñ_Êù
 = \

855 ((
tûe_size_
##
cﬁ‹_dïth
 - 
tûe_width_
##color_depth) - \

856 
vîtiˇl_pixñ_off£t
) - vertical_pixel_offset; \

857 
tûe_exåa_v¨übÀs_
##
	`cﬁ‹_dïth
(); \

858 
u8
 *
tûe_ba£
 = 
vøm
 + (((
bg_c⁄åﬁ
 >> 2) & 0x03) * (1024 * 16)) + \

859 
vîtiˇl_pixñ_off£t
; \

860 
u32
 
pixñ_run
 = 256 - (
h‹iz⁄èl_off£t
 % 256); \

861 
u32
 
cuºít_tûe
; \

863 
m≠_ba£
 +((
vîtiˇl_off£t
 % 256) / 8) * 32; \

864 
∑πül_tûe_off£t
 = (
h‹iz⁄èl_off£t
 % 8); \

866 if(
pixñ_run
 >
íd
) \

868 if(
∑πül_tûe_off£t
) \

870 
∑πül_tûe_run
 = 8 - 
∑πül_tûe_off£t
; \

871 if(
íd
 < 
∑πül_tûe_run
) \

873 
∑πül_tûe_run
 = 
íd
; \

874 
	`∑πül_tûe_mid_m≠
(
comböe_›
, 
cﬁ‹_dïth
, 
Æpha_›
); \

879 
íd
 -
∑πül_tûe_run
; \

880 
	`∑πül_tûe_right_m≠
(
comböe_›
, 
cﬁ‹_dïth
, 
Æpha_›
); \

884 
tûe_run
 = 
íd
 / 8; \

885 
	`mu…ùÀ_tûe_m≠
(
comböe_›
, 
cﬁ‹_dïth
, 
Æpha_›
); \

887 
∑πül_tûe_run
 = 
íd
 % 8; \

889 if(
∑πül_tûe_run
) \

891 
	`∑πül_tûe_À·_m≠
(
comböe_›
, 
cﬁ‹_dïth
, 
Æpha_›
); \

896 if(
∑πül_tûe_off£t
) \

898 
∑πül_tûe_run
 = 8 - 
∑πül_tûe_off£t
; \

899 
	`∑πül_tûe_right_m≠
(
comböe_›
, 
cﬁ‹_dïth
, 
Æpha_›
); \

902 
tûe_run
 = (
pixñ_run
 - 
∑πül_tûe_run
) / 8; \

903 
	`mu…ùÀ_tûe_m≠
(
comböe_›
, 
cﬁ‹_dïth
, 
Æpha_›
); \

904 
m≠_±r
 = 
£c⁄d_±r
; \

905 
íd
 -
pixñ_run
; \

906 
tûe_run
 = 
íd
 / 8; \

907 
	`mu…ùÀ_tûe_m≠
(
comböe_›
, 
cﬁ‹_dïth
, 
Æpha_›
); \

909 
∑πül_tûe_run
 = 
íd
 % 8; \

910 if(
∑πül_tûe_run
) \

912 
	`∑πül_tûe_À·_m≠
(
comböe_›
, 
cﬁ‹_dïth
, 
Æpha_›
); \

916 

	)

917 
	#ªndî_sˇ∆öe_de°_n‹mÆ
 
u16


	)

918 
	#ªndî_sˇ∆öe_de°_Æpha
 
u32


	)

919 
	#ªndî_sˇ∆öe_de°_Æpha_obj
 
u32


	)

920 
	#ªndî_sˇ∆öe_de°_cﬁ‹16
 
u16


	)

921 
	#ªndî_sˇ∆öe_de°_cﬁ‹32
 
u32


	)

922 
	#ªndî_sˇ∆öe_de°_∑πül_Æpha
 
u32


	)

923 
	#ªndî_sˇ∆öe_de°_c›y_tûe
 
u16


	)

924 
	#ªndî_sˇ∆öe_de°_c›y_bôm≠
 
u16


	)

930 
	#ªndî_sˇ∆öe_skù_Æpha
(
bg_ty≥
, 
comböe_›
) \

931 if((
pixñ_comböe
 & 0x00000200) == 0) \

933 
ªndî_sˇ∆öe_
##
bg_ty≥
##
_
##
comböe_›
##
	`_cﬁ‹32
(
œyî
, \

934 
°¨t
, 
íd
, 
sˇ∆öe
); \

937 

	)

939 #ifde‡
RENDER_COLOR16_NORMAL


941 
	#ªndî_sˇ∆öe_exåa_v¨übÀs_ba£_n‹mÆ
(
bg_ty≥
) \

942 c⁄° 
u32
 
pixñ_comböe
 = 0 \

943 

	)

946 
	#ªndî_sˇ∆öe_exåa_v¨übÀs_ba£_n‹mÆ
(
bg_ty≥
) \

947 
u16
 *
∑Àâe
 = 
∑Àâe_øm_c⁄vîãd
 \

948 

	)

952 
	#ªndî_sˇ∆öe_exåa_v¨übÀs_ba£_Æpha
(
bg_ty≥
) \

953 
u32
 
bg_comböe
 = 
	`cﬁ‹_comböe_mask
(5); \

954 
u32
 
pixñ_comböe
 = 
	`cﬁ‹_comböe_mask
(
œyî
Ë| (
bg_comböe
 << 16); \

955 
	`ªndî_sˇ∆öe_skù_Æpha
(
bg_ty≥
, 
ba£
) \

956 

	)

957 
	#ªndî_sˇ∆öe_exåa_v¨übÀs_ba£_cﬁ‹
() \

958 
u32
 
bg_comböe
 = 
	`cﬁ‹_comböe_mask
(5); \

959 
u32
 
pixñ_comböe
 = 
	`cﬁ‹_comböe_mask
(
œyî
) \

960 

	)

961 
	#ªndî_sˇ∆öe_exåa_v¨übÀs_ba£_cﬁ‹16
(
bg_ty≥
) \

962 
	`ªndî_sˇ∆öe_exåa_v¨übÀs_ba£_cﬁ‹
() \

963 

	)

964 
	#ªndî_sˇ∆öe_exåa_v¨übÀs_ba£_cﬁ‹32
(
bg_ty≥
) \

965 
	`ªndî_sˇ∆öe_exåa_v¨übÀs_ba£_cﬁ‹
() \

966 

	)

968 
	#ªndî_sˇ∆öe_exåa_v¨übÀs_å™•¨ít_n‹mÆ
(
bg_ty≥
) \

969 
	`ªndî_sˇ∆öe_exåa_v¨übÀs_ba£_n‹mÆ
(
bg_ty≥
) \

970 

	)

971 
	#ªndî_sˇ∆öe_exåa_v¨übÀs_å™•¨ít_Æpha
(
bg_ty≥
) \

972 
u32
 
pixñ_comböe
 = 
	`cﬁ‹_comböe_mask
(
œyî
); \

973 
	`ªndî_sˇ∆öe_skù_Æpha
(
bg_ty≥
, 
å™•¨ít
) \

974 

	)

975 
	#ªndî_sˇ∆öe_exåa_v¨übÀs_å™•¨ít_cﬁ‹
() \

976 
u32
 
pixñ_comböe
 = 
	`cﬁ‹_comböe_mask
(
œyî
) \

977 

	)

978 
	#ªndî_sˇ∆öe_exåa_v¨übÀs_å™•¨ít_cﬁ‹16
(
bg_ty≥
) \

979 
	`ªndî_sˇ∆öe_exåa_v¨übÀs_å™•¨ít_cﬁ‹
() \

980 

	)

981 
	#ªndî_sˇ∆öe_exåa_v¨übÀs_å™•¨ít_cﬁ‹32
(
bg_ty≥
) \

982 
	`ªndî_sˇ∆öe_exåa_v¨übÀs_å™•¨ít_cﬁ‹
() \

983 

	)

990 
u32
 
	gm≠_widths
[] = { 256, 512, 256, 512 };

991 
u32
 
	gm≠_heights
[] = { 256, 256, 512, 512 };

995 
	#ªndî_sˇ∆öe_ãxt_buûdî
(
comböe_›
, 
Æpha_›
) \

996 
ªndî_sˇ∆öe_ãxt_
##
comböe_›
##
_
##
	`Æpha_›
(
u32
 
œyî
, \

997 
u32
 
°¨t
, u32 
íd
, *
sˇ∆öe
) \

999 
ªndî_sˇ∆öe_exåa_v¨übÀs_
##
comböe_›
##
_
##
	`Æpha_›
(
ãxt
); \

1000 
u32
 
bg_c⁄åﬁ
 = 
io_ªgi°îs
[
REG_BG0CNT
 + 
œyî
]; \

1001 
u32
 
m≠_size
 = (
bg_c⁄åﬁ
 >> 14) & 0x03; \

1002 
u32
 
m≠_width
 = 
m≠_widths
[
m≠_size
]; \

1003 
u32
 
m≠_height
 = 
m≠_heights
[
m≠_size
]; \

1004 
u32
 
h‹iz⁄èl_off£t
 = \

1005 (
io_ªgi°îs
[
REG_BG0HOFS
 + (
œyî
 * 2)] + 
°¨t
) % 512; \

1006 
u32
 
vîtiˇl_off£t
 = (
io_ªgi°îs
[
REG_VCOUNT
] + \

1007 
io_ªgi°îs
[
REG_BG0VOFS
 + (
œyî
 * 2)]) % 512; \

1008 
u32
 
cuºít_pixñ
; \

1009 
u32
 
cuºít_pixñs
; \

1010 
u32
 
∑πül_tûe_run
 = 0; \

1011 
u32
 
∑πül_tûe_off£t
; \

1012 
u32
 
tûe_run
; \

1013 
u32
 
i
; \

1014 
ªndî_sˇ∆öe_de°_
##
Æpha_›
 *
de°_±r
 = \

1015 ((
ªndî_sˇ∆öe_de°_
##
Æpha_›
 *)
sˇ∆öe
Ë+ 
°¨t
; \

1017 
u16
 *
m≠_ba£
 = (u16 *)(
vøm
 + ((
bg_c⁄åﬁ
 >> 8) & 0x1F) * (1024 * 2)); \

1018 
u16
 *
m≠_±r
, *
£c⁄d_±r
; \

1019 
u8
 *
tûe_±r
; \

1021 
íd
 -
°¨t
; \

1023 if((
m≠_size
 & 0x02Ë&& (
vîtiˇl_off£t
 >= 256)) \

1025 
m≠_ba£
 +((
m≠_width
 / 8) * 32) + \

1026 (((
vîtiˇl_off£t
 - 256) / 8) * 32); \

1030 
m≠_ba£
 +(((
vîtiˇl_off£t
 % 256) / 8) * 32); \

1033 if(
m≠_size
 & 0x01) \

1035 if(
h‹iz⁄èl_off£t
 >= 256) \

1037 
h‹iz⁄èl_off£t
 -= 256; \

1038 
m≠_±r
 = 
m≠_ba£
 + (32 * 32Ë+ (
h‹iz⁄èl_off£t
 / 8); \

1039 
£c⁄d_±r
 = 
m≠_ba£
; \

1043 
m≠_±r
 = 
m≠_ba£
 + (
h‹iz⁄èl_off£t
 / 8); \

1044 
£c⁄d_±r
 = 
m≠_ba£
 + (32 * 32); \

1049 
h‹iz⁄èl_off£t
 %= 256; \

1050 
m≠_±r
 = 
m≠_ba£
 + (
h‹iz⁄èl_off£t
 / 8); \

1051 
£c⁄d_±r
 = 
m≠_ba£
; \

1054 if(
bg_c⁄åﬁ
 & 0x80) \

1056 
	`tûe_ªndî
(8b
µ
, 
comböe_›
, 
Æpha_›
); \

1060 
	`tûe_ªndî
(4b
µ
, 
comböe_›
, 
Æpha_›
); \

1063 

	)

1064 
ªndî_sˇ∆öe_ãxt_buûdî
(
ba£
, 
n‹mÆ
);

1065 
ªndî_sˇ∆öe_ãxt_buûdî
(
å™•¨ít
, 
n‹mÆ
);

1066 
ªndî_sˇ∆öe_ãxt_buûdî
(
ba£
, 
cﬁ‹16
);

1067 
ªndî_sˇ∆öe_ãxt_buûdî
(
å™•¨ít
, 
cﬁ‹16
);

1068 
ªndî_sˇ∆öe_ãxt_buûdî
(
ba£
, 
cﬁ‹32
);

1069 
ªndî_sˇ∆öe_ãxt_buûdî
(
å™•¨ít
, 
cﬁ‹32
);

1070 
ªndî_sˇ∆öe_ãxt_buûdî
(
ba£
, 
Æpha
);

1071 
ªndî_sˇ∆öe_ãxt_buûdî
(
å™•¨ít
, 
Æpha
);

1074 
s32
 
	gafföe_ª„ªn˚_x
[2];

1075 
s32
 
	gafföe_ª„ªn˚_y
[2];

1077 
	#afföe_ªndî_bg_pixñ_n‹mÆ
() \

1078 
cuºít_pixñ
 = 
∑Àâe_øm_c⁄vîãd
[0] \

1079 

	)

1080 
	#afföe_ªndî_bg_pixñ_Æpha
() \

1081 
cuºít_pixñ
 = 
bg_comböe
 \

1082 

	)

1083 
	#afföe_ªndî_bg_pixñ_cﬁ‹16
() \

1084 
	`afföe_ªndî_bg_pixñ_Æpha
() \

1085 

	)

1086 
	#afföe_ªndî_bg_pixñ_cﬁ‹32
() \

1087 
	`afföe_ªndî_bg_pixñ_Æpha
() \

1088 

	)

1089 
	#afföe_ªndî_bg_pixñ_ba£
(
Æpha_›
) \

1090 
afföe_ªndî_bg_pixñ_
##
	`Æpha_›
() \

1091 

	)

1092 
	#afföe_ªndî_bg_pixñ_å™•¨ít
(
Æpha_›
) \

1093 

	)

1094 
	#afföe_ªndî_bg_pixñ_c›y
(
Æpha_›
) \

1095 

	)

1096 
	#afföe_ªndî_bg_ba£
(
Æpha_›
) \

1097 
de°_±r
[0] = 
cuºít_pixñ


	)

1099 
	#afföe_ªndî_bg_å™•¨ít
(
Æpha_›
) \

1100 

	)

1101 
	#afföe_ªndî_bg_c›y
(
Æpha_›
) \

1102 

	)

1103 
	#afföe_ªndî_bg_ªmaödî_ba£
(
Æpha_›
) \

1104 
afföe_ªndî_bg_pixñ_
##
	`Æpha_›
(); \

1105 ; 
i
 < 
íd
; i++) \

1107 
	`afföe_ªndî_bg_ba£
(
Æpha_›
); \

1108 
	`adv™˚_de°_±r_ba£
(1); \

1110 

	)

1111 
	#afföe_ªndî_bg_ªmaödî_å™•¨ít
(
Æpha_›
) \

1112 

	)

1113 
	#afföe_ªndî_bg_ªmaödî_c›y
(
Æpha_›
) \

1114 

	)

1115 
	#afföe_ªndî_√xt
(
comböe_›
) \

1116 
sour˚_x
 +
dx
; \

1117 
sour˚_y
 +
dy
; \

1118 
adv™˚_de°_±r_
##
	`comböe_›
(1) \

1119 

	)

1120 
	#afföe_ªndî_sˇÀ_off£t
() \

1121 
tûe_ba£
 +((
pixñ_y
 % 8) * 8); \

1122 
m≠_ba£
 +(
pixñ_y
 / 8Ë<< 
m≠_pôch
 \

1123 

	)

1124 
	#afföe_ªndî_sˇÀ_pixñ
(
comböe_›
, 
Æpha_›
) \

1125 
m≠_off£t
 = (
pixñ_x
 / 8); \

1126 if(
m≠_off£t
 !
œ°_m≠_off£t
) \

1128 
tûe_±r
 = 
tûe_ba£
 + (
m≠_ba£
[
m≠_off£t
] * 64); \

1129 
œ°_m≠_off£t
 = 
m≠_off£t
; \

1131 
tûe_±r
 = 
tûe_ba£
 + (
m≠_ba£
[(
pixñ_x
 / 8)] * 64); \

1132 
cuºít_pixñ
 = 
tûe_±r
[(
pixñ_x
 % 8)]; \

1133 
tûe_8bµ_døw_
##
	`comböe_›
(0, 
n⁄e
, 0, 
Æpha_›
); \

1134 
	`afföe_ªndî_√xt
(
comböe_›
) \

1135 

	)

1136 
	#afföe_ªndî_sˇÀ
(
comböe_›
, 
Æpha_›
) \

1138 
pixñ_y
 = 
sour˚_y
 >> 8; \

1139 
u32
 
i
 = 0; \

1140 
afföe_ªndî_bg_pixñ_
##
	`comböe_›
(
Æpha_›
); \

1141 if((
u32
)
pixñ_y
 < (u32)
width_height
) \

1143 
	`afföe_ªndî_sˇÀ_off£t
(); \

1144 ; 
i
 < 
íd
; i++) \

1146 
pixñ_x
 = 
sour˚_x
 >> 8; \

1148 if((
u32
)
pixñ_x
 < (u32)
width_height
) \

1153 
afföe_ªndî_bg_
##
	`comböe_›
(
Æpha_›
); \

1154 
	`afföe_ªndî_√xt
(
comböe_›
); \

1157 ; 
i
 < 
íd
; i++) \

1159 
pixñ_x
 = 
sour˚_x
 >> 8; \

1161 if((
u32
)
pixñ_x
 >(u32)
width_height
) \

1164 
	`afföe_ªndî_sˇÀ_pixñ
(
comböe_›
, 
Æpha_›
); \

1167 
afföe_ªndî_bg_ªmaödî_
##
	`comböe_›
(
Æpha_›
); \

1169 

	)

1170 
	#afföe_ªndî_sˇÀ_wøp
(
comböe_›
, 
Æpha_›
) \

1172 
u32
 
wøp_mask
 = 
width_height
 - 1; \

1173 
pixñ_y
 = (
sour˚_y
 >> 8Ë& 
wøp_mask
; \

1174 if((
u32
)
pixñ_y
 < (u32)
width_height
) \

1176 
	`afföe_ªndî_sˇÀ_off£t
(); \

1177 
i
 = 0; i < 
íd
; i++) \

1179 
pixñ_x
 = (
sour˚_x
 >> 8Ë& 
wøp_mask
; \

1180 
	`afföe_ªndî_sˇÀ_pixñ
(
comböe_›
, 
Æpha_›
); \

1184 

	)

1186 
	#afföe_ªndî_rŸ©e_pixñ
(
comböe_›
, 
Æpha_›
) \

1187 
m≠_off£t
 = (
pixñ_x
 / 8Ë+ ((
pixñ_y
 / 8Ë<< 
m≠_pôch
); \

1188 if(
m≠_off£t
 !
œ°_m≠_off£t
) \

1190 
tûe_±r
 = 
tûe_ba£
 + (
m≠_ba£
[
m≠_off£t
] * 64); \

1191 
œ°_m≠_off£t
 = 
m≠_off£t
; \

1194 
cuºít_pixñ
 = 
tûe_±r
[(
pixñ_x
 % 8Ë+ ((
pixñ_y
 % 8) * 8)]; \

1195 
tûe_8bµ_døw_
##
	`comböe_›
(0, 
n⁄e
, 0, 
Æpha_›
); \

1196 
	`afföe_ªndî_√xt
(
comböe_›
) \

1197 

	)

1198 
	#afföe_ªndî_rŸ©e
(
comböe_›
, 
Æpha_›
) \

1200 
afföe_ªndî_bg_pixñ_
##
	`comböe_›
(
Æpha_›
); \

1201 
i
 = 0; i < 
íd
; i++) \

1203 
pixñ_x
 = 
sour˚_x
 >> 8; \

1204 
pixñ_y
 = 
sour˚_y
 >> 8; \

1206 if(((
u32
)
pixñ_x
 < (u32)
width_height
) && \

1207 ((
u32
)
pixñ_y
 < (u32)
width_height
)) \

1211 
afföe_ªndî_bg_
##
	`comböe_›
(
Æpha_›
); \

1212 
	`afföe_ªndî_√xt
(
comböe_›
); \

1215 ; 
i
 < 
íd
; i++) \

1217 
pixñ_x
 = 
sour˚_x
 >> 8; \

1218 
pixñ_y
 = 
sour˚_y
 >> 8; \

1220 if(((
u32
)
pixñ_x
 >(u32)
width_height
) || \

1221 ((
u32
)
pixñ_y
 >(u32)
width_height
)) \

1223 
afföe_ªndî_bg_ªmaödî_
##
	`comböe_›
(
Æpha_›
); \

1227 
	`afföe_ªndî_rŸ©e_pixñ
(
comböe_›
, 
Æpha_›
); \

1230 

	)

1231 
	#afföe_ªndî_rŸ©e_wøp
(
comböe_›
, 
Æpha_›
) \

1233 
u32
 
wøp_mask
 = 
width_height
 - 1; \

1234 
i
 = 0; i < 
íd
; i++) \

1236 
pixñ_x
 = (
sour˚_x
 >> 8Ë& 
wøp_mask
; \

1237 
pixñ_y
 = (
sour˚_y
 >> 8Ë& 
wøp_mask
; \

1239 
	`afföe_ªndî_rŸ©e_pixñ
(
comböe_›
, 
Æpha_›
); \

1242 

	)

1246 
	#ªndî_sˇ∆öe_afföe_buûdî
(
comböe_›
, 
Æpha_›
) \

1247 
ªndî_sˇ∆öe_afföe_
##
comböe_›
##
_
##
	`Æpha_›
(
u32
 
œyî
, \

1248 
u32
 
°¨t
, u32 
íd
, *
sˇ∆öe
) \

1250 
ªndî_sˇ∆öe_exåa_v¨übÀs_
##
comböe_›
##
_
##
	`Æpha_›
(
afföe
); \

1251 
u32
 
bg_c⁄åﬁ
 = 
io_ªgi°îs
[
REG_BG0CNT
 + 
œyî
]; \

1252 
u32
 
cuºít_pixñ
; \

1253 
s32
 
sour˚_x
, 
sour˚_y
; \

1254 
u32
 
vcou¡
 = 
io_ªgi°îs
[
REG_VCOUNT
]; \

1255 
u32
 
pixñ_x
, 
pixñ_y
; \

1256 
u32
 
œyî_off£t
 = (
œyî
 - 2) * 8; \

1257 
s32
 
dx
, 
dy
; \

1258 
u32
 
m≠_size
 = (
bg_c⁄åﬁ
 >> 14) & 0x03; \

1259 
u32
 
width_height
 = 1 << (7 + 
m≠_size
); \

1260 
u32
 
m≠_pôch
 = 
m≠_size
 + 4; \

1261 
u8
 *
m≠_ba£
 = 
vøm
 + (((
bg_c⁄åﬁ
 >> 8) & 0x1F) * (1024 * 2)); \

1262 
u8
 *
tûe_ba£
 = 
vøm
 + (((
bg_c⁄åﬁ
 >> 2) & 0x03) * (1024 * 16)); \

1263 
u8
 *
tûe_±r
; \

1264 
u32
 
m≠_off£t
, 
œ°_m≠_off£t
 = (u32)-1; \

1265 
u32
 
i
; \

1266 
ªndî_sˇ∆öe_de°_
##
Æpha_›
 *
de°_±r
 = \

1267 ((
ªndî_sˇ∆öe_de°_
##
Æpha_›
 *)
sˇ∆öe
Ë+ 
°¨t
; \

1269 
dx
 = (
s16
)
io_ªgi°îs
[
REG_BG2PA
 + 
œyî_off£t
]; \

1270 
dy
 = (
s16
)
io_ªgi°îs
[
REG_BG2PC
 + 
œyî_off£t
]; \

1271 
sour˚_x
 = 
afföe_ª„ªn˚_x
[
œyî
 - 2] + (
°¨t
 * 
dx
); \

1272 
sour˚_y
 = 
afföe_ª„ªn˚_y
[
œyî
 - 2] + (
°¨t
 * 
dy
); \

1274 
íd
 -
°¨t
; \

1276 ((
bg_c⁄åﬁ
 >> 12Ë& 0x02Ë| (
dy
 != 0)) \

1279 
	`afföe_ªndî_sˇÀ
(
comböe_›
, 
Æpha_›
); \

1283 
	`afföe_ªndî_rŸ©e
(
comböe_›
, 
Æpha_›
); \

1287 
	`afföe_ªndî_sˇÀ_wøp
(
comböe_›
, 
Æpha_›
); \

1291 
	`afföe_ªndî_rŸ©e_wøp
(
comböe_›
, 
Æpha_›
); \

1295 

	)

1296 
ªndî_sˇ∆öe_afföe_buûdî
(
ba£
, 
n‹mÆ
);

1297 
ªndî_sˇ∆öe_afföe_buûdî
(
å™•¨ít
, 
n‹mÆ
);

1298 
ªndî_sˇ∆öe_afföe_buûdî
(
ba£
, 
cﬁ‹16
);

1299 
ªndî_sˇ∆öe_afföe_buûdî
(
å™•¨ít
, 
cﬁ‹16
);

1300 
ªndî_sˇ∆öe_afföe_buûdî
(
ba£
, 
cﬁ‹32
);

1301 
ªndî_sˇ∆öe_afföe_buûdî
(
å™•¨ít
, 
cﬁ‹32
);

1302 
ªndî_sˇ∆öe_afföe_buûdî
(
ba£
, 
Æpha
);

1303 
ªndî_sˇ∆öe_afföe_buûdî
(
å™•¨ít
, 
Æpha
);

1306 
	#bôm≠_ªndî_pixñ_mode3
(
Æpha_›
) \

1307 
	`c⁄vît_∑Àâe
(
cuºít_pixñ
); \

1308 *
de°_±r
 = 
cuºít_pixñ
 \

1309 

	)

1310 
	#bôm≠_ªndî_pixñ_mode4
(
Æpha_›
) \

1311 
tûe_ex∑nd_ba£_
##
	`Æpha_›
(0) \

1312 

	)

1313 
	#bôm≠_ªndî_pixñ_mode5
(
Æpha_›
) \

1314 
	`bôm≠_ªndî_pixñ_mode3
(
Æpha_›
) \

1315 

	)

1317 
	#bôm≠_ªndî_sˇÀ
(
ty≥
, 
Æpha_›
, 
width
, 
height
) \

1318 
pixñ_y
 = (
sour˚_y
 >> 8); \

1319 if((
u32
)
pixñ_y
 < (u32)
height
) \

1321 
pixñ_x
 = (
sour˚_x
 >> 8); \

1322 
§c_±r
 +(
pixñ_y
 * 
width
); \

1323 if(
dx
 == 0x100) \

1325 if(
pixñ_x
 < 0) \

1327 
íd
 +
pixñ_x
; \

1328 
de°_±r
 -
pixñ_x
; \

1329 
pixñ_x
 = 0; \

1333 if(
pixñ_x
 > 0) \

1335 
§c_±r
 +
pixñ_x
; \

1338 if((
pixñ_x
 + 
íd
Ë>
width
) \

1339 
íd
 = (
width
 - 
pixñ_x
); \

1341 
i
 = 0; (
s32
)ò< (s32)
íd
; i++) \

1343 
cuºít_pixñ
 = *
§c_±r
; \

1344 
bôm≠_ªndî_pixñ_
##
	`ty≥
(
Æpha_›
); \

1345 
§c_±r
++; \

1346 
de°_±r
++; \

1351 if((
u32
)(
sour˚_y
 >> 8Ë< (u32)
height
) \

1353 
i
 = 0; i < 
íd
; i++) \

1355 
pixñ_x
 = (
sour˚_x
 >> 8); \

1357 if((
u32
)
pixñ_x
 < (u32)
width
) \

1360 
sour˚_x
 +
dx
; \

1361 
de°_±r
++; \

1364 ; 
i
 < 
íd
; i++) \

1366 
pixñ_x
 = (
sour˚_x
 >> 8); \

1368 if((
u32
)
pixñ_x
 >(u32)
width
) \

1371 
cuºít_pixñ
 = 
§c_±r
[
pixñ_x
]; \

1372 
bôm≠_ªndî_pixñ_
##
	`ty≥
(
Æpha_›
); \

1374 
sour˚_x
 +
dx
; \

1375 
de°_±r
++; \

1380 

	)

1381 
	#bôm≠_ªndî_rŸ©e
(
ty≥
, 
Æpha_›
, 
width
, 
height
) \

1382 
i
 = 0; i < 
íd
; i++) \

1384 
pixñ_x
 = 
sour˚_x
 >> 8; \

1385 
pixñ_y
 = 
sour˚_y
 >> 8; \

1387 if(((
u32
)
pixñ_x
 < (u32)
width
Ë&& ((u32)
pixñ_y
 < (u32)
height
)) \

1390 
sour˚_x
 +
dx
; \

1391 
sour˚_y
 +
dy
; \

1392 
de°_±r
++; \

1395 ; 
i
 < 
íd
; i++) \

1397 
pixñ_x
 = (
sour˚_x
 >> 8); \

1398 
pixñ_y
 = (
sour˚_y
 >> 8); \

1400 if(((
u32
)
pixñ_x
 >(u32)
width
Ë|| ((u32)
pixñ_y
 >(u32)
height
)) \

1403 
cuºít_pixñ
 = 
§c_±r
[
pixñ_x
 + (
pixñ_y
 * 
width
)]; \

1404 
bôm≠_ªndî_pixñ_
##
	`ty≥
(
Æpha_›
); \

1406 
sour˚_x
 +
dx
; \

1407 
sour˚_y
 +
dy
; \

1408 
de°_±r
++; \

1410 

	)

1412 
	#ªndî_sˇ∆öe_vøm_£tup_mode3
() \

1413 
u16
 *
§c_±r
 = (u16 *)
vøm
 \

1414 

	)

1415 
	#ªndî_sˇ∆öe_vøm_£tup_mode5
() \

1416 
u16
 *
§c_±r
; \

1417 if(
io_ªgi°îs
[
REG_DISPCNT
] & 0x10) \

1418 
§c_±r
 = (
u16
 *)(
vøm
 + 0xA000); \

1420 
§c_±r
 = (
u16
 *)
vøm
 \

1421 

	)

1423 #ifde‡
RENDER_COLOR16_NORMAL


1425 
	#ªndî_sˇ∆öe_vøm_£tup_mode4
() \

1426 c⁄° 
u32
 
pixñ_comböe
 = 0; \

1427 
u8
 *
§c_±r
; \

1428 if(
io_ªgi°îs
[
REG_DISPCNT
] & 0x10) \

1429 
§c_±r
 = 
vøm
 + 0xA000; \

1431 
§c_±r
 = 
vøm
 \

1432 

	)

1436 
	#ªndî_sˇ∆öe_vøm_£tup_mode4
() \

1437 
u16
 *
∑Àâe
 = 
∑Àâe_øm_c⁄vîãd
; \

1438 
u8
 *
§c_±r
; \

1439 if(
io_ªgi°îs
[
REG_DISPCNT
] & 0x10) \

1440 
§c_±r
 = 
vøm
 + 0xA000; \

1442 
§c_±r
 = 
vøm
 \

1443 

	)

1450 
	#ªndî_sˇ∆öe_bôm≠_buûdî
(
ty≥
, 
Æpha_›
, 
width
, 
height
) \

1451 
ªndî_sˇ∆öe_bôm≠_
##
ty≥
##
_
##
	`Æpha_›
(
u32
 
°¨t
, u32 
íd
, \

1452 *
sˇ∆öe
) \

1454 
u32
 
bg_c⁄åﬁ
 = 
io_ªgi°îs
[
REG_BG2CNT
]; \

1455 
u32
 
cuºít_pixñ
; \

1456 
s32
 
sour˚_x
, 
sour˚_y
; \

1457 
u32
 
vcou¡
 = 
io_ªgi°îs
[
REG_VCOUNT
]; \

1458 
s32
 
pixñ_x
, 
pixñ_y
; \

1460 
s32
 
dx
 = (
s16
)
io_ªgi°îs
[
REG_BG2PA
]; \

1461 
s32
 
dy
 = (
s16
)
io_ªgi°îs
[
REG_BG2PC
]; \

1463 
u32
 
i
; \

1465 
ªndî_sˇ∆öe_de°_
##
Æpha_›
 *
de°_±r
 = \

1466 ((
ªndî_sˇ∆öe_de°_
##
Æpha_›
 *)
sˇ∆öe
Ë+ 
°¨t
; \

1467 
ªndî_sˇ∆öe_vøm_£tup_
##
	`ty≥
(); \

1469 
íd
 -
°¨t
; \

1471 
sour˚_x
 = 
afföe_ª„ªn˚_x
[0] + (
°¨t
 * 
dx
); \

1472 
sour˚_y
 = 
afföe_ª„ªn˚_y
[0] + (
°¨t
 * 
dy
); \

1474 if(
dy
 == 0) \

1476 
	`bôm≠_ªndî_sˇÀ
(
ty≥
, 
Æpha_›
, 
width
, 
height
); \

1480 
	`bôm≠_ªndî_rŸ©e
(
ty≥
, 
Æpha_›
, 
width
, 
height
); \

1483 

	)

1484 
ªndî_sˇ∆öe_bôm≠_buûdî
(
mode3
, 
n‹mÆ
, 240, 160);

1485 
ªndî_sˇ∆öe_bôm≠_buûdî
(
mode4
, 
n‹mÆ
, 240, 160);

1486 
ªndî_sˇ∆öe_bôm≠_buûdî
(
mode5
, 
n‹mÆ
, 160, 128);

1491 
	#tûe_œyî_ªndî_fun˘i⁄s
(
ty≥
) \

1493 
ªndî_sˇ∆öe_
##
ty≥
##
_ba£_n‹mÆ
, \

1494 
ªndî_sˇ∆öe_
##
ty≥
##
_å™•¨ít_n‹mÆ
, \

1495 
ªndî_sˇ∆öe_
##
ty≥
##
_ba£_Æpha
, \

1496 
ªndî_sˇ∆öe_
##
ty≥
##
_å™•¨ít_Æpha
, \

1497 
ªndî_sˇ∆öe_
##
ty≥
##
_ba£_cﬁ‹16
, \

1498 
ªndî_sˇ∆öe_
##
ty≥
##
_å™•¨ít_cﬁ‹16
, \

1499 
ªndî_sˇ∆öe_
##
ty≥
##
_ba£_cﬁ‹32
, \

1500 
ªndî_sˇ∆öe_
##
ty≥
##
_å™•¨ít_cﬁ‹32
 \

1502 

	)

1506 
	#tûe_œyî_ªndî_nuŒ
() \

1508 
NULL
, NULL, NULL, NULL \

1510 

	)

1511 
	#bôm≠_œyî_ªndî_fun˘i⁄s
(
ty≥
) \

1513 
ªndî_sˇ∆öe_bôm≠_
##
ty≥
##
_n‹mÆ
 \

1515 

	)

1518 
tûe_œyî_ªndî_°ru˘
 
	gtûe_mode_ªndîîs
[3][4] =

1521 
tûe_œyî_ªndî_fun˘i⁄s
(
ãxt
),Åile_layer_render_functions(text),

1522 
tûe_œyî_ªndî_fun˘i⁄s
(
ãxt
),Åile_layer_render_functions(text)

1525 
tûe_œyî_ªndî_fun˘i⁄s
(
ãxt
),Åile_layer_render_functions(text),

1526 
tûe_œyî_ªndî_fun˘i⁄s
(
afföe
),Åûe_œyî_ªndî_fun˘i⁄s(
ãxt
)

1529 
tûe_œyî_ªndî_fun˘i⁄s
(
ãxt
),Åile_layer_render_functions(text),

1530 
tûe_œyî_ªndî_fun˘i⁄s
(
afföe
),Åile_layer_render_functions(affine)

1534 
bôm≠_œyî_ªndî_°ru˘
 
	gbôm≠_mode_ªndîîs
[3] =

1536 
bôm≠_œyî_ªndî_fun˘i⁄s
(
mode3
),

1537 
bôm≠_œyî_ªndî_fun˘i⁄s
(
mode4
),

1538 
bôm≠_œyî_ªndî_fun˘i⁄s
(
mode5
)

1542 
	#ªndî_sˇ∆öe_œyî_fun˘i⁄s_tûe
() \

1543 
tûe_œyî_ªndî_°ru˘
 *
œyî_ªndîîs
 = \

1544 
tûe_mode_ªndîîs
[
di•˙t
 & 0x07] \

1545 

	)

1546 
	#ªndî_sˇ∆öe_œyî_fun˘i⁄s_bôm≠
() \

1547 
bôm≠_œyî_ªndî_°ru˘
 *
œyî_ªndîîs
 = \

1548 
bôm≠_mode_ªndîîs
 + ((
di•˙t
 & 0x07) - 3) \

1549 

	)

1553 
	#obj_tûe_off£t_noÊù
(
cﬁ‹_dïth
) \

1554 

	)

1555 
	#obj_tûe_off£t_Êù
(
cﬁ‹_dïth
) \

1556 + (
tûe_size_
##
cﬁ‹_dïth
 * ((
obj_width
 - 8) / 8)) \

1557 

	)

1562 
	#obj_tûe_right_off£t_noÊù
(
cﬁ‹_dïth
) \

1563 
tûe_±r
 +(
∑πül_tûe_off£t
 / 8Ë* 
tûe_size_
##
cﬁ‹_dïth
 \

1564 

	)

1565 
	#obj_tûe_right_off£t_Êù
(
cﬁ‹_dïth
) \

1566 
tûe_±r
 -(
∑πül_tûe_off£t
 / 8Ë* 
tûe_size_
##
cﬁ‹_dïth
 \

1567 

	)

1570 
	#obj_tûe_off£t_1D
(
cﬁ‹_dïth
, 
Êù_›
) \

1571 
tûe_±r
 = 
tûe_ba£
 + ((
obj_©åibuã_2
 & 0x3FF) * 32) \

1572 + ((
vîtiˇl_off£t
 / 8Ë* (
obj_width
 / 8Ë* 
tûe_size_
##
cﬁ‹_dïth
) \

1573 + ((
vîtiˇl_off£t
 % 8Ë* 
tûe_width_
##
cﬁ‹_dïth
) \

1574 
obj_tûe_off£t_
##
	`Êù_›
(
cﬁ‹_dïth
) \

1575 

	)

1578 
	#obj_tûe_off£t_2D
(
cﬁ‹_dïth
, 
Êù_›
) \

1579 
tûe_±r
 = 
tûe_ba£
 + ((
obj_©åibuã_2
 & 0x3FF) * 32) \

1580 + ((
vîtiˇl_off£t
 / 8) * 1024) \

1581 + ((
vîtiˇl_off£t
 % 8Ë* 
tûe_width_
##
cﬁ‹_dïth
) \

1582 
obj_tûe_off£t_
##
	`Êù_›
(
cﬁ‹_dïth
) \

1583 

	)

1587 
	#obj_gë_∑Àâe_4bµ
() \

1588 
cuºít_∑Àâe
 = (
obj_©åibuã_2
 >> 8) & 0xF0 \

1589 

	)

1590 
	#obj_gë_∑Àâe_8bµ
() \

1591 

	)

1595 
	#obj_ªndî
(
comböe_›
, 
cﬁ‹_dïth
, 
Æpha_›
, 
m≠_•a˚
, 
Êù_›
) \

1597 
obj_gë_∑Àâe_
##
	`cﬁ‹_dïth
(); \

1598 
obj_tûe_off£t_
##
	`m≠_•a˚
(
cﬁ‹_dïth
, 
Êù_›
); \

1600 if(
obj_x
 < (
s32
)
°¨t
) \

1602 
de°_±r
 = 
sˇ∆öe
 + 
°¨t
; \

1603 
pixñ_run
 = 
obj_width
 - (
°¨t
 - 
obj_x
); \

1604 if((
s32
)
pixñ_run
 > 0) \

1606 if((
obj_x
 + 
obj_width
Ë>
íd
) \

1608 
pixñ_run
 = 
íd
 - 
°¨t
; \

1609 
∑πül_tûe_off£t
 = 
°¨t
 - 
obj_x
; \

1610 
obj_tûe_right_off£t_
##
	`Êù_›
(
cﬁ‹_dïth
); \

1611 
∑πül_tûe_off£t
 %= 8; \

1613 if(
∑πül_tûe_off£t
) \

1615 
∑πül_tûe_run
 = 8 - 
∑πül_tûe_off£t
; \

1616 if((
s32
)
pixñ_run
 < (s32)
∑πül_tûe_run
) \

1618 if((
s32
)
pixñ_run
 > 0) \

1620 
∑πül_tûe_run
 = 
pixñ_run
; \

1621 
	`∑πül_tûe_mid_obj
(
comböe_›
, 
cﬁ‹_dïth
, 
Æpha_›
, \

1622 
Êù_›
); \

1628 
pixñ_run
 -
∑πül_tûe_run
; \

1629 
	`∑πül_tûe_right_obj
(
comböe_›
, 
cﬁ‹_dïth
, 
Æpha_›
, \

1630 
Êù_›
); \

1633 
tûe_run
 = 
pixñ_run
 / 8; \

1634 
	`mu…ùÀ_tûe_obj
(
comböe_›
, 
cﬁ‹_dïth
, 
Æpha_›
, 
Êù_›
); \

1635 
∑πül_tûe_run
 = 
pixñ_run
 % 8; \

1636 if(
∑πül_tûe_run
) \

1638 
	`∑πül_tûe_À·_obj
(
comböe_›
, 
cﬁ‹_dïth
, 
Æpha_›
, \

1639 
Êù_›
); \

1644 
∑πül_tûe_off£t
 = 
°¨t
 - 
obj_x
; \

1645 
obj_tûe_right_off£t_
##
	`Êù_›
(
cﬁ‹_dïth
); \

1646 
∑πül_tûe_off£t
 %= 8; \

1647 if(
∑πül_tûe_off£t
) \

1649 
∑πül_tûe_run
 = 8 - 
∑πül_tûe_off£t
; \

1650 
	`∑πül_tûe_right_obj
(
comböe_›
, 
cﬁ‹_dïth
, 
Æpha_›
, \

1651 
Êù_›
); \

1653 
tûe_run
 = 
pixñ_run
 / 8; \

1654 
	`mu…ùÀ_tûe_obj
(
comböe_›
, 
cﬁ‹_dïth
, 
Æpha_›
, 
Êù_›
); \

1660 if((
obj_x
 + 
obj_width
Ë>
íd
) \

1662 
pixñ_run
 = 
íd
 - 
obj_x
; \

1663 if((
s32
)
pixñ_run
 > 0) \

1665 
de°_±r
 = 
sˇ∆öe
 + 
obj_x
; \

1666 
tûe_run
 = 
pixñ_run
 / 8; \

1667 
	`mu…ùÀ_tûe_obj
(
comböe_›
, 
cﬁ‹_dïth
, 
Æpha_›
, 
Êù_›
); \

1668 
∑πül_tûe_run
 = 
pixñ_run
 % 8; \

1669 if(
∑πül_tûe_run
) \

1671 
	`∑πül_tûe_À·_obj
(
comböe_›
, 
cﬁ‹_dïth
, 
Æpha_›
, 
Êù_›
); \

1677 
de°_±r
 = 
sˇ∆öe
 + 
obj_x
; \

1678 
tûe_run
 = 
obj_width
 / 8; \

1679 
	`mu…ùÀ_tûe_obj
(
comböe_›
, 
cﬁ‹_dïth
, 
Æpha_›
, 
Êù_›
); \

1682 

	)

1683 
	#obj_sˇÀ_off£t_1D
(
cﬁ‹_dïth
) \

1684 
tûe_±r
 = 
tûe_ba£
 + ((
obj_©åibuã_2
 & 0x3FF) * 32) \

1685 + ((
vîtiˇl_off£t
 / 8Ë* (
max_x
 / 8Ë* 
tûe_size_
##
cﬁ‹_dïth
) \

1686 + ((
vîtiˇl_off£t
 % 8Ë* 
tûe_width_
##
cﬁ‹_dïth
) \

1687 

	)

1690 
	#obj_sˇÀ_off£t_2D
(
cﬁ‹_dïth
) \

1691 
tûe_±r
 = 
tûe_ba£
 + ((
obj_©åibuã_2
 & 0x3FF) * 32) \

1692 + ((
vîtiˇl_off£t
 / 8) * 1024) \

1693 + ((
vîtiˇl_off£t
 % 8Ë* 
tûe_width_
##
cﬁ‹_dïth
) \

1694 

	)

1695 
	#obj_ªndî_sˇÀ_pixñ_4bµ
(
comböe_›
, 
Æpha_›
) \

1696 if(
tûe_x
 & 0x01) \

1698 
cuºít_pixñ
 = 
tûe_±r
[
tûe_m≠_off£t
 + ((
tûe_x
 >> 1) & 0x03)] >> 4; \

1702 
cuºít_pixñ
 = \

1703 
tûe_±r
[
tûe_m≠_off£t
 + ((
tûe_x
 >> 1) & 0x03)] & 0x0F; \

1706 
tûe_4bµ_døw_
##
	`comböe_›
(0, 
n⁄e
, 0, 
Æpha_›
) \

1707 

	)

1709 
	#obj_ªndî_sˇÀ_pixñ_8bµ
(
comböe_›
, 
Æpha_›
) \

1710 
cuºít_pixñ
 = 
tûe_±r
[
tûe_m≠_off£t
 + (
tûe_x
 & 0x07)]; \

1711 
tûe_8bµ_døw_
##
	`comböe_›
(0, 
n⁄e
, 0, 
Æpha_›
); \

1712 

	)

1713 
	#obj_ªndî_sˇÀ
(
comböe_›
, 
cﬁ‹_dïth
, 
Æpha_›
, 
m≠_•a˚
) \

1715 
u32
 
vîtiˇl_off£t
; \

1716 
sour˚_y
 +(
y_dñè
 * 
dmy
); \

1717 
vîtiˇl_off£t
 = (
sour˚_y
 >> 8); \

1718 if((
u32
)
vîtiˇl_off£t
 < (u32)
max_y
) \

1720 
obj_sˇÀ_off£t_
##
	`m≠_•a˚
(
cﬁ‹_dïth
); \

1721 
sour˚_x
 +(
y_dñè
 * 
dmx
Ë- (
middÀ_x
 * 
dx
); \

1723 
i
 = 0; i < 
obj_width
; i++) \

1725 
tûe_x
 = (
sour˚_x
 >> 8); \

1727 if((
u32
)
tûe_x
 < (u32)
max_x
) \

1730 
sour˚_x
 +
dx
; \

1731 
adv™˚_de°_±r_
##
	`comböe_›
(1); \

1734 ; 
i
 < 
obj_width
; i++) \

1736 
tûe_x
 = (
sour˚_x
 >> 8); \

1738 if((
u32
)
tûe_x
 >(u32)
max_x
) \

1741 
tûe_m≠_off£t
 = (
tûe_x
 >> 3Ë* 
tûe_size_
##
cﬁ‹_dïth
; \

1742 
obj_ªndî_sˇÀ_pixñ_
##
	`cﬁ‹_dïth
(
comböe_›
, 
Æpha_›
); \

1744 
sour˚_x
 +
dx
; \

1745 
adv™˚_de°_±r_
##
	`comböe_›
(1); \

1749 

	)

1751 
	#obj_rŸ©e_off£t_1D
(
cﬁ‹_dïth
) \

1752 
obj_tûe_pôch
 = (
max_x
 / 8Ë* 
tûe_size_
##
cﬁ‹_dïth
 \

1753 

	)

1754 
	#obj_rŸ©e_off£t_2D
(
cﬁ‹_dïth
) \

1755 
obj_tûe_pôch
 = 1024 \

1756 

	)

1757 
	#obj_ªndî_rŸ©e_pixñ_4bµ
(
comböe_›
, 
Æpha_›
) \

1758 if(
tûe_x
 & 0x01) \

1760 
cuºít_pixñ
 = 
tûe_±r
[
tûe_m≠_off£t
 + \

1761 ((
tûe_x
 >> 1Ë& 0x03Ë+ ((
tûe_y
 & 0x07Ë* 
obj_pôch
)] >> 4; \

1765 
cuºít_pixñ
 = 
tûe_±r
[
tûe_m≠_off£t
 + \

1766 ((
tûe_x
 >> 1Ë& 0x03Ë+ ((
tûe_y
 & 0x07Ë* 
obj_pôch
)] & 0x0F; \

1769 
tûe_4bµ_døw_
##
	`comböe_›
(0, 
n⁄e
, 0, 
Æpha_›
) \

1770 

	)

1771 
	#obj_ªndî_rŸ©e_pixñ_8bµ
(
comböe_›
, 
Æpha_›
) \

1772 
cuºít_pixñ
 = 
tûe_±r
[
tûe_m≠_off£t
 + \

1773 (
tûe_x
 & 0x07Ë+ ((
tûe_y
 & 0x07Ë* 
obj_pôch
)]; \

1775 
tûe_8bµ_døw_
##
	`comböe_›
(0, 
n⁄e
, 0, 
Æpha_›
) \

1776 

	)

1777 
	#obj_ªndî_rŸ©e
(
comböe_›
, 
cﬁ‹_dïth
, 
Æpha_›
, 
m≠_•a˚
) \

1779 
tûe_±r
 = 
tûe_ba£
 + ((
obj_©åibuã_2
 & 0x3FF) * 32); \

1780 
obj_rŸ©e_off£t_
##
	`m≠_•a˚
(
cﬁ‹_dïth
); \

1782 
sour˚_x
 +(
y_dñè
 * 
dmx
Ë- (
middÀ_x
 * 
dx
); \

1783 
sour˚_y
 +(
y_dñè
 * 
dmy
Ë- (
middÀ_x
 * 
dy
); \

1785 
i
 = 0; i < 
obj_width
; i++) \

1787 
tûe_x
 = (
sour˚_x
 >> 8); \

1788 
tûe_y
 = (
sour˚_y
 >> 8); \

1790 if(((
u32
)
tûe_x
 < (u32)
max_x
Ë&& ((u32)
tûe_y
 < (u32)
max_y
)) \

1793 
sour˚_x
 +
dx
; \

1794 
sour˚_y
 +
dy
; \

1795 
adv™˚_de°_±r_
##
	`comböe_›
(1); \

1798 ; 
i
 < 
obj_width
; i++) \

1800 
tûe_x
 = (
sour˚_x
 >> 8); \

1801 
tûe_y
 = (
sour˚_y
 >> 8); \

1803 if(((
u32
)
tûe_x
 >(u32)
max_x
Ë|| ((u32)
tûe_y
 >(u32)
max_y
)) \

1806 
tûe_m≠_off£t
 = ((
tûe_x
 >> 3Ë* 
tûe_size_
##
cﬁ‹_dïth
) + \

1807 ((
tûe_y
 >> 3Ë* 
obj_tûe_pôch
); \

1808 
obj_ªndî_rŸ©e_pixñ_
##
	`cﬁ‹_dïth
(
comböe_›
, 
Æpha_›
); \

1810 
sour˚_x
 +
dx
; \

1811 
sour˚_y
 +
dy
; \

1812 
adv™˚_de°_±r_
##
	`comböe_›
(1); \

1815 

	)

1818 
	#obj_ªndî_afföe
(
comböe_›
, 
cﬁ‹_dïth
, 
Æpha_›
, 
m≠_•a˚
) \

1820 
s16
 *
∑øms
 = 
ﬂm_øm
 + (((
obj_©åibuã_1
 >> 9) & 0x1F) * 16); \

1821 
s32
 
dx
 = 
∑øms
[3]; \

1822 
s32
 
dmx
 = 
∑øms
[7]; \

1823 
s32
 
dy
 = 
∑øms
[11]; \

1824 
s32
 
dmy
 = 
∑øms
[15]; \

1825 
s32
 
sour˚_x
, 
sour˚_y
; \

1826 
s32
 
tûe_x
, 
tûe_y
; \

1827 
u32
 
tûe_off£t
; \

1828 
u32
 
tûe_m≠_off£t
; \

1829 
s32
 
middÀ_x
; \

1830 
s32
 
middÀ_y
; \

1831 
s32
 
max_x
 = 
obj_width
; \

1832 
s32
 
max_y
 = 
obj_height
; \

1833 
s32
 
y_dñè
; \

1834 
u32
 
obj_pôch
 = 
tûe_width_
##
cﬁ‹_dïth
; \

1835 
u32
 
obj_tûe_pôch
; \

1837 
middÀ_x
 = (
obj_width
 / 2); \

1838 
middÀ_y
 = (
obj_height
 / 2); \

1840 
sour˚_x
 = (
middÀ_x
 << 8); \

1841 
sour˚_y
 = (
middÀ_y
 << 8); \

1844 if(
obj_©åibuã_0
 & 0x200) \

1846 
obj_width
 *= 2; \

1847 
obj_height
 *= 2; \

1848 
middÀ_x
 *= 2; \

1849 
middÀ_y
 *= 2; \

1852 if((
s32
)
obj_x
 < (s32)
°¨t
) \

1854 
u32
 
x_dñè
 = 
°¨t
 - 
obj_x
; \

1855 
middÀ_x
 -
x_dñè
; \

1856 
obj_width
 -
x_dñè
; \

1857 
obj_x
 = 
°¨t
; \

1859 if((
s32
)
obj_width
 <= 0) \

1863 if((
s32
)(
obj_x
 + 
obj_width
Ë>(s32)
íd
) \

1865 
obj_width
 = 
íd
 - 
obj_x
; \

1867 if((
s32
)
obj_width
 <= 0) \

1870 
de°_±r
 = 
sˇ∆öe
 + 
obj_x
; \

1872 
y_dñè
 = 
vcou¡
 - (
obj_y
 + 
middÀ_y
); \

1874 
obj_gë_∑Àâe_
##
	`cﬁ‹_dïth
(); \

1876 if(
dy
 == 0) \

1878 
	`obj_ªndî_sˇÀ
(
comböe_›
, 
cﬁ‹_dïth
, 
Æpha_›
, 
m≠_•a˚
); \

1882 
	`obj_ªndî_rŸ©e
(
comböe_›
, 
cﬁ‹_dïth
, 
Æpha_›
, 
m≠_•a˚
); \

1885 

	)

1886 
u32
 
	gobj_width_èbÀ
[] = { 8, 16, 32, 64, 16, 32, 32, 64, 8, 8, 16, 32 };

1887 
u32
 
	gobj_height_èbÀ
[] = { 8, 16, 32, 64, 8, 8, 16, 32, 16, 32, 32, 64 };

1889 
u8
 
	gobj_¥i‹ôy_li°
[5][160][128];

1890 
u32
 
	gobj_¥i‹ôy_cou¡
[5][160];

1891 
u32
 
	gobj_Æpha_cou¡
[160];

1896 #ifde‡
RENDER_COLOR16_NORMAL


1898 
	#ªndî_sˇ∆öe_obj_exåa_v¨übÀs_n‹mÆ
(
bg_ty≥
) \

1899 c⁄° 
u32
 
pixñ_comböe
 = (1 << 8) \

1900 

	)

1903 
	#ªndî_sˇ∆öe_obj_exåa_v¨übÀs_n‹mÆ
(
bg_ty≥
) \

1904 
u16
 *
∑Àâe
 = 
∑Àâe_øm_c⁄vîãd
 + 256 \

1905 

	)

1909 
	#ªndî_sˇ∆öe_obj_exåa_v¨übÀs_cﬁ‹
() \

1910 
u32
 
de°
; \

1911 
u32
 
pixñ_comböe
 = 
	`cﬁ‹_comböe_mask
(4) | (1 << 8) \

1912 

	)

1913 
	#ªndî_sˇ∆öe_obj_exåa_v¨übÀs_Æpha_obj
(
m≠_•a˚
) \

1914 
	`ªndî_sˇ∆öe_obj_exåa_v¨übÀs_cﬁ‹
(); \

1915 if((
pixñ_comböe
 & 0x00000200) == 0) \

1917 
ªndî_sˇ∆öe_obj_cﬁ‹32_
##
	`m≠_•a˚
(
¥i‹ôy
, 
°¨t
, 
íd
, 
sˇ∆öe
); \

1920 

	)

1921 
	#ªndî_sˇ∆öe_obj_exåa_v¨übÀs_cﬁ‹16
(
m≠_•a˚
) \

1922 
	`ªndî_sˇ∆öe_obj_exåa_v¨übÀs_cﬁ‹
() \

1923 

	)

1924 
	#ªndî_sˇ∆öe_obj_exåa_v¨übÀs_cﬁ‹32
(
m≠_•a˚
) \

1925 
	`ªndî_sˇ∆öe_obj_exåa_v¨übÀs_cﬁ‹
() \

1926 

	)

1927 
	#ªndî_sˇ∆öe_obj_exåa_v¨übÀs_∑πül_Æpha
(
m≠_•a˚
) \

1928 
	`ªndî_sˇ∆öe_obj_exåa_v¨übÀs_cﬁ‹
(); \

1929 
u32
 
ba£_pixñ_comböe
 = 
pixñ_comböe
 \

1930 

	)

1931 
	#ªndî_sˇ∆öe_obj_exåa_v¨übÀs_c›y
(
ty≥
) \

1932 
u32
 
bld˙t
 = 
io_ªgi°îs
[
REG_BLDCNT
]; \

1933 
u32
 
di•˙t
 = 
io_ªgi°îs
[
REG_DISPCNT
]; \

1934 
u32
 
obj_íabÀ
 = 
io_ªgi°îs
[
REG_WINOUT
] >> 8; \

1935 
ªndî_sˇ∆öe_œyî_fun˘i⁄s_
##
	`ty≥
(); \

1936 
u32
 
c›y_°¨t
, 
c›y_íd
; \

1937 
u16
 
c›y_buf„r
[240]; \

1938 
u16
 *
c›y_±r
 \

1939 

	)

1940 
	#ªndî_sˇ∆öe_obj_exåa_v¨übÀs_c›y_tûe
(
m≠_•a˚
) \

1941 
	`ªndî_sˇ∆öe_obj_exåa_v¨übÀs_c›y
(
tûe
) \

1942 

	)

1943 
	#ªndî_sˇ∆öe_obj_exåa_v¨übÀs_c›y_bôm≠
(
m≠_•a˚
) \

1944 
	`ªndî_sˇ∆öe_obj_exåa_v¨übÀs_c›y
(
bôm≠
) \

1945 

	)

1947 
	#ªndî_sˇ∆öe_obj_maö
(
comböe_›
, 
Æpha_›
, 
m≠_•a˚
) \

1948 if(
obj_©åibuã_0
 & 0x100) \

1950 if((
obj_©åibuã_0
 >> 13) & 0x01) \

1952 
	`obj_ªndî_afföe
(
comböe_›
, 8b
µ
, 
Æpha_›
, 
m≠_•a˚
); \

1956 
	`obj_ªndî_afföe
(
comböe_›
, 4b
µ
, 
Æpha_›
, 
m≠_•a˚
); \

1961 
vîtiˇl_off£t
 = 
vcou¡
 - 
obj_y
; \

1963 if((
obj_©åibuã_1
 >> 13) & 0x01) \

1964 
vîtiˇl_off£t
 = 
obj_height
 - vertical_offset - 1; \

1966 ((
obj_©åibuã_0
 >> 12) & 0x02) | \

1967 ((
obj_©åibuã_1
 >> 12) & 0x01)) \

1970 
	`obj_ªndî
(
comböe_›
, 4b
µ
, 
Æpha_›
, 
m≠_•a˚
, 
noÊù
); \

1974 
	`obj_ªndî
(
comböe_›
, 4b
µ
, 
Æpha_›
, 
m≠_•a˚
, 
Êù
); \

1978 
	`obj_ªndî
(
comböe_›
, 8b
µ
, 
Æpha_›
, 
m≠_•a˚
, 
noÊù
); \

1982 
	`obj_ªndî
(
comböe_›
, 8b
µ
, 
Æpha_›
, 
m≠_•a˚
, 
Êù
); \

1986 

	)

1987 
	#ªndî_sˇ∆öe_obj_no_∑πül_Æpha
(
comböe_›
, 
Æpha_›
, 
m≠_•a˚
) \

1988 
	`ªndî_sˇ∆öe_obj_maö
(
comböe_›
, 
Æpha_›
, 
m≠_•a˚
) \

1989 

	)

1990 
	#ªndî_sˇ∆öe_obj_∑πül_Æpha
(
comböe_›
, 
Æpha_›
, 
m≠_•a˚
) \

1991 if((
obj_©åibuã_0
 >> 10) & 0x03) \

1993 
pixñ_comböe
 = 0x00000300; \

1994 
	`ªndî_sˇ∆öe_obj_maö
(
comböe_›
, 
Æpha_obj
, 
m≠_•a˚
); \

1998 
pixñ_comböe
 = 
ba£_pixñ_comböe
; \

1999 
	`ªndî_sˇ∆öe_obj_maö
(
comböe_›
, 
cﬁ‹32
, 
m≠_•a˚
); \

2001 

	)

2002 
	#ªndî_sˇ∆öe_obj_¥ﬁogue_å™•¨ít
(
Æpha_›
) \

2003 

	)

2004 
	#ªndî_sˇ∆öe_obj_¥ﬁogue_c›y_body
(
ty≥
) \

2005 
c›y_°¨t
 = 
obj_x
; \

2006 if(
obj_©åibuã_0
 & 0x200) \

2007 
c›y_íd
 = 
obj_x
 + (
obj_width
 * 2); \

2009 
c›y_íd
 = 
obj_x
 + 
obj_width
; \

2011 if(
c›y_°¨t
 < 
°¨t
) \

2012 
c›y_°¨t
 = 
°¨t
; \

2013 if(
c›y_íd
 > 
íd
) \

2014 
c›y_íd
 = 
íd
; \

2016 if((
c›y_°¨t
 < 
íd
Ë&& (
c›y_íd
 > 
°¨t
)) \

2018 
ªndî_sˇ∆öe_c⁄dôi⁄Æ_
##
	`ty≥
(
c›y_°¨t
, 
c›y_íd
, 
c›y_buf„r
, \

2019 
obj_íabÀ
, 
di•˙t
, 
bld˙t
, 
œyî_ªndîîs
); \

2020 
c›y_±r
 = 
c›y_buf„r
 + 
c›y_°¨t
; \

2026 

	)

2027 
	#ªndî_sˇ∆öe_obj_¥ﬁogue_c›y_tûe
() \

2028 
	`ªndî_sˇ∆öe_obj_¥ﬁogue_c›y_body
(
tûe
) \

2029 

	)

2030 
	#ªndî_sˇ∆öe_obj_¥ﬁogue_c›y_bôm≠
() \

2031 
	`ªndî_sˇ∆öe_obj_¥ﬁogue_c›y_body
(
bôm≠
) \

2032 

	)

2033 
	#ªndî_sˇ∆öe_obj_¥ﬁogue_c›y
(
Æpha_›
) \

2034 
ªndî_sˇ∆öe_obj_¥ﬁogue_
##
	`Æpha_›
() \

2035 

	)

2037 
	#ªndî_sˇ∆öe_obj_buûdî
(
comböe_›
, 
Æpha_›
, 
m≠_•a˚
, \

2038 
∑πül_Æpha_›
) \

2039 
ªndî_sˇ∆öe_obj_
##
Æpha_›
##
_
##
	`m≠_•a˚
(
u32
 
¥i‹ôy
, \

2040 
u32
 
°¨t
, u32 
íd
, 
ªndî_sˇ∆öe_de°_
##
Æpha_›
 *
sˇ∆öe
) \

2042 
ªndî_sˇ∆öe_obj_exåa_v¨übÀs_
##
	`Æpha_›
(
m≠_•a˚
); \

2043 
s32
 
obj_num
, 
i
; \

2044 
s32
 
obj_x
, 
obj_y
; \

2045 
s32
 
obj_size
; \

2046 
s32
 
obj_width
, 
obj_height
; \

2047 
u32
 
obj_©åibuã_0
, 
obj_©åibuã_1
, 
obj_©åibuã_2
; \

2048 
s32
 
vcou¡
 = 
io_ªgi°îs
[
REG_VCOUNT
]; \

2049 
u32
 
tûe_run
; \

2050 
u32
 
cuºít_pixñs
; \

2051 
u32
 
cuºít_pixñ
; \

2052 
u32
 
cuºít_∑Àâe
; \

2053 
u32
 
vîtiˇl_off£t
; \

2054 
u32
 
∑πül_tûe_run
, 
∑πül_tûe_off£t
; \

2055 
u32
 
pixñ_run
; \

2056 
u16
 *
ﬂm_±r
; \

2057 
ªndî_sˇ∆öe_de°_
##
Æpha_›
 *
de°_±r
; \

2058 
u8
 *
tûe_ba£
 = 
vøm
 + 0x10000; \

2059 
u8
 *
tûe_±r
; \

2060 
u32
 
obj_cou¡
 = 
obj_¥i‹ôy_cou¡
[
¥i‹ôy
][
vcou¡
]; \

2061 
u8
 *
obj_li°
 = 
obj_¥i‹ôy_li°
[
¥i‹ôy
][
vcou¡
]; \

2063 
obj_num
 = 0; obj_num < 
obj_cou¡
; obj_num++) \

2065 
ﬂm_±r
 = 
ﬂm_øm
 + (
obj_li°
[
obj_num
] * 4); \

2066 
obj_©åibuã_0
 = 
ﬂm_±r
[0]; \

2067 
obj_©åibuã_1
 = 
ﬂm_±r
[1]; \

2068 
obj_©åibuã_2
 = 
ﬂm_±r
[2]; \

2069 
obj_size
 = ((
obj_©åibuã_0
 >> 12Ë& 0x0CË| (
obj_©åibuã_1
 >> 14); \

2071 
obj_x
 = (
s32
)(
obj_©åibuã_1
 << 23) >> 23; \

2072 
obj_width
 = 
obj_width_èbÀ
[
obj_size
]; \

2074 
ªndî_sˇ∆öe_obj_¥ﬁogue_
##
	`comböe_›
(
Æpha_›
); \

2076 
obj_y
 = 
obj_©åibuã_0
 & 0xFF; \

2078 if(
obj_y
 > 160) \

2079 
obj_y
 -= 256; \

2081 
obj_height
 = 
obj_height_èbÀ
[
obj_size
]; \

2082 
ªndî_sˇ∆öe_obj_
##
	`∑πül_Æpha_›
(
comböe_›
, 
Æpha_›
, 
m≠_•a˚
); \

2085 

	)

2086 
ªndî_sˇ∆öe_obj_buûdî
(
å™•¨ít
, 
n‹mÆ
, 1D, 
no_∑πül_Æpha
);

2087 
ªndî_sˇ∆öe_obj_buûdî
(
å™•¨ít
, 
n‹mÆ
, 2D, 
no_∑πül_Æpha
);

2088 
ªndî_sˇ∆öe_obj_buûdî
(
å™•¨ít
, 
cﬁ‹16
, 1D, 
no_∑πül_Æpha
);

2089 
ªndî_sˇ∆öe_obj_buûdî
(
å™•¨ít
, 
cﬁ‹16
, 2D, 
no_∑πül_Æpha
);

2090 
ªndî_sˇ∆öe_obj_buûdî
(
å™•¨ít
, 
cﬁ‹32
, 1D, 
no_∑πül_Æpha
);

2091 
ªndî_sˇ∆öe_obj_buûdî
(
å™•¨ít
, 
cﬁ‹32
, 2D, 
no_∑πül_Æpha
);

2092 
ªndî_sˇ∆öe_obj_buûdî
(
å™•¨ít
, 
Æpha_obj
, 1D, 
no_∑πül_Æpha
);

2093 
ªndî_sˇ∆öe_obj_buûdî
(
å™•¨ít
, 
Æpha_obj
, 2D, 
no_∑πül_Æpha
);

2094 
ªndî_sˇ∆öe_obj_buûdî
(
å™•¨ít
, 
∑πül_Æpha
, 1D,Öartial_alpha);

2095 
ªndî_sˇ∆öe_obj_buûdî
(
å™•¨ít
, 
∑πül_Æpha
, 2D,Öartial_alpha);

2096 
ªndî_sˇ∆öe_obj_buûdî
(
c›y
, 
c›y_tûe
, 1D, 
no_∑πül_Æpha
);

2097 
ªndî_sˇ∆öe_obj_buûdî
(
c›y
, 
c›y_tûe
, 2D, 
no_∑πül_Æpha
);

2098 
ªndî_sˇ∆öe_obj_buûdî
(
c›y
, 
c›y_bôm≠
, 1D, 
no_∑πül_Æpha
);

2099 
ªndî_sˇ∆öe_obj_buûdî
(
c›y
, 
c›y_bôm≠
, 2D, 
no_∑πül_Æpha
);

2103 
	$‹dî_obj
(
u32
 
video_mode
)

2105 
s32
 
obj_num
, 
¥i‹ôy
, 
row
;

2106 
s32
 
obj_x
, 
obj_y
;

2107 
s32
 
obj_size
, 
obj_mode
;

2108 
s32
 
obj_width
, 
obj_height
;

2109 
u32
 
obj_¥i‹ôy
;

2110 
u32
 
obj_©åibuã_0
, 
obj_©åibuã_1
, 
obj_©åibuã_2
;

2111 
s32
 
vcou¡
 = 
io_ªgi°îs
[
REG_VCOUNT
];

2112 
u32
 
∑πül_tûe_run
, 
∑πül_tûe_off£t
;

2113 
u32
 
pixñ_run
;

2114 
u32
 
cuºít_cou¡
;

2115 
u16
 *
ﬂm_±r
 = 
ﬂm_øm
 + 508;

2116 
u16
 *
de°_±r
;

2117 
u8
 *
tûe_ba£
 = 
vøm
 + 0x10000;

2118 
u8
 *
tûe_±r
;

2120 
¥i‹ôy
 = 0;Öriority < 5;Öriority++)

2122 
row
 = 0;Ñow < 160;Ñow++)

2124 
obj_¥i‹ôy_cou¡
[
¥i‹ôy
][
row
] = 0;

2128 
row
 = 0;Ñow < 160;Ñow++)

2130 
obj_Æpha_cou¡
[
row
] = 0;

2133 
obj_num
 = 127; obj_num >0; obj_num--, 
ﬂm_±r
 -= 4)

2135 
obj_©åibuã_0
 = 
ﬂm_±r
[0];

2136 
obj_©åibuã_2
 = 
ﬂm_±r
[2];

2137 
obj_size
 = 
obj_©åibuã_0
 & 0xC000;

2138 
obj_¥i‹ôy
 = (
obj_©åibuã_2
 >> 10) & 0x03;

2139 
obj_mode
 = (
obj_©åibuã_0
 >> 10) & 0x03;

2141 if(((
obj_©åibuã_0
 & 0x0300Ë!0x0200Ë&& (
obj_size
 != 0xC000) &&

2142 (
obj_mode
 !3Ë&& ((
video_mode
 < 3) ||

2143 ((
obj_©åibuã_2
 & 0x3FF) >= 512)))

2145 
obj_y
 = 
obj_©åibuã_0
 & 0xFF;

2146 if(
obj_y
 > 160)

2147 
obj_y
 -= 256;

2149 
obj_©åibuã_1
 = 
ﬂm_±r
[1];

2150 
obj_size
 = ((obj_sizê>> 12Ë& 0x0CË| (
obj_©åibuã_1
 >> 14);

2151 
obj_height
 = 
obj_height_èbÀ
[
obj_size
];

2152 
obj_width
 = 
obj_width_èbÀ
[
obj_size
];

2154 if(
obj_©åibuã_0
 & 0x200)

2156 
obj_height
 *= 2;

2157 
obj_width
 *= 2;

2160 if(((
obj_y
 + 
obj_height
) > 0) && (obj_y < 160))

2162 
obj_x
 = (
s32
)(
obj_©åibuã_1
 << 23) >> 23;

2164 if(((
obj_x
 + 
obj_width
) > 0) && (obj_x < 240))

2166 if(
obj_y
 < 0)

2168 
obj_height
 +
obj_y
;

2169 
obj_y
 = 0;

2172 if((
obj_y
 + 
obj_height
) >= 160)

2174 
obj_height
 = 160 - 
obj_y
;

2177 if(
obj_mode
 == 1)

2179 
row
 = 
obj_y
;Ñow < obj_y + 
obj_height
;Ñow++)

2181 
cuºít_cou¡
 = 
obj_¥i‹ôy_cou¡
[
obj_¥i‹ôy
][
row
];

2182 
obj_¥i‹ôy_li°
[
obj_¥i‹ôy
][
row
][
cuºít_cou¡
] = 
obj_num
;

2183 
obj_¥i‹ôy_cou¡
[
obj_¥i‹ôy
][
row
] = 
cuºít_cou¡
 + 1;

2184 
obj_Æpha_cou¡
[
row
]++;

2189 if(
obj_mode
 == 2)

2191 
obj_¥i‹ôy
 = 4;

2194 
row
 = 
obj_y
;Ñow < obj_y + 
obj_height
;Ñow++)

2196 
cuºít_cou¡
 = 
obj_¥i‹ôy_cou¡
[
obj_¥i‹ôy
][
row
];

2197 
obj_¥i‹ôy_li°
[
obj_¥i‹ôy
][
row
][
cuºít_cou¡
] = 
obj_num
;

2198 
obj_¥i‹ôy_cou¡
[
obj_¥i‹ôy
][
row
] = 
cuºít_cou¡
 + 1;

2205 
	}
}

2207 
u32
 
	gœyî_‹dî
[16];

2208 
u32
 
	gœyî_cou¡
;

2210 
u32
 
	$‹dî_œyîs
(
u32
 
œyî_Êags
)

2212 
s32
 
¥i‹ôy
, 
œyî_numbî
;

2213 
œyî_cou¡
 = 0;

2215 
¥i‹ôy
 = 3;Öriority >= 0;Öriority--)

2217 
œyî_numbî
 = 3;Üayer_number >= 0;Üayer_number--)

2219 if(((
œyî_Êags
 >> 
œyî_numbî
) & 1) &&

2220 ((
io_ªgi°îs
[
REG_BG0CNT
 + 
œyî_numbî
] & 0x03Ë=
¥i‹ôy
))

2222 
œyî_‹dî
[
œyî_cou¡
] = 
œyî_numbî
;

2223 
œyî_cou¡
++;

2227 if((
obj_¥i‹ôy_cou¡
[
¥i‹ôy
][
io_ªgi°îs
[
REG_VCOUNT
]] > 0)

2228 && (
œyî_Êags
 & 0x10))

2230 
œyî_‹dî
[
œyî_cou¡
] = 
¥i‹ôy
 | 0x04;

2231 
œyî_cou¡
++;

2234 
	}
}

2236 
	#fûl_löe
(
_°¨t
, 
_íd
) \

2237 
u32
 
i
; \

2239 
i
 = 
_°¨t
; i < 
_íd
; i++) \

2241 
de°_±r
[
i
] = 
cﬁ‹
; \

2243 

	)

2245 
	#fûl_löe_cﬁ‹_n‹mÆ
() \

2246 
cﬁ‹
 = 
∑Àâe_øm_c⁄vîãd
[color] \

2247 

	)

2248 
	#fûl_löe_cﬁ‹_Æpha
() \

2249 

	)

2250 
	#fûl_löe_cﬁ‹_cﬁ‹16
() \

2251 

	)

2252 
	#fûl_löe_cﬁ‹_cﬁ‹32
() \

2253 

	)

2254 
	#fûl_löe_buûdî
(
ty≥
) \

2255 
fûl_löe_
##
	`ty≥
(
u16
 
cﬁ‹
, 
ªndî_sˇ∆öe_de°_
##
ty≥
 *
de°_±r
, \

2256 
u32
 
°¨t
, u32 
íd
) \

2258 
fûl_löe_cﬁ‹_
##
	`ty≥
(); \

2259 
	`fûl_löe
(
°¨t
, 
íd
); \

2261 

	)

2262 
fûl_löe_buûdî
(
n‹mÆ
);

2263 
fûl_löe_buûdî
(
Æpha
);

2264 
fûl_löe_buûdî
(
cﬁ‹16
);

2265 
fûl_löe_buûdî
(
cﬁ‹32
);

2270 
	#bÀnd_pixñ
() \

2271 
pixñ_bŸtom
 = 
∑Àâe_øm_c⁄vîãd
[(
pixñ_∑ú
 >> 16) & 0x1FF]; \

2272 
pixñ_bŸtom
 = (pixel_bottom | (pixel_bottom << 16)) & 0x07E0F81F; \

2273 
pixñ_t›
 = (’ixñ_t› * 
bÀnd_a
Ë+ (
pixñ_bŸtom
 * 
bÀnd_b
)) >> 4 \

2274 

	)

2279 
	#bÀnd_ßtuøã_pixñ
() \

2280 
pixñ_bŸtom
 = 
∑Àâe_øm_c⁄vîãd
[(
pixñ_∑ú
 >> 16) & 0x1FF]; \

2281 
pixñ_bŸtom
 = (pixel_bottom | (pixel_bottom << 16)) & 0x07E0F81F; \

2282 
pixñ_t›
 = (’ixñ_t› * 
bÀnd_a
Ë+ (
pixñ_bŸtom
 * 
bÀnd_b
)) >> 4; \

2283 if(
pixñ_t›
 & 0x08010020) \

2285 if(
pixñ_t›
 & 0x08000000) \

2286 
pixñ_t›
 |= 0x07E00000; \

2288 if(
pixñ_t›
 & 0x00010000) \

2289 
pixñ_t›
 |= 0x0000F800; \

2291 if(
pixñ_t›
 & 0x00000020) \

2292 
pixñ_t›
 |= 0x0000001F; \

2294 

	)

2295 
	#brighãn_pixñ
() \

2296 
pixñ_t›
 = 
uµî
 + (’ixñ_t› * 
bÀnd
) >> 4); \

2297 

	)

2298 
	#d¨kí_pixñ
() \

2299 
pixñ_t›
 = (pixñ_t› * 
bÀnd
) >> 4; \

2300 

	)

2301 
	#ef„˘_c⁄dôi⁄_Æpha
 \

2302 ((
pixñ_∑ú
 & 0x04000200) == 0x04000200) \

2303 

	)

2304 
	#ef„˘_c⁄dôi⁄_Áde
(
pixñ_sour˚
) \

2305 ((
pixñ_sour˚
 & 0x00000200) == 0x00000200) \

2306 

	)

2307 
	#ex∑nd_pixñ_no_de°
(
ex∑nd_ty≥
, 
pixñ_sour˚
) \

2308 
pixñ_t›
 = (pixel_top | (pixel_top << 16)) & 0x07E0F81F; \

2309 
ex∑nd_ty≥
##
	`_pixñ
(); \

2310 
pixñ_t›
 &= 0x07E0F81F; \

2311 
pixñ_t›
 = (pixel_top >> 16) |Öixel_top \

2312 

	)

2313 
	#ex∑nd_pixñ
(
ex∑nd_ty≥
, 
pixñ_sour˚
) \

2314 
pixñ_t›
 = 
∑Àâe_øm_c⁄vîãd
[
pixñ_sour˚
 & 0x1FF]; \

2315 
	`ex∑nd_pixñ_no_de°
(
ex∑nd_ty≥
, 
pixñ_sour˚
); \

2316 *
s¸ìn_de°_±r
 = 
pixñ_t›
 \

2317 

	)

2318 
	#ex∑nd_lo›
(
ex∑nd_ty≥
, 
ef„˘_c⁄dôi⁄
, 
pixñ_sour˚
) \

2319 
s¸ìn_§c_±r
 +
°¨t
; \

2320 
s¸ìn_de°_±r
 +
°¨t
; \

2322 
íd
 -
°¨t
; \

2324 
i
 = 0; i < 
íd
; i++) \

2326 
pixñ_sour˚
 = *
s¸ìn_§c_±r
; \

2327 if(
ef„˘_c⁄dôi⁄
) \

2329 
	`ex∑nd_pixñ
(
ex∑nd_ty≥
, 
pixñ_sour˚
); \

2333 *
s¸ìn_de°_±r
 = \

2334 
∑Àâe_øm_c⁄vîãd
[
pixñ_sour˚
 & 0x1FF]; \

2337 
s¸ìn_§c_±r
++; \

2338 
s¸ìn_de°_±r
++; \

2340 

	)

2342 
	#ex∑nd_lo›_∑πül_Æpha
(
Æpha_ex∑nd
, 
ex∑nd_ty≥
) \

2343 
s¸ìn_§c_±r
 +
°¨t
; \

2344 
s¸ìn_de°_±r
 +
°¨t
; \

2346 
íd
 -
°¨t
; \

2348 
i
 = 0; i < 
íd
; i++) \

2350 
pixñ_∑ú
 = *
s¸ìn_§c_±r
; \

2351 if(
	`ef„˘_c⁄dôi⁄_Áde
(
pixñ_∑ú
)) \

2353 if(
ef„˘_c⁄dôi⁄_Æpha
) \

2355 
	`ex∑nd_pixñ
(
Æpha_ex∑nd
, 
pixñ_∑ú
); \

2359 
	`ex∑nd_pixñ
(
ex∑nd_ty≥
, 
pixñ_∑ú
); \

2364 *
s¸ìn_de°_±r
 = \

2365 
∑Àâe_øm_c⁄vîãd
[
pixñ_∑ú
 & 0x1FF]; \

2368 
s¸ìn_§c_±r
++; \

2369 
s¸ìn_de°_±r
++; \

2371 

	)

2373 
	#ex∑nd_∑πül_Æpha
(
ex∑nd_ty≥
) \

2374 if((
bÀnd_a
 + 
bÀnd_b
) > 16) \

2376 
	`ex∑nd_lo›_∑πül_Æpha
(
bÀnd_ßtuøã
, 
ex∑nd_ty≥
); \

2380 
	`ex∑nd_lo›_∑πül_Æpha
(
bÀnd
, 
ex∑nd_ty≥
); \

2382 

	)

2387 #ifde‡
RENDER_COLOR16_NORMAL


2389 #i‚de‡
GP2X_BUILD


2391 
	$ex∑nd_n‹mÆ
(
u16
 *
s¸ìn_±r
, 
u32
 
°¨t
, u32 
íd
)

2393 
u32
 
i
, 
pixñ_sour˚
;

2394 
s¸ìn_±r
 +
°¨t
;

2398 
íd
 -
°¨t
;

2400 
i
 = 0; i < 
íd
; i++)

2402 
pixñ_sour˚
 = *
s¸ìn_±r
;

2403 *
s¸ìn_±r
 = 
∑Àâe_øm_c⁄vîãd
[
pixñ_sour˚
];

2405 
s¸ìn_±r
++;

2407 
	}
}

2413 
	#ex∑nd_n‹mÆ
(
s¸ìn_±r
, 
°¨t
, 
íd
)

	)

2418 #i‚de‡
GP2X_BUILD


2420 
	$ex∑nd_bÀnd
(
u32
 *
s¸ìn_§c_±r
, 
u16
 *
s¸ìn_de°_±r
,

2421 
u32
 
°¨t
, u32 
íd
)

2423 
u32
 
pixñ_∑ú
;

2424 
u32
 
pixñ_t›
, 
pixñ_bŸtom
;

2425 
u32
 
bldÆpha
 = 
io_ªgi°îs
[
REG_BLDALPHA
];

2426 
u32
 
bÀnd_a
 = 
bldÆpha
 & 0x1F;

2427 
u32
 
bÀnd_b
 = (
bldÆpha
 >> 8) & 0x1F;

2428 
u32
 
i
;

2430 if(
bÀnd_a
 > 16)

2431 
bÀnd_a
 = 16;

2433 if(
bÀnd_b
 > 16)

2434 
bÀnd_b
 = 16;

2438 if((
bÀnd_a
 + 
bÀnd_b
) > 16)

2440 
	`ex∑nd_lo›
(
bÀnd_ßtuøã
, 
ef„˘_c⁄dôi⁄_Æpha
, 
pixñ_∑ú
);

2444 
	`ex∑nd_lo›
(
bÀnd
, 
ef„˘_c⁄dôi⁄_Æpha
, 
pixñ_∑ú
);

2446 
	}
}

2452 
	$ex∑nd_d¨kí
(
u16
 *
s¸ìn_§c_±r
, u16 *
s¸ìn_de°_±r
,

2453 
u32
 
°¨t
, u32 
íd
)

2455 
u32
 
pixñ_t›
;

2456 
s32
 
bÀnd
 = 16 - (
io_ªgi°îs
[
REG_BLDY
] & 0x1F);

2457 
u32
 
i
;

2459 if(
bÀnd
 < 0)

2460 
bÀnd
 = 0;

2462 
	`ex∑nd_lo›
(
d¨kí
, 
	`ef„˘_c⁄dôi⁄_Áde
(
pixñ_t›
),Öixel_top);

2463 
	}
}

2468 
	$ex∑nd_brighãn
(
u16
 *
s¸ìn_§c_±r
, u16 *
s¸ìn_de°_±r
,

2469 
u32
 
°¨t
, u32 
íd
)

2471 
u32
 
pixñ_t›
;

2472 
u32
 
bÀnd
 = 
io_ªgi°îs
[
REG_BLDY
] & 0x1F;

2473 
u32
 
uµî
;

2474 
u32
 
i
;

2476 if(
bÀnd
 > 16)

2477 
bÀnd
 = 16;

2479 
uµî
 = ((0x07E0F81F * 
bÀnd
) >> 4) & 0x07E0F81F;

2480 
bÀnd
 = 16 - blend;

2482 
	`ex∑nd_lo›
(
brighãn
, 
	`ef„˘_c⁄dôi⁄_Áde
(
pixñ_t›
),Öixel_top);

2484 
	}
}

2490 
	$ex∑nd_d¨kí_∑πül_Æpha
(
u32
 *
s¸ìn_§c_±r
, 
u16
 *
s¸ìn_de°_±r
,

2491 
u32
 
°¨t
, u32 
íd
)

2493 
s32
 
bÀnd
 = 16 - (
io_ªgi°îs
[
REG_BLDY
] & 0x1F);

2494 
u32
 
pixñ_∑ú
;

2495 
u32
 
pixñ_t›
, 
pixñ_bŸtom
;

2496 
u32
 
bldÆpha
 = 
io_ªgi°îs
[
REG_BLDALPHA
];

2497 
u32
 
bÀnd_a
 = 
bldÆpha
 & 0x1F;

2498 
u32
 
bÀnd_b
 = (
bldÆpha
 >> 8) & 0x1F;

2499 
u32
 
i
;

2501 if(
bÀnd
 < 0)

2502 
bÀnd
 = 0;

2504 if(
bÀnd_a
 > 16)

2505 
bÀnd_a
 = 16;

2507 if(
bÀnd_b
 > 16)

2508 
bÀnd_b
 = 16;

2510 
	`ex∑nd_∑πül_Æpha
(
d¨kí
);

2511 
	}
}

2514 
	$ex∑nd_brighãn_∑πül_Æpha
(
u32
 *
s¸ìn_§c_±r
, 
u16
 *
s¸ìn_de°_±r
,

2515 
u32
 
°¨t
, u32 
íd
)

2517 
s32
 
bÀnd
 = 
io_ªgi°îs
[
REG_BLDY
] & 0x1F;

2518 
u32
 
pixñ_∑ú
;

2519 
u32
 
pixñ_t›
, 
pixñ_bŸtom
;

2520 
u32
 
bldÆpha
 = 
io_ªgi°îs
[
REG_BLDALPHA
];

2521 
u32
 
bÀnd_a
 = 
bldÆpha
 & 0x1F;

2522 
u32
 
bÀnd_b
 = (
bldÆpha
 >> 8) & 0x1F;

2523 
u32
 
uµî
;

2524 
u32
 
i
;

2526 if(
bÀnd
 > 16)

2527 
bÀnd
 = 16;

2529 
uµî
 = ((0x07E0F81F * 
bÀnd
) >> 4) & 0x07E0F81F;

2530 
bÀnd
 = 16 - blend;

2532 if(
bÀnd_a
 > 16)

2533 
bÀnd_a
 = 16;

2535 if(
bÀnd_b
 > 16)

2536 
bÀnd_b
 = 16;

2538 
	`ex∑nd_∑πül_Æpha
(
brighãn
);

2539 
	}
}

2545 
	#ªndî_obj_œyî
(
ty≥
, 
de°
, 
_°¨t
, 
_íd
) \

2546 
cuºít_œyî
 &= ~0x04; \

2547 if(
di•˙t
 & 0x40) \

2548 
ªndî_sˇ∆öe_obj_
##
ty≥
##
	`_1D
(
cuºít_œyî
, 
_°¨t
, 
_íd
, 
de°
); \

2550 
ªndî_sˇ∆öe_obj_
##
ty≥
##
	`_2D
(
cuºít_œyî
, 
_°¨t
, 
_íd
, 
de°
) \

2551 

	)

2556 
	#fûl_löe_bg
(
ty≥
, 
de°
, 
_°¨t
, 
_íd
) \

2557 
fûl_löe_
##
	`ty≥
(0, 
de°
, 
_°¨t
, 
_íd
) \

2558 

	)

2562 
	#ªndî_œyîs
(
tûe_Æpha
, 
obj_Æpha
, 
de°
) \

2564 
cuºít_œyî
 = 
œyî_‹dî
[0]; \

2565 if(
cuºít_œyî
 & 0x04) \

2568 
	`fûl_löe_bg
(
tûe_Æpha
, 
de°
, 0, 240); \

2569 
	`ªndî_obj_œyî
(
obj_Æpha
, 
de°
, 0, 240); \

2574 
œyî_ªndîîs
[
cuºít_œyî
].
tûe_Æpha
##
	`_ªndî_ba£
(current_layer, \

2575 0, 240, 
de°
); \

2579 
œyî_‹dî_pos
 = 1;Üayî_‹dî_po†< 
œyî_cou¡
;Üayer_order_pos++) \

2581 
cuºít_œyî
 = 
œyî_‹dî
[
œyî_‹dî_pos
]; \

2582 if(
cuºít_œyî
 & 0x04) \

2584 
	`ªndî_obj_œyî
(
obj_Æpha
, 
de°
, 0, 240); \

2588 
œyî_ªndîîs
[
cuºít_œyî
]. \

2589 
tûe_Æpha
##
	`_ªndî_å™•¨ít
(
cuºít_œyî
, 0, 240, 
de°
); \

2593 

	)

2594 
	#ªndî_c⁄dôi⁄_Æpha
 \

2595 (((
io_ªgi°îs
[
REG_BLDALPHA
] & 0x1F1F) != 0x001F) && \

2596 ((
io_ªgi°îs
[
REG_BLDCNT
] & 0x3F) != 0) && \

2597 ((
io_ªgi°îs
[
REG_BLDCNT
] & 0x3F00) != 0)) \

2598 

	)

2599 
	#ªndî_c⁄dôi⁄_Áde
 \

2600 (((
io_ªgi°îs
[
REG_BLDY
] & 0x1F) != 0) && \

2601 ((
io_ªgi°îs
[
REG_BLDCNT
] & 0x3F) != 0)) \

2602 

	)

2603 
	#ªndî_œyîs_cﬁ‹_ef„˘
(
ªndîî
, 
œyî_c⁄dôi⁄
, \

2604 
Æpha_c⁄dôi⁄
, 
Áde_c⁄dôi⁄
, 
_°¨t
, 
_íd
) \

2606 if(
œyî_c⁄dôi⁄
) \

2608 if(
obj_Æpha_cou¡
[
io_ªgi°îs
[
REG_VCOUNT
]] > 0) \

2611 
u32
 
s¸ìn_buf„r
[240]; \

2612 (
bld˙t
 >> 6) & 0x03) \

2617 if(
Æpha_c⁄dôi⁄
) \

2619 
	`ªndîî
(
Æpha
, 
Æpha_obj
, 
s¸ìn_buf„r
); \

2620 
	`ex∑nd_bÀnd
(
s¸ìn_buf„r
, 
sˇ∆öe
, 
_°¨t
, 
_íd
); \

2629 if(
Áde_c⁄dôi⁄
) \

2631 
	`ªndîî
(
cﬁ‹32
, 
∑πül_Æpha
, 
s¸ìn_buf„r
); \

2632 
	`ex∑nd_brighãn_∑πül_Æpha
(
s¸ìn_buf„r
, 
sˇ∆öe
, \

2633 
_°¨t
, 
_íd
); \

2642 if(
Áde_c⁄dôi⁄
) \

2644 
	`ªndîî
(
cﬁ‹32
, 
∑πül_Æpha
, 
s¸ìn_buf„r
); \

2645 
	`ex∑nd_d¨kí_∑πül_Æpha
(
s¸ìn_buf„r
, 
sˇ∆öe
, \

2646 
_°¨t
, 
_íd
); \

2653 
	`ªndîî
(
cﬁ‹32
, 
∑πül_Æpha
, 
s¸ìn_buf„r
); \

2654 
	`ex∑nd_bÀnd
(
s¸ìn_buf„r
, 
sˇ∆öe
, 
_°¨t
, 
_íd
); \

2659 (
bld˙t
 >> 6) & 0x03) \

2664 if(
Æpha_c⁄dôi⁄
) \

2666 
u32
 
s¸ìn_buf„r
[240]; \

2667 
	`ªndîî
(
Æpha
, 
Æpha_obj
, 
s¸ìn_buf„r
); \

2668 
	`ex∑nd_bÀnd
(
s¸ìn_buf„r
, 
sˇ∆öe
, 
_°¨t
, 
_íd
); \

2677 if(
Áde_c⁄dôi⁄
) \

2679 
	`ªndîî
(
cﬁ‹16
, cﬁ‹16, 
sˇ∆öe
); \

2680 
	`ex∑nd_brighãn
(
sˇ∆öe
, sˇ∆öe, 
_°¨t
, 
_íd
); \

2689 if(
Áde_c⁄dôi⁄
) \

2691 
	`ªndîî
(
cﬁ‹16
, cﬁ‹16, 
sˇ∆öe
); \

2692 
	`ex∑nd_d¨kí
(
sˇ∆öe
, sˇ∆öe, 
_°¨t
, 
_íd
); \

2699 
	`ªndîî
(
n‹mÆ
,Ç‹mÆ, 
sˇ∆öe
); \

2700 
	`ex∑nd_n‹mÆ
(
sˇ∆öe
, 
_°¨t
, 
_íd
); \

2705 
u32
 
pixñ_t›
 = 
∑Àâe_øm_c⁄vîãd
[0]; \

2706 (
bld˙t
 >> 6) & 0x03) \

2711 if(
	`cﬁ‹_comböe_mask_a
(5)) \

2713 
u32
 
bÀnd
 = 
io_ªgi°îs
[
REG_BLDY
] & 0x1F; \

2714 
u32
 
uµî
; \

2716 if(
bÀnd
 > 16) \

2717 
bÀnd
 = 16; \

2719 
uµî
 = ((0x07E0F81F * 
bÀnd
) >> 4) & 0x07E0F81F; \

2720 
bÀnd
 = 16 - blend; \

2722 
	`ex∑nd_pixñ_no_de°
(
brighãn
, 
pixñ_t›
); \

2730 if(
	`cﬁ‹_comböe_mask_a
(5)) \

2732 
s32
 
bÀnd
 = 16 - (
io_ªgi°îs
[
REG_BLDY
] & 0x1F); \

2734 if(
bÀnd
 < 0) \

2735 
bÀnd
 = 0; \

2737 
	`ex∑nd_pixñ_no_de°
(
d¨kí
, 
pixñ_t›
); \

2742 
	`fûl_löe_cﬁ‹16
(
pixñ_t›
, 
sˇ∆öe
, 
_°¨t
, 
_íd
); \

2745 

	)

2749 
	$ªndî_sˇ∆öe_tûe
(
u16
 *
sˇ∆öe
, 
u32
 
di•˙t
)

2751 
u32
 
cuºít_œyî
;

2752 
u32
 
œyî_‹dî_pos
;

2753 
u32
 
bld˙t
 = 
io_ªgi°îs
[
REG_BLDCNT
];

2754 
	`ªndî_sˇ∆öe_œyî_fun˘i⁄s_tûe
();

2756 
	`ªndî_œyîs_cﬁ‹_ef„˘
(
ªndî_œyîs
, 
œyî_cou¡
,

2757 
ªndî_c⁄dôi⁄_Æpha
, 
ªndî_c⁄dôi⁄_Áde
, 0, 240);

2758 
	}
}

2760 
	$ªndî_sˇ∆öe_bôm≠
(
u16
 *
sˇ∆öe
, 
u32
 
di•˙t
)

2762 
u32
 
bld˙t
 = 
io_ªgi°îs
[
REG_BLDCNT
];

2763 
	`ªndî_sˇ∆öe_œyî_fun˘i⁄s_bôm≠
();

2764 
u32
 
cuºít_œyî
;

2765 
u32
 
œyî_‹dî_pos
;

2767 
	`fûl_löe_bg
(
n‹mÆ
, 
sˇ∆öe
, 0, 240);

2769 
œyî_‹dî_pos
 = 0;Üayî_‹dî_po†< 
œyî_cou¡
;Üayer_order_pos++)

2771 
cuºít_œyî
 = 
œyî_‹dî
[
œyî_‹dî_pos
];

2772 if(
cuºít_œyî
 & 0x04)

2774 
	`ªndî_obj_œyî
(
n‹mÆ
, 
sˇ∆öe
, 0, 240);

2778 
œyî_ªndîîs
->
	`n‹mÆ_ªndî
(0, 240, 
sˇ∆öe
);

2781 
	}
}

2786 
	#ªndî_œyîs_c⁄dôi⁄Æ
(
tûe_Æpha
, 
obj_Æpha
, 
de°
) \

2788 
__œbñ__
 
skù
; \

2789 
cuºít_œyî
 = 
œyî_‹dî
[
œyî_‹dî_pos
]; \

2791 if(!(
íabÀ_Êags
 & 0x10)) \

2793 (
cuºít_œyî
 & 0x04Ë|| !((1 << cuºít_œyîË& 
íabÀ_Êags
)) \

2795 
œyî_‹dî_pos
++; \

2796 
cuºít_œyî
 = 
œyî_‹dî
[
œyî_‹dî_pos
]; \

2799 if(
œyî_‹dî_pos
 =
œyî_cou¡
) \

2801 
	`fûl_löe_bg
(
tûe_Æpha
, 
de°
, 
°¨t
, 
íd
); \

2802 
skù
; \

2807 
œyî_ªndîîs
[
cuºít_œyî
].
tûe_Æpha
##
	`_ªndî_ba£
(current_layer, \

2808 
°¨t
, 
íd
, 
de°
); \

2810 
œyî_‹dî_pos
++; \

2813 ; 
œyî_‹dî_pos
 < 
œyî_cou¡
;Üayer_order_pos++) \

2815 
cuºít_œyî
 = 
œyî_‹dî
[
œyî_‹dî_pos
]; \

2816 if(!(
cuºít_œyî
 & 0x04Ë&& ((1 << cuºít_œyîË& 
íabÀ_Êags
)) \

2818 
œyî_ªndîîs
[
cuºít_œyî
]. \

2819 
tûe_Æpha
##
	`_ªndî_å™•¨ít
(
cuºít_œyî
, 
°¨t
, 
íd
, 
de°
); \

2826 !((
cuºít_œyî
 & 0x04Ë|| ((1 << cuºít_œyîË& 
íabÀ_Êags
))) \

2828 
œyî_‹dî_pos
++; \

2829 
cuºít_œyî
 = 
œyî_‹dî
[
œyî_‹dî_pos
]; \

2832 if(
œyî_‹dî_pos
 =
œyî_cou¡
) \

2834 
	`fûl_löe_bg
(
tûe_Æpha
, 
de°
, 
°¨t
, 
íd
); \

2835 
skù
; \

2839 if(
cuºít_œyî
 & 0x04) \

2842 
	`fûl_löe_bg
(
tûe_Æpha
, 
de°
, 
°¨t
, 
íd
); \

2843 
	`ªndî_obj_œyî
(
obj_Æpha
, 
de°
, 
°¨t
, 
íd
); \

2848 
œyî_ªndîîs
[
cuºít_œyî
]. \

2849 
tûe_Æpha
##
	`_ªndî_ba£
(
cuºít_œyî
, 
°¨t
, 
íd
, 
de°
); \

2852 
œyî_‹dî_pos
++; \

2855 ; 
œyî_‹dî_pos
 < 
œyî_cou¡
;Üayer_order_pos++) \

2857 
cuºít_œyî
 = 
œyî_‹dî
[
œyî_‹dî_pos
]; \

2858 if(
cuºít_œyî
 & 0x04) \

2860 
	`ªndî_obj_œyî
(
obj_Æpha
, 
de°
, 
°¨t
, 
íd
); \

2864 if(
íabÀ_Êags
 & (1 << 
cuºít_œyî
)) \

2866 
œyî_ªndîîs
[
cuºít_œyî
]. \

2867 
tûe_Æpha
##
	`_ªndî_å™•¨ít
(
cuºít_œyî
, 
°¨t
, 
íd
, 
de°
); \

2873 
skù
: \

2876 

	)

2881 
	$ªndî_sˇ∆öe_c⁄dôi⁄Æ_tûe
(
u32
 
°¨t
, u32 
íd
, 
u16
 *
sˇ∆öe
,

2882 
u32
 
íabÀ_Êags
, u32 
di•˙t
, u32 
bld˙t
, 
tûe_œyî_ªndî_°ru˘


2883 *
œyî_ªndîîs
)

2885 
u32
 
cuºít_œyî
;

2886 
u32
 
œyî_‹dî_pos
 = 0;

2888 
	`ªndî_œyîs_cﬁ‹_ef„˘
(
ªndî_œyîs_c⁄dôi⁄Æ
,

2889 (
œyî_cou¡
 && (
íabÀ_Êags
 & 0x1F)),

2890 ((
íabÀ_Êags
 & 0x20Ë&& 
ªndî_c⁄dôi⁄_Æpha
),

2891 ((
íabÀ_Êags
 & 0x20Ë&& 
ªndî_c⁄dôi⁄_Áde
), 
°¨t
, 
íd
);

2892 
	}
}

2898 
	$ªndî_sˇ∆öe_c⁄dôi⁄Æ_bôm≠
(
u32
 
°¨t
, u32 
íd
, 
u16
 *
sˇ∆öe
,

2899 
u32
 
íabÀ_Êags
, u32 
di•˙t
, u32 
bld˙t
, 
bôm≠_œyî_ªndî_°ru˘


2900 *
œyî_ªndîîs
)

2902 
u32
 
cuºít_œyî
;

2903 
u32
 
œyî_‹dî_pos
;

2905 
	`fûl_löe_bg
(
n‹mÆ
, 
sˇ∆öe
, 
°¨t
, 
íd
);

2907 
œyî_‹dî_pos
 = 0;Üayî_‹dî_po†< 
œyî_cou¡
;Üayer_order_pos++)

2909 
cuºít_œyî
 = 
œyî_‹dî
[
œyî_‹dî_pos
];

2910 if(
cuºít_œyî
 & 0x04)

2912 if(
íabÀ_Êags
 & 0x10)

2914 
	`ªndî_obj_œyî
(
n‹mÆ
, 
sˇ∆öe
, 
°¨t
, 
íd
);

2919 if(
íabÀ_Êags
 & 0x04)

2920 
œyî_ªndîîs
->
	`n‹mÆ_ªndî
(
°¨t
, 
íd
, 
sˇ∆öe
);

2923 
	}
}

2926 
	#wödow_x_co‹ds
(
wödow_numbî
) \

2927 
wödow_
##
wödow_numbî
##
_x1
 = \

2928 
io_ªgi°îs
[
REG_WIN
##
wödow_numbî
##
H
] >> 8; \

2929 
wödow_
##
wödow_numbî
##
_x2
 = \

2930 
io_ªgi°îs
[
REG_WIN
##
wödow_numbî
##
H
] & 0xFF; \

2931 
wödow_
##
wödow_numbî
##
_íabÀ
 = \

2932 (
wöö
 >> (
wödow_numbî
 * 8)) & 0x3F; \

2934 if(
wödow_
##
wödow_numbî
##
_x1
 > 240) \

2935 
wödow_
##
wödow_numbî
##
_x1
 = 240; \

2937 if(
wödow_
##
wödow_numbî
##
_x2
 > 240) \

2938 
wödow_
##
wödow_numbî
##
_x2
 = 240 \

2939 

	)

2940 
	#wödow_co‹ds
(
wödow_numbî
) \

2941 
u32
 
wödow_
##
wödow_numbî
##
_x1
, wödow_##wödow_numbî##
_x2
; \

2942 
u32
 
wödow_
##
wödow_numbî
##
_y1
, wödow_##wödow_numbî##
_y2
; \

2943 
u32
 
wödow_
##
wödow_numbî
##
_íabÀ
; \

2944 
wödow_
##
wödow_numbî
##
_y1
 = \

2945 
io_ªgi°îs
[
REG_WIN
##
wödow_numbî
##
V
] >> 8; \

2946 
wödow_
##
wödow_numbî
##
_y2
 = \

2947 
io_ªgi°îs
[
REG_WIN
##
wödow_numbî
##
V
] & 0xFF; \

2949 if(
wödow_
##
wödow_numbî
##
_y1
 > wödow_##wödow_numbî##
_y2
) \

2951 if((((
vcou¡
 <
wödow_
##
wödow_numbî
##
_y2
) || \

2952 (
vcou¡
 > 
wödow_
##
wödow_numbî
##
_y1
)) || \

2953 (
wödow_
##
wödow_numbî
##
_y2
 > 227)) && \

2954 (
wödow_
##
wödow_numbî
##
_y1
 <= 227)) \

2956 
	`wödow_x_co‹ds
(
wödow_numbî
); \

2960 
wödow_
##
wödow_numbî
##
_x1
 = 240; \

2961 
wödow_
##
wödow_numbî
##
_x2
 = 240; \

2966 if((((
vcou¡
 >
wödow_
##
wödow_numbî
##
_y1
) && \

2967 (
vcou¡
 < 
wödow_
##
wödow_numbî
##
_y2
)) || \

2968 (
wödow_
##
wödow_numbî
##
_y2
 > 227)) && \

2969 (
wödow_
##
wödow_numbî
##
_y1
 <= 227)) \

2971 
	`wödow_x_co‹ds
(
wödow_numbî
); \

2975 
wödow_
##
wödow_numbî
##
_x1
 = 240; \

2976 
wödow_
##
wödow_numbî
##
_x2
 = 240; \

2979 

	)

2980 
	#ªndî_wödow_£gmít
(
ty≥
, 
°¨t
, 
íd
, 
wödow_ty≥
) \

2981 if(
°¨t
 !
íd
) \

2983 
ªndî_sˇ∆öe_c⁄dôi⁄Æ_
##
	`ty≥
(
°¨t
, 
íd
, 
sˇ∆öe
, \

2984 
wödow_
##
wödow_ty≥
##
_íabÀ
, 
di•˙t
, 
bld˙t
, 
œyî_ªndîîs
); \

2986 

	)

2987 
	#ªndî_wödow_£gmít_u√quÆ
(
ty≥
, 
°¨t
, 
íd
, 
wödow_ty≥
) \

2988 
ªndî_sˇ∆öe_c⁄dôi⁄Æ_
##
	`ty≥
(
°¨t
, 
íd
, 
sˇ∆öe
, \

2989 
wödow_
##
wödow_ty≥
##
_íabÀ
, 
di•˙t
, 
bld˙t
, 
œyî_ªndîîs
) \

2990 

	)

2991 
	#ªndî_wödow_£gmít_˛ù
(
ty≥
, 
˛ù_°¨t
, 
˛ù_íd
, 
°¨t
, 
íd
, \

2992 
wödow_ty≥
) \

2994 if(
°¨t
 !
íd
) \

2996 if(
°¨t
 < 
˛ù_°¨t
) \

2998 if(
íd
 > 
˛ù_°¨t
) \

3000 if(
íd
 > 
˛ù_íd
) \

3002 
	`ªndî_wödow_£gmít_u√quÆ
(
ty≥
, 
˛ù_°¨t
, 
˛ù_íd
, \

3003 
wödow_ty≥
); \

3007 
	`ªndî_wödow_£gmít_u√quÆ
(
ty≥
, 
˛ù_°¨t
, 
íd
, 
wödow_ty≥
); \

3013 if(
íd
 > 
˛ù_íd
) \

3015 if(
°¨t
 < 
˛ù_íd
) \

3016 
	`ªndî_wödow_£gmít_u√quÆ
(
ty≥
, 
°¨t
, 
˛ù_íd
, 
wödow_ty≥
); \

3020 
	`ªndî_wödow_£gmít_u√quÆ
(
ty≥
, 
°¨t
, 
íd
, 
wödow_ty≥
); \

3024 

	)

3025 
	#ªndî_wödow_˛ù_1
(
ty≥
, 
°¨t
, 
íd
) \

3026 if(
wödow_1_x1
 != 240) \

3028 if(
wödow_1_x1
 > 
wödow_1_x2
) \

3030 
	`ªndî_wödow_£gmít_˛ù
(
ty≥
, 
°¨t
, 
íd
, 0, 
wödow_1_x2
, 1); \

3031 
	`ªndî_wödow_£gmít_˛ù
(
ty≥
, 
°¨t
, 
íd
, 
wödow_1_x2
, 
wödow_1_x1
, \

3032 
out
); \

3033 
	`ªndî_wödow_£gmít_˛ù
(
ty≥
, 
°¨t
, 
íd
, 
wödow_1_x1
, 240, 1); \

3037 
	`ªndî_wödow_£gmít_˛ù
(
ty≥
, 
°¨t
, 
íd
, 0, 
wödow_1_x1
, 
out
); \

3038 
	`ªndî_wödow_£gmít_˛ù
(
ty≥
, 
°¨t
, 
íd
, 
wödow_1_x1
, 
wödow_1_x2
, \

3040 
	`ªndî_wödow_£gmít_˛ù
(
ty≥
, 
°¨t
, 
íd
, 
wödow_1_x2
, 240, 
out
); \

3045 
	`ªndî_wödow_£gmít
(
ty≥
, 
°¨t
, 
íd
, 
out
); \

3047 

	)

3048 
	#ªndî_wödow_˛ù_obj
(
ty≥
, 
°¨t
, 
íd
); \

3049 
	`ªndî_wödow_£gmít
(
ty≥
, 
°¨t
, 
íd
, 
out
); \

3050 if(
di•˙t
 & 0x40) \

3051 
ªndî_sˇ∆öe_obj_c›y_
##
ty≥
##
	`_1D
(4, 
°¨t
, 
íd
, 
sˇ∆öe
); \

3053 
ªndî_sˇ∆öe_obj_c›y_
##
ty≥
##
	`_2D
(4, 
°¨t
, 
íd
, 
sˇ∆öe
) \

3054 

	)

3056 
	#ªndî_wödow_£gmít_˛ù_obj
(
ty≥
, 
˛ù_°¨t
, 
˛ù_íd
, 
°¨t
, \

3057 
íd
) \

3059 if(
°¨t
 !
íd
) \

3061 if(
°¨t
 < 
˛ù_°¨t
) \

3063 if(
íd
 > 
˛ù_°¨t
) \

3065 if(
íd
 > 
˛ù_íd
) \

3067 
	`ªndî_wödow_˛ù_obj
(
ty≥
, 
˛ù_°¨t
, 
˛ù_íd
); \

3071 
	`ªndî_wödow_˛ù_obj
(
ty≥
, 
˛ù_°¨t
, 
íd
); \

3077 if(
íd
 > 
˛ù_íd
) \

3079 if(
°¨t
 < 
˛ù_íd
) \

3081 
	`ªndî_wödow_˛ù_obj
(
ty≥
, 
°¨t
, 
˛ù_íd
); \

3086 
	`ªndî_wödow_˛ù_obj
(
ty≥
, 
°¨t
, 
íd
); \

3090 

	)

3092 
	#ªndî_wödow_˛ù_1_obj
(
ty≥
, 
°¨t
, 
íd
) \

3093 if(
wödow_1_x1
 != 240) \

3095 if(
wödow_1_x1
 > 
wödow_1_x2
) \

3097 
	`ªndî_wödow_£gmít_˛ù
(
ty≥
, 
°¨t
, 
íd
, 0, 
wödow_1_x2
, 1); \

3098 
	`ªndî_wödow_£gmít_˛ù_obj
(
ty≥
, 
°¨t
, 
íd
, 
wödow_1_x2
, \

3099 
wödow_1_x1
); \

3100 
	`ªndî_wödow_£gmít_˛ù
(
ty≥
, 
°¨t
, 
íd
, 
wödow_1_x1
, 240, 1); \

3104 
	`ªndî_wödow_£gmít_˛ù_obj
(
ty≥
, 
°¨t
, 
íd
, 0, 
wödow_1_x1
); \

3105 
	`ªndî_wödow_£gmít_˛ù
(
ty≥
, 
°¨t
, 
íd
, 
wödow_1_x1
, 
wödow_1_x2
, \

3107 
	`ªndî_wödow_£gmít_˛ù_obj
(
ty≥
, 
°¨t
, 
íd
, 
wödow_1_x2
, 240); \

3112 
	`ªndî_wödow_˛ù_obj
(
ty≥
, 
°¨t
, 
íd
); \

3114 

	)

3117 
	#ªndî_wödow_sögÀ
(
ty≥
, 
wödow_numbî
) \

3118 
u32
 
wöö
 = 
io_ªgi°îs
[
REG_WININ
]; \

3119 
	`wödow_co‹ds
(
wödow_numbî
); \

3120 if(
wödow_
##
wödow_numbî
##
_x1
 > wödow_##wödow_numbî##
_x2
) \

3122 
	`ªndî_wödow_£gmít
(
ty≥
, 0, 
wödow_
##
wödow_numbî
##
_x2
, \

3123 
wödow_numbî
); \

3124 
	`ªndî_wödow_£gmít
(
ty≥
, 
wödow_
##
wödow_numbî
##
_x2
, \

3125 
wödow_
##
wödow_numbî
##
_x1
, 
out
); \

3126 
	`ªndî_wödow_£gmít
(
ty≥
, 
wödow_
##
wödow_numbî
##
_x1
, 240, \

3127 
wödow_numbî
); \

3131 
	`ªndî_wödow_£gmít
(
ty≥
, 0, 
wödow_
##
wödow_numbî
##
_x1
, 
out
); \

3132 
	`ªndî_wödow_£gmít
(
ty≥
, 
wödow_
##
wödow_numbî
##
_x1
, \

3133 
wödow_
##
wödow_numbî
##
_x2
, window_number); \

3134 
	`ªndî_wödow_£gmít
(
ty≥
, 
wödow_
##
wödow_numbî
##
_x2
, 240, 
out
); \

3136 

	)

3137 
	#ªndî_wödow_mu…i
(
ty≥
, 
‰⁄t
, 
back
) \

3138 if(
wödow_
##
‰⁄t
##
_x1
 > wödow_##‰⁄t##
_x2
) \

3140 
	`ªndî_wödow_£gmít
(
ty≥
, 0, 
wödow_
##
‰⁄t
##
_x2
, front); \

3141 
ªndî_wödow_˛ù_
##
	`back
(
ty≥
, 
wödow_
##
‰⁄t
##
_x2
, \

3142 
wödow_
##
‰⁄t
##
_x1
); \

3143 
	`ªndî_wödow_£gmít
(
ty≥
, 
wödow_
##
‰⁄t
##
_x1
, 240, front); \

3147 
ªndî_wödow_˛ù_
##
	`back
(
ty≥
, 0, 
wödow_
##
‰⁄t
##
_x1
); \

3148 
	`ªndî_wödow_£gmít
(
ty≥
, 
wödow_
##
‰⁄t
##
_x1
, wödow_##‰⁄t##
_x2
, \

3149 
‰⁄t
); \

3150 
ªndî_wödow_˛ù_
##
	`back
(
ty≥
, 
wödow_
##
‰⁄t
##
_x2
, 240); \

3152 

	)

3153 
	#ªndî_sˇ∆öe_wödow_buûdî
(
ty≥
) \

3154 
ªndî_sˇ∆öe_wödow_
##
	`ty≥
(
u16
 *
sˇ∆öe
, 
u32
 
di•˙t
) \

3156 
u32
 
vcou¡
 = 
io_ªgi°îs
[
REG_VCOUNT
]; \

3157 
u32
 
wöout
 = 
io_ªgi°îs
[
REG_WINOUT
]; \

3158 
u32
 
bld˙t
 = 
io_ªgi°îs
[
REG_BLDCNT
]; \

3159 
u32
 
wödow_out_íabÀ
 = 
wöout
 & 0x3F; \

3161 
ªndî_sˇ∆öe_œyî_fun˘i⁄s_
##
	`ty≥
(); \

3163 
di•˙t
 >> 13) \

3168 
	`ªndî_wödow_sögÀ
(
ty≥
, 0); \

3175 
	`ªndî_wödow_sögÀ
(
ty≥
, 1); \

3182 
u32
 
wöö
 = 
io_ªgi°îs
[
REG_WININ
]; \

3183 
	`wödow_co‹ds
(0); \

3184 
	`wödow_co‹ds
(1); \

3185 
	`ªndî_wödow_mu…i
(
ty≥
, 0, 1); \

3192 
u32
 
wödow_obj_íabÀ
 = 
wöout
 >> 8; \

3193 
	`ªndî_wödow_˛ù_obj
(
ty≥
, 0, 240); \

3200 
u32
 
wödow_obj_íabÀ
 = 
wöout
 >> 8; \

3201 
u32
 
wöö
 = 
io_ªgi°îs
[
REG_WININ
]; \

3202 
	`wödow_co‹ds
(0); \

3203 
	`ªndî_wödow_mu…i
(
ty≥
, 0, 
obj
); \

3210 
u32
 
wödow_obj_íabÀ
 = 
wöout
 >> 8; \

3211 
u32
 
wöö
 = 
io_ªgi°îs
[
REG_WININ
]; \

3212 
	`wödow_co‹ds
(1); \

3213 
	`ªndî_wödow_mu…i
(
ty≥
, 1, 
obj
); \

3220 
u32
 
wödow_obj_íabÀ
 = 
wöout
 >> 8; \

3221 
u32
 
wöö
 = 
io_ªgi°îs
[
REG_WININ
]; \

3222 
	`wödow_co‹ds
(0); \

3223 
	`wödow_co‹ds
(1); \

3224 
	`ªndî_wödow_mu…i
(
ty≥
, 0, 1
_obj
); \

3229 

	)

3230 
ªndî_sˇ∆öe_wödow_buûdî
(
tûe
);

3231 
ªndî_sˇ∆öe_wödow_buûdî
(
bôm≠
);

3233 
u32
 
	ga˘ive_œyîs
[6] = { 0x1F, 0x17, 0x1C, 0x14, 0x14, 0x14 };

3235 
u32
 
	gsmÆl_ªsﬁuti⁄_width
 = 240;

3236 
u32
 
	gsmÆl_ªsﬁuti⁄_height
 = 160;

3237 
u32
 
	gªsﬁuti⁄_width
, 
	gªsﬁuti⁄_height
;

3239 
	$upd©e_sˇ∆öe
()

3241 
u32
 
pôch
 = 
	`gë_s¸ìn_pôch
();

3242 
u32
 
di•˙t
 = 
io_ªgi°îs
[
REG_DISPCNT
];

3243 
u32
 
di•œy_Êags
 = (
di•˙t
 >> 8) & 0x1F;

3244 
u32
 
vcou¡
 = 
io_ªgi°îs
[
REG_VCOUNT
];

3245 
u16
 *
s¸ìn_off£t
 = 
	`gë_s¸ìn_pixñs
(Ë+ (
vcou¡
 * 
pôch
);

3246 
u32
 
video_mode
 = 
di•˙t
 & 0x07;

3247 
u32
 
cuºít_œyî
;

3251 if(
ﬂm_upd©e
)

3253 
	`‹dî_obj
(
video_mode
);

3254 
ﬂm_upd©e
 = 0;

3257 
	`‹dî_œyîs
((
di•˙t
 >> 8Ë& 
a˘ive_œyîs
[
video_mode
]);

3259 if(
skù_√xt_‰ame
)

3263 if(
di•˙t
 & 0x80)

3265 
	`fûl_löe_cﬁ‹16
(0xFFFF, 
s¸ìn_off£t
, 0, 240);

3269 if(
video_mode
 < 3)

3271 if(
di•˙t
 >> 13)

3273 
	`ªndî_sˇ∆öe_wödow_tûe
(
s¸ìn_off£t
, 
di•˙t
);

3277 
	`ªndî_sˇ∆öe_tûe
(
s¸ìn_off£t
, 
di•˙t
);

3282 if(
di•˙t
 >> 13)

3283 
	`ªndî_sˇ∆öe_wödow_bôm≠
(
s¸ìn_off£t
, 
di•˙t
);

3285 
	`ªndî_sˇ∆öe_bôm≠
(
s¸ìn_off£t
, 
di•˙t
);

3289 
afföe_ª„ªn˚_x
[0] +(
s16
)
io_ªgi°îs
[
REG_BG2PB
];

3290 
afföe_ª„ªn˚_y
[0] +(
s16
)
io_ªgi°îs
[
REG_BG2PD
];

3291 
afföe_ª„ªn˚_x
[1] +(
s16
)
io_ªgi°îs
[
REG_BG3PB
];

3292 
afföe_ª„ªn˚_y
[1] +(
s16
)
io_ªgi°îs
[
REG_BG3PD
];

3293 
	}
}

3295 #ifde‡
PSP_BUILD


3297 
u32
 
	gs¸ìn_Êù
 = 0;

3299 
	$Êù_s¸ìn
()

3301 if(
video_dúe˘
 == 0)

3303 
u32
 *
ﬁd_ge_cmd_±r
 = 
ge_cmd_±r
;

3304 
	`s˚Kî√lDˇcheWrôebackAŒ
();

3307 
ge_cmd_±r
 = 
ge_cmd
 + 2;

3308 
	`GE_CMD
(
TBP0
, ((
u32
)
s¸ìn_pixñs
 & 0x00FFFFFF));

3309 
	`GE_CMD
(
TBW0
, (((
u32
)
s¸ìn_pixñs
 & 0xFF000000) >> 8) |

3310 
GBA_SCREEN_WIDTH
);

3311 
ge_cmd_±r
 = 
ﬁd_ge_cmd_±r
;

3313 
	`s˚GeLi°EnQueue
(
ge_cmd
, 
ge_cmd_±r
, 
gecbid
, 
NULL
);

3316 
s¸ìn_Êù
 ^= 1;

3318 if(
s¸ìn_Êù
)

3319 
s¸ìn_pixñs
 = 
s¸ìn_ãxtuª
 + (240 * 160 * 2);

3321 
s¸ìn_pixñs
 = 
s¸ìn_ãxtuª
;

3323 
	}
}

3327 
	#öãgî_sˇÀ_c›y_2
() \

3328 
cuºít_sˇ∆öe_±r
[
x2
] = 
cuºít_pixñ
; \

3329 
cuºít_sˇ∆öe_±r
[
x2
 - 1] = 
cuºít_pixñ
; \

3330 
x2
 -= 2 \

3331 

	)

3332 
	#öãgî_sˇÀ_c›y_3
() \

3333 
cuºít_sˇ∆öe_±r
[
x2
] = 
cuºít_pixñ
; \

3334 
cuºít_sˇ∆öe_±r
[
x2
 - 1] = 
cuºít_pixñ
; \

3335 
cuºít_sˇ∆öe_±r
[
x2
 - 2] = 
cuºít_pixñ
; \

3336 
x2
 -= 3 \

3337 

	)

3338 
	#öãgî_sˇÀ_c›y_4
() \

3339 
cuºít_sˇ∆öe_±r
[
x2
] = 
cuºít_pixñ
; \

3340 
cuºít_sˇ∆öe_±r
[
x2
 - 1] = 
cuºít_pixñ
; \

3341 
cuºít_sˇ∆öe_±r
[
x2
 - 2] = 
cuºít_pixñ
; \

3342 
cuºít_sˇ∆öe_±r
[
x2
 - 3] = 
cuºít_pixñ
; \

3343 
x2
 -= 4 \

3344 

	)

3345 
	#öãgî_sˇÀ_h‹iz⁄èl
(
sˇÀ_Á˘‹
) \

3346 
y
 = 0; y < 160; y++) \

3348 
x
 = 239, 
x2
 = (240 * 
video_sˇÀ
) - 1; x >= 0; x--) \

3350 
cuºít_pixñ
 = 
cuºít_sˇ∆öe_±r
[
x
]; \

3351 
öãgî_sˇÀ_c›y_
##
	`sˇÀ_Á˘‹
(); \

3352 
cuºít_sˇ∆öe_±r
[
x2
] = cuºít_sˇ∆öe_±r[
x
]; \

3353 
cuºít_sˇ∆öe_±r
[
x2
 - 1] = cuºít_sˇ∆öe_±r[
x
]; \

3354 
cuºít_sˇ∆öe_±r
[
x2
 - 2] = cuºít_sˇ∆öe_±r[
x
]; \

3356 
cuºít_sˇ∆öe_±r
 +
pôch
; \

3358 

	)

3359 
	$Êù_s¸ìn
()

3361 if((
video_sˇÀ
 !1Ë&& (
cuºít_sˇÀ
 !
unsˇÀd
))

3363 
s32
 
x
, 
y
;

3364 
s32
 
x2
, 
y2
;

3365 
u16
 *
s¸ìn_±r
 = 
	`gë_s¸ìn_pixñs
();

3366 
u16
 *
cuºít_sˇ∆öe_±r
 = 
s¸ìn_±r
;

3367 
u32
 
pôch
 = 
	`gë_s¸ìn_pôch
();

3368 
u16
 
cuºít_pixñ
;

3369 
u32
 
i
;

3371 
video_sˇÀ
)

3374 
	`öãgî_sˇÀ_h‹iz⁄èl
(2);

3378 
	`öãgî_sˇÀ_h‹iz⁄èl
(3);

3383 
	`öãgî_sˇÀ_h‹iz⁄èl
(4);

3388 
y
 = 159, 
y2
 = (160 * 
video_sˇÀ
) - 1; y >= 0; y--)

3390 
i
 = 0; i < 
video_sˇÀ
; i++)

3392 
	`mem˝y
(
s¸ìn_±r
 + (
y2
 * 
pôch
),

3393 
s¸ìn_±r
 + (
y
 * 
pôch
), 480 * 
video_sˇÀ
);

3394 
y2
--;

3398 #ifde‡
GP2X_BUILD


3400 if((
s¸ìn_sˇÀ
 =
unsˇÀd
) &&

3401 (
ªsﬁuti⁄_width
 =
smÆl_ªsﬁuti⁄_width
) &&

3402 (
ªsﬁuti⁄_height
 =
smÆl_ªsﬁuti⁄_height
))

3404 
SDL_Re˘
 
§e˘
 = {0, 0, 240, 160};

3405 
SDL_Re˘
 
dª˘
 = {40, 40, 240, 160};

3406 
	`SDL_BlôSurÁ˚
(
s¸ìn
, &
§e˘
, 
hw_s¸ìn
, &
dª˘
);

3410 
	`SDL_BlôSurÁ˚
(
s¸ìn
, 
NULL
, 
hw_s¸ìn
, NULL);

3414 
	`SDL_Flù
(
s¸ìn
);

3416 
	}
}

3420 
u32
 
	g‰ame_to_ªndî
;

3422 
	$upd©e_s¸ìn
()

3424 if(!
skù_√xt_‰ame
)

3425 
	`Êù_s¸ìn
();

3426 
	}
}

3428 #ifde‡
PSP_BUILD


3430 
	$öô_video
()

3432 
	`s˚Di•œySëMode
(0, 
PSP_SCREEN_WIDTH
, 
PSP_SCREEN_HEIGHT
);

3434 
	`s˚Di•œyWaôVbœnkSèπ
();

3435 
	`s˚Di•œySëFømeBuf
((*)
p•_gu_vøm_ba£
, 
PSP_LINE_SIZE
,

3436 
PSP_DISPLAY_PIXEL_FORMAT_565
, 
PSP_DISPLAY_SETBUF_NEXTFRAME
);

3438 
	`s˚GuInô
();

3440 
	`s˚GuSèπ
(
GU_DIRECT
, 
di•œy_li°
);

3441 
	`s˚GuDøwBuf„r
(
GU_PSM_5650
, (*)0, 
PSP_LINE_SIZE
);

3442 
	`s˚GuDi•Buf„r
(
PSP_SCREEN_WIDTH
, 
PSP_SCREEN_HEIGHT
,

3443 (*)0, 
PSP_LINE_SIZE
);

3444 
	`s˚GuCÀ¨
(
GU_COLOR_BUFFER_BIT
);

3446 
	`s˚GuOff£t
(2048 - (
PSP_SCREEN_WIDTH
 / 2), 2048 - (
PSP_SCREEN_HEIGHT
 / 2));

3447 
	`s˚GuVõwp‹t
(2048, 2048, 
PSP_SCREEN_WIDTH
, 
PSP_SCREEN_HEIGHT
);

3449 
	`s˚GuSciss‹
(0, 0, 
PSP_SCREEN_WIDTH
 + 1, 
PSP_SCREEN_HEIGHT
 + 1);

3450 
	`s˚GuE«bÀ
(
GU_SCISSOR_TEST
);

3451 
	`s˚GuTexMode
(
GU_PSM_5650
, 0, 0, 
GU_FALSE
);

3452 
	`s˚GuTexFunc
(
GU_TFX_REPLACE
, 
GU_TCC_RGBA
);

3453 
	`s˚GuTexFûãr
(
GU_LINEAR
, GU_LINEAR);

3454 
	`s˚GuE«bÀ
(
GU_TEXTURE_2D
);

3456 
	`s˚GuFr⁄tFa˚
(
GU_CW
);

3457 
	`s˚GuDißbÀ
(
GU_BLEND
);

3459 
	`s˚GuFöish
();

3460 
	`s˚GuSync
(0, 0);

3462 
	`s˚Di•œyWaôVbœnkSèπ
();

3463 
	`s˚GuDi•œy
(
GU_TRUE
);

3465 
P•GeCÆlbackD©a
 
gecb
;

3466 
gecb
.
sig«l_func
 = 
NULL
;

3467 
gecb
.
sig«l_¨g
 = 
NULL
;

3468 
gecb
.
föish_func
 = 
Ge_Föish_CÆlback
;

3469 
gecb
.
föish_¨g
 = 
NULL
;

3470 
gecbid
 = 
	`s˚GeSëCÆlback
(&
gecb
);

3472 
s¸ìn_vîãx
[0] = 0 + 0.5;

3473 
s¸ìn_vîãx
[1] = 0 + 0.5;

3474 
s¸ìn_vîãx
[2] = 0 + 0.5;

3475 
s¸ìn_vîãx
[3] = 0 + 0.5;

3476 
s¸ìn_vîãx
[4] = 0;

3477 
s¸ìn_vîãx
[5] = 
GBA_SCREEN_WIDTH
 - 0.5;

3478 
s¸ìn_vîãx
[6] = 
GBA_SCREEN_HEIGHT
 - 0.5;

3479 
s¸ìn_vîãx
[7] = 
PSP_SCREEN_WIDTH
 - 0.5;

3480 
s¸ìn_vîãx
[8] = 
PSP_SCREEN_HEIGHT
 - 0.5;

3481 
s¸ìn_vîãx
[9] = 0;

3484 
	`GE_CMD
(
FBP
, ((
u32
)
p•_gu_vøm_ba£
 & 0x00FFFFFF));

3485 
	`GE_CMD
(
FBW
, (((
u32
)
p•_gu_vøm_ba£
 & 0xFF000000Ë>> 8Ë| 
PSP_LINE_SIZE
);

3487 
	`GE_CMD
(
TBP0
, ((
u32
)
s¸ìn_ãxtuª
 & 0x00FFFFFF));

3488 
	`GE_CMD
(
TBW0
, (((
u32
)
s¸ìn_ãxtuª
 & 0xFF000000Ë>> 8Ë| 
GBA_SCREEN_WIDTH
);

3490 
	`GE_CMD
(
TSIZE0
, (8 << 8) | 8);

3492 
	`GE_CMD
(
TFLUSH
, 0);

3495 
	`GE_CMD
(
VTYPE
, (1 << 23) | (0 << 11) | (0 << 9) |

3498 
	`GE_CMD
(
BASE
, 0);

3500 
	`GE_CMD
(
IADDR
, 0);

3502 
	`GE_CMD
(
BASE
, ((
u32
)
s¸ìn_vîãx
 & 0xFF000000) >> 8);

3504 
	`GE_CMD
(
VADDR
, ((
u32
)
s¸ìn_vîãx
 & 0x00FFFFFF));

3506 
	`GE_CMD
(
PRIM
, (6 << 16) | 2);

3508 
	`GE_CMD
(
FINISH
, 0);

3510 
	`GE_CMD
(
SIGNAL
, 0);

3511 
	`GE_CMD
(
NOP
, 0);

3512 
	`GE_CMD
(
NOP
, 0);

3513 
	}
}

3517 
	$öô_video
()

3519 
	`SDL_Inô
(
SDL_INIT_VIDEO
 | 
SDL_INIT_JOYSTICK
 | 
SDL_INIT_NOPARACHUTE
);

3521 #ifde‡
GP2X_BUILD


3522 
	`SDL_GP2X_AŒowGfxMem‹y
(
NULL
, 0);

3524 
hw_s¸ìn
 = 
	`SDL_SëVideoMode
(320 * 
video_sˇÀ
, 240 * video_scale,

3525 16, 
SDL_HWSURFACE
);

3527 
s¸ìn
 = 
	`SDL_Cª©eRGBSurÁ˚
(
SDL_HWSURFACE
, 240 * 
video_sˇÀ
,

3528 160 * 
video_sˇÀ
, 16, 0xFFFF, 0xFFFF, 0xFFFF, 0);

3530 
	`gp2x_lﬂd_mmuhack
();

3532 
s¸ìn
 = 
	`SDL_SëVideoMode
(240 * 
video_sˇÀ
, 160 * video_scale, 16, 0);

3534 
	`SDL_ShowCurs‹
(0);

3535 
	}
}

3539 
video_sˇÀ_ty≥
 
	gs¸ìn_sˇÀ
 = 
sˇÀd_a•e˘
;

3540 
video_sˇÀ_ty≥
 
	gcuºít_sˇÀ
 = 
sˇÀd_a•e˘
;

3541 
video_fûãr_ty≥
 
	gs¸ìn_fûãr
 = 
fûãr_bûöór
;

3544 #ifde‡
PSP_BUILD


3546 
	$video_ªsﬁuti⁄_œrge
()

3548 if(
video_dúe˘
 != 1)

3550 
video_dúe˘
 = 1;

3551 
s¸ìn_pixñs
 = 
p•_gu_vøm_ba£
;

3552 
s¸ìn_pôch
 = 512;

3553 
	`s˚GuSèπ
(
GU_DIRECT
, 
di•œy_li°
);

3554 
	`s˚GuDi•Buf„r
(
PSP_SCREEN_WIDTH
, 
PSP_SCREEN_HEIGHT
,

3555 (*)0, 
PSP_LINE_SIZE
);

3556 
	`s˚GuFöish
();

3558 
	}
}

3560 
	$£t_gba_ªsﬁuti⁄
(
video_sˇÀ_ty≥
 
sˇÀ
)

3562 
u32
 
fûãr_löór
 = 0;

3563 
s¸ìn_sˇÀ
 = 
sˇÀ
;

3564 
sˇÀ
)

3566 
unsˇÀd
:

3567 
s¸ìn_vîãx
[2] = 120 + 0.5;

3568 
s¸ìn_vîãx
[3] = 56 + 0.5;

3569 
s¸ìn_vîãx
[7] = 
GBA_SCREEN_WIDTH
 + 120 - 0.5;

3570 
s¸ìn_vîãx
[8] = 
GBA_SCREEN_HEIGHT
 + 56 - 0.5;

3573 
sˇÀd_a•e˘
:

3574 
s¸ìn_vîãx
[2] = 36 + 0.5;

3575 
s¸ìn_vîãx
[3] = 0 + 0.5;

3576 
s¸ìn_vîãx
[7] = 408 + 36 - 0.5;

3577 
s¸ìn_vîãx
[8] = 
PSP_SCREEN_HEIGHT
 - 0.5;

3580 
fuŒs¸ìn
:

3581 
s¸ìn_vîãx
[2] = 0;

3582 
s¸ìn_vîãx
[3] = 0;

3583 
s¸ìn_vîãx
[7] = 
PSP_SCREEN_WIDTH
;

3584 
s¸ìn_vîãx
[8] = 
PSP_SCREEN_HEIGHT
;

3588 
	`s˚GuSèπ
(
GU_DIRECT
, 
di•œy_li°
);

3589 if(
s¸ìn_fûãr
 =
fûãr_bûöór
)

3590 
	`s˚GuTexFûãr
(
GU_LINEAR
, GU_LINEAR);

3592 
	`s˚GuTexFûãr
(
GU_NEAREST
, GU_NEAREST);

3594 
	`s˚GuFöish
();

3595 
	`s˚GuSync
(0, 0);

3597 
	`˛ór_s¸ìn
(0x0000);

3598 
	}
}

3600 
	$video_ªsﬁuti⁄_smÆl
()

3602 if(
video_dúe˘
 != 0)

3604 
	`£t_gba_ªsﬁuti⁄
(
s¸ìn_sˇÀ
);

3605 
video_dúe˘
 = 0;

3606 
s¸ìn_pixñs
 = 
s¸ìn_ãxtuª
;

3607 
s¸ìn_Êù
 = 0;

3608 
s¸ìn_pôch
 = 240;

3609 
	`s˚GuSèπ
(
GU_DIRECT
, 
di•œy_li°
);

3610 
	`s˚GuDi•Buf„r
(
PSP_SCREEN_WIDTH
, 
PSP_SCREEN_HEIGHT
,

3611 (*)0, 
PSP_LINE_SIZE
);

3612 
	`s˚GuFöish
();

3614 
	}
}

3616 
	$˛ór_s¸ìn
(
u16
 
cﬁ‹
)

3618 
u32
 
i
;

3619 
u16
 *
§c_±r
 = 
	`gë_s¸ìn_pixñs
();

3621 
	`s˚GuSync
(0, 0);

3623 
i
 = 0; i < (512 * 272); i++, 
§c_±r
++)

3625 *
§c_±r
 = 
cﬁ‹
;

3641 
	}
}

3645 
	$video_ªsﬁuti⁄_œrge
()

3647 
cuºít_sˇÀ
 = 
unsˇÀd
;

3649 #ifde‡
GP2X_BUILD


3650 
	`SDL_FªeSurÁ˚
(
s¸ìn
);

3651 
	`SDL_GP2X_AŒowGfxMem‹y
(
NULL
, 0);

3652 
hw_s¸ìn
 = 
	`SDL_SëVideoMode
(320, 240, 16, 
SDL_HWSURFACE
);

3653 
s¸ìn
 = 
	`SDL_Cª©eRGBSurÁ˚
(
SDL_HWSURFACE
, 320, 240, 16, 0xFFFF,

3655 
ªsﬁuti⁄_width
 = 320;

3656 
ªsﬁuti⁄_height
 = 240;

3657 
	`SDL_ShowCurs‹
(0);

3659 
	`gp2x_lﬂd_mmuhack
();

3661 
s¸ìn
 = 
	`SDL_SëVideoMode
(480, 272, 16, 0);

3662 
ªsﬁuti⁄_width
 = 480;

3663 
ªsﬁuti⁄_height
 = 272;

3665 
	}
}

3667 
	$video_ªsﬁuti⁄_smÆl
()

3669 
cuºít_sˇÀ
 = 
s¸ìn_sˇÀ
;

3671 #ifde‡
GP2X_BUILD


3672 
	`SDL_FªeSurÁ˚
(
s¸ìn
);

3673 
	`SDL_GP2X_AŒowGfxMem‹y
(
NULL
, 0);

3674 
hw_s¸ìn
 = 
	`SDL_SëVideoMode
((
s¸ìn_sˇÀ
 =
unsˇÀd
 ? 320 :

3675 
smÆl_ªsﬁuti⁄_width
 * 
video_sˇÀ
), (
s¸ìn_sˇÀ
 =
unsˇÀd
 ? 320 :

3676 
smÆl_ªsﬁuti⁄_height
 * 
video_sˇÀ
), 16, 
SDL_HWSURFACE
);

3678 
s¸ìn
 = 
	`SDL_Cª©eRGBSurÁ˚
(
SDL_HWSURFACE
,

3679 
smÆl_ªsﬁuti⁄_width
 * 
video_sˇÀ
, 
smÆl_ªsﬁuti⁄_height
 *

3680 
video_sˇÀ
, 16, 0xFFFF, 0xFFFF, 0xFFFF, 0);

3682 
	`SDL_ShowCurs‹
(0);

3684 
	`gp2x_lﬂd_mmuhack
();

3686 
s¸ìn
 = 
	`SDL_SëVideoMode
(
smÆl_ªsﬁuti⁄_width
 * 
video_sˇÀ
,

3687 
smÆl_ªsﬁuti⁄_height
 * 
video_sˇÀ
, 16, 0);

3689 
ªsﬁuti⁄_width
 = 
smÆl_ªsﬁuti⁄_width
;

3690 
ªsﬁuti⁄_height
 = 
smÆl_ªsﬁuti⁄_height
;

3691 
	}
}

3693 
	$£t_gba_ªsﬁuti⁄
(
video_sˇÀ_ty≥
 
sˇÀ
)

3695 if(
s¸ìn_sˇÀ
 !
sˇÀ
)

3697 
s¸ìn_sˇÀ
 = 
sˇÀ
;

3698 
sˇÀ
)

3700 
unsˇÀd
:

3701 
sˇÀd_a•e˘
:

3702 
fuŒs¸ìn
:

3703 
smÆl_ªsﬁuti⁄_width
 = 240 * 
video_sˇÀ
;

3704 
smÆl_ªsﬁuti⁄_height
 = 160 * 
video_sˇÀ
;

3708 
	}
}

3710 
	$˛ór_s¸ìn
(
u16
 
cﬁ‹
)

3712 
u16
 *
de°_±r
 = 
	`gë_s¸ìn_pixñs
();

3713 
u32
 
löe_skù
 = 
	`gë_s¸ìn_pôch
(Ë- 
s¸ìn
->
w
;

3714 
u32
 
x
, 
y
;

3716 
y
 = 0; y < 
s¸ìn
->
h
; y++)

3718 
x
 = 0; x < 
s¸ìn
->
w
; x++, 
de°_±r
++)

3720 *
de°_±r
 = 
cﬁ‹
;

3722 
de°_±r
 +
löe_skù
;

3724 
	}
}

3728 
u16
 *
	$c›y_s¸ìn
()

3730 
u16
 *
c›y
 = 
	`mÆloc
(240 * 160 * 2);

3731 
	`mem˝y
(
c›y
, 
	`gë_s¸ìn_pixñs
(), 240 * 160 * 2);

3732  
c›y
;

3733 
	}
}

3735 
	$blô_to_s¸ìn
(
u16
 *
§c
, 
u32
 
w
, u32 
h
, u32 
de°_x
, u32 
de°_y
)

3737 
u32
 
pôch
 = 
	`gë_s¸ìn_pôch
();

3738 
u16
 *
de°_±r
 = 
	`gë_s¸ìn_pixñs
(Ë+ 
de°_x
 + (
de°_y
 * 
pôch
);

3740 
u16
 *
§c_±r
 = 
§c
;

3741 
u32
 
löe_skù
 = 
pôch
 - 
w
;

3742 
u32
 
x
, 
y
;

3744 
y
 = 0; y < 
h
; y++)

3746 
x
 = 0; x < 
w
; x++, 
§c_±r
++, 
de°_±r
++)

3748 *
de°_±r
 = *
§c_±r
;

3750 
de°_±r
 +
löe_skù
;

3752 
	}
}

3754 
	$¥öt_°rög_ext
(c⁄° *
°r
, 
u16
 
fg_cﬁ‹
, u16 
bg_cﬁ‹
,

3755 
u32
 
x
, u32 
y
, *
_de°_±r
, u32 
pôch
, u32 
∑d
)

3757 
u16
 *
de°_±r
 = (u16 *)
_de°_±r
 + (
y
 * 
pôch
Ë+ 
x
;

3758 
u8
 
cuºít_ch¨
 = 
°r
[0];

3759 
u32
 
cuºít_row
;

3760 
u32
 
glyph_off£t
;

3761 
u32
 
i
 = 0, 
i2
, 
i3
;

3762 
u32
 
°r_ödex
 = 1;

3763 
u32
 
cuºít_x
 = 
x
;

3767 if(
y
 + 
FONT_HEIGHT
 >
ªsﬁuti⁄_height
)

3770 
cuºít_ch¨
)

3772 if(
cuºít_ch¨
 == '\n')

3774 
y
 +
FONT_HEIGHT
;

3775 
cuºít_x
 = 
x
;

3776 
de°_±r
 = 
	`gë_s¸ìn_pixñs
(Ë+ (
y
 * 
pôch
Ë+ 
x
;

3780 
glyph_off£t
 = 
_f⁄t_off£t
[
cuºít_ch¨
];

3781 
cuºít_x
 +
FONT_WIDTH
;

3782 
i2
 = 0; i2 < 
FONT_HEIGHT
; i2++, 
glyph_off£t
++)

3784 
cuºít_row
 = 
_f⁄t_bôs
[
glyph_off£t
];

3785 
i3
 = 0; i3 < 
FONT_WIDTH
; i3++)

3787 if((
cuºít_row
 >> (15 - 
i3
)) & 0x01)

3788 *
de°_±r
 = 
fg_cﬁ‹
;

3790 *
de°_±r
 = 
bg_cﬁ‹
;

3791 
de°_±r
++;

3793 
de°_±r
 +(
pôch
 - 
FONT_WIDTH
);

3795 
de°_±r
 = de°_±∏- (
pôch
 * 
FONT_HEIGHT
Ë+ 
FONT_WIDTH
;

3798 
i
++;

3800 
cuºít_ch¨
 = 
°r
[
°r_ödex
];

3802 if((
i
 < 
∑d
Ë&& (
cuºít_ch¨
 == 0))

3804 
cuºít_ch¨
 = ' ';

3808 
°r_ödex
++;

3811 if(
cuºít_x
 + 
FONT_WIDTH
 >
ªsﬁuti⁄_width
 )

3814 
	}
}

3816 
	$¥öt_°rög
(c⁄° *
°r
, 
u16
 
fg_cﬁ‹
, u16 
bg_cﬁ‹
,

3817 
u32
 
x
, u32 
y
)

3819 
	`¥öt_°rög_ext
(
°r
, 
fg_cﬁ‹
, 
bg_cﬁ‹
, 
x
, 
y
, 
	`gë_s¸ìn_pixñs
(),

3820 
	`gë_s¸ìn_pôch
(), 0);

3821 
	}
}

3823 
	$¥öt_°rög_∑d
(c⁄° *
°r
, 
u16
 
fg_cﬁ‹
, u16 
bg_cﬁ‹
,

3824 
u32
 
x
, u32 
y
, u32 
∑d
)

3826 
	`¥öt_°rög_ext
(
°r
, 
fg_cﬁ‹
, 
bg_cﬁ‹
, 
x
, 
y
, 
	`gë_s¸ìn_pixñs
(),

3827 
	`gë_s¸ìn_pôch
(), 
∑d
);

3828 
	}
}

3830 
u32
 
	gdebug_curs‹_x
 = 0;

3831 
u32
 
	gdebug_curs‹_y
 = 0;

3833 #ifde‡
STDIO_DEBUG


3835 
	$debug_s¸ìn_˛ór
()

3837 
	}
}

3839 
	$debug_s¸ìn_°¨t
()

3841 
	}
}

3843 
	$debug_s¸ìn_íd
()

3845 
	}
}

3847 
	$debug_s¸ìn_upd©e
()

3849 
	}
}

3851 
	$debug_s¸ìn_¥ötf
(c⁄° *
f‹m©
, ...)

3853 
va_li°
 
≠
;

3855 
	`va_°¨t
(
≠
, 
f‹m©
);

3856 
	`v¥ötf
(
f‹m©
, 
≠
);

3857 
	`va_íd
(
≠
);

3858 
	}
}

3860 
	$debug_s¸ìn_√wlöe
(
u32
 
cou¡
)

3862 
	`¥ötf
("\n");

3863 
	}
}

3868 
	$debug_s¸ìn_˛ór
()

3870 
debug_curs‹_x
 = 0;

3871 
debug_curs‹_y
 = 0;

3872 
	`˛ór_s¸ìn
(0x0000);

3873 
	}
}

3875 
	$debug_s¸ìn_°¨t
()

3877 
	`video_ªsﬁuti⁄_œrge
();

3878 
	`debug_s¸ìn_˛ór
();

3879 
	}
}

3881 
	$debug_s¸ìn_íd
()

3883 
	`video_ªsﬁuti⁄_smÆl
();

3884 
	}
}

3886 
	$debug_s¸ìn_upd©e
()

3888 
	`Êù_s¸ìn
();

3889 
	}
}

3891 
	$debug_s¸ìn_¥ötf
(c⁄° *
f‹m©
, ...)

3893 
°r_buf„r
[512];

3894 
u32
 
°r_buf„r_Àngth
;

3895 
va_li°
 
≠
;

3897 
	`va_°¨t
(
≠
, 
f‹m©
);

3898 
°r_buf„r_Àngth
 = 
	`v¢¥ötf
(
°r_buf„r
, 512, 
f‹m©
, 
≠
);

3899 
	`va_íd
(
≠
);

3901 
	`¥ötf
("¥ötög debug såög %†© %d %d\n", 
°r_buf„r
,

3902 
debug_curs‹_x
, 
debug_curs‹_y
);

3904 
	`¥öt_°rög
(
°r_buf„r
, 0xFFFF, 0x0000, 
debug_curs‹_x
, 
debug_curs‹_y
);

3905 
debug_curs‹_x
 +
FONT_WIDTH
 * 
°r_buf„r_Àngth
;

3906 
	}
}

3908 
	$debug_s¸ìn_√wlöe
(
u32
 
cou¡
)

3910 
debug_curs‹_x
 = 0;

3911 
debug_curs‹_y
 +
FONT_HEIGHT
 * 
cou¡
;

3912 
	}
}

3916 
	$debug_s¸ìn_¥öé
(c⁄° *
f‹m©
, ...)

3918 
va_li°
 
≠
;

3920 
	`va_°¨t
(
≠
, 
f‹m©
);

3921 
	`debug_s¸ìn_¥ötf
(
f‹m©
, 
≠
);

3922 
	`debug_s¸ìn_¥ötf
("\n");

3923 
	`va_íd
(
≠
);

3924 
	}
}

3927 
	#video_ßve°©e_buûdî
(
ty≥
) \

3928 
video_
##
ty≥
##
	`_ßve°©e
(
fûe_èg_ty≥
 
ßve°©e_fûe
) \

3930 
fûe_
##
ty≥
##
	`_¨øy
(
ßve°©e_fûe
, 
afföe_ª„ªn˚_x
); \

3931 
fûe_
##
ty≥
##
	`_¨øy
(
ßve°©e_fûe
, 
afföe_ª„ªn˚_y
); \

3933 

	)

3934 
video_ßve°©e_buûdî
(
ªad
);

3935 
video_ßve°©e_buûdî
(
wrôe_mem
);

	@video.h

20 #i‚de‡
VIDEO_H


21 
	#VIDEO_H


	)

23 
upd©e_sˇ∆öe
();

24 
upd©e_s¸ìn
();

25 
öô_video
();

26 
video_ªsﬁuti⁄_œrge
();

27 
video_ªsﬁuti⁄_smÆl
();

28 
¥öt_°rög
(c⁄° *
°r
, 
u16
 
fg_cﬁ‹
, u16 
bg_cﬁ‹
,

29 
u32
 
x
, u32 
y
);

30 
¥öt_°rög_∑d
(c⁄° *
°r
, 
u16
 
fg_cﬁ‹
, u16 
bg_cﬁ‹
,

31 
u32
 
x
, u32 
y
, u32 
∑d
);

32 
¥öt_°rög_ext
(c⁄° *
°r
, 
u16
 
fg_cﬁ‹
, u16 
bg_cﬁ‹
,

33 
u32
 
x
, u32 
y
, *
_de°_±r
, u32 
pôch
, u32 
∑d
);

34 
˛ór_s¸ìn
(
u16
 
cﬁ‹
);

35 
blô_to_s¸ìn
(
u16
 *
§c
, 
u32
 
w
, u32 
h
, u32 
x
, u32 
y
);

36 
u16
 *
c›y_s¸ìn
();

37 
Êù_s¸ìn
();

38 
video_wrôe_mem_ßve°©e
(
fûe_èg_ty≥
 
ßve°©e_fûe
);

39 
video_ªad_ßve°©e
(
fûe_èg_ty≥
 
ßve°©e_fûe
);

41 
debug_s¸ìn_˛ór
();

42 
debug_s¸ìn_°¨t
();

43 
debug_s¸ìn_íd
();

44 
debug_s¸ìn_¥ötf
(c⁄° *
f‹m©
, ...);

45 
debug_s¸ìn_¥öé
(c⁄° *
f‹m©
, ...);

46 
debug_s¸ìn_√wlöe
(
u32
 
cou¡
);

47 
debug_s¸ìn_upd©e
();

49 
u32
 
‰ame_•ìd
;

51 
s32
 
afföe_ª„ªn˚_x
[2];

52 
s32
 
afföe_ª„ªn˚_y
[2];

54 (* 
	ttûe_ªndî_fun˘i⁄
)(
	tu32
 
	tœyî_numbî
, u32 
	t°¨t
, u32 
	tíd
,

55 *
	tde°_±r
);

56 (* 
	tbôm≠_ªndî_fun˘i⁄
)(
	tu32
 
	t°¨t
, u32 
	tíd
, *
	tde°_±r
);

60 
tûe_ªndî_fun˘i⁄
 
n‹mÆ_ªndî_ba£
;

61 
tûe_ªndî_fun˘i⁄
 
n‹mÆ_ªndî_å™•¨ít
;

62 
tûe_ªndî_fun˘i⁄
 
Æpha_ªndî_ba£
;

63 
tûe_ªndî_fun˘i⁄
 
Æpha_ªndî_å™•¨ít
;

64 
tûe_ªndî_fun˘i⁄
 
cﬁ‹16_ªndî_ba£
;

65 
tûe_ªndî_fun˘i⁄
 
cﬁ‹16_ªndî_å™•¨ít
;

66 
tûe_ªndî_fun˘i⁄
 
cﬁ‹32_ªndî_ba£
;

67 
tûe_ªndî_fun˘i⁄
 
cﬁ‹32_ªndî_å™•¨ít
;

68 } 
	ttûe_œyî_ªndî_°ru˘
;

72 
bôm≠_ªndî_fun˘i⁄
 
n‹mÆ_ªndî
;

73 } 
	tbôm≠_œyî_ªndî_°ru˘
;

77 
unsˇÀd
,

78 
sˇÀd_a•e˘
,

79 
fuŒs¸ìn
,

80 } 
	tvideo_sˇÀ_ty≥
;

84 
fûãr_√¨e°
,

85 
fûãr_bûöór


86 } 
	tvideo_fûãr_ty≥
;

88 
video_sˇÀ_ty≥
 
s¸ìn_sˇÀ
;

89 
video_sˇÀ_ty≥
 
cuºít_sˇÀ
;

90 
video_fûãr_ty≥
 
s¸ìn_fûãr
;

92 
	`£t_gba_ªsﬁuti⁄
(
video_sˇÀ_ty≥
 
sˇÀ
);

	@x86/x86_emit.h

20 #i‚de‡
X86_EMIT_H


21 
	#X86_EMIT_H


	)

23 
u32
 
x86_upd©e_gba
(u32 
pc
);

27 
x86_ödúe˘_bønch_¨m
(
u32
 
addªss
);

28 
x86_ödúe˘_bønch_thumb
(
u32
 
addªss
);

29 
x86_ödúe˘_bønch_duÆ
(
u32
 
addªss
);

31 
fun˘i⁄_cc
 
execuã_°‹e_˝§
(
u32
 
√w_˝§
, u32 
°‹e_mask
);

33 
°ï_debug_x86
(
u32
 
pc
);

37 
	mx86_ªg_numbî_óx
,

38 
	mx86_ªg_numbî_ecx
,

39 
	mx86_ªg_numbî_edx
,

40 
	mx86_ªg_numbî_ebx
,

41 
	mx86_ªg_numbî_e•
,

42 
	mx86_ªg_numbî_ebp
,

43 
	mx86_ªg_numbî_esi
,

44 
	mx86_ªg_numbî_edi


45 } 
	tx86_ªg_numbî
;

47 
	#x86_emô_byã
(
vÆue
) \

48 *
å™¶©i⁄_±r
 = 
vÆue
; \

49 
å™¶©i⁄_±r
++ \

50 

	)

51 
	#x86_emô_dw‹d
(
vÆue
) \

52 *((
u32
 *)
å™¶©i⁄_±r
Ë
vÆue
; \

53 
å™¶©i⁄_±r
 += 4 \

54 

	)

57 
	mx86_mod_mem
 = 0,

58 
	mx86_mod_mem_di•8
 = 1,

59 
	mx86_mod_mem_di•32
 = 2,

60 
	mx86_mod_ªg
 = 3

61 } 
	tx86_mod
;

63 
	#x86_emô_mod_rm
(
mod
, 
rm
, 
•¨e
) \

64 
	`x86_emô_byã
((
mod
 << 6Ë| (
•¨e
 << 3Ë| 
rm
) \

65 

	)

66 
	#x86_emô_mem_›
(
de°
, 
ba£
, 
off£t
) \

67 if(
off£t
 == 0) \

69 
	`x86_emô_mod_rm
(
x86_mod_mem
, 
ba£
, 
de°
); \

73 if(((
s32
)
off£t
 < 127) && ((s32)offset > -128)) \

75 
	`x86_emô_mod_rm
(
x86_mod_mem_di•8
, 
ba£
, 
de°
); \

76 
	`x86_emô_byã
((
s8
)
off£t
); \

80 
	`x86_emô_mod_rm
(
x86_mod_mem_di•32
, 
ba£
, 
de°
); \

81 
	`x86_emô_dw‹d
(
off£t
); \

83 

	)

84 
	#x86_emô_ªg_›
(
de°
, 
sour˚
) \

85 
	`x86_emô_mod_rm
(
x86_mod_ªg
, 
sour˚
, 
de°
) \

86 

	)

90 
	mx86_›code_mov_rm_ªg
 = 0x89,

91 
	mx86_›code_mov_ªg_rm
 = 0x8B,

92 
	mx86_›code_mov_ªg_imm
 = 0xB8,

93 
	mx86_›code_mov_rm_imm
 = 0x00C7,

94 
	mx86_›code_r‹_ªg_imm
 = 0x01C1,

95 
	mx86_›code_shl_ªg_imm
 = 0x04C1,

96 
	mx86_›code_shr_ªg_imm
 = 0x05C1,

97 
	mx86_›code_ßr_ªg_imm
 = 0x07C1,

98 
	mx86_›code_push_ªg
 = 0x50,

99 
	mx86_›code_push_rm
 = 0xFF,

100 
	mx86_›code_push_imm
 = 0x0668,

101 
	mx86_›code_ˇŒ_off£t
 = 0xE8,

102 
	mx86_›code_ªt
 = 0xC3,

103 
	mx86_›code_ã°_rm_imm
 = 0x00F7,

104 
	mx86_›code_ã°_ªg_rm
 = 0x85,

105 
	mx86_›code_mul_óx_rm
 = 0x04F7,

106 
	mx86_›code_imul_óx_rm
 = 0x05F7,

107 
	mx86_›code_idiv_óx_rm
 = 0x07F7,

108 
	mx86_›code_add_rm_imm
 = 0x0081,

109 
	mx86_›code_™d_rm_imm
 = 0x0481,

110 
	mx86_›code_sub_rm_imm
 = 0x0581,

111 
	mx86_›code_x‹_rm_imm
 = 0x0681,

112 
	mx86_›code_add_ªg_rm
 = 0x03,

113 
	mx86_›code_adc_ªg_rm
 = 0x13,

114 
	mx86_›code_‹_ªg_rm
 = 0x0B,

115 
	mx86_›code_sub_ªg_rm
 = 0x2B,

116 
	mx86_›code_x‹_ªg_rm
 = 0x33,

117 
	mx86_›code_cmp_ªg_rm
 = 0x39,

118 
	mx86_›code_cmp_rm_imm
 = 0x053B,

119 
	mx86_›code_Àa_ªg_rm
 = 0x8D,

120 
	mx86_›code_j
 = 0x80,

121 
	mx86_›code_jmp
 = 0xE9,

122 
	mx86_›code_jmp_ªg
 = 0x04FF,

123 
	mx86_›code_ext
 = 0x0F

124 } 
	tx86_›codes
;

128 
	mx86_c⁄dôi⁄_code_o
 = 0x00,

129 
	mx86_c⁄dôi⁄_code_no
 = 0x01,

130 
	mx86_c⁄dôi⁄_code_c
 = 0x02,

131 
	mx86_c⁄dôi⁄_code_nc
 = 0x03,

132 
	mx86_c⁄dôi⁄_code_z
 = 0x04,

133 
	mx86_c⁄dôi⁄_code_nz
 = 0x05,

134 
	mx86_c⁄dôi⁄_code_«
 = 0x06,

135 
	mx86_c⁄dôi⁄_code_a
 = 0x07,

136 
	mx86_c⁄dôi⁄_code_s
 = 0x08,

137 
	mx86_c⁄dôi⁄_code_ns
 = 0x09,

138 
	mx86_c⁄dôi⁄_code_p
 = 0x0A,

139 
	mx86_c⁄dôi⁄_code_≈
 = 0x0B,

140 
	mx86_c⁄dôi⁄_code_l
 = 0x0C,

141 
	mx86_c⁄dôi⁄_code_∆
 = 0x0D,

142 
	mx86_c⁄dôi⁄_code_ng
 = 0x0E,

143 
	mx86_c⁄dôi⁄_code_g
 = 0x0F

144 } 
	tx86_c⁄dôi⁄_codes
;

146 
	#x86_ªœtive_off£t
(
sour˚
, 
off£t
, 
√xt
) \

147 ((
u32
)
off£t
 - ((u32)
sour˚
 + 
√xt
)) \

148 

	)

149 
	#x86_u√quÆ_›î™ds
(
›_a
, 
›_b
) \

150 (
x86_ªg_numbî_
##
›_a
 !x86_ªg_numbî_##
›_b
) \

151 

	)

152 
	#x86_emô_›code_1b_ªg
(
›code
, 
de°
, 
sour˚
) \

154 
	`x86_emô_byã
(
x86_›code_
##
›code
); \

155 
	`x86_emô_ªg_›
(
x86_ªg_numbî_
##
de°
, x86_ªg_numbî_##
sour˚
); \

157 

	)

158 
	#x86_emô_›code_1b_mem
(
›code
, 
de°
, 
ba£
, 
off£t
) \

160 
	`x86_emô_byã
(
x86_›code_
##
›code
); \

161 
	`x86_emô_mem_›
(
x86_ªg_numbî_
##
de°
, x86_ªg_numbî_##
ba£
, 
off£t
); \

163 

	)

164 
	#x86_emô_›code_1b
(
›code
, 
ªg
) \

165 
	`x86_emô_byã
(
x86_›code_
##
›code
 | 
x86_ªg_numbî_
##
ªg
) \

166 

	)

167 
	#x86_emô_›code_1b_ext_ªg
(
›code
, 
de°
) \

168 
	`x86_emô_byã
(
x86_›code_
##
›code
 & 0xFF); \

169 
	`x86_emô_ªg_›
(
x86_›code_
##
›code
 >> 8, 
x86_ªg_numbî_
##
de°
) \

170 

	)

171 
	#x86_emô_›code_1b_ext_mem
(
›code
, 
ba£
, 
off£t
) \

172 
	`x86_emô_byã
(
x86_›code_
##
›code
 & 0xFF); \

173 
	`x86_emô_mem_›
(
x86_›code_
##
›code
 >> 8, 
x86_ªg_numbî_
##
ba£
, 
off£t
) \

174 

	)

175 
	#x86_emô_mov_ªg_mem
(
de°
, 
ba£
, 
off£t
) \

176 
	`x86_emô_›code_1b_mem
(
mov_ªg_rm
, 
de°
, 
ba£
, 
off£t
) \

177 

	)

178 
	#x86_emô_mov_mem_ªg
(
sour˚
, 
ba£
, 
off£t
) \

179 
	`x86_emô_›code_1b_mem
(
mov_rm_ªg
, 
sour˚
, 
ba£
, 
off£t
) \

180 

	)

181 
	#x86_emô_mov_ªg_ªg
(
de°
, 
sour˚
) \

182 if(
	`x86_u√quÆ_›î™ds
(
de°
, 
sour˚
)) \

184 
	`x86_emô_›code_1b_ªg
(
mov_ªg_rm
, 
de°
, 
sour˚
) \

186 

	)

187 
	#x86_emô_mov_ªg_imm
(
de°
, 
imm
) \

188 
	`x86_emô_›code_1b
(
mov_ªg_imm
, 
de°
); \

189 
	`x86_emô_dw‹d
(
imm
) \

190 

	)

191 
	#x86_emô_mov_mem_imm
(
imm
, 
ba£
, 
off£t
) \

192 
	`x86_emô_›code_1b_ext_mem
(
mov_rm_imm
, 
ba£
, 
off£t
); \

193 
	`x86_emô_dw‹d
(
imm
) \

194 

	)

195 
	#x86_emô_shl_ªg_imm
(
de°
, 
imm
) \

196 
	`x86_emô_›code_1b_ext_ªg
(
shl_ªg_imm
, 
de°
); \

197 
	`x86_emô_byã
(
imm
) \

198 

	)

199 
	#x86_emô_shr_ªg_imm
(
de°
, 
imm
) \

200 
	`x86_emô_›code_1b_ext_ªg
(
shr_ªg_imm
, 
de°
); \

201 
	`x86_emô_byã
(
imm
) \

202 

	)

203 
	#x86_emô_ßr_ªg_imm
(
de°
, 
imm
) \

204 
	`x86_emô_›code_1b_ext_ªg
(
ßr_ªg_imm
, 
de°
); \

205 
	`x86_emô_byã
(
imm
) \

206 

	)

207 
	#x86_emô_r‹_ªg_imm
(
de°
, 
imm
) \

208 
	`x86_emô_›code_1b_ext_ªg
(
r‹_ªg_imm
, 
de°
); \

209 
	`x86_emô_byã
(
imm
) \

210 

	)

211 
	#x86_emô_add_ªg_ªg
(
de°
, 
sour˚
) \

212 
	`x86_emô_›code_1b_ªg
(
add_ªg_rm
, 
de°
, 
sour˚
) \

213 

	)

214 
	#x86_emô_adc_ªg_ªg
(
de°
, 
sour˚
) \

215 
	`x86_emô_›code_1b_ªg
(
adc_ªg_rm
, 
de°
, 
sour˚
) \

216 

	)

217 
	#x86_emô_sub_ªg_ªg
(
de°
, 
sour˚
) \

218 
	`x86_emô_›code_1b_ªg
(
sub_ªg_rm
, 
de°
, 
sour˚
) \

219 

	)

220 
	#x86_emô_‹_ªg_ªg
(
de°
, 
sour˚
) \

221 
	`x86_emô_›code_1b_ªg
(
‹_ªg_rm
, 
de°
, 
sour˚
) \

222 

	)

223 
	#x86_emô_x‹_ªg_ªg
(
de°
, 
sour˚
) \

224 
	`x86_emô_›code_1b_ªg
(
x‹_ªg_rm
, 
de°
, 
sour˚
) \

225 

	)

226 
	#x86_emô_add_ªg_imm
(
de°
, 
imm
) \

227 if(
imm
 != 0) \

229 
	`x86_emô_›code_1b_ext_ªg
(
add_rm_imm
, 
de°
); \

230 
	`x86_emô_dw‹d
(
imm
); \

232 

	)

233 
	#x86_emô_sub_ªg_imm
(
de°
, 
imm
) \

234 if(
imm
 != 0) \

236 
	`x86_emô_›code_1b_ext_ªg
(
sub_rm_imm
, 
de°
); \

237 
	`x86_emô_dw‹d
(
imm
); \

239 

	)

240 
	#x86_emô_™d_ªg_imm
(
de°
, 
imm
) \

241 
	`x86_emô_›code_1b_ext_ªg
(
™d_rm_imm
, 
de°
); \

242 
	`x86_emô_dw‹d
(
imm
) \

243 

	)

244 
	#x86_emô_x‹_ªg_imm
(
de°
, 
imm
) \

245 
	`x86_emô_›code_1b_ext_ªg
(
x‹_rm_imm
, 
de°
); \

246 
	`x86_emô_dw‹d
(
imm
) \

247 

	)

248 
	#x86_emô_ã°_ªg_imm
(
de°
, 
imm
) \

249 
	`x86_emô_›code_1b_ext_ªg
(
ã°_rm_imm
, 
de°
); \

250 
	`x86_emô_dw‹d
(
imm
) \

251 

	)

252 
	#x86_emô_cmp_ªg_ªg
(
de°
, 
sour˚
) \

253 
	`x86_emô_›code_1b_ªg
(
cmp_ªg_rm
, 
de°
, 
sour˚
) \

254 

	)

255 
	#x86_emô_ã°_ªg_ªg
(
de°
, 
sour˚
) \

256 
	`x86_emô_›code_1b_ªg
(
ã°_ªg_rm
, 
de°
, 
sour˚
) \

257 

	)

258 
	#x86_emô_cmp_ªg_imm
(
de°
, 
imm
) \

259 
	`x86_emô_›code_1b_ext_ªg
(
cmp_rm_imm
, 
de°
); \

260 
	`x86_emô_dw‹d
(
imm
) \

261 

	)

262 
	#x86_emô_mul_óx_ªg
(
sour˚
) \

263 
	`x86_emô_›code_1b_ext_ªg
(
mul_óx_rm
, 
sour˚
) \

264 

	)

265 
	#x86_emô_imul_óx_ªg
(
sour˚
) \

266 
	`x86_emô_›code_1b_ext_ªg
(
imul_óx_rm
, 
sour˚
) \

267 

	)

268 
	#x86_emô_idiv_óx_ªg
(
sour˚
) \

269 
	`x86_emô_›code_1b_ext_ªg
(
idiv_óx_rm
, 
sour˚
) \

270 

	)

271 
	#x86_emô_push_mem
(
ba£
, 
off£t
) \

272 
	`x86_emô_›code_1b_mem
(
push_rm
, 0x06, 
ba£
, 
off£t
) \

273 

	)

274 
	#x86_emô_push_imm
(
imm
) \

275 
	`x86_emô_byã
(
x86_›code_push_imm
); \

276 
	`x86_emô_dw‹d
(
imm
) \

277 

	)

278 
	#x86_emô_ˇŒ_off£t
(
ªœtive_off£t
) \

279 
	`x86_emô_byã
(
x86_›code_ˇŒ_off£t
); \

280 
	`x86_emô_dw‹d
(
ªœtive_off£t
) \

281 

	)

282 
	#x86_emô_ªt
() \

283 
	`x86_emô_byã
(
x86_›code_ªt
) \

284 

	)

285 
	#x86_emô_Àa_ªg_mem
(
de°
, 
ba£
, 
off£t
) \

286 
	`x86_emô_›code_1b_mem
(
Àa_ªg_rm
, 
de°
, 
ba£
, 
off£t
) \

287 

	)

288 
	#x86_emô_j_fûÀr
(
c⁄dôi⁄_code
, 
wrôeback_loˇti⁄
) \

289 
	`x86_emô_byã
(
x86_›code_ext
); \

290 
	`x86_emô_byã
(
x86_›code_j
 | 
c⁄dôi⁄_code
); \

291 (
wrôeback_loˇti⁄
Ë
å™¶©i⁄_±r
; \

292 
å™¶©i⁄_±r
 += 4 \

293 

	)

294 
	#x86_emô_j_off£t
(
c⁄dôi⁄_code
, 
off£t
) \

295 
	`x86_emô_byã
(
x86_›code_ext
); \

296 
	`x86_emô_byã
(
x86_›code_j
 | 
c⁄dôi⁄_code
); \

297 
	`x86_emô_dw‹d
(
off£t
) \

298 

	)

299 
	#x86_emô_jmp_fûÀr
(
wrôeback_loˇti⁄
) \

300 
	`x86_emô_byã
(
x86_›code_jmp
); \

301 (
wrôeback_loˇti⁄
Ë
å™¶©i⁄_±r
; \

302 
å™¶©i⁄_±r
 += 4 \

303 

	)

304 
	#x86_emô_jmp_off£t
(
off£t
) \

305 
	`x86_emô_byã
(
x86_›code_jmp
); \

306 
	`x86_emô_dw‹d
(
off£t
) \

307 

	)

308 
	#x86_emô_jmp_ªg
(
sour˚
) \

309 
	`x86_emô_›code_1b_ext_ªg
(
jmp_ªg
, 
sour˚
) \

310 

	)

311 
	#ªg_ba£
 
ebx


	)

312 
	#ªg_cy˛es
 
edi


	)

313 
	#ªg_a0
 
óx


	)

314 
	#ªg_a1
 
edx


	)

315 
	#ªg_a2
 
ecx


	)

316 
	#ªg_rv
 
óx


	)

317 
	#ªg_s0
 
esi


	)

319 
	#gíî©e_lﬂd_ªg
(
úeg
, 
ªg_ödex
) \

320 
	`x86_emô_mov_ªg_mem
(
ªg_
##
úeg
, 
ªg_ba£
, 
ªg_ödex
 * 4); \

321 

	)

322 
	#gíî©e_lﬂd_pc
(
úeg
, 
√w_pc
) \

323 
	`x86_emô_mov_ªg_imm
(
ªg_
##
úeg
, 
√w_pc
) \

324 

	)

325 
	#gíî©e_lﬂd_imm
(
úeg
, 
imm
) \

326 
	`x86_emô_mov_ªg_imm
(
ªg_
##
úeg
, 
imm
) \

327 

	)

328 
	#gíî©e_°‹e_ªg
(
úeg
, 
ªg_ödex
) \

329 
	`x86_emô_mov_mem_ªg
(
ªg_
##
úeg
, 
ªg_ba£
, 
ªg_ödex
 * 4) \

330 

	)

331 
	#gíî©e_shi·_À·
(
úeg
, 
imm
) \

332 
	`x86_emô_shl_ªg_imm
(
ªg_
##
úeg
, 
imm
) \

333 

	)

334 
	#gíî©e_shi·_right
(
úeg
, 
imm
) \

335 
	`x86_emô_shr_ªg_imm
(
ªg_
##
úeg
, 
imm
) \

336 

	)

337 
	#gíî©e_shi·_right_¨ôhmëic
(
úeg
, 
imm
) \

338 
	`x86_emô_ßr_ªg_imm
(
ªg_
##
úeg
, 
imm
) \

339 

	)

340 
	#gíî©e_rŸ©e_right
(
úeg
, 
imm
) \

341 
	`x86_emô_r‹_ªg_imm
(
ªg_
##
úeg
, 
imm
) \

342 

	)

343 
	#gíî©e_add
(
úeg_de°
, 
úeg_§c
) \

344 
	`x86_emô_add_ªg_ªg
(
ªg_
##
úeg_de°
,Ñeg_##
úeg_§c
) \

345 

	)

346 
	#gíî©e_sub
(
úeg_de°
, 
úeg_§c
) \

347 
	`x86_emô_sub_ªg_ªg
(
ªg_
##
úeg_de°
,Ñeg_##
úeg_§c
) \

348 

	)

349 
	#gíî©e_‹
(
úeg_de°
, 
úeg_§c
) \

350 
	`x86_emô_‹_ªg_ªg
(
ªg_
##
úeg_de°
,Ñeg_##
úeg_§c
) \

351 

	)

352 
	#gíî©e_x‹
(
úeg_de°
, 
úeg_§c
) \

353 
	`x86_emô_x‹_ªg_ªg
(
ªg_
##
úeg_de°
,Ñeg_##
úeg_§c
) \

354 

	)

355 
	#gíî©e_add_imm
(
úeg
, 
imm
) \

356 
	`x86_emô_add_ªg_imm
(
ªg_
##
úeg
, 
imm
) \

357 

	)

358 
	#gíî©e_sub_imm
(
úeg
, 
imm
) \

359 
	`x86_emô_sub_ªg_imm
(
ªg_
##
úeg
, 
imm
) \

360 

	)

361 
	#gíî©e_x‹_imm
(
úeg
, 
imm
) \

362 
	`x86_emô_x‹_ªg_imm
(
ªg_
##
úeg
, 
imm
) \

363 

	)

364 
	#gíî©e_add_ªg_ªg_imm
(
úeg_de°
, 
úeg_§c
, 
imm
) \

365 
	`x86_emô_Àa_ªg_mem
(
ªg_
##
úeg_de°
,Ñeg_##
úeg_§c
, 
imm
) \

366 

	)

367 
	#gíî©e_™d_imm
(
úeg
, 
imm
) \

368 
	`x86_emô_™d_ªg_imm
(
ªg_
##
úeg
, 
imm
) \

369 

	)

370 
	#gíî©e_mov
(
úeg_de°
, 
úeg_§c
) \

371 
	`x86_emô_mov_ªg_ªg
(
ªg_
##
úeg_de°
,Ñeg_##
úeg_§c
) \

372 

	)

373 
	#gíî©e_mu…ùly
(
úeg
) \

374 
	`x86_emô_imul_óx_ªg
(
ªg_
##
úeg
) \

375 

	)

376 
	#gíî©e_mu…ùly_s64
(
úeg
) \

377 
	`x86_emô_imul_óx_ªg
(
ªg_
##
úeg
) \

378 

	)

379 
	#gíî©e_mu…ùly_u64
(
úeg
) \

380 
	`x86_emô_mul_óx_ªg
(
ªg_
##
úeg
) \

381 

	)

382 
	#gíî©e_mu…ùly_s64_add
(
úeg_§c
, 
úeg_lo
, 
úeg_hi
) \

383 
	`x86_emô_imul_óx_ªg
(
ªg_
##
úeg_§c
); \

384 
	`x86_emô_add_ªg_ªg
(
ªg_a0
, 
ªg_
##
úeg_lo
); \

385 
	`x86_emô_adc_ªg_ªg
(
ªg_a1
, 
ªg_
##
úeg_hi
) \

386 

	)

387 
	#gíî©e_mu…ùly_u64_add
(
úeg_§c
, 
úeg_lo
, 
úeg_hi
) \

388 
	`x86_emô_mul_óx_ªg
(
ªg_
##
úeg_§c
); \

389 
	`x86_emô_add_ªg_ªg
(
ªg_a0
, 
ªg_
##
úeg_lo
); \

390 
	`x86_emô_adc_ªg_ªg
(
ªg_a1
, 
ªg_
##
úeg_hi
) \

391 

	)

393 
	#gíî©e_fun˘i⁄_ˇŒ
(
fun˘i⁄_loˇti⁄
) \

394 
	`x86_emô_ˇŒ_off£t
(
	`x86_ªœtive_off£t
(
å™¶©i⁄_±r
, \

395 
fun˘i⁄_loˇti⁄
, 4)); \

396 

	)

397 
	#gíî©e_exô_block
() \

398 
	`x86_emô_ªt
(); \

399 

	)

400 
	#gíî©e_bønch_fûÀr_åue
(
úeg_de°
, 
úeg_§c
, 
wrôeback_loˇti⁄
) \

401 
	`x86_emô_ã°_ªg_imm
(
ªg_
##
úeg_de°
, 1); \

402 
	`x86_emô_j_fûÀr
(
x86_c⁄dôi⁄_code_z
, 
wrôeback_loˇti⁄
) \

403 

	)

404 
	#gíî©e_bønch_fûÀr_Ál£
(
úeg_de°
, 
úeg_§c
, 
wrôeback_loˇti⁄
) \

405 
	`x86_emô_ã°_ªg_imm
(
ªg_
##
úeg_de°
, 1); \

406 
	`x86_emô_j_fûÀr
(
x86_c⁄dôi⁄_code_nz
, 
wrôeback_loˇti⁄
) \

407 

	)

408 
	#gíî©e_bønch_fûÀr_equÆ
(
úeg_de°
, 
úeg_§c
, 
wrôeback_loˇti⁄
) \

409 
	`x86_emô_cmp_ªg_ªg
(
ªg_
##
úeg_de°
,Ñeg_##
úeg_§c
); \

410 
	`x86_emô_j_fûÀr
(
x86_c⁄dôi⁄_code_nz
, 
wrôeback_loˇti⁄
) \

411 

	)

412 
	#gíî©e_bønch_fûÀr_nŸ_equÆ
(
úeg_de°
, 
úeg_§c
, \

413 
wrôeback_loˇti⁄
) \

414 
	`x86_emô_cmp_ªg_ªg
(
ªg_
##
úeg_de°
,Ñeg_##
úeg_§c
); \

415 
	`x86_emô_j_fûÀr
(
x86_c⁄dôi⁄_code_z
, 
wrôeback_loˇti⁄
) \

416 

	)

417 
	#gíî©e_upd©e_pc
(
√w_pc
) \

418 
	`x86_emô_mov_ªg_imm
(
óx
, 
√w_pc
) \

419 

	)

420 
	#gíî©e_upd©e_pc_ªg
() \

421 
	`gíî©e_upd©e_pc
(
pc
); \

422 
	`gíî©e_°‹e_ªg
(
a0
, 
REG_PC
) \

423 

	)

424 
	#gíî©e_cy˛e_upd©e
() \

425 
	`x86_emô_sub_ªg_imm
(
ªg_cy˛es
, 
cy˛e_cou¡
); \

426 
cy˛e_cou¡
 = 0 \

427 

	)

428 
	#gíî©e_bønch_∑tch_c⁄dôi⁄Æ
(
de°
, 
off£t
) \

429 *((
u32
 *)(
de°
)Ë
	`x86_ªœtive_off£t
(de°, 
off£t
, 4) \

430 

	)

431 
	#gíî©e_bønch_∑tch_unc⁄dôi⁄Æ
(
de°
, 
off£t
) \

432 *((
u32
 *)(
de°
)Ë
	`x86_ªœtive_off£t
(de°, 
off£t
, 4) \

433 

	)

434 
	#gíî©e_bønch_no_cy˛e_upd©e
(
wrôeback_loˇti⁄
, 
√w_pc
) \

435 if(
pc
 =
idÀ_lo›_èrgë_pc
) \

437 
	`x86_emô_mov_ªg_imm
(
óx
, 
√w_pc
); \

438 
	`gíî©e_fun˘i⁄_ˇŒ
(
x86_upd©e_gba
); \

439 
	`x86_emô_jmp_fûÀr
(
wrôeback_loˇti⁄
); \

443 
	`x86_emô_ã°_ªg_ªg
(
ªg_cy˛es
,Ñeg_cycles); \

444 
	`x86_emô_j_off£t
(
x86_c⁄dôi⁄_code_ns
, 10); \

445 
	`x86_emô_mov_ªg_imm
(
óx
, 
√w_pc
); \

446 
	`gíî©e_fun˘i⁄_ˇŒ
(
x86_upd©e_gba
); \

447 
	`x86_emô_jmp_fûÀr
(
wrôeback_loˇti⁄
); \

449 

	)

450 
	#gíî©e_bønch_cy˛e_upd©e
(
wrôeback_loˇti⁄
, 
√w_pc
) \

451 
	`gíî©e_cy˛e_upd©e
(); \

452 
	`gíî©e_bønch_no_cy˛e_upd©e
(
wrôeback_loˇti⁄
, 
√w_pc
) \

453 

	)

454 
	#gíî©e_c⁄dôi⁄Æ_bønch
(
úeg_a
, 
úeg_b
, 
ty≥
, 
wrôeback_loˇti⁄
) \

455 
gíî©e_bønch_fûÀr_
##
	`ty≥
(
úeg_a
, 
úeg_b
, 
wrôeback_loˇti⁄
) \

456 

	)

459 
	#gíî©e_ödúe˘_bønch_cy˛e_upd©e
(
ty≥
) \

460 
	`gíî©e_cy˛e_upd©e
(); \

461 
	`x86_emô_jmp_off£t
(
	`x86_ªœtive_off£t
(
å™¶©i⁄_±r
, \

462 
x86_ödúe˘_bønch_
##
ty≥
, 4)) \

463 

	)

464 
	#gíî©e_ödúe˘_bønch_no_cy˛e_upd©e
(
ty≥
) \

465 
	`x86_emô_jmp_off£t
(
	`x86_ªœtive_off£t
(
å™¶©i⁄_±r
, \

466 
x86_ödúe˘_bønch_
##
ty≥
, 4)) \

467 

	)

468 
	#gíî©e_block_¥ﬁogue
() \

469 

	)

470 
	#gíî©e_block_exåa_v¨s_¨m
() \

471 
	`gíî©e_ödúe˘_bønch_¨m
() \

473 if(
c⁄dôi⁄
 == 0x0E) \

475 
	`gíî©e_ödúe˘_bønch_cy˛e_upd©e
(
¨m
); \

479 
	`gíî©e_ödúe˘_bønch_no_cy˛e_upd©e
(
¨m
); \

483 
	`gíî©e_ödúe˘_bønch_duÆ
() \

485 if(
c⁄dôi⁄
 == 0x0E) \

487 
	`gíî©e_ödúe˘_bønch_cy˛e_upd©e
(
duÆ
); \

491 
	`gíî©e_ödúe˘_bønch_no_cy˛e_upd©e
(
duÆ
); \

494 

	)

495 
	#gíî©e_block_exåa_v¨s_thumb
() \

496 

	)

498 
	#å™¶©e_övÆid©e_dˇche
() \

499 

	)

500 
	#block_¥ﬁogue_size
 0

	)

502 
	#ˇlcuœã_z_Êag
(
de°
) \

503 
ªg
[
REG_Z_FLAG
] = (
de°
 == 0) \

504 

	)

505 
	#ˇlcuœã_n_Êag
(
de°
) \

506 
ªg
[
REG_N_FLAG
] = ((sig√d)
de°
 < 0) \

507 

	)

508 
	#ˇlcuœã_c_Êag_sub
(
de°
, 
§c_a
, 
§c_b
) \

509 
ªg
[
REG_C_FLAG
] = (()
§c_b
 <()
§c_a
) \

510 

	)

511 
	#ˇlcuœã_v_Êag_sub
(
de°
, 
§c_a
, 
§c_b
) \

512 
ªg
[
REG_V_FLAG
] = ((sig√d)
§c_b
 > (sig√d)
§c_a
Ë!((sig√d)
de°
 < 0) \

513 

	)

514 
	#ˇlcuœã_c_Êag_add
(
de°
, 
§c_a
, 
§c_b
) \

515 
ªg
[
REG_C_FLAG
] = (()
de°
 < ()
§c_a
) \

516 

	)

517 
	#ˇlcuœã_v_Êag_add
(
de°
, 
§c_a
, 
§c_b
) \

518 
ªg
[
REG_V_FLAG
] = ((sig√d)
de°
 < (sig√d)
§c_a
Ë!((sig√d)
§c_b
 < 0) \

519 

	)

522 
	#gë_shi·_imm
() \

523 
u32
 
shi·
 = (
›code
 >> 7) & 0x1F \

524 

	)

525 
	#gíî©e_shi·_ªg
(
úeg
, 
«me
, 
Êags_›
) \

526 
	`gíî©e_lﬂd_ªg_pc
(
úeg
, 
rm
, 12); \

527 
	`gíî©e_lﬂd_ªg
(
a1
, ((
›code
 >> 8) & 0x0F)); \

528 
	`gíî©e_fun˘i⁄_ˇŒ
(
execuã_
##
«me
##
_
##
Êags_›
##
_ªg
); \

529 
	`gíî©e_mov
(
úeg
, 
rv
) \

530 

	)

531 
u32
 
fun˘i⁄_cc
 
	$execuã_l¶_no_Êags_ªg
(
u32
 
vÆue
, u32 
shi·
)

533 if(
shi·
 != 0)

535 if(
shi·
 > 31)

536 
vÆue
 = 0;

538 
vÆue
 <<
shi·
;

540  
vÆue
;

541 
	}
}

543 
u32
 
fun˘i⁄_cc
 
	$execuã_l§_no_Êags_ªg
(
u32
 
vÆue
, u32 
shi·
)

545 if(
shi·
 != 0)

547 if(
shi·
 > 31)

548 
vÆue
 = 0;

550 
vÆue
 >>
shi·
;

552  
vÆue
;

553 
	}
}

555 
u32
 
fun˘i⁄_cc
 
	$execuã_a§_no_Êags_ªg
(
u32
 
vÆue
, u32 
shi·
)

557 if(
shi·
 != 0)

559 if(
shi·
 > 31)

560 
vÆue
 = (
s32
)value >> 31;

562 
vÆue
 = (
s32
)vÆuê>> 
shi·
;

564  
vÆue
;

565 
	}
}

567 
u32
 
fun˘i⁄_cc
 
	$execuã_r‹_no_Êags_ªg
(
u32
 
vÆue
, u32 
shi·
)

569 if(
shi·
 != 0)

571 
	`r‹
(
vÆue
, vÆue, 
shi·
);

574  
vÆue
;

575 
	}
}

578 
u32
 
fun˘i⁄_cc
 
	$execuã_l¶_Êags_ªg
(
u32
 
vÆue
, u32 
shi·
)

580 if(
shi·
 != 0)

582 if(
shi·
 > 31)

584 
ªg
[
REG_C_FLAG
] = 
vÆue
 & 0x01;

586 if(
shi·
 != 32)

587 
ªg
[
REG_C_FLAG
] = 0;

589 
vÆue
 = 0;

593 
ªg
[
REG_C_FLAG
] = (
vÆue
 >> (32 - 
shi·
)) & 0x01;

594 
vÆue
 <<
shi·
;

597  
vÆue
;

598 
	}
}

600 
u32
 
fun˘i⁄_cc
 
	$execuã_l§_Êags_ªg
(
u32
 
vÆue
, u32 
shi·
)

602 if(
shi·
 != 0)

604 if(
shi·
 > 31)

606 
ªg
[
REG_C_FLAG
] = 
vÆue
 >> 31;

608 if(
shi·
 != 32)

609 
ªg
[
REG_C_FLAG
] = 0;

611 
vÆue
 = 0;

615 
ªg
[
REG_C_FLAG
] = (
vÆue
 >> (
shi·
 - 1)) & 0x01;

616 
vÆue
 >>
shi·
;

619  
vÆue
;

620 
	}
}

622 
u32
 
fun˘i⁄_cc
 
	$execuã_a§_Êags_ªg
(
u32
 
vÆue
, u32 
shi·
)

624 if(
shi·
 != 0)

626 if(
shi·
 > 31)

628 
vÆue
 = (
s32
)value >> 31;

629 
ªg
[
REG_C_FLAG
] = 
vÆue
 & 0x01;

633 
ªg
[
REG_C_FLAG
] = (
vÆue
 >> (
shi·
 - 1)) & 0x01;

634 
vÆue
 = (
s32
)vÆuê>> 
shi·
;

637  
vÆue
;

638 
	}
}

640 
u32
 
fun˘i⁄_cc
 
	$execuã_r‹_Êags_ªg
(
u32
 
vÆue
, u32 
shi·
)

642 if(
shi·
 != 0)

644 
ªg
[
REG_C_FLAG
] = (
vÆue
 >> (
shi·
 - 1)) & 0x01;

645 
	`r‹
(
vÆue
, vÆue, 
shi·
);

648  
vÆue
;

649 
	}
}

651 
u32
 
fun˘i⁄_cc
 
	$execuã_ºx_Êags
(
u32
 
vÆue
)

653 
u32
 
c_Êag
 = 
ªg
[
REG_C_FLAG
];

654 
ªg
[
REG_C_FLAG
] = 
vÆue
 & 0x01;

655  (
vÆue
 >> 1Ë| (
c_Êag
 << 31);

656 
	}
}

658 
u32
 
fun˘i⁄_cc
 
	$execuã_ºx
(
u32
 
vÆue
)

660  (
vÆue
 >> 1Ë| (
ªg
[
REG_C_FLAG
] << 31);

661 
	}
}

663 
	#gíî©e_shi·_imm_l¶_no_Êags
(
úeg
) \

664 
	`gíî©e_lﬂd_ªg_pc
(
úeg
, 
rm
, 8); \

665 if(
shi·
 != 0) \

667 
	`gíî©e_shi·_À·
(
úeg
, 
shi·
); \

669 

	)

670 
	#gíî©e_shi·_imm_l§_no_Êags
(
úeg
) \

671 if(
shi·
 != 0) \

673 
	`gíî©e_lﬂd_ªg_pc
(
úeg
, 
rm
, 8); \

674 
	`gíî©e_shi·_right
(
úeg
, 
shi·
); \

678 
	`gíî©e_lﬂd_imm
(
úeg
, 0); \

680 

	)

681 
	#gíî©e_shi·_imm_a§_no_Êags
(
úeg
) \

682 
	`gíî©e_lﬂd_ªg_pc
(
úeg
, 
rm
, 8); \

683 if(
shi·
 != 0) \

685 
	`gíî©e_shi·_right_¨ôhmëic
(
úeg
, 
shi·
); \

689 
	`gíî©e_shi·_right_¨ôhmëic
(
úeg
, 31); \

691 

	)

692 
	#gíî©e_shi·_imm_r‹_no_Êags
(
úeg
) \

693 if(
shi·
 != 0) \

695 
	`gíî©e_lﬂd_ªg_pc
(
úeg
, 
rm
, 8); \

696 
	`gíî©e_rŸ©e_right
(
úeg
, 
shi·
); \

700 
	`gíî©e_lﬂd_ªg_pc
(
a0
, 
rm
, 8); \

701 
	`gíî©e_fun˘i⁄_ˇŒ
(
execuã_ºx
); \

702 
	`gíî©e_mov
(
úeg
, 
rv
); \

704 

	)

705 
	#gíî©e_shi·_imm_l¶_Êags
(
úeg
) \

706 
	`gíî©e_lﬂd_ªg_pc
(
úeg
, 
rm
, 8); \

707 if(
shi·
 != 0) \

709 
	`gíî©e_mov
(
a1
, 
úeg
); \

710 
	`gíî©e_shi·_right
(
a1
, (32 - 
shi·
)); \

711 
	`gíî©e_™d_imm
(
a1
, 1); \

712 
	`gíî©e_°‹e_ªg
(
a1
, 
REG_C_FLAG
); \

713 
	`gíî©e_shi·_À·
(
úeg
, 
shi·
); \

715 

	)

716 
	#gíî©e_shi·_imm_l§_Êags
(
úeg
) \

717 if(
shi·
 != 0) \

719 
	`gíî©e_lﬂd_ªg_pc
(
úeg
, 
rm
, 8); \

720 
	`gíî©e_mov
(
a1
, 
úeg
); \

721 
	`gíî©e_shi·_right
(
a1
, 
shi·
 - 1); \

722 
	`gíî©e_™d_imm
(
a1
, 1); \

723 
	`gíî©e_°‹e_ªg
(
a1
, 
REG_C_FLAG
); \

724 
	`gíî©e_shi·_right
(
úeg
, 
shi·
); \

728 
	`gíî©e_lﬂd_ªg_pc
(
a1
, 
rm
, 8); \

729 
	`gíî©e_shi·_right
(
a1
, 31); \

730 
	`gíî©e_°‹e_ªg
(
a1
, 
REG_C_FLAG
); \

731 
	`gíî©e_lﬂd_imm
(
úeg
, 0); \

733 

	)

734 
	#gíî©e_shi·_imm_a§_Êags
(
úeg
) \

735 if(
shi·
 != 0) \

737 
	`gíî©e_lﬂd_ªg_pc
(
úeg
, 
rm
, 8); \

738 
	`gíî©e_mov
(
a1
, 
úeg
); \

739 
	`gíî©e_shi·_right_¨ôhmëic
(
a1
, 
shi·
 - 1); \

740 
	`gíî©e_™d_imm
(
a1
, 1); \

741 
	`gíî©e_°‹e_ªg
(
a1
, 
REG_C_FLAG
); \

742 
	`gíî©e_shi·_right_¨ôhmëic
(
úeg
, 
shi·
); \

746 
	`gíî©e_lﬂd_ªg_pc
(
a0
, 
rm
, 8); \

747 
	`gíî©e_shi·_right_¨ôhmëic
(
úeg
, 31); \

748 
	`gíî©e_mov
(
a1
, 
úeg
); \

749 
	`gíî©e_™d_imm
(
a1
, 1); \

750 
	`gíî©e_°‹e_ªg
(
a1
, 
REG_C_FLAG
); \

752 

	)

753 
	#gíî©e_shi·_imm_r‹_Êags
(
úeg
) \

754 
	`gíî©e_lﬂd_ªg_pc
(
úeg
, 
rm
, 8); \

755 if(
shi·
 != 0) \

757 
	`gíî©e_mov
(
a1
, 
úeg
); \

758 
	`gíî©e_shi·_right
(
a1
, 
shi·
 - 1); \

759 
	`gíî©e_™d_imm
(
a1
, 1); \

760 
	`gíî©e_°‹e_ªg
(
a1
, 
REG_C_FLAG
); \

761 
	`gíî©e_rŸ©e_right
(
úeg
, 
shi·
); \

765 
	`gíî©e_fun˘i⁄_ˇŒ
(
execuã_ºx_Êags
); \

766 
	`gíî©e_mov
(
úeg
, 
rv
); \

768 

	)

769 
	#gíî©e_shi·_imm
(
úeg
, 
«me
, 
Êags_›
) \

770 
	`gë_shi·_imm
(); \

771 
gíî©e_shi·_imm_
##
«me
##
_
##
	`Êags_›
(
úeg
) \

772 

	)

773 
	#gíî©e_lﬂd_rm_sh
(
Êags_›
) \

774 (
›code
 >> 4) & 0x07) \

779 
	`gíî©e_shi·_imm
(
a0
, 
l¶
, 
Êags_›
); \

786 
	`gíî©e_shi·_ªg
(
a0
, 
l¶
, 
Êags_›
); \

793 
	`gíî©e_shi·_imm
(
a0
, 
l§
, 
Êags_›
); \

800 
	`gíî©e_shi·_ªg
(
a0
, 
l§
, 
Êags_›
); \

807 
	`gíî©e_shi·_imm
(
a0
, 
a§
, 
Êags_›
); \

814 
	`gíî©e_shi·_ªg
(
a0
, 
a§
, 
Êags_›
); \

821 
	`gíî©e_shi·_imm
(
a0
, 
r‹
, 
Êags_›
); \

828 
	`gíî©e_shi·_ªg
(
a0
, 
r‹
, 
Êags_›
); \

832 

	)

833 
	#gíî©e_lﬂd_off£t_sh
() \

834 (
›code
 >> 5) & 0x03) \

839 
	`gíî©e_shi·_imm
(
a1
, 
l¶
, 
no_Êags
); \

846 
	`gíî©e_shi·_imm
(
a1
, 
l§
, 
no_Êags
); \

853 
	`gíî©e_shi·_imm
(
a1
, 
a§
, 
no_Êags
); \

860 
	`gíî©e_shi·_imm
(
a1
, 
r‹
, 
no_Êags
); \

864 

	)

865 
	#ˇlcuœã_Êags_add
(
de°
, 
§c_a
, 
§c_b
) \

866 
	`ˇlcuœã_z_Êag
(
de°
); \

867 
	`ˇlcuœã_n_Êag
(
de°
); \

868 
	`ˇlcuœã_c_Êag_add
(
de°
, 
§c_a
, 
§c_b
); \

869 
	`ˇlcuœã_v_Êag_add
(
de°
, 
§c_a
, 
§c_b
) \

870 

	)

871 
	#ˇlcuœã_Êags_sub
(
de°
, 
§c_a
, 
§c_b
) \

872 
	`ˇlcuœã_z_Êag
(
de°
); \

873 
	`ˇlcuœã_n_Êag
(
de°
); \

874 
	`ˇlcuœã_c_Êag_sub
(
de°
, 
§c_a
, 
§c_b
); \

875 
	`ˇlcuœã_v_Êag_sub
(
de°
, 
§c_a
, 
§c_b
) \

876 

	)

877 
	#ˇlcuœã_Êags_logic
(
de°
) \

878 
	`ˇlcuœã_z_Êag
(
de°
); \

879 
	`ˇlcuœã_n_Êag
(
de°
) \

880 

	)

881 
	#exåa˘_Êags
() \

882 
ªg
[
REG_N_FLAG
] =Ñeg[
REG_CPSR
] >> 31; \

883 
ªg
[
REG_Z_FLAG
] = (ªg[
REG_CPSR
] >> 30) & 0x01; \

884 
ªg
[
REG_C_FLAG
] = (ªg[
REG_CPSR
] >> 29) & 0x01; \

885 
ªg
[
REG_V_FLAG
] = (ªg[
REG_CPSR
] >> 28) & 0x01; \

886 

	)

887 
	#cﬁœp£_Êags
() \

888 
ªg
[
REG_CPSR
] = (ªg[
REG_N_FLAG
] << 31Ë| (ªg[
REG_Z_FLAG
] << 30) | \

889 (
ªg
[
REG_C_FLAG
] << 29Ë| (ªg[
REG_V_FLAG
] << 28) | \

890 
ªg
[
REG_CPSR
] & 0xFF \

891 

	)

896 
	#check_f‹_öãºu±s
() \

897 if((
io_ªgi°îs
[
REG_IE
] & io_ªgi°îs[
REG_IF
]) && \

898 
io_ªgi°îs
[
REG_IME
] && ((
ªg
[
REG_CPSR
] & 0x80) == 0)) \

900 
ªg_mode
[
MODE_IRQ
][6] = 
ªg
[
REG_PC
] + 4; \

901 
•§
[
MODE_IRQ
] = 
ªg
[
REG_CPSR
]; \

902 
ªg
[
REG_CPSR
] = 0xD2; \

903 
addªss
 = 0x00000018; \

904 
	`£t_˝u_mode
(
MODE_IRQ
); \

906 

	)

907 
	#gíî©e_lﬂd_ªg_pc
(
úeg
, 
ªg_ödex
, 
pc_off£t
) \

908 if(
ªg_ödex
 == 15) \

910 
	`gíî©e_lﬂd_pc
(
úeg
, 
pc
 + 
pc_off£t
); \

914 
	`gíî©e_lﬂd_ªg
(
úeg
, 
ªg_ödex
); \

916 

	)

917 
	#gíî©e_°‹e_ªg_pc_no_Êags
(
úeg
, 
ªg_ödex
) \

918 
	`gíî©e_°‹e_ªg
(
úeg
, 
ªg_ödex
); \

919 if(
ªg_ödex
 == 15) \

921 
	`gíî©e_mov
(
a0
, 
úeg
); \

922 
	`gíî©e_ödúe˘_bønch_¨m
(); \

924 

	)

925 
u32
 
fun˘i⁄_cc
 
	$execuã_•§_ª°‹e
(
u32
 
addªss
)

927 if(
ªg
[
CPU_MODE
] !
MODE_USER
)

929 
ªg
[
REG_CPSR
] = 
•§
[ªg[
CPU_MODE
]];

930 
	`exåa˘_Êags
();

931 
	`£t_˝u_mode
(
˝u_modes
[
ªg
[
REG_CPSR
] & 0x1F]);

932 
	`check_f‹_öãºu±s
();

934 if(
ªg
[
REG_CPSR
] & 0x20)

935 
addªss
 |= 0x01;

938  
addªss
;

939 
	}
}

941 
	#gíî©e_°‹e_ªg_pc_Êags
(
úeg
, 
ªg_ödex
) \

942 
	`gíî©e_°‹e_ªg
(
úeg
, 
ªg_ödex
); \

943 if(
ªg_ödex
 == 15) \

945 
	`gíî©e_mov
(
a0
, 
úeg
); \

946 
	`gíî©e_fun˘i⁄_ˇŒ
(
execuã_•§_ª°‹e
); \

947 
	`gíî©e_mov
(
a0
, 
rv
); \

948 
	`gíî©e_ödúe˘_bønch_duÆ
(); \

950 

	)

953 
	mCONDITION_TRUE
,

954 
	mCONDITION_FALSE
,

955 
	mCONDITION_EQUAL
,

956 
	mCONDITION_NOT_EQUAL


957 } 
	tc⁄dôi⁄_check_ty≥
;

960 
	#gíî©e_c⁄dôi⁄_eq
(
úeg_a
, 
úeg_b
) \

961 
	`gíî©e_lﬂd_ªg
(
úeg_a
, 
REG_Z_FLAG
); \

962 
c⁄dôi⁄_check
 = 
CONDITION_TRUE
 \

963 

	)

964 
	#gíî©e_c⁄dôi⁄_√
(
úeg_a
, 
úeg_b
) \

965 
	`gíî©e_lﬂd_ªg
(
úeg_a
, 
REG_Z_FLAG
); \

966 
c⁄dôi⁄_check
 = 
CONDITION_FALSE
 \

967 

	)

968 
	#gíî©e_c⁄dôi⁄_cs
(
úeg_a
, 
úeg_b
) \

969 
	`gíî©e_lﬂd_ªg
(
úeg_a
, 
REG_C_FLAG
); \

970 
c⁄dôi⁄_check
 = 
CONDITION_TRUE
 \

971 

	)

972 
	#gíî©e_c⁄dôi⁄_cc
(
úeg_a
, 
úeg_b
) \

973 
	`gíî©e_lﬂd_ªg
(
úeg_a
, 
REG_C_FLAG
); \

974 
c⁄dôi⁄_check
 = 
CONDITION_FALSE
 \

975 

	)

976 
	#gíî©e_c⁄dôi⁄_mi
(
úeg_a
, 
úeg_b
) \

977 
	`gíî©e_lﬂd_ªg
(
úeg_a
, 
REG_N_FLAG
); \

978 
c⁄dôi⁄_check
 = 
CONDITION_TRUE
 \

979 

	)

980 
	#gíî©e_c⁄dôi⁄_∂
(
úeg_a
, 
úeg_b
) \

981 
	`gíî©e_lﬂd_ªg
(
úeg_a
, 
REG_N_FLAG
); \

982 
c⁄dôi⁄_check
 = 
CONDITION_FALSE
 \

983 

	)

984 
	#gíî©e_c⁄dôi⁄_vs
(
úeg_a
, 
úeg_b
) \

985 
	`gíî©e_lﬂd_ªg
(
úeg_a
, 
REG_V_FLAG
); \

986 
c⁄dôi⁄_check
 = 
CONDITION_TRUE
 \

987 

	)

988 
	#gíî©e_c⁄dôi⁄_vc
(
úeg_a
, 
úeg_b
) \

989 
	`gíî©e_lﬂd_ªg
(
úeg_a
, 
REG_V_FLAG
); \

990 
c⁄dôi⁄_check
 = 
CONDITION_FALSE
 \

991 

	)

992 
	#gíî©e_c⁄dôi⁄_hi
(
úeg_a
, 
úeg_b
) \

993 
	`gíî©e_lﬂd_ªg
(
úeg_a
, 
REG_C_FLAG
); \

994 
	`gíî©e_x‹_imm
(
úeg_a
, 1); \

995 
	`gíî©e_lﬂd_ªg
(
úeg_b
, 
REG_Z_FLAG
); \

996 
	`gíî©e_‹
(
úeg_a
, 
úeg_b
); \

997 
c⁄dôi⁄_check
 = 
CONDITION_FALSE
 \

998 

	)

999 
	#gíî©e_c⁄dôi⁄_ls
(
úeg_a
, 
úeg_b
) \

1000 
	`gíî©e_lﬂd_ªg
(
úeg_a
, 
REG_C_FLAG
); \

1001 
	`gíî©e_x‹_imm
(
úeg_a
, 1); \

1002 
	`gíî©e_lﬂd_ªg
(
úeg_b
, 
REG_Z_FLAG
); \

1003 
	`gíî©e_‹
(
úeg_a
, 
úeg_b
); \

1004 
c⁄dôi⁄_check
 = 
CONDITION_TRUE
 \

1005 

	)

1006 
	#gíî©e_c⁄dôi⁄_ge
(
úeg_a
, 
úeg_b
) \

1007 
	`gíî©e_lﬂd_ªg
(
úeg_a
, 
REG_N_FLAG
); \

1008 
	`gíî©e_lﬂd_ªg
(
úeg_b
, 
REG_V_FLAG
); \

1009 
c⁄dôi⁄_check
 = 
CONDITION_EQUAL
 \

1010 

	)

1011 
	#gíî©e_c⁄dôi⁄_…
(
úeg_a
, 
úeg_b
) \

1012 
	`gíî©e_lﬂd_ªg
(
úeg_a
, 
REG_N_FLAG
); \

1013 
	`gíî©e_lﬂd_ªg
(
úeg_b
, 
REG_V_FLAG
); \

1014 
c⁄dôi⁄_check
 = 
CONDITION_NOT_EQUAL
 \

1015 

	)

1016 
	#gíî©e_c⁄dôi⁄_gt
(
úeg_a
, 
úeg_b
) \

1017 
	`gíî©e_lﬂd_ªg
(
úeg_a
, 
REG_N_FLAG
); \

1018 
	`gíî©e_lﬂd_ªg
(
úeg_b
, 
REG_V_FLAG
); \

1019 
	`gíî©e_x‹
(
úeg_b
, 
úeg_a
); \

1020 
	`gíî©e_lﬂd_ªg
(
a0
, 
REG_Z_FLAG
); \

1021 
	`gíî©e_‹
(
úeg_a
, 
úeg_b
); \

1022 
c⁄dôi⁄_check
 = 
CONDITION_FALSE
 \

1023 

	)

1024 
	#gíî©e_c⁄dôi⁄_À
(
úeg_a
, 
úeg_b
) \

1025 
	`gíî©e_lﬂd_ªg
(
úeg_a
, 
REG_N_FLAG
); \

1026 
	`gíî©e_lﬂd_ªg
(
úeg_b
, 
REG_V_FLAG
); \

1027 
	`gíî©e_x‹
(
úeg_b
, 
úeg_a
); \

1028 
	`gíî©e_lﬂd_ªg
(
a0
, 
REG_Z_FLAG
); \

1029 
	`gíî©e_‹
(
úeg_a
, 
úeg_b
); \

1030 
c⁄dôi⁄_check
 = 
CONDITION_TRUE
 \

1031 

	)

1033 
	#gíî©e_c⁄dôi⁄
(
úeg_a
, 
úeg_b
) \

1034 
c⁄dôi⁄
) \

1037 
	`gíî©e_c⁄dôi⁄_eq
(
úeg_a
, 
úeg_b
); \

1041 
	`gíî©e_c⁄dôi⁄_√
(
úeg_a
, 
úeg_b
); \

1045 
	`gíî©e_c⁄dôi⁄_cs
(
úeg_a
, 
úeg_b
); \

1049 
	`gíî©e_c⁄dôi⁄_cc
(
úeg_a
, 
úeg_b
); \

1053 
	`gíî©e_c⁄dôi⁄_mi
(
úeg_a
, 
úeg_b
); \

1057 
	`gíî©e_c⁄dôi⁄_∂
(
úeg_a
, 
úeg_b
); \

1061 
	`gíî©e_c⁄dôi⁄_vs
(
úeg_a
, 
úeg_b
); \

1065 
	`gíî©e_c⁄dôi⁄_vc
(
úeg_a
, 
úeg_b
); \

1069 
	`gíî©e_c⁄dôi⁄_hi
(
úeg_a
, 
úeg_b
); \

1073 
	`gíî©e_c⁄dôi⁄_ls
(
úeg_a
, 
úeg_b
); \

1077 
	`gíî©e_c⁄dôi⁄_ge
(
úeg_a
, 
úeg_b
); \

1081 
	`gíî©e_c⁄dôi⁄_…
(
úeg_a
, 
úeg_b
); \

1085 
	`gíî©e_c⁄dôi⁄_gt
(
úeg_a
, 
úeg_b
); \

1089 
	`gíî©e_c⁄dôi⁄_À
(
úeg_a
, 
úeg_b
); \

1100 
	`gíî©e_cy˛e_upd©e
() \

1101 

	)

1102 
	#gíî©e_c⁄dôi⁄Æ_bønch_ty≥
(
úeg_a
, 
úeg_b
) \

1103 
c⁄dôi⁄_check
) \

1105 
CONDITION_TRUE
: \

1106 
	`gíî©e_c⁄dôi⁄Æ_bønch
(
úeg_a
, 
úeg_b
, 
åue
, 
back∑tch_addªss
); \

1109 
CONDITION_FALSE
: \

1110 
	`gíî©e_c⁄dôi⁄Æ_bønch
(
úeg_a
, 
úeg_b
, 
Ál£
, 
back∑tch_addªss
); \

1113 
CONDITION_EQUAL
: \

1114 
	`gíî©e_c⁄dôi⁄Æ_bønch
(
úeg_a
, 
úeg_b
, 
equÆ
, 
back∑tch_addªss
); \

1117 
CONDITION_NOT_EQUAL
: \

1118 
	`gíî©e_c⁄dôi⁄Æ_bønch
(
úeg_a
, 
úeg_b
, 
nŸ_equÆ
, \

1119 
back∑tch_addªss
); \

1122 

	)

1123 
	#gíî©e_bønch
() \

1125 if(
c⁄dôi⁄
 == 0x0E) \

1127 
	`gíî©e_bønch_cy˛e_upd©e
( \

1128 
block_exôs
[
block_exô_posôi⁄
].
bønch_sour˚
, \

1129 
block_exôs
[
block_exô_posôi⁄
].
bønch_èrgë
); \

1133 
	`gíî©e_bønch_no_cy˛e_upd©e
( \

1134 
block_exôs
[
block_exô_posôi⁄
].
bønch_sour˚
, \

1135 
block_exôs
[
block_exô_posôi⁄
].
bønch_èrgë
); \

1137 
block_exô_posôi⁄
++; \

1139 

	)

1140 
	#rm_›_ªg
 
rm


	)

1141 
	#rm_›_imm
 
imm


	)

1143 
	#¨m_d©a_¥oc_ªg_Êags
() \

1144 
	`¨m_decode_d©a_¥oc_ªg
(); \

1145 if(
Êag_°©us
 & 0x02) \

1147 
	`gíî©e_lﬂd_rm_sh
(
Êags
) \

1151 
	`gíî©e_lﬂd_rm_sh
(
no_Êags
); \

1153 

	)

1154 
	#¨m_d©a_¥oc_ªg
() \

1155 
	`¨m_decode_d©a_¥oc_ªg
(); \

1156 
	`gíî©e_lﬂd_rm_sh
(
no_Êags
) \

1157 

	)

1158 
	#¨m_d©a_¥oc_imm
() \

1159 
	`¨m_decode_d©a_¥oc_imm
(); \

1160 
	`r‹
(
imm
, imm, 
imm_r‹
); \

1161 
	`gíî©e_lﬂd_imm
(
a0
, 
imm
) \

1162 

	)

1163 
	#¨m_d©a_¥oc_imm_Êags
() \

1164 
	`¨m_decode_d©a_¥oc_imm
(); \

1165 if((
Êag_°©us
 & 0x02Ë&& (
imm_r‹
 != 0)) \

1168 
	`gíî©e_lﬂd_imm
(
a0
, ((
imm
 >> (
imm_r‹
 - 1)) & 0x01)); \

1169 
	`gíî©e_°‹e_ªg
(
a0
, 
REG_C_FLAG
); \

1171 
	`r‹
(
imm
, imm, 
imm_r‹
); \

1172 
	`gíî©e_lﬂd_imm
(
a0
, 
imm
) \

1173 

	)

1175 
	#¨m_d©a_¥oc
(
«me
, 
ty≥
, 
Êags_›
) \

1177 
¨m_d©a_¥oc_
##
	`ty≥
(); \

1178 
	`gíî©e_lﬂd_ªg_pc
(
a1
, 
∫
, 8); \

1179 
	`gíî©e_fun˘i⁄_ˇŒ
(
execuã_
##
«me
); \

1180 
gíî©e_°‹e_ªg_pc_
##
	`Êags_›
(
rv
, 
rd
); \

1182 

	)

1183 
	#¨m_d©a_¥oc_ã°
(
«me
, 
ty≥
) \

1185 
¨m_d©a_¥oc_
##
	`ty≥
(); \

1186 
	`gíî©e_lﬂd_ªg_pc
(
a1
, 
∫
, 8); \

1187 
	`gíî©e_fun˘i⁄_ˇŒ
(
execuã_
##
«me
); \

1189 

	)

1190 
	#¨m_d©a_¥oc_u«ry
(
«me
, 
ty≥
, 
Êags_›
) \

1192 
¨m_d©a_¥oc_
##
	`ty≥
(); \

1193 
	`gíî©e_fun˘i⁄_ˇŒ
(
execuã_
##
«me
); \

1194 
gíî©e_°‹e_ªg_pc_
##
	`Êags_›
(
rv
, 
rd
); \

1196 

	)

1197 
	#¨m_d©a_¥oc_mov
(
ty≥
) \

1199 
¨m_d©a_¥oc_
##
	`ty≥
(); \

1200 
	`gíî©e_°‹e_ªg_pc_no_Êags
(
a0
, 
rd
); \

1202 

	)

1203 
u32
 
fun˘i⁄_cc
 
	$execuã_mul_Êags
(
u32
 
de°
)

1205 
	`ˇlcuœã_z_Êag
(
de°
);

1206 
	`ˇlcuœã_n_Êag
(
de°
);

1207 
	}
}

1209 
	#¨m_mu…ùly_Êags_yes
() \

1210 
	`gíî©e_fun˘i⁄_ˇŒ
(
execuã_mul_Êags
) \

1211 

	)

1212 
	#¨m_mu…ùly_Êags_no
(
_de°
) \

1213 

	)

1214 
	#¨m_mu…ùly_add_no
() \

1215 

	)

1216 
	#¨m_mu…ùly_add_yes
() \

1217 
	`gíî©e_lﬂd_ªg
(
a1
, 
∫
); \

1218 
	`gíî©e_add
(
a0
, 
a1
) \

1219 

	)

1220 
	#¨m_mu…ùly
(
add_›
, 
Êags
) \

1222 
	`¨m_decode_mu…ùly
(); \

1223 
	`gíî©e_lﬂd_ªg
(
a0
, 
rm
); \

1224 
	`gíî©e_lﬂd_ªg
(
a1
, 
rs
); \

1225 
	`gíî©e_mu…ùly
(
a1
); \

1226 
¨m_mu…ùly_add_
##
	`add_›
(); \

1227 
	`gíî©e_°‹e_ªg
(
a0
, 
rd
); \

1228 
¨m_mu…ùly_Êags_
##
	`Êags
(); \

1230 

	)

1231 
u32
 
fun˘i⁄_cc
 
	$execuã_mul_l⁄g_Êags
(
u32
 
de°_lo
, u32 
de°_hi
)

1233 
ªg
[
REG_Z_FLAG
] = (
de°_lo
 =0Ë& (
de°_hi
 == 0);

1234 
	`ˇlcuœã_n_Êag
(
de°_hi
);

1235 
	}
}

1237 
	#¨m_mu…ùly_l⁄g_Êags_yes
() \

1238 
	`gíî©e_fun˘i⁄_ˇŒ
(
execuã_mul_l⁄g_Êags
) \

1239 

	)

1240 
	#¨m_mu…ùly_l⁄g_Êags_no
(
_de°
) \

1241 

	)

1242 
	#¨m_mu…ùly_l⁄g_add_yes
(
«me
) \

1243 
	`gíî©e_lﬂd_ªg
(
a2
, 
rdlo
); \

1244 
	`gíî©e_lﬂd_ªg
(
s0
, 
rdhi
); \

1245 
gíî©e_mu…ùly_
##
	`«me
(
a1
, 
a2
, 
s0
) \

1246 

	)

1247 
	#¨m_mu…ùly_l⁄g_add_no
(
«me
) \

1248 
gíî©e_mu…ùly_
##
	`«me
(
a1
) \

1249 

	)

1250 
	#¨m_mu…ùly_l⁄g
(
«me
, 
add_›
, 
Êags
) \

1252 
	`¨m_decode_mu…ùly_l⁄g
(); \

1253 
	`gíî©e_lﬂd_ªg
(
a0
, 
rm
); \

1254 
	`gíî©e_lﬂd_ªg
(
a1
, 
rs
); \

1255 
¨m_mu…ùly_l⁄g_add_
##
	`add_›
(
«me
); \

1256 
	`gíî©e_°‹e_ªg
(
a0
, 
rdlo
); \

1257 
	`gíî©e_°‹e_ªg
(
a1
, 
rdhi
); \

1258 
¨m_mu…ùly_l⁄g_Êags_
##
	`Êags
(); \

1260 

	)

1261 
u32
 
fun˘i⁄_cc
 
	$execuã_ªad_˝§
()

1263 
	`cﬁœp£_Êags
();

1264  
ªg
[
REG_CPSR
];

1265 
	}
}

1267 
u32
 
fun˘i⁄_cc
 
	$execuã_ªad_•§
()

1269 
	`cﬁœp£_Êags
();

1270  
•§
[
ªg
[
CPU_MODE
]];

1271 
	}
}

1273 
	#¨m_p§_ªad
(
›_ty≥
, 
p§_ªg
) \

1274 
	`gíî©e_fun˘i⁄_ˇŒ
(
execuã_ªad_
##
p§_ªg
); \

1275 
	`gíî©e_°‹e_ªg
(
rv
, 
rd
) \

1276 

	)

1280 
u32
 
fun˘i⁄_cc
 
	$execuã_°‹e_˝§_body
(
u32
 
_˝§
)

1282 
ªg
[
REG_CPSR
] = 
_˝§
;

1283 if(
ªg
[
REG_SAVE
] & 0xFF)

1285 
	`£t_˝u_mode
(
˝u_modes
[
_˝§
 & 0x1F]);

1286 if((
io_ªgi°îs
[
REG_IE
] & io_ªgi°îs[
REG_IF
]) &&

1287 
io_ªgi°îs
[
REG_IME
] && ((
_˝§
 & 0x80) == 0))

1289 
ªg_mode
[
MODE_IRQ
][6] = 
ªg
[
REG_SAVE2
] + 4;

1290 
•§
[
MODE_IRQ
] = 
_˝§
;

1291 
ªg
[
REG_CPSR
] = (
_˝§
 & 0xFFFFFF00) | 0xD2;

1292 
	`£t_˝u_mode
(
MODE_IRQ
);

1298 
	}
}

1301 
fun˘i⁄_cc
 
	$execuã_°‹e_•§
(
u32
 
√w_•§
, u32 
°‹e_mask
)

1303 
u32
 
_•§
 = 
•§
[
ªg
[
CPU_MODE
]];

1304 
•§
[
ªg
[
CPU_MODE
]] = (
√w_•§
 & 
°‹e_mask
Ë| (
_•§
 & (~store_mask));

1305 
	}
}

1307 
	#¨m_p§_lﬂd_√w_ªg
() \

1308 
	`gíî©e_lﬂd_ªg
(
a0
, 
rm
) \

1309 

	)

1310 
	#¨m_p§_lﬂd_√w_imm
() \

1311 
	`r‹
(
imm
, imm, 
imm_r‹
); \

1312 
	`gíî©e_lﬂd_imm
(
a0
, 
imm
) \

1313 

	)

1314 
	#¨m_p§_°‹e
(
›_ty≥
, 
p§_ªg
) \

1315 
¨m_p§_lﬂd_√w_
##
	`›_ty≥
(); \

1316 
	`gíî©e_lﬂd_imm
(
a1
, 
p§_masks
[
p§_fõld
]); \

1317 
	`gíî©e_lﬂd_pc
(
a2
, (
pc
 + 4)); \

1318 
	`gíî©e_fun˘i⁄_ˇŒ
(
execuã_°‹e_
##
p§_ªg
) \

1319 

	)

1320 
	#¨m_p§
(
›_ty≥
, 
å™s„r_ty≥
, 
p§_ªg
) \

1322 
¨m_decode_p§_
##
	`›_ty≥
(); \

1323 
¨m_p§_
##
	`å™s„r_ty≥
(
›_ty≥
, 
p§_ªg
); \

1325 

	)

1326 
	#Æig√d_addªss_mask8
 0xF0000000

	)

1327 
	#Æig√d_addªss_mask16
 0xF0000001

	)

1328 
	#Æig√d_addªss_mask32
 0xF0000003

	)

1330 
	#ªad_mem‹y
(
size
, 
ty≥
, 
addªss
, 
de°
) \

1332 
u8
 *
m≠
; \

1334 if(((
addªss
 >> 24Ë=0Ë&& (
ªg
[
REG_PC
] >= 0x4000)) \

1336 
de°
 = *((
ty≥
 *)((
u8
 *)&
bios_ªad_¥Ÿe˘
 + (
addªss
 & 0x03))); \

1340 if(((
addªss
 & 
Æig√d_addªss_mask
##
size
) == 0) && \

1341 (
m≠
 = 
mem‹y_m≠_ªad
[
addªss
 >> 15])) \

1343 
de°
 = *((
ty≥
 *)((
u8
 *)
m≠
 + (
addªss
 & 0x7FFF))); \

1347 
de°
 = (
ty≥
)
ªad_mem‹y
##
	`size
(
addªss
); \

1350 

	)

1351 
	#ªad_mem‹y_s16
(
addªss
, 
de°
) \

1353 
u8
 *
m≠
; \

1355 if(((
addªss
 >> 24Ë=0Ë&& (
ªg
[
REG_PC
] >= 0x4000)) \

1357 
de°
 = *((
s16
 *)((
u8
 *)&
bios_ªad_¥Ÿe˘
 + (
addªss
 & 0x03))); \

1361 if(((
addªss
 & 
Æig√d_addªss_mask16
) == 0) && \

1362 (
m≠
 = 
mem‹y_m≠_ªad
[
addªss
 >> 15])) \

1364 
de°
 = *((
s16
 *)((
u8
 *)
m≠
 + (
addªss
 & 0x7FFF))); \

1368 
de°
 = (
s16
)
	`ªad_mem‹y16_sig√d
(
addªss
); \

1371 

	)

1372 
	#ac˚ss_mem‹y_gíî©e_ªad_fun˘i⁄
(
mem_size
, 
mem_ty≥
) \

1373 
u32
 
fun˘i⁄_cc
 
execuã_lﬂd_
##
	`mem_ty≥
(u32 
addªss
) \

1375 
u32
 
de°
; \

1376 
	`ªad_mem‹y
(
mem_size
, 
mem_ty≥
, 
addªss
, 
de°
); \

1377  
de°
; \

1379 

	)

1380 
ac˚ss_mem‹y_gíî©e_ªad_fun˘i⁄
(8, 
u8
);

1381 
ac˚ss_mem‹y_gíî©e_ªad_fun˘i⁄
(8, 
s8
);

1382 
ac˚ss_mem‹y_gíî©e_ªad_fun˘i⁄
(16, 
u16
);

1383 
ac˚ss_mem‹y_gíî©e_ªad_fun˘i⁄
(32, 
u32
);

1385 
u32
 
fun˘i⁄_cc
 
	$execuã_lﬂd_s16
(
u32
 
addªss
)

1387 
u32
 
de°
;

1388 
	`ªad_mem‹y_s16
(
addªss
, 
de°
);

1389  
de°
;

1390 
	}
}

1392 
	#ac˚ss_mem‹y_gíî©e_wrôe_fun˘i⁄
(
mem_size
, 
mem_ty≥
) \

1393 
fun˘i⁄_cc
 
execuã_°‹e_
##
	`mem_ty≥
(
u32
 
addªss
, u32 
sour˚
) \

1395 
u8
 *
m≠
; \

1397 if(((
addªss
 & 
Æig√d_addªss_mask
##
mem_size
) == 0) && \

1398 (
m≠
 = 
mem‹y_m≠_wrôe
[
addªss
 >> 15])) \

1400 *((
mem_ty≥
 *)((
u8
 *)
m≠
 + (
addªss
 & 0x7FFF))Ë
sour˚
; \

1404 
wrôe_mem‹y
##
	`mem_size
(
addªss
, 
sour˚
); \

1407 

	)

1408 
	#¨m_ac˚ss_mem‹y_lﬂd
(
mem_ty≥
) \

1409 
cy˛e_cou¡
 += 2; \

1410 
	`gíî©e_fun˘i⁄_ˇŒ
(
execuã_lﬂd_
##
mem_ty≥
); \

1411 
	`gíî©e_°‹e_ªg_pc_no_Êags
(
rv
, 
rd
) \

1412 

	)

1413 
	#¨m_ac˚ss_mem‹y_°‹e
(
mem_ty≥
) \

1414 
cy˛e_cou¡
++; \

1415 
	`gíî©e_lﬂd_ªg_pc
(
a1
, 
rd
, 12); \

1416 
	`gíî©e_lﬂd_pc
(
a2
, (
pc
 + 4)); \

1417 
	`gíî©e_fun˘i⁄_ˇŒ
(
execuã_°‹e_
##
mem_ty≥
) \

1418 

	)

1419 
	#no_›
 \

1420 

	)

1421 
	#¨m_ac˚ss_mem‹y_wrôeback_yes
(
off_›
) \

1422 
ªg
[
∫
] = 
addªss
 
off_›
 \

1423 

	)

1424 
	#¨m_ac˚ss_mem‹y_wrôeback_no
(
off_›
) \

1425 

	)

1426 
	#lﬂd_ªg_›
 
ªg
[
rd
] \

1427 

	)

1428 
	#°‹e_ªg_›
 
ªg_›
 \

1429 

	)

1430 
	#¨m_ac˚ss_mem‹y_adju°_›_up
 
add


	)

1431 
	#¨m_ac˚ss_mem‹y_adju°_›_down
 
sub


	)

1432 
	#¨m_ac˚ss_mem‹y_ªvî£_›_up
 
sub


	)

1433 
	#¨m_ac˚ss_mem‹y_ªvî£_›_down
 
add


	)

1435 
	#¨m_ac˚ss_mem‹y_ªg_¥e
(
adju°_dú_›
, 
ªvî£_dú_›
) \

1436 
	`gíî©e_lﬂd_ªg_pc
(
a0
, 
∫
, 8); \

1437 
gíî©e_
##
	`adju°_dú_›
(
a0
, 
a1
) \

1438 

	)

1439 
	#¨m_ac˚ss_mem‹y_ªg_¥e_wb
(
adju°_dú_›
, 
ªvî£_dú_›
) \

1440 
	`¨m_ac˚ss_mem‹y_ªg_¥e
(
adju°_dú_›
, 
ªvî£_dú_›
); \

1441 
	`gíî©e_°‹e_ªg
(
a0
, 
∫
) \

1442 

	)

1443 
	#¨m_ac˚ss_mem‹y_ªg_po°
(
adju°_dú_›
, 
ªvî£_dú_›
) \

1444 
	`gíî©e_lﬂd_ªg
(
a0
, 
∫
); \

1445 
gíî©e_
##
	`adju°_dú_›
(
a0
, 
a1
); \

1446 
	`gíî©e_°‹e_ªg
(
a0
, 
∫
); \

1447 
gíî©e_
##
	`ªvî£_dú_›
(
a0
, 
a1
) \

1448 

	)

1449 
	#¨m_ac˚ss_mem‹y_imm_¥e
(
adju°_dú_›
, 
ªvî£_dú_›
) \

1450 
	`gíî©e_lﬂd_ªg_pc
(
a0
, 
∫
, 8); \

1451 
gíî©e_
##
adju°_dú_›
##
	`_imm
(
a0
, 
off£t
) \

1452 

	)

1453 
	#¨m_ac˚ss_mem‹y_imm_¥e_wb
(
adju°_dú_›
, 
ªvî£_dú_›
) \

1454 
	`¨m_ac˚ss_mem‹y_imm_¥e
(
adju°_dú_›
, 
ªvî£_dú_›
); \

1455 
	`gíî©e_°‹e_ªg
(
a0
, 
∫
) \

1456 

	)

1457 
	#¨m_ac˚ss_mem‹y_imm_po°
(
adju°_dú_›
, 
ªvî£_dú_›
) \

1458 
	`gíî©e_lﬂd_ªg
(
a0
, 
∫
); \

1459 
gíî©e_
##
adju°_dú_›
##
	`_imm
(
a0
, 
off£t
); \

1460 
	`gíî©e_°‹e_ªg
(
a0
, 
∫
); \

1461 
gíî©e_
##
ªvî£_dú_›
##
	`_imm
(
a0
, 
off£t
) \

1462 

	)

1464 
	#¨m_d©a_å™s_ªg
(
adju°_›
, 
adju°_dú_›
, 
ªvî£_dú_›
) \

1465 
	`¨m_decode_d©a_å™s_ªg
(); \

1466 
	`gíî©e_lﬂd_off£t_sh
(); \

1467 
¨m_ac˚ss_mem‹y_ªg_
##
	`adju°_›
(
adju°_dú_›
, 
ªvî£_dú_›
) \

1468 

	)

1469 
	#¨m_d©a_å™s_imm
(
adju°_›
, 
adju°_dú_›
, 
ªvî£_dú_›
) \

1470 
	`¨m_decode_d©a_å™s_imm
(); \

1471 
¨m_ac˚ss_mem‹y_imm_
##
	`adju°_›
(
adju°_dú_›
, 
ªvî£_dú_›
) \

1472 

	)

1473 
	#¨m_d©a_å™s_hÆf_ªg
(
adju°_›
, 
adju°_dú_›
, 
ªvî£_dú_›
) \

1474 
	`¨m_decode_hÆf_å™s_r
(); \

1475 
	`gíî©e_lﬂd_ªg
(
a1
, 
rm
); \

1476 
¨m_ac˚ss_mem‹y_ªg_
##
	`adju°_›
(
adju°_dú_›
, 
ªvî£_dú_›
) \

1477 

	)

1478 
	#¨m_d©a_å™s_hÆf_imm
(
adju°_›
, 
adju°_dú_›
, 
ªvî£_dú_›
) \

1479 
	`¨m_decode_hÆf_å™s_of
(); \

1480 
¨m_ac˚ss_mem‹y_imm_
##
	`adju°_›
(
adju°_dú_›
, 
ªvî£_dú_›
) \

1481 

	)

1482 
	#¨m_ac˚ss_mem‹y
(
ac˚ss_ty≥
, 
dúe˘i⁄
, 
adju°_›
, 
mem_ty≥
, \

1483 
off£t_ty≥
) \

1485 
¨m_d©a_å™s_
##
	`off£t_ty≥
(
adju°_›
, \

1486 
¨m_ac˚ss_mem‹y_adju°_›_
##
dúe˘i⁄
, \

1487 
¨m_ac˚ss_mem‹y_ªvî£_›_
##
dúe˘i⁄
); \

1489 
¨m_ac˚ss_mem‹y_
##
	`ac˚ss_ty≥
(
mem_ty≥
); \

1491 

	)

1492 
	#w‹d_bô_cou¡
(
w‹d
) \

1493 (
bô_cou¡
[
w‹d
 >> 8] + bit_count[word & 0xFF]) \

1494 

	)

1495 
	#•röt_no
(
ac˚ss_ty≥
, 
¥e_›
, 
po°_›
, 
wb
) \

1496 

	)

1497 
	#•röt_yes
(
ac˚ss_ty≥
, 
¥e_›
, 
po°_›
, 
wb
) \

1498 
	`¥ötf
("sbit on %s %s %s %s\n", #access_type, #pre_op, #post_op, #wb) \

1499 

	)

1500 
u32
 
fun˘i⁄_cc
 
	$execuã_Æig√d_lﬂd32
(
u32
 
addªss
)

1502 
u8
 *
m≠
;

1503 if(!(
addªss
 & 0xF0000000Ë&& (
m≠
 = 
mem‹y_m≠_ªad
[address >> 15]))

1504  
	`addªss32
(
m≠
, 
addªss
 & 0x7FFF);

1506  
	`ªad_mem‹y32
(
addªss
);

1507 
	}
}

1509 
fun˘i⁄_cc
 
	$execuã_Æig√d_°‹e32
(
u32
 
addªss
, u32 
sour˚
)

1511 
u8
 *
m≠
;

1513 if(!(
addªss
 & 0xF0000000Ë&& (
m≠
 = 
mem‹y_m≠_wrôe
[address >> 15]))

1514 
	`addªss32
(
m≠
, 
addªss
 & 0x7FFFË
sour˚
;

1516 
	`wrôe_mem‹y32
(
addªss
, 
sour˚
);

1517 
	}
}

1519 
	#¨m_block_mem‹y_lﬂd
() \

1520 
	`gíî©e_fun˘i⁄_ˇŒ
(
execuã_Æig√d_lﬂd32
); \

1521 
	`gíî©e_°‹e_ªg
(
rv
, 
i
) \

1522 

	)

1523 
	#¨m_block_mem‹y_°‹e
() \

1524 
	`gíî©e_lﬂd_ªg_pc
(
a1
, 
i
, 8); \

1525 
	`gíî©e_fun˘i⁄_ˇŒ
(
execuã_Æig√d_°‹e32
) \

1526 

	)

1527 
	#¨m_block_mem‹y_föÆ_lﬂd
() \

1528 
	`¨m_block_mem‹y_lﬂd
() \

1529 

	)

1530 
	#¨m_block_mem‹y_föÆ_°‹e
() \

1531 
	`gíî©e_lﬂd_ªg_pc
(
a1
, 
i
, 12); \

1532 
	`gíî©e_lﬂd_pc
(
a2
, (
pc
 + 4)); \

1533 
	`gíî©e_fun˘i⁄_ˇŒ
(
execuã_°‹e_u32
) \

1534 

	)

1535 
	#¨m_block_mem‹y_adju°_pc_°‹e
() \

1536 

	)

1537 
	#¨m_block_mem‹y_adju°_pc_lﬂd
() \

1538 if(
ªg_li°
 & 0x8000) \

1540 
	`gíî©e_mov
(
a0
, 
rv
); \

1541 
	`gíî©e_ödúe˘_bønch_¨m
(); \

1543 

	)

1544 
	#¨m_block_mem‹y_off£t_down_a
() \

1545 
	`gíî©e_add_imm
(
s0
, -((
	`w‹d_bô_cou¡
(
ªg_li°
) * 4) - 4)) \

1546 

	)

1547 
	#¨m_block_mem‹y_off£t_down_b
() \

1548 
	`gíî©e_add_imm
(
s0
, -(
	`w‹d_bô_cou¡
(
ªg_li°
) * 4)) \

1549 

	)

1550 
	#¨m_block_mem‹y_off£t_no
() \

1551 

	)

1552 
	#¨m_block_mem‹y_off£t_up
() \

1553 
	`gíî©e_add_imm
(
s0
, 4) \

1554 

	)

1555 
	#¨m_block_mem‹y_wrôeback_down
() \

1556 
	`gíî©e_lﬂd_ªg
(
a0
, 
∫
) \

1557 
	`gíî©e_add_imm
(
a0
, -(
	`w‹d_bô_cou¡
(
ªg_li°
) * 4)); \

1558 
	`gíî©e_°‹e_ªg
(
a0
, 
∫
) \

1559 

	)

1560 
	#¨m_block_mem‹y_wrôeback_up
() \

1561 
	`gíî©e_lﬂd_ªg
(
a0
, 
∫
); \

1562 
	`gíî©e_add_imm
(
a0
, (
	`w‹d_bô_cou¡
(
ªg_li°
) * 4)); \

1563 
	`gíî©e_°‹e_ªg
(
a0
, 
∫
) \

1564 

	)

1565 
	#¨m_block_mem‹y_wrôeback_no
()

	)

1569 
	#¨m_block_mem‹y_wrôeback_lﬂd
(
wrôeback_ty≥
) \

1570 if(!((
ªg_li°
 >> 
∫
) & 0x01)) \

1572 
¨m_block_mem‹y_wrôeback_
##
	`wrôeback_ty≥
(); \

1574 

	)

1575 
	#¨m_block_mem‹y_wrôeback_°‹e
(
wrôeback_ty≥
) \

1576 
¨m_block_mem‹y_wrôeback_
##
	`wrôeback_ty≥
() \

1577 

	)

1578 
	#¨m_block_mem‹y
(
ac˚ss_ty≥
, 
off£t_ty≥
, 
wrôeback_ty≥
, 
s_bô
) \

1580 
	`¨m_decode_block_å™s
(); \

1581 
u32
 
off£t
 = 0; \

1582 
u32
 
i
; \

1584 
	`gíî©e_lﬂd_ªg
(
s0
, 
∫
); \

1585 
¨m_block_mem‹y_off£t_
##
	`off£t_ty≥
(); \

1586 
¨m_block_mem‹y_wrôeback_
##
	`ac˚ss_ty≥
(
wrôeback_ty≥
); \

1587 
	`gíî©e_™d_imm
(
s0
, ~0x03); \

1589 
i
 = 0; i < 16; i++) \

1591 if((
ªg_li°
 >> 
i
) & 0x01) \

1593 
cy˛e_cou¡
++; \

1594 
	`gíî©e_add_ªg_ªg_imm
(
a0
, 
s0
, 
off£t
) \

1595 if(
ªg_li°
 & ~((2 << 
i
) - 1)) \

1597 
¨m_block_mem‹y_
##
	`ac˚ss_ty≥
(); \

1598 
off£t
 += 4; \

1602 
¨m_block_mem‹y_föÆ_
##
	`ac˚ss_ty≥
(); \

1607 
¨m_block_mem‹y_adju°_pc_
##
	`ac˚ss_ty≥
(); \

1609 

	)

1610 
	#¨m_sw≠
(
ty≥
) \

1612 
	`¨m_decode_sw≠
(); \

1613 
cy˛e_cou¡
 += 3; \

1614 
	`gíî©e_lﬂd_ªg
(
a0
, 
∫
); \

1615 
	`gíî©e_fun˘i⁄_ˇŒ
(
execuã_lﬂd_
##
ty≥
); \

1616 
	`gíî©e_mov
(
s0
, 
rv
); \

1617 
	`gíî©e_lﬂd_ªg
(
a0
, 
∫
); \

1618 
	`gíî©e_lﬂd_ªg
(
a1
, 
rm
); \

1619 
	`gíî©e_fun˘i⁄_ˇŒ
(
execuã_°‹e_
##
ty≥
); \

1620 
	`gíî©e_°‹e_ªg
(
s0
, 
rd
); \

1622 

	)

1623 
	#thumb_∫_›_ªg
(
_∫
) \

1624 
	`gíî©e_lﬂd_ªg
(
a0
, 
_∫
) \

1625 

	)

1626 
	#thumb_∫_›_imm
(
_imm
) \

1627 
	`gíî©e_lﬂd_imm
(
a0
, 
_imm
) \

1628 

	)

1632 
	#thumb_d©a_¥oc
(
ty≥
, 
«me
, 
∫_ty≥
, 
_rd
, 
_rs
, 
_∫
) \

1634 
thumb_decode_
##
	`ty≥
(); \

1635 
thumb_∫_›_
##
	`∫_ty≥
(
_∫
); \

1636 
	`gíî©e_lﬂd_ªg
(
a1
, 
_rs
); \

1637 
	`gíî©e_fun˘i⁄_ˇŒ
(
execuã_
##
«me
); \

1638 
	`gíî©e_°‹e_ªg
(
rv
, 
_rd
); \

1640 

	)

1641 
	#thumb_d©a_¥oc_ã°
(
ty≥
, 
«me
, 
∫_ty≥
, 
_rs
, 
_∫
) \

1643 
thumb_decode_
##
	`ty≥
(); \

1644 
thumb_∫_›_
##
	`∫_ty≥
(
_∫
); \

1645 
	`gíî©e_lﬂd_ªg
(
a1
, 
_rs
); \

1646 
	`gíî©e_fun˘i⁄_ˇŒ
(
execuã_
##
«me
); \

1648 

	)

1649 
	#thumb_d©a_¥oc_u«ry
(
ty≥
, 
«me
, 
∫_ty≥
, 
_rd
, 
_∫
) \

1651 
thumb_decode_
##
	`ty≥
(); \

1652 
thumb_∫_›_
##
	`∫_ty≥
(
_∫
); \

1653 
	`gíî©e_fun˘i⁄_ˇŒ
(
execuã_
##
«me
); \

1654 
	`gíî©e_°‹e_ªg
(
rv
, 
_rd
); \

1656 

	)

1657 
	#thumb_d©a_¥oc_mov
(
ty≥
, 
∫_ty≥
, 
_rd
, 
_∫
) \

1659 
thumb_decode_
##
	`ty≥
(); \

1660 
thumb_∫_›_
##
	`∫_ty≥
(
_∫
); \

1661 
	`gíî©e_°‹e_ªg
(
a0
, 
_rd
); \

1663 

	)

1664 
	#gíî©e_°‹e_ªg_pc_thumb
(
úeg
) \

1665 
	`gíî©e_°‹e_ªg
(
úeg
, 
rd
); \

1666 if(
rd
 == 15) \

1668 
	`gíî©e_ödúe˘_bønch_cy˛e_upd©e
(
thumb
); \

1670 

	)

1671 
	#thumb_d©a_¥oc_hi
(
«me
) \

1673 
	`thumb_decode_húeg_›
(); \

1674 
	`gíî©e_lﬂd_ªg_pc
(
a0
, 
rs
, 4); \

1675 
	`gíî©e_lﬂd_ªg_pc
(
a1
, 
rd
, 4); \

1676 
	`gíî©e_fun˘i⁄_ˇŒ
(
execuã_
##
«me
); \

1677 
	`gíî©e_°‹e_ªg_pc_thumb
(
rv
); \

1679 

	)

1680 
	#thumb_d©a_¥oc_ã°_hi
(
«me
) \

1682 
	`thumb_decode_húeg_›
(); \

1683 
	`gíî©e_lﬂd_ªg_pc
(
a0
, 
rs
, 4); \

1684 
	`gíî©e_lﬂd_ªg_pc
(
a1
, 
rd
, 4); \

1685 
	`gíî©e_fun˘i⁄_ˇŒ
(
execuã_
##
«me
); \

1687 

	)

1688 
	#thumb_d©a_¥oc_u«ry_hi
(
«me
) \

1690 
	`thumb_decode_húeg_›
(); \

1691 
	`gíî©e_lﬂd_ªg_pc
(
a0
, 
∫
, 4); \

1692 
	`gíî©e_fun˘i⁄_ˇŒ
(
execuã_
##
«me
); \

1693 
	`gíî©e_°‹e_ªg_pc_thumb
(
rv
); \

1695 

	)

1696 
	#thumb_d©a_¥oc_mov_hi
() \

1698 
	`thumb_decode_húeg_›
(); \

1699 
	`gíî©e_lﬂd_ªg_pc
(
a0
, 
rs
, 4); \

1700 
	`gíî©e_°‹e_ªg_pc_thumb
(
a0
); \

1702 

	)

1703 
	#thumb_lﬂd_pc
(
_rd
) \

1705 
	`thumb_decode_imm
(); \

1706 
	`gíî©e_lﬂd_pc
(
a0
, (((
pc
 & ~2Ë+ 4Ë+ (
imm
 * 4))); \

1707 
	`gíî©e_°‹e_ªg
(
a0
, 
_rd
); \

1709 

	)

1710 
	#thumb_lﬂd_•
(
_rd
) \

1712 
	`thumb_decode_imm
(); \

1713 
	`gíî©e_lﬂd_ªg
(
a0
, 13); \

1714 
	`gíî©e_add_imm
(
a0
, (
imm
 * 4)); \

1715 
	`gíî©e_°‹e_ªg
(
a0
, 
_rd
); \

1717 

	)

1718 
	#thumb_adju°_•_up
() \

1719 
	`gíî©e_add_imm
(
a0
, 
imm
 * 4) \

1720 

	)

1721 
	#thumb_adju°_•_down
() \

1722 
	`gíî©e_sub_imm
(
a0
, 
imm
 * 4) \

1723 

	)

1725 
	#thumb_adju°_•
(
dúe˘i⁄
) \

1727 
	`thumb_decode_add_•
(); \

1728 
	`gíî©e_lﬂd_ªg
(
a0
, 
REG_SP
); \

1729 
thumb_adju°_•_
##
	`dúe˘i⁄
(); \

1730 
	`gíî©e_°‹e_ªg
(
a0
, 
REG_SP
); \

1732 

	)

1737 
u32
 
fun˘i⁄_cc
 
	$execuã_l¶_ªg_›
(
u32
 
vÆue
, u32 
shi·
)

1739 if(
shi·
 != 0)

1741 if(
shi·
 > 31)

1743 if(
shi·
 == 32)

1744 
ªg
[
REG_C_FLAG
] = 
vÆue
 & 0x01;

1746 
ªg
[
REG_C_FLAG
] = 0;

1748 
vÆue
 = 0;

1752 
ªg
[
REG_C_FLAG
] = (
vÆue
 >> (32 - 
shi·
)) & 0x01;

1753 
vÆue
 <<
shi·
;

1757 
	`ˇlcuœã_Êags_logic
(
vÆue
);

1758  
vÆue
;

1759 
	}
}

1761 
u32
 
fun˘i⁄_cc
 
	$execuã_l§_ªg_›
(
u32
 
vÆue
, u32 
shi·
)

1763 if(
shi·
 != 0)

1765 if(
shi·
 > 31)

1767 if(
shi·
 == 32)

1768 
ªg
[
REG_C_FLAG
] = (
vÆue
 >> 31) & 0x01;

1770 
ªg
[
REG_C_FLAG
] = 0;

1772 
vÆue
 = 0;

1776 
ªg
[
REG_C_FLAG
] = (
vÆue
 >> (
shi·
 - 1)) & 0x01;

1777 
vÆue
 >>
shi·
;

1781 
	`ˇlcuœã_Êags_logic
(
vÆue
);

1782  
vÆue
;

1783 
	}
}

1785 
u32
 
fun˘i⁄_cc
 
	$execuã_a§_ªg_›
(
u32
 
vÆue
, u32 
shi·
)

1787 if(
shi·
 != 0)

1789 if(
shi·
 > 31)

1791 
vÆue
 = (
s32
)value >> 31;

1792 
ªg
[
REG_C_FLAG
] = 
vÆue
 & 0x01;

1796 
ªg
[
REG_C_FLAG
] = (
vÆue
 >> (
shi·
 - 1)) & 0x01;

1797 
vÆue
 = (
s32
)vÆuê>> 
shi·
;

1801 
	`ˇlcuœã_Êags_logic
(
vÆue
);

1802  
vÆue
;

1803 
	}
}

1805 
u32
 
fun˘i⁄_cc
 
	$execuã_r‹_ªg_›
(
u32
 
vÆue
, u32 
shi·
)

1807 if(
shi·
 != 0)

1809 
ªg
[
REG_C_FLAG
] = (
vÆue
 >> (
shi·
 - 1)) & 0x01;

1810 
	`r‹
(
vÆue
, vÆue, 
shi·
);

1813 
	`ˇlcuœã_Êags_logic
(
vÆue
);

1814  
vÆue
;

1815 
	}
}

1817 
u32
 
fun˘i⁄_cc
 
	$execuã_l¶_imm_›
(
u32
 
vÆue
, u32 
shi·
)

1819 if(
shi·
 != 0)

1821 
ªg
[
REG_C_FLAG
] = (
vÆue
 >> (32 - 
shi·
)) & 0x01;

1822 
vÆue
 <<
shi·
;

1825 
	`ˇlcuœã_Êags_logic
(
vÆue
);

1826  
vÆue
;

1827 
	}
}

1829 
u32
 
fun˘i⁄_cc
 
	$execuã_l§_imm_›
(
u32
 
vÆue
, u32 
shi·
)

1831 if(
shi·
 != 0)

1833 
ªg
[
REG_C_FLAG
] = (
vÆue
 >> (
shi·
 - 1)) & 0x01;

1834 
vÆue
 >>
shi·
;

1838 
ªg
[
REG_C_FLAG
] = 
vÆue
 >> 31;

1839 
vÆue
 = 0;

1842 
	`ˇlcuœã_Êags_logic
(
vÆue
);

1843  
vÆue
;

1844 
	}
}

1846 
u32
 
fun˘i⁄_cc
 
	$execuã_a§_imm_›
(
u32
 
vÆue
, u32 
shi·
)

1848 if(
shi·
 != 0)

1850 
ªg
[
REG_C_FLAG
] = (
vÆue
 >> (
shi·
 - 1)) & 0x01;

1851 
vÆue
 = (
s32
)vÆuê>> 
shi·
;

1855 
vÆue
 = (
s32
)value >> 31;

1856 
ªg
[
REG_C_FLAG
] = 
vÆue
 & 0x01;

1859 
	`ˇlcuœã_Êags_logic
(
vÆue
);

1860  
vÆue
;

1861 
	}
}

1863 
u32
 
fun˘i⁄_cc
 
	$execuã_r‹_imm_›
(
u32
 
vÆue
, u32 
shi·
)

1865 if(
shi·
 != 0)

1867 
ªg
[
REG_C_FLAG
] = (
vÆue
 >> (
shi·
 - 1)) & 0x01;

1868 
	`r‹
(
vÆue
, vÆue, 
shi·
);

1872 
u32
 
c_Êag
 = 
ªg
[
REG_C_FLAG
];

1873 
ªg
[
REG_C_FLAG
] = 
vÆue
 & 0x01;

1874 
vÆue
 = (vÆuê>> 1Ë| (
c_Êag
 << 31);

1877 
	`ˇlcuœã_Êags_logic
(
vÆue
);

1878  
vÆue
;

1879 
	}
}

1881 
	#gíî©e_shi·_lﬂd_›î™ds_ªg
() \

1882 
	`gíî©e_lﬂd_ªg
(
a0
, 
rd
); \

1883 
	`gíî©e_lﬂd_ªg
(
a1
, 
rs
) \

1884 

	)

1885 
	#gíî©e_shi·_lﬂd_›î™ds_imm
() \

1886 
	`gíî©e_lﬂd_ªg
(
a0
, 
rs
); \

1887 
	`gíî©e_lﬂd_imm
(
a1
, 
imm
) \

1888 

	)

1889 
	#thumb_shi·
(
decode_ty≥
, 
›_ty≥
, 
vÆue_ty≥
) \

1891 
thumb_decode_
##
	`decode_ty≥
(); \

1892 
gíî©e_shi·_lﬂd_›î™ds_
##
	`vÆue_ty≥
(); \

1893 
	`gíî©e_fun˘i⁄_ˇŒ
(
execuã_
##
›_ty≥
##
_
##
vÆue_ty≥
##
_›
); \

1894 
	`gíî©e_°‹e_ªg
(
rv
, 
rd
); \

1896 

	)

1899 
	#thumb_ac˚ss_mem‹y_lﬂd
(
mem_ty≥
, 
ªg_rd
) \

1900 
cy˛e_cou¡
 += 2; \

1901 
	`gíî©e_fun˘i⁄_ˇŒ
(
execuã_lﬂd_
##
mem_ty≥
); \

1902 
	`gíî©e_°‹e_ªg
(
rv
, 
ªg_rd
) \

1903 

	)

1904 
	#thumb_ac˚ss_mem‹y_°‹e
(
mem_ty≥
, 
ªg_rd
) \

1905 
cy˛e_cou¡
++; \

1906 
	`gíî©e_lﬂd_ªg
(
a1
, 
ªg_rd
); \

1907 
	`gíî©e_lﬂd_pc
(
a2
, (
pc
 + 2)); \

1908 
	`gíî©e_fun˘i⁄_ˇŒ
(
execuã_°‹e_
##
mem_ty≥
) \

1909 

	)

1910 
	#thumb_ac˚ss_mem‹y_gíî©e_addªss_pc_ªœtive
(
off£t
, 
_rb
, 
_ro
) \

1911 
	`gíî©e_lﬂd_pc
(
a0
, (
off£t
)) \

1912 

	)

1913 
	#thumb_ac˚ss_mem‹y_gíî©e_addªss_ªg_imm_•
(
off£t
, 
_rb
, 
_ro
) \

1914 
	`gíî©e_lﬂd_ªg
(
a0
, 
_rb
); \

1915 
	`gíî©e_add_imm
(
a0
, (
off£t
 * 4)) \

1916 

	)

1917 
	#thumb_ac˚ss_mem‹y_gíî©e_addªss_ªg_imm
(
off£t
, 
_rb
, 
_ro
) \

1918 
	`gíî©e_lﬂd_ªg
(
a0
, 
_rb
); \

1919 
	`gíî©e_add_imm
(
a0
, (
off£t
)) \

1920 

	)

1921 
	#thumb_ac˚ss_mem‹y_gíî©e_addªss_ªg_ªg
(
off£t
, 
_rb
, 
_ro
) \

1922 
	`gíî©e_lﬂd_ªg
(
a0
, 
_rb
); \

1923 
	`gíî©e_lﬂd_ªg
(
a1
, 
_ro
); \

1924 
	`gíî©e_add
(
a0
, 
a1
) \

1925 

	)

1926 
	#thumb_ac˚ss_mem‹y
(
ac˚ss_ty≥
, 
›_ty≥
, 
_rd
, 
_rb
, 
_ro
, \

1927 
addªss_ty≥
, 
off£t
, 
mem_ty≥
) \

1929 
thumb_decode_
##
	`›_ty≥
(); \

1930 
thumb_ac˚ss_mem‹y_gíî©e_addªss_
##
	`addªss_ty≥
(
off£t
, 
_rb
, 
_ro
); \

1931 
thumb_ac˚ss_mem‹y_
##
	`ac˚ss_ty≥
(
mem_ty≥
, 
_rd
); \

1933 

	)

1934 
	#thumb_block_addªss_¥ódju°_up
() \

1935 
	`gíî©e_add_imm
(
s0
, (
bô_cou¡
[
ªg_li°
] * 4)) \

1936 

	)

1937 
	#thumb_block_addªss_¥ódju°_down
() \

1938 
	`gíî©e_sub_imm
(
s0
, (
bô_cou¡
[
ªg_li°
] * 4)) \

1939 

	)

1940 
	#thumb_block_addªss_¥ódju°_push_Ã
() \

1941 
	`gíî©e_sub_imm
(
s0
, ((
bô_cou¡
[
ªg_li°
] + 1) * 4)) \

1942 

	)

1943 
	#thumb_block_addªss_¥ódju°_no
() \

1944 

	)

1945 
	#thumb_block_addªss_po°adju°_no
(
ba£_ªg
) \

1946 
	`gíî©e_°‹e_ªg
(
s0
, 
ba£_ªg
) \

1947 

	)

1948 
	#thumb_block_addªss_po°adju°_up
(
ba£_ªg
) \

1949 
	`gíî©e_add_ªg_ªg_imm
(
a0
, 
s0
, (
bô_cou¡
[
ªg_li°
] * 4)); \

1950 
	`gíî©e_°‹e_ªg
(
a0
, 
ba£_ªg
) \

1951 

	)

1952 
	#thumb_block_addªss_po°adju°_down
(
ba£_ªg
) \

1953 
	`gíî©e_mov
(
a0
, 
s0
); \

1954 
	`gíî©e_sub_imm
(
a0
, (
bô_cou¡
[
ªg_li°
] * 4)); \

1955 
	`gíî©e_°‹e_ªg
(
a0
, 
ba£_ªg
) \

1956 

	)

1957 
	#thumb_block_addªss_po°adju°_p›_pc
(
ba£_ªg
) \

1958 
	`gíî©e_add_ªg_ªg_imm
(
a0
, 
s0
, ((
bô_cou¡
[
ªg_li°
] + 1) * 4)); \

1959 
	`gíî©e_°‹e_ªg
(
a0
, 
ba£_ªg
) \

1960 

	)

1961 
	#thumb_block_addªss_po°adju°_push_Ã
(
ba£_ªg
) \

1962 
	`gíî©e_°‹e_ªg
(
s0
, 
ba£_ªg
) \

1963 

	)

1964 
	#thumb_block_mem‹y_exåa_no
() \

1965 

	)

1966 
	#thumb_block_mem‹y_exåa_up
() \

1967 

	)

1968 
	#thumb_block_mem‹y_exåa_down
() \

1969 

	)

1970 
	#thumb_block_mem‹y_exåa_p›_pc
() \

1971 
	`gíî©e_add_ªg_ªg_imm
(
a0
, 
s0
, (
bô_cou¡
[
ªg_li°
] * 4)); \

1972 
	`gíî©e_fun˘i⁄_ˇŒ
(
execuã_Æig√d_lﬂd32
); \

1973 
	`gíî©e_°‹e_ªg
(
rv
, 
REG_PC
); \

1974 
	`gíî©e_mov
(
a0
, 
rv
); \

1975 
	`gíî©e_ödúe˘_bønch_cy˛e_upd©e
(
thumb
) \

1976 

	)

1977 
	#thumb_block_mem‹y_exåa_push_Ã
(
ba£_ªg
) \

1978 
	`gíî©e_add_ªg_ªg_imm
(
a0
, 
s0
, (
bô_cou¡
[
ªg_li°
] * 4)); \

1979 
	`gíî©e_lﬂd_ªg
(
a1
, 
REG_LR
); \

1980 
	`gíî©e_fun˘i⁄_ˇŒ
(
execuã_Æig√d_°‹e32
) \

1981 

	)

1982 
	#thumb_block_mem‹y_lﬂd
() \

1983 
	`gíî©e_fun˘i⁄_ˇŒ
(
execuã_Æig√d_lﬂd32
); \

1984 
	`gíî©e_°‹e_ªg
(
rv
, 
i
) \

1985 

	)

1986 
	#thumb_block_mem‹y_°‹e
() \

1987 
	`gíî©e_lﬂd_ªg
(
a1
, 
i
); \

1988 
	`gíî©e_fun˘i⁄_ˇŒ
(
execuã_Æig√d_°‹e32
) \

1989 

	)

1990 
	#thumb_block_mem‹y_föÆ_lﬂd
() \

1991 
	`thumb_block_mem‹y_lﬂd
() \

1992 

	)

1993 
	#thumb_block_mem‹y_föÆ_°‹e
() \

1994 
	`gíî©e_lﬂd_ªg
(
a1
, 
i
); \

1995 
	`gíî©e_lﬂd_pc
(
a2
, (
pc
 + 2)); \

1996 
	`gíî©e_fun˘i⁄_ˇŒ
(
execuã_°‹e_u32
) \

1997 

	)

1998 
	#thumb_block_mem‹y_föÆ_no
(
ac˚ss_ty≥
) \

1999 
thumb_block_mem‹y_föÆ_
##
	`ac˚ss_ty≥
() \

2000 

	)

2001 
	#thumb_block_mem‹y_föÆ_up
(
ac˚ss_ty≥
) \

2002 
thumb_block_mem‹y_föÆ_
##
	`ac˚ss_ty≥
() \

2003 

	)

2004 
	#thumb_block_mem‹y_föÆ_down
(
ac˚ss_ty≥
) \

2005 
thumb_block_mem‹y_föÆ_
##
	`ac˚ss_ty≥
() \

2006 

	)

2007 
	#thumb_block_mem‹y_föÆ_push_Ã
(
ac˚ss_ty≥
) \

2008 
thumb_block_mem‹y_
##
	`ac˚ss_ty≥
() \

2009 

	)

2010 
	#thumb_block_mem‹y_föÆ_p›_pc
(
ac˚ss_ty≥
) \

2011 
thumb_block_mem‹y_
##
	`ac˚ss_ty≥
() \

2012 

	)

2013 
	#thumb_block_mem‹y
(
ac˚ss_ty≥
, 
¥e_›
, 
po°_›
, 
ba£_ªg
) \

2015 
	`thumb_decode_æi°
(); \

2016 
u32
 
i
; \

2017 
u32
 
off£t
 = 0; \

2019 
	`gíî©e_lﬂd_ªg
(
s0
, 
ba£_ªg
); \

2020 
	`gíî©e_™d_imm
(
s0
, ~0x03); \

2021 
thumb_block_addªss_¥ódju°_
##
	`¥e_›
(); \

2022 
thumb_block_addªss_po°adju°_
##
	`po°_›
(
ba£_ªg
); \

2024 
i
 = 0; i < 8; i++) \

2026 if((
ªg_li°
 >> 
i
) & 0x01) \

2028 
cy˛e_cou¡
++; \

2029 
	`gíî©e_add_ªg_ªg_imm
(
a0
, 
s0
, 
off£t
) \

2030 if(
ªg_li°
 & ~((2 << 
i
) - 1)) \

2032 
thumb_block_mem‹y_
##
	`ac˚ss_ty≥
(); \

2033 
off£t
 += 4; \

2037 
thumb_block_mem‹y_föÆ_
##
	`po°_›
(
ac˚ss_ty≥
); \

2042 
thumb_block_mem‹y_exåa_
##
	`po°_›
(); \

2044 

	)

2046 
	#thumb_c⁄dôi⁄Æ_bønch
(
c⁄dôi⁄
) \

2048 
c⁄dôi⁄_check_ty≥
 
c⁄dôi⁄_check
; \

2049 
	`gíî©e_cy˛e_upd©e
(); \

2050 
gíî©e_c⁄dôi⁄_
##
	`c⁄dôi⁄
(
a0
, 
a1
); \

2051 
	`gíî©e_c⁄dôi⁄Æ_bønch_ty≥
(
a0
, 
a1
); \

2052 
	`gíî©e_bønch_no_cy˛e_upd©e
( \

2053 
block_exôs
[
block_exô_posôi⁄
].
bønch_sour˚
, \

2054 
block_exôs
[
block_exô_posôi⁄
].
bønch_èrgë
); \

2055 
	`gíî©e_bønch_∑tch_c⁄dôi⁄Æ
(
back∑tch_addªss
, 
å™¶©i⁄_±r
); \

2056 
block_exô_posôi⁄
++; \

2058 

	)

2059 
	#Êags_v¨s
(
§c_a
, 
§c_b
) \

2060 
u32
 
de°
; \

2061 c⁄° 
u32
 
_ß
 = 
§c_a
; \

2062 c⁄° 
u32
 
_sb
 = 
§c_b
 \

2063 

	)

2064 
	#d©a_¥oc_gíî©e_logic_fun˘i⁄
(
«me
, 
ex¥
) \

2065 
u32
 
fun˘i⁄_cc
 
execuã_
##
	`«me
(u32 
rm
, u32 
∫
) \

2067  
ex¥
; \

2070 
u32
 
fun˘i⁄_cc
 
execuã_
##
«me
##
	`s
(u32 
rm
, u32 
∫
) \

2072 
u32
 
de°
 = 
ex¥
; \

2073 
	`ˇlcuœã_z_Êag
(
de°
); \

2074 
	`ˇlcuœã_n_Êag
(
de°
); \

2075  
ex¥
; \

2077 

	)

2078 
	#d©a_¥oc_gíî©e_logic_u«ry_fun˘i⁄
(
«me
, 
ex¥
) \

2079 
u32
 
fun˘i⁄_cc
 
execuã_
##
	`«me
(u32 
rm
) \

2081  
ex¥
; \

2084 
u32
 
fun˘i⁄_cc
 
execuã_
##
«me
##
	`s
(u32 
rm
) \

2086 
u32
 
de°
 = 
ex¥
; \

2087 
	`ˇlcuœã_z_Êag
(
de°
); \

2088 
	`ˇlcuœã_n_Êag
(
de°
); \

2089  
ex¥
; \

2091 

	)

2093 
	#d©a_¥oc_gíî©e_sub_fun˘i⁄
(
«me
, 
§c_a
, 
§c_b
) \

2094 
u32
 
fun˘i⁄_cc
 
execuã_
##
	`«me
(u32 
rm
, u32 
∫
) \

2096  (
§c_a
Ë- (
§c_b
); \

2099 
u32
 
fun˘i⁄_cc
 
execuã_
##
«me
##
	`s
(u32 
rm
, u32 
∫
) \

2101 
	`Êags_v¨s
(
§c_a
, 
§c_b
); \

2102 
de°
 = 
_ß
 - 
_sb
; \

2103 
	`ˇlcuœã_Êags_sub
(
de°
, 
_ß
, 
_sb
); \

2104  
de°
; \

2106 

	)

2107 
	#d©a_¥oc_gíî©e_add_fun˘i⁄
(
«me
, 
§c_a
, 
§c_b
) \

2108 
u32
 
fun˘i⁄_cc
 
execuã_
##
	`«me
(u32 
rm
, u32 
∫
) \

2110  (
§c_a
Ë+ (
§c_b
); \

2113 
u32
 
fun˘i⁄_cc
 
execuã_
##
«me
##
	`s
(u32 
rm
, u32 
∫
) \

2115 
	`Êags_v¨s
(
§c_a
, 
§c_b
); \

2116 
de°
 = 
_ß
 + 
_sb
; \

2117 
	`ˇlcuœã_Êags_add
(
de°
, 
_ß
, 
_sb
); \

2118  
de°
; \

2120 

	)

2121 
	#d©a_¥oc_gíî©e_sub_ã°_fun˘i⁄
(
«me
, 
§c_a
, 
§c_b
) \

2122 
fun˘i⁄_cc
 
execuã_
##
	`«me
(
u32
 
rm
, u32 
∫
) \

2124 
	`Êags_v¨s
(
§c_a
, 
§c_b
); \

2125 
de°
 = 
_ß
 - 
_sb
; \

2126 
	`ˇlcuœã_Êags_sub
(
de°
, 
_ß
, 
_sb
); \

2128 

	)

2129 
	#d©a_¥oc_gíî©e_add_ã°_fun˘i⁄
(
«me
, 
§c_a
, 
§c_b
) \

2130 
fun˘i⁄_cc
 
execuã_
##
	`«me
(
u32
 
rm
, u32 
∫
) \

2132 
	`Êags_v¨s
(
§c_a
, 
§c_b
); \

2133 
de°
 = 
_ß
 + 
_sb
; \

2134 
	`ˇlcuœã_Êags_add
(
de°
, 
_ß
, 
_sb
); \

2136 

	)

2137 
	#d©a_¥oc_gíî©e_logic_ã°_fun˘i⁄
(
«me
, 
ex¥
) \

2138 
fun˘i⁄_cc
 
execuã_
##
	`«me
(
u32
 
rm
, u32 
∫
) \

2140 
u32
 
de°
 = 
ex¥
; \

2141 
	`ˇlcuœã_z_Êag
(
de°
); \

2142 
	`ˇlcuœã_n_Êag
(
de°
); \

2144 

	)

2145 
u32
 
fun˘i⁄_cc
 
execuã_√g
(u32 
rm
) \

2147 
u32
 
	gde°
 = 0 - 
rm
; \

2148 
ˇlcuœã_Êags_sub
(
de°
, 0, 
rm
); \

2149  
	gde°
; \

2154 
d©a_¥oc_gíî©e_logic_fun˘i⁄
(
™d
, 
∫
 & 
rm
);

2155 
d©a_¥oc_gíî©e_logic_fun˘i⁄
(
e‹
, 
∫
 ^ 
rm
);

2156 
d©a_¥oc_gíî©e_logic_fun˘i⁄
(
‹r
, 
∫
 | 
rm
);

2157 
d©a_¥oc_gíî©e_logic_fun˘i⁄
(
bic
, 
∫
 & (~
rm
));

2158 
d©a_¥oc_gíî©e_logic_fun˘i⁄
(
mul
, 
∫
 * 
rm
);

2159 
d©a_¥oc_gíî©e_logic_u«ry_fun˘i⁄
(
mov
, 
rm
);

2160 
d©a_¥oc_gíî©e_logic_u«ry_fun˘i⁄
(
mvn
, ~
rm
);

2162 
d©a_¥oc_gíî©e_sub_fun˘i⁄
(
sub
, 
∫
, 
rm
);

2163 
d©a_¥oc_gíî©e_sub_fun˘i⁄
(
rsb
, 
rm
, 
∫
);

2164 
d©a_¥oc_gíî©e_sub_fun˘i⁄
(
sbc
, 
∫
, (
rm
 + (
ªg
[
REG_C_FLAG
] ^ 1)));

2165 
d©a_¥oc_gíî©e_sub_fun˘i⁄
(
rsc
, (
rm
 + 
ªg
[
REG_C_FLAG
] - 1), 
∫
);

2166 
d©a_¥oc_gíî©e_add_fun˘i⁄
(
add
, 
∫
, 
rm
);

2167 
d©a_¥oc_gíî©e_add_fun˘i⁄
(
adc
, 
∫
, 
rm
 + 
ªg
[
REG_C_FLAG
]);

2169 
d©a_¥oc_gíî©e_logic_ã°_fun˘i⁄
(
t°
, 
∫
 & 
rm
);

2170 
d©a_¥oc_gíî©e_logic_ã°_fun˘i⁄
(
ãq
, 
∫
 ^ 
rm
);

2171 
d©a_¥oc_gíî©e_sub_ã°_fun˘i⁄
(
cmp
, 
∫
, 
rm
);

2172 
d©a_¥oc_gíî©e_add_ã°_fun˘i⁄
(
cmn
, 
∫
, 
rm
);

2174 
u32
 
fun˘i⁄_cc
 
	$execuã_swi
(
u32
 
pc
)

2176 
ªg_mode
[
MODE_SUPERVISOR
][6] = 
pc
;

2177 
	`cﬁœp£_Êags
();

2178 
•§
[
MODE_SUPERVISOR
] = 
ªg
[
REG_CPSR
];

2179 
ªg
[
REG_CPSR
] = (reg[REG_CPSR] & ~0x3F) | 0x13;

2180 
	`£t_˝u_mode
(
MODE_SUPERVISOR
);

2181 
	}
}

2183 
	#¨m_c⁄dôi⁄Æ_block_hódî
() \

2185 
c⁄dôi⁄_check_ty≥
 
c⁄dôi⁄_check
; \

2186 
	`gíî©e_c⁄dôi⁄
(
a0
, 
a1
); \

2187 
	`gíî©e_c⁄dôi⁄Æ_bønch_ty≥
(
a0
, 
a1
); \

2188 }

	)

2190 
	#¨m_b
() \

2191 
	`gíî©e_bønch
() \

2192 

	)

2193 
	#¨m_bl
() \

2194 
	`gíî©e_upd©e_pc
((
pc
 + 4)); \

2195 
	`gíî©e_°‹e_ªg
(
a0
, 
REG_LR
); \

2196 
	`gíî©e_bønch
() \

2197 

	)

2198 
	#¨m_bx
() \

2199 
	`¨m_decode_bønchx
(); \

2200 
	`gíî©e_lﬂd_ªg
(
a0
, 
∫
); \

2201 
	`gíî©e_ödúe˘_bønch_duÆ
(); \

2202 

	)

2203 
	#¨m_swi
() \

2204 
	`gíî©e_swi_hÀ_h™dÀr
((
›code
 >> 16) & 0xFF); \

2205 
	`gíî©e_upd©e_pc
((
pc
 + 4)); \

2206 
	`gíî©e_fun˘i⁄_ˇŒ
(
execuã_swi
); \

2207 
	`gíî©e_bønch
() \

2208 

	)

2209 
	#thumb_b
() \

2210 
	`gíî©e_bønch_cy˛e_upd©e
( \

2211 
block_exôs
[
block_exô_posôi⁄
].
bønch_sour˚
, \

2212 
block_exôs
[
block_exô_posôi⁄
].
bønch_èrgë
); \

2213 
block_exô_posôi⁄
++ \

2214 

	)

2215 
	#thumb_bl
() \

2216 
	`gíî©e_upd©e_pc
(((
pc
 + 2) | 0x01)); \

2217 
	`gíî©e_°‹e_ªg
(
a0
, 
REG_LR
); \

2218 
	`gíî©e_bønch_cy˛e_upd©e
( \

2219 
block_exôs
[
block_exô_posôi⁄
].
bønch_sour˚
, \

2220 
block_exôs
[
block_exô_posôi⁄
].
bønch_èrgë
); \

2221 
block_exô_posôi⁄
++ \

2222 

	)

2223 
	#thumb_blh
() \

2225 
	`thumb_decode_bønch
(); \

2226 
	`gíî©e_upd©e_pc
(((
pc
 + 2) | 0x01)); \

2227 
	`gíî©e_lﬂd_ªg
(
a1
, 
REG_LR
); \

2228 
	`gíî©e_°‹e_ªg
(
a0
, 
REG_LR
); \

2229 
	`gíî©e_mov
(
a0
, 
a1
); \

2230 
	`gíî©e_add_imm
(
a0
, (
off£t
 * 2)); \

2231 
	`gíî©e_ödúe˘_bønch_cy˛e_upd©e
(
thumb
); \

2233 

	)

2234 
	#thumb_bx
() \

2236 
	`thumb_decode_húeg_›
(); \

2237 
	`gíî©e_lﬂd_ªg_pc
(
a0
, 
rs
, 4); \

2238 
	`gíî©e_ödúe˘_bønch_cy˛e_upd©e
(
duÆ
); \

2240 

	)

2241 
	#thumb_swi
() \

2242 
	`gíî©e_swi_hÀ_h™dÀr
(
›code
 & 0xFF); \

2243 
	`gíî©e_upd©e_pc
((
pc
 + 2)); \

2244 
	`gíî©e_fun˘i⁄_ˇŒ
(
execuã_swi
); \

2245 
	`gíî©e_bønch_cy˛e_upd©e
( \

2246 
block_exôs
[
block_exô_posôi⁄
].
bønch_sour˚
, \

2247 
block_exôs
[
block_exô_posôi⁄
].
bønch_èrgë
); \

2248 
block_exô_posôi⁄
++ \

2249 

	)

2250 
u8
 
	gswi_hÀ_h™dÀ
[256] =

2297 
fun˘i⁄_cc
 
	$swi_hÀ_div
()

2299 
s32
 
ªsu…
 = (s32)
ªg
[0] / (s32)reg[1];

2300 
ªg
[1] = (
s32
)reg[0] % (s32)reg[1];

2301 
ªg
[0] = 
ªsu…
;

2302 
ªg
[3] = (
ªsu…
 ^ (result >> 31)) - (result >> 31);

2303 
	}
}

2305 
	#gíî©e_swi_hÀ_h™dÀr
(
_swi_numbî
) \

2307 
u32
 
swi_numbî
 = 
_swi_numbî
; \

2308 if(
swi_hÀ_h™dÀ
[
swi_numbî
]) \

2311 if(
swi_numbî
 == 0x06) \

2313 
	`gíî©e_fun˘i⁄_ˇŒ
(
swi_hÀ_div
); \

2318 

	)

2319 
	#gíî©e_å™¶©i⁄_g©e
(
ty≥
) \

2320 
	`gíî©e_upd©e_pc
(
pc
); \

2321 
	`gíî©e_ödúe˘_bønch_no_cy˛e_upd©e
(
ty≥
) \

2322 

	)

2323 
	#gíî©e_°ï_debug
() \

2324 
	`gíî©e_lﬂd_imm
(
a0
, 
pc
); \

2325 
	`gíî©e_fun˘i⁄_ˇŒ
(
°ï_debug_x86
) \

2326 

	)

	@zip.c

21 
	~<zlib.h
>

22 
	~"comm⁄.h
"

24 
	#ZIP_BUFFER_SIZE
 (128 * 1024)

	)

26 
	sSZIPFûeD©aDes¸ùt‹


28 
s32
 
	mCRC32
;

29 
s32
 
	mCom¥es£dSize
;

30 
s32
 
	mUncom¥es£dSize
;

31 } 
__©åibuã__
((
∑cked
));

33 
	sSZIPFûeHódî


35 
	mSig
[4];

36 
s16
 
	mVîsi⁄ToExåa˘
;

37 
s16
 
	mGíîÆBôFœg
;

38 
s16
 
	mCom¥essi⁄Mëhod
;

39 
s16
 
	mLa°ModFûeTime
;

40 
s16
 
	mLa°ModFûeD©e
;

41 
SZIPFûeD©aDes¸ùt‹
 
	mD©aDes¸ùt‹
;

42 
s16
 
	mFûíameLígth
;

43 
s16
 
	mExåaFõldLígth
;

44 } 
__©åibuã__
((
∑cked
));

46 
u32
 
	$lﬂd_fûe_zù
(*
fûíame
)

48 
SZIPFûeHódî
 
d©a
;

49 
u8
 
tmp
[1024];

50 
s32
 
ªtvÆ
 = -1;

51 
u8
 *
buf„r
 = 
NULL
;

52 
u8
 *
cbuf„r
;

53 
u8
 *
ext
;

55 
	`fûe_›í
(
fd
, 
fûíame
, 
ªad
);

57 if(!
	`fûe_check_vÆid
(
fd
))

64 
	`fûe_ªad
(
fd
, &
d©a
, (
SZIPFûeHódî
));

69 if–
d©a
.
Sig
[0] != 0x50 || data.Sig[1] != 0x4B ||

70 
d©a
.
Sig
[2] != 0x03 || data.Sig[3] != 0x04 )

72 
outcode
;

75 
	`fûe_ªad
(
fd
, 
tmp
, 
d©a
.
FûíameLígth
);

76 
tmp
[
d©a
.
FûíameLígth
] = 0;

78 if(
d©a
.
ExåaFõldLígth
)

79 
	`fûe_£ek
(
fd
, 
d©a
.
ExåaFõldLígth
, 
SEEK_CUR
);

81 if(
d©a
.
GíîÆBôFœg
 & 0x0008)

83 
	`fûe_ªad
(
fd
, &
d©a
.
D©aDes¸ùt‹
,

84 (
SZIPFûeD©aDes¸ùt‹
));

87 
ext
 = 
	`°ºchr
(
tmp
, '.') + 1;

90 if(
d©a
.
D©aDes¸ùt‹
.
Uncom¥es£dSize
 > 
gamïak_øm_buf„r_size
)

91 
outcode
;

93 if(!
	`°rˇ£cmp
(
ext
, "bin") || !strcasecmp(ext, "gba"))

95 
buf„r
 = 
gamïak_rom
;

98 
d©a
.
Com¥essi⁄Mëhod
)

101 
ªtvÆ
 = 
d©a
.
D©aDes¸ùt‹
.
Uncom¥es£dSize
;

102 
	`fûe_ªad
(
fd
, 
buf„r
, 
ªtvÆ
);

104 
outcode
;

108 
z_°ªam
 
°ªam
;

109 
s32
 
îr
;

111 
cbuf„r
 = 
	`mÆloc
(
ZIP_BUFFER_SIZE
);

113 
°ªam
.
√xt_ö
 = (
Byãf
*)
cbuf„r
;

114 
°ªam
.
avaû_ö
 = (
u32
)
ZIP_BUFFER_SIZE
;

116 
°ªam
.
√xt_out
 = (
Byãf
*)
buf„r
;

119 
ªtvÆ
 = (
u32
)
d©a
.
D©aDes¸ùt‹
.
Uncom¥es£dSize
;

120 
°ªam
.
avaû_out
 = 
d©a
.
D©aDes¸ùt‹
.
Uncom¥es£dSize
;

122 
°ªam
.
zÆloc
 = (
Æloc_func
)0;

123 
°ªam
.
z‰ì
 = (
‰ì_func
)0;

125 
îr
 = 
	`öÊ©eInô2
(&
°ªam
, -
MAX_WBITS
);

127 
	`fûe_ªad
(
fd
, 
cbuf„r
, 
ZIP_BUFFER_SIZE
);

129 if(
îr
 =
Z_OK
)

131 
îr
 !
Z_STREAM_END
)

133 
îr
 = 
	`öÊ©e
(&
°ªam
, 
Z_SYNC_FLUSH
);

134 if(
îr
 =
Z_BUF_ERROR
)

136 
°ªam
.
avaû_ö
 = 
ZIP_BUFFER_SIZE
;

137 
°ªam
.
√xt_ö
 = (
Byãf
*)
cbuf„r
;

138 
	`fûe_ªad
(
fd
, 
cbuf„r
, 
ZIP_BUFFER_SIZE
);

141 
îr
 = 
Z_OK
;

142 
	`öÊ©eEnd
(&
°ªam
);

144 
	`‰ì
(
cbuf„r
);

145 
outcode
;

151 
outcode
:

152 
	`fûe_˛o£
(
fd
);

154  
ªtvÆ
;

155 
	}
}

	@zip.h

20 #i‚de‡
COMMON_H


21 
	#COMMON_H


	)

23 
u32
 
lﬂd_fûe_zù
(*
fûíame
);

	@/usr/include/ctype.h

24 #i‚def 
_CTYPE_H


25 
	#_CTYPE_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 
	g__BEGIN_DECLS


32 #i‚de‡
_ISbô


41 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

45 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

50 
	m_ISuµî
 = 
_ISbô
 (0),

51 
	m_ISlowî
 = 
_ISbô
 (1),

52 
	m_ISÆpha
 = 
_ISbô
 (2),

53 
	m_ISdigô
 = 
_ISbô
 (3),

54 
	m_ISxdigô
 = 
_ISbô
 (4),

55 
	m_IS•a˚
 = 
_ISbô
 (5),

56 
	m_IS¥öt
 = 
_ISbô
 (6),

57 
	m_ISgøph
 = 
_ISbô
 (7),

58 
	m_ISbœnk
 = 
_ISbô
 (8),

59 
	m_IS˙ål
 = 
_ISbô
 (9),

60 
	m_ISpun˘
 = 
_ISbô
 (10),

61 
	m_ISÆnum
 = 
_ISbô
 (11)

81 
__c⁄°
 **
	$__˘y≥_b_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

83 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

85 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

86 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

91 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

92 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

94 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

96 
__BEGIN_NAMESPACE_STD


102 
	`__ex˘y≥
 (
iß um
);

103 
	`__ex˘y≥
 (
ißÕha
);

104 
	`__ex˘y≥
 (
is˙ål
);

105 
	`__ex˘y≥
 (
isdigô
);

106 
	`__ex˘y≥
 (
i¶owî
);

107 
	`__ex˘y≥
 (
isgøph
);

108 
	`__ex˘y≥
 (
i•röt
);

109 
	`__ex˘y≥
 (
i•un˘
);

110 
	`__ex˘y≥
 (
is•a˚
);

111 
	`__ex˘y≥
 (
isuµî
);

112 
	`__ex˘y≥
 (
isxdigô
);

116 
	$tﬁowî
 (
__c
Ë
__THROW
;

119 
	$touµî
 (
__c
Ë
__THROW
;

121 
__END_NAMESPACE_STD


125 #ifdef 
__USE_ISOC99


126 
__BEGIN_NAMESPACE_C99


128 
	`__ex˘y≥
 (
isbœnk
);

130 
__END_NAMESPACE_C99


133 #ifde‡
__USE_GNU


135 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

138 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


142 
	$ißscii
 (
__c
Ë
__THROW
;

146 
	$tﬂscii
 (
__c
Ë
__THROW
;

150 
	`__ex˘y≥
 (
_touµî
);

151 
	`__ex˘y≥
 (
_tﬁowî
);

155 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

156 (
__exãnsi⁄__
 \

157 ({ 
__ªs
; \

158 i‡( (
c
) > 1) \

160 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

162 
__c
 = (
c
); \

163 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

166 
__ªs
 = 
f
 
¨gs
; \

169 
__ªs
 = (
a
)[(Ë(
c
)]; \

170 
__ªs
; 
	}
}))

	)

172 #i‡!
deföed
 
__NO_CTYPE
 && !deföed 
__˝lu•lus


173 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

174 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

175 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

176 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

177 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

178 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

179 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

180 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

181 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

182 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

183 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

185 #ifde‡
__USE_ISOC99


186 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

189 #ifde‡
__USE_EXTERN_INLINES


190 
__exã∫_ölöe
 

191 
__NTH
 (
	$tﬁowî
 (
__c
))

193  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

194 
	}
}

196 
__exã∫_ölöe
 

197 
__NTH
 (
	$touµî
 (
__c
))

199  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

200 
	}
}

203 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


204 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

205 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

208 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


209 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

210 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

212 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

213 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

219 #ifde‡
__USE_GNU


233 
	~<xloˇÀ.h
>

237 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

238 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

240 
	#__ex˘y≥_l
(
«me
) \

241 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

247 
__ex˘y≥_l
 (
iß um_l
);

248 
__ex˘y≥_l
 (
ißÕha_l
);

249 
__ex˘y≥_l
 (
is˙ål_l
);

250 
__ex˘y≥_l
 (
isdigô_l
);

251 
__ex˘y≥_l
 (
i¶owî_l
);

252 
__ex˘y≥_l
 (
isgøph_l
);

253 
__ex˘y≥_l
 (
i•röt_l
);

254 
__ex˘y≥_l
 (
i•un˘_l
);

255 
__ex˘y≥_l
 (
is•a˚_l
);

256 
__ex˘y≥_l
 (
isuµî_l
);

257 
__ex˘y≥_l
 (
isxdigô_l
);

259 
__ex˘y≥_l
 (
isbœnk_l
);

263 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

264 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

267 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

268 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

270 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


271 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

272 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

273 
	#__touµî_l
(
c
, 
loˇÀ
) \

274 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

275 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

276 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

280 #i‚de‡
__NO_CTYPE


281 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

282 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

283 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

284 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

285 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

286 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

287 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

288 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

289 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

290 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

291 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

293 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

295 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


296 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

297 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

300 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

301 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

302 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

303 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

304 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

305 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

306 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

307 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

308 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

309 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

310 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

312 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

314 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


315 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

316 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

323 
__END_DECLS


	@/usr/include/dirent.h

23 #i‚def 
_DIRENT_H


24 
	#_DIRENT_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/ty≥s.h
>

32 #ifde‡
__USE_XOPEN


33 #i‚de‡
__öo_t_deföed


34 #i‚de‡
__USE_FILE_OFFSET64


35 
__öo_t
 
	töo_t
;

37 
__öo64_t
 
	töo_t
;

39 
	#__öo_t_deföed


	)

41 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


42 
__öo64_t
 
	töo64_t
;

43 
	#__öo64_t_deföed


	)

62 
	~<bôs/dúít.h
>

64 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
Ë&& !deföed 
d_fûío


65 
	#d_öo
 
d_fûío


	)

82 #ifde‡
_DIRENT_HAVE_D_NAMLEN


83 
	#_D_EXACT_NAMLEN
(
d
Ë((d)->
d_«mÀn
)

	)

84 
	#_D_ALLOC_NAMLEN
(
d
Ë(
	`_D_EXACT_NAMLEN
 (dË+ 1)

	)

86 
	#_D_EXACT_NAMLEN
(
d
Ë(
	`°æí
 ((d)->
d_«me
))

	)

87 #ifde‡
_DIRENT_HAVE_D_RECLEN


88 
	#_D_ALLOC_NAMLEN
(
d
Ë(((*Ë(dË+ (d)->
d_ª˛í
Ë- &(d)->
d_«me
[0])

	)

90 
	#_D_ALLOC_NAMLEN
(
d
Ë( (d)->
d_«me
 > 1 ?  (d)->d_name : \

91 
	`_D_EXACT_NAMLEN
 (
d
Ë+ 1)

	)

96 #ifde‡
__USE_BSD


100 
	mDT_UNKNOWN
 = 0,

101 
	#DT_UNKNOWN
 
DT_UNKNOWN


	)

102 
	mDT_FIFO
 = 1,

103 
	#DT_FIFO
 
DT_FIFO


	)

104 
	mDT_CHR
 = 2,

105 
	#DT_CHR
 
DT_CHR


	)

106 
	mDT_DIR
 = 4,

107 
	#DT_DIR
 
DT_DIR


	)

108 
	mDT_BLK
 = 6,

109 
	#DT_BLK
 
DT_BLK


	)

110 
	mDT_REG
 = 8,

111 
	#DT_REG
 
DT_REG


	)

112 
	mDT_LNK
 = 10,

113 
	#DT_LNK
 
DT_LNK


	)

114 
	mDT_SOCK
 = 12,

115 
	#DT_SOCK
 
DT_SOCK


	)

116 
	mDT_WHT
 = 14

117 
	#DT_WHT
 
DT_WHT


	)

121 
	#IFTODT
(
mode
Ë(((modeË& 0170000Ë>> 12)

	)

122 
	#DTTOIF
(
dúty≥
Ë((dúty≥Ë<< 12)

	)

128 
__dú°ªam
 
	tDIR
;

135 
DIR
 *
	$›ídú
 (
__c⁄°
 *
__«me
Ë
	`__n⁄nuŒ
 ((1));

137 #ifde‡
__USE_GNU


142 
DIR
 *
	`fd›ídú
 (
__fd
);

150 
	$˛o£dú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

162 #i‚de‡
__USE_FILE_OFFSET64


163 
dúít
 *
	$ªaddú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

165 #ifde‡
__REDIRECT


166 
dúít
 *
	`__REDIRECT
 (
ªaddú
, (
DIR
 *
__dúp
), 
ªaddú64
)

167 
	`__n⁄nuŒ
 ((1));

169 
	#ªaddú
 
ªaddú64


	)

173 #ifde‡
__USE_LARGEFILE64


174 
dúít64
 *
	$ªaddú64
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

177 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


183 #i‚de‡
__USE_FILE_OFFSET64


184 
	$ªaddú_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

185 
dúít
 *
__ª°ri˘
 
__íåy
,

186 
dúít
 **
__ª°ri˘
 
__ªsu…
)

187 
	`__n⁄nuŒ
 ((1, 2, 3));

189 #ifde‡
__REDIRECT


190 
	`__REDIRECT
 (
ªaddú_r
,

191 (
DIR
 *
__ª°ri˘
 
__dúp
,

192 
dúít
 *
__ª°ri˘
 
__íåy
,

193 
dúít
 **
__ª°ri˘
 
__ªsu…
),

194 
ªaddú64_r
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

196 
	#ªaddú_r
 
ªaddú64_r


	)

200 #ifde‡
__USE_LARGEFILE64


201 
	$ªaddú64_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

202 
dúít64
 *
__ª°ri˘
 
__íåy
,

203 
dúít64
 **
__ª°ri˘
 
__ªsu…
)

204 
	`__n⁄nuŒ
 ((1, 2, 3));

209 
	$ªwöddú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

211 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


212 
	~<bôs/ty≥s.h
>

215 
	$£ekdú
 (
DIR
 *
__dúp
, 
__pos
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

218 
	$ãŒdú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

221 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC


224 
	$dúfd
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

226 #i‡
deföed
 
__OPTIMIZE__
 && deföed 
_DIR_dúfd


227 
	#dúfd
(
dúp
Ë
	`_DIR_dúfd
 (dúp)

	)

230 #i‚de‡
MAXNAMLEN


232 
	~<bôs/posix1_lim.h
>

235 #ifde‡
NAME_MAX


236 
	#MAXNAMLEN
 
NAME_MAX


	)

238 
	#MAXNAMLEN
 255

	)

242 
	#__√ed_size_t


	)

243 
	~<°ddef.h
>

249 #i‚de‡
__USE_FILE_OFFSET64


250 
	`sˇndú
 (
__c⁄°
 *
__ª°ri˘
 
__dú
,

251 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

252 (*
__£À˘‹
Ë(
__c⁄°
 
dúít
 *),

253 (*
__cmp
Ë(
__c⁄°
 *, __const *))

254 
	`__n⁄nuŒ
 ((1, 2));

256 #ifde‡
__REDIRECT


257 
	`__REDIRECT
 (
sˇndú
,

258 (
__c⁄°
 *
__ª°ri˘
 
__dú
,

259 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

260 (*
__£À˘‹
Ë(
__c⁄°
 
dúít
 *),

261 (*
__cmp
Ë(
__c⁄°
 *, __const *)),

262 
sˇndú64
Ë
	`__n⁄nuŒ
 ((1, 2));

264 
	#sˇndú
 
sˇndú64


	)

268 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


271 
	`sˇndú64
 (
__c⁄°
 *
__ª°ri˘
 
__dú
,

272 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

273 (*
__£À˘‹
Ë(
__c⁄°
 
dúít64
 *),

274 (*
__cmp
Ë(
__c⁄°
 *, __const *))

275 
	`__n⁄nuŒ
 ((1, 2));

279 #i‚de‡
__USE_FILE_OFFSET64


280 
	$Æphas‹t
 (
__c⁄°
 *
__e1
, __c⁄° *
__e2
)

281 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

283 #ifde‡
__REDIRECT


284 
	`__REDIRECT_NTH
 (
Æphas‹t
,

285 (
__c⁄°
 *
__e1
, __c⁄° *
__e2
),

286 
Æphas‹t64
Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 
	#Æphas‹t
 
Æphas‹t64


	)

292 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


293 
	$Æphas‹t64
 (
__c⁄°
 *
__e1
, __c⁄° *
__e2
)

294 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

297 #ifde‡
__USE_GNU


299 #i‚de‡
__USE_FILE_OFFSET64


300 
	$vîsi⁄s‹t
 (
__c⁄°
 *
__e1
, __c⁄° *
__e2
)

301 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

303 #ifde‡
__REDIRECT


304 
	`__REDIRECT_NTH
 (
vîsi⁄s‹t
,

305 (
__c⁄°
 *
__e1
, __c⁄° *
__e2
),

306 
vîsi⁄s‹t64
)

307 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

309 
	#vîsi⁄s‹t
 
vîsi⁄s‹t64


	)

313 #ifde‡
__USE_LARGEFILE64


314 
	$vîsi⁄s‹t64
 (
__c⁄°
 *
__e1
, __c⁄° *
__e2
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

323 #i‚de‡
__USE_FILE_OFFSET64


324 
__ssize_t
 
	$gëdúíåõs
 (
__fd
, *
__ª°ri˘
 
__buf
,

325 
size_t
 
__nbyãs
,

326 
__off_t
 *
__ª°ri˘
 
__ba£p
)

327 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

329 #ifde‡
__REDIRECT


330 
__ssize_t
 
	`__REDIRECT_NTH
 (
gëdúíåõs
,

331 (
__fd
, *
__ª°ri˘
 
__buf
,

332 
size_t
 
__nbyãs
,

333 
__off64_t
 *
__ª°ri˘
 
__ba£p
),

334 
gëdúíåõs64
Ë
	`__n⁄nuŒ
 ((2, 4));

336 
	#gëdúíåõs
 
gëdúíåõs64


	)

340 #ifde‡
__USE_LARGEFILE64


341 
__ssize_t
 
	$gëdúíåõs64
 (
__fd
, *
__ª°ri˘
 
__buf
,

342 
size_t
 
__nbyãs
,

343 
__off64_t
 *
__ª°ri˘
 
__ba£p
)

344 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

349 
__END_DECLS


	@/usr/include/fcntl.h

24 #i‚def 
_FCNTL_H


25 
	#_FCNTL_H
 1

	)

27 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 
	~<bôs/f˙é.h
>

37 #ifde‡
__USE_XOPEN


38 
	~<sys/°©.h
>

41 #ifdef 
__USE_MISC


42 #i‚de‡
R_OK


45 
	#R_OK
 4

	)

46 
	#W_OK
 2

	)

47 
	#X_OK
 1

	)

48 
	#F_OK
 0

	)

53 #ifde‡
__USE_XOPEN


54 
	#SEEK_SET
 0

	)

55 
	#SEEK_CUR
 1

	)

56 
	#SEEK_END
 2

	)

59 #ifde‡
__USE_ATFILE


60 
	#AT_FDCWD
 -100

	)

63 
	#AT_SYMLINK_NOFOLLOW
 0x100

	)

64 
	#AT_REMOVEDIR
 0x200

	)

66 
	#AT_SYMLINK_FOLLOW
 0x400

	)

67 
	#AT_EACCESS
 0x200

	)

76 
f˙é
 (
__fd
, 
__cmd
, ...);

84 #i‚de‡
__USE_FILE_OFFSET64


85 
	$›í
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

87 #ifde‡
__REDIRECT


88 
	`__REDIRECT
 (
›í
, (
__c⁄°
 *
__fûe
, 
__oÊag
, ...), 
›í64
)

89 
	`__n⁄nuŒ
 ((1));

91 
	#›í
 
›í64


	)

94 #ifde‡
__USE_LARGEFILE64


95 
	$›í64
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

98 #ifde‡
__USE_ATFILE


108 #i‚de‡
__USE_FILE_OFFSET64


109 
	$›í©
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

110 
	`__n⁄nuŒ
 ((2));

112 #ifde‡
__REDIRECT


113 
	`__REDIRECT
 (
›í©
, (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
,

114 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

116 
	#›í©
 
›í©64


	)

120 
	$›í©64
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

121 
	`__n⁄nuŒ
 ((2));

129 #i‚de‡
__USE_FILE_OFFSET64


130 
	$¸ót
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

132 #ifde‡
__REDIRECT


133 
	`__REDIRECT
 (
¸ót
, (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
),

134 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

136 
	#¸ót
 
¸ót64


	)

139 #ifde‡
__USE_LARGEFILE64


140 
	$¸ót64
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

143 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

144 && !
deföed
 
__USE_POSIX
))

153 
	#F_ULOCK
 0

	)

154 
	#F_LOCK
 1

	)

155 
	#F_TLOCK
 2

	)

156 
	#F_TEST
 3

	)

158 #i‚de‡
__USE_FILE_OFFSET64


159 
	`lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
);

161 #ifde‡
__REDIRECT


162 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

164 
	#lockf
 
lockf64


	)

167 #ifde‡
__USE_LARGEFILE64


168 
	`lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
);

172 #ifde‡
__USE_XOPEN2K


175 #i‚de‡
__USE_FILE_OFFSET64


176 
	$posix_Ádvi£
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
,

177 
__advi£
Ë
__THROW
;

179 #ifde‡
__REDIRECT_NTH


180 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

181 
__off64_t
 
__Àn
, 
__advi£
),

182 
posix_Ádvi£64
);

184 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

187 #ifde‡
__USE_LARGEFILE64


188 
	$posix_Ádvi£64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
,

189 
__advi£
Ë
__THROW
;

197 #i‚de‡
__USE_FILE_OFFSET64


198 
	`posix_ÁŒoˇã
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
);

200 #ifde‡
__REDIRECT


201 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

202 
__off64_t
 
__Àn
),

203 
posix_ÁŒoˇã64
);

205 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

208 #ifde‡
__USE_LARGEFILE64


209 
	`posix_ÁŒoˇã64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
);

215 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
 \

216 && 
deföed
 
__va_¨g_∑ck_Àn


217 
	~<bôs/f˙é2.h
>

220 
__END_DECLS


	@/usr/include/linux/fb.h

1 #i‚de‡
_LINUX_FB_H


2 
	#_LINUX_FB_H


	)

4 
	~<asm/ty≥s.h
>

5 
	~<löux/i2c.h
>

7 
	gdíåy
;

11 
	#FB_MAX
 32

	)

15 
	#FBIOGET_VSCREENINFO
 0x4600

	)

16 
	#FBIOPUT_VSCREENINFO
 0x4601

	)

17 
	#FBIOGET_FSCREENINFO
 0x4602

	)

18 
	#FBIOGETCMAP
 0x4604

	)

19 
	#FBIOPUTCMAP
 0x4605

	)

20 
	#FBIOPAN_DISPLAY
 0x4606

	)

21 
	#FBIO_CURSOR
 
	`_IOWR
('F', 0x08, 
fb_curs‹
)

	)

26 
	#FBIOGET_CON2FBMAP
 0x460F

	)

27 
	#FBIOPUT_CON2FBMAP
 0x4610

	)

28 
	#FBIOBLANK
 0x4611

	)

29 
	#FBIOGET_VBLANK
 
	`_IOR
('F', 0x12, 
fb_vbœnk
)

	)

30 
	#FBIO_ALLOC
 0x4613

	)

31 
	#FBIO_FREE
 0x4614

	)

32 
	#FBIOGET_GLYPH
 0x4615

	)

33 
	#FBIOGET_HWCINFO
 0x4616

	)

34 
	#FBIOPUT_MODEINFO
 0x4617

	)

35 
	#FBIOGET_DISPINFO
 0x4618

	)

38 
	#FB_TYPE_PACKED_PIXELS
 0

	)

39 
	#FB_TYPE_PLANES
 1

	)

40 
	#FB_TYPE_INTERLEAVED_PLANES
 2

	)

41 
	#FB_TYPE_TEXT
 3

	)

42 
	#FB_TYPE_VGA_PLANES
 4

	)

44 
	#FB_AUX_TEXT_MDA
 0

	)

45 
	#FB_AUX_TEXT_CGA
 1

	)

46 
	#FB_AUX_TEXT_S3_MMIO
 2

	)

47 
	#FB_AUX_TEXT_MGA_STEP16
 3

	)

48 
	#FB_AUX_TEXT_MGA_STEP8
 4

	)

49 
	#FB_AUX_TEXT_SVGA_GROUP
 8

	)

50 
	#FB_AUX_TEXT_SVGA_MASK
 7

	)

51 
	#FB_AUX_TEXT_SVGA_STEP2
 8

	)

52 
	#FB_AUX_TEXT_SVGA_STEP4
 9

	)

53 
	#FB_AUX_TEXT_SVGA_STEP8
 10

	)

54 
	#FB_AUX_TEXT_SVGA_STEP16
 11

	)

55 
	#FB_AUX_TEXT_SVGA_LAST
 15

	)

57 
	#FB_AUX_VGA_PLANES_VGA4
 0

	)

58 
	#FB_AUX_VGA_PLANES_CFB4
 1

	)

59 
	#FB_AUX_VGA_PLANES_CFB8
 2

	)

61 
	#FB_VISUAL_MONO01
 0

	)

62 
	#FB_VISUAL_MONO10
 1

	)

63 
	#FB_VISUAL_TRUECOLOR
 2

	)

64 
	#FB_VISUAL_PSEUDOCOLOR
 3

	)

65 
	#FB_VISUAL_DIRECTCOLOR
 4

	)

66 
	#FB_VISUAL_STATIC_PSEUDOCOLOR
 5

	)

68 
	#FB_ACCEL_NONE
 0

	)

69 
	#FB_ACCEL_ATARIBLITT
 1

	)

70 
	#FB_ACCEL_AMIGABLITT
 2

	)

71 
	#FB_ACCEL_S3_TRIO64
 3

	)

72 
	#FB_ACCEL_NCR_77C32BLT
 4

	)

73 
	#FB_ACCEL_S3_VIRGE
 5

	)

74 
	#FB_ACCEL_ATI_MACH64GX
 6

	)

75 
	#FB_ACCEL_DEC_TGA
 7

	)

76 
	#FB_ACCEL_ATI_MACH64CT
 8

	)

77 
	#FB_ACCEL_ATI_MACH64VT
 9

	)

78 
	#FB_ACCEL_ATI_MACH64GT
 10

	)

79 
	#FB_ACCEL_SUN_CREATOR
 11

	)

80 
	#FB_ACCEL_SUN_CGSIX
 12

	)

81 
	#FB_ACCEL_SUN_LEO
 13

	)

82 
	#FB_ACCEL_IMS_TWINTURBO
 14

	)

83 
	#FB_ACCEL_3DLABS_PERMEDIA2
 15

	)

84 
	#FB_ACCEL_MATROX_MGA2064W
 16

	)

85 
	#FB_ACCEL_MATROX_MGA1064SG
 17

	)

86 
	#FB_ACCEL_MATROX_MGA2164W
 18

	)

87 
	#FB_ACCEL_MATROX_MGA2164W_AGP
 19

	)

88 
	#FB_ACCEL_MATROX_MGAG100
 20

	)

89 
	#FB_ACCEL_MATROX_MGAG200
 21

	)

90 
	#FB_ACCEL_SUN_CG14
 22

	)

91 
	#FB_ACCEL_SUN_BWTWO
 23

	)

92 
	#FB_ACCEL_SUN_CGTHREE
 24

	)

93 
	#FB_ACCEL_SUN_TCX
 25

	)

94 
	#FB_ACCEL_MATROX_MGAG400
 26

	)

95 
	#FB_ACCEL_NV3
 27

	)

96 
	#FB_ACCEL_NV4
 28

	)

97 
	#FB_ACCEL_NV5
 29

	)

98 
	#FB_ACCEL_CT_6555x
 30

	)

99 
	#FB_ACCEL_3DFX_BANSHEE
 31

	)

100 
	#FB_ACCEL_ATI_RAGE128
 32

	)

101 
	#FB_ACCEL_IGS_CYBER2000
 33

	)

102 
	#FB_ACCEL_IGS_CYBER2010
 34

	)

103 
	#FB_ACCEL_IGS_CYBER5000
 35

	)

104 
	#FB_ACCEL_SIS_GLAMOUR
 36

	)

105 
	#FB_ACCEL_3DLABS_PERMEDIA3
 37

	)

106 
	#FB_ACCEL_ATI_RADEON
 38

	)

107 
	#FB_ACCEL_I810
 39

	)

108 
	#FB_ACCEL_SIS_GLAMOUR_2
 40

	)

109 
	#FB_ACCEL_SIS_XABRE
 41

	)

110 
	#FB_ACCEL_I830
 42

	)

111 
	#FB_ACCEL_NV_10
 43

	)

112 
	#FB_ACCEL_NV_20
 44

	)

113 
	#FB_ACCEL_NV_30
 45

	)

114 
	#FB_ACCEL_NV_40
 46

	)

115 
	#FB_ACCEL_XGI_VOLARI_V
 47

	)

116 
	#FB_ACCEL_XGI_VOLARI_Z
 48

	)

117 
	#FB_ACCEL_OMAP1610
 49

	)

118 
	#FB_ACCEL_TRIDENT_TGUI
 50

	)

119 
	#FB_ACCEL_TRIDENT_3DIMAGE
 51

	)

120 
	#FB_ACCEL_TRIDENT_BLADE3D
 52

	)

121 
	#FB_ACCEL_TRIDENT_BLADEXP
 53

	)

122 
	#FB_ACCEL_NEOMAGIC_NM2070
 90

	)

123 
	#FB_ACCEL_NEOMAGIC_NM2090
 91

	)

124 
	#FB_ACCEL_NEOMAGIC_NM2093
 92

	)

125 
	#FB_ACCEL_NEOMAGIC_NM2097
 93

	)

126 
	#FB_ACCEL_NEOMAGIC_NM2160
 94

	)

127 
	#FB_ACCEL_NEOMAGIC_NM2200
 95

	)

128 
	#FB_ACCEL_NEOMAGIC_NM2230
 96

	)

129 
	#FB_ACCEL_NEOMAGIC_NM2360
 97

	)

130 
	#FB_ACCEL_NEOMAGIC_NM2380
 98

	)

132 
	#FB_ACCEL_SAVAGE4
 0x80

	)

133 
	#FB_ACCEL_SAVAGE3D
 0x81

	)

134 
	#FB_ACCEL_SAVAGE3D_MV
 0x82

	)

135 
	#FB_ACCEL_SAVAGE2000
 0x83

	)

136 
	#FB_ACCEL_SAVAGE_MX_MV
 0x84

	)

137 
	#FB_ACCEL_SAVAGE_MX
 0x85

	)

138 
	#FB_ACCEL_SAVAGE_IX_MV
 0x86

	)

139 
	#FB_ACCEL_SAVAGE_IX
 0x87

	)

140 
	#FB_ACCEL_PROSAVAGE_PM
 0x88

	)

141 
	#FB_ACCEL_PROSAVAGE_KM
 0x89

	)

142 
	#FB_ACCEL_S3TWISTER_P
 0x8®

	)

143 
	#FB_ACCEL_S3TWISTER_K
 0x8b

	)

144 
	#FB_ACCEL_SUPERSAVAGE
 0x8¯

	)

145 
	#FB_ACCEL_PROSAVAGE_DDR
 0x8d

	)

146 
	#FB_ACCEL_PROSAVAGE_DDRK
 0x8ê

	)

148 
	sfb_fix_s¸ìnöfo
 {

149 
	mid
[16];

150 
	msmem_°¨t
;

152 
__u32
 
	msmem_Àn
;

153 
__u32
 
	mty≥
;

154 
__u32
 
	mty≥_aux
;

155 
__u32
 
	mvisuÆ
;

156 
__u16
 
	mx∑n°ï
;

157 
__u16
 
	my∑n°ï
;

158 
__u16
 
	mywøp°ï
;

159 
__u32
 
	mlöe_Àngth
;

160 
	mmmio_°¨t
;

162 
__u32
 
	mmmio_Àn
;

163 
__u32
 
	mac˚l
;

165 
__u16
 
	mª£rved
[3];

174 
	sfb_bôfõld
 {

175 
__u32
 
	moff£t
;

176 
__u32
 
	mÀngth
;

177 
__u32
 
	mmsb_right
;

181 
	#FB_NONSTD_HAM
 1

	)

182 
	#FB_NONSTD_REV_PIX_IN_B
 2

	)

184 
	#FB_ACTIVATE_NOW
 0

	)

185 
	#FB_ACTIVATE_NXTOPEN
 1

	)

186 
	#FB_ACTIVATE_TEST
 2

	)

187 
	#FB_ACTIVATE_MASK
 15

	)

189 
	#FB_ACTIVATE_VBL
 16

	)

190 
	#FB_CHANGE_CMAP_VBL
 32

	)

191 
	#FB_ACTIVATE_ALL
 64

	)

192 
	#FB_ACTIVATE_FORCE
 128

	)

193 
	#FB_ACTIVATE_INV_MODE
 256

	)

195 
	#FB_ACCELF_TEXT
 1

	)

197 
	#FB_SYNC_HOR_HIGH_ACT
 1

	)

198 
	#FB_SYNC_VERT_HIGH_ACT
 2

	)

199 
	#FB_SYNC_EXT
 4

	)

200 
	#FB_SYNC_COMP_HIGH_ACT
 8

	)

201 
	#FB_SYNC_BROADCAST
 16

	)

204 
	#FB_SYNC_ON_GREEN
 32

	)

206 
	#FB_VMODE_NONINTERLACED
 0

	)

207 
	#FB_VMODE_INTERLACED
 1

	)

208 
	#FB_VMODE_DOUBLE
 2

	)

209 
	#FB_VMODE_ODD_FLD_FIRST
 4

	)

210 
	#FB_VMODE_MASK
 255

	)

212 
	#FB_VMODE_YWRAP
 256

	)

213 
	#FB_VMODE_SMOOTH_XPAN
 512

	)

214 
	#FB_VMODE_CONUPDATE
 512

	)

219 
	#FB_ROTATE_UR
 0

	)

220 
	#FB_ROTATE_CW
 1

	)

221 
	#FB_ROTATE_UD
 2

	)

222 
	#FB_ROTATE_CCW
 3

	)

224 
	#PICOS2KHZ
(
a
Ë(1000000000UL/◊))

	)

225 
	#KHZ2PICOS
(
a
Ë(1000000000UL/◊))

	)

227 
	sfb_v¨_s¸ìnöfo
 {

228 
__u32
 
	mxªs
;

229 
__u32
 
	myªs
;

230 
__u32
 
	mxªs_vútuÆ
;

231 
__u32
 
	myªs_vútuÆ
;

232 
__u32
 
	mxoff£t
;

233 
__u32
 
	myoff£t
;

235 
__u32
 
	mbôs_≥r_pixñ
;

236 
__u32
 
	mgøysˇÀ
;

238 
fb_bôfõld
 
	mªd
;

239 
fb_bôfõld
 
	mgªí
;

240 
fb_bôfõld
 
	mblue
;

241 
fb_bôfõld
 
	må™•
;

243 
__u32
 
	mn⁄°d
;

245 
__u32
 
	ma˘iv©e
;

247 
__u32
 
	mheight
;

248 
__u32
 
	mwidth
;

250 
__u32
 
	mac˚l_Êags
;

253 
__u32
 
	mpix˛ock
;

254 
__u32
 
	mÀ·_m¨gö
;

255 
__u32
 
	mright_m¨gö
;

256 
__u32
 
	muµî_m¨gö
;

257 
__u32
 
	mlowî_m¨gö
;

258 
__u32
 
	mhsync_Àn
;

259 
__u32
 
	mvsync_Àn
;

260 
__u32
 
	msync
;

261 
__u32
 
	mvmode
;

262 
__u32
 
	mrŸ©e
;

263 
__u32
 
	mª£rved
[5];

266 
	sfb_cm≠
 {

267 
__u32
 
	m°¨t
;

268 
__u32
 
	mÀn
;

269 
__u16
 *
	mªd
;

270 
__u16
 *
	mgªí
;

271 
__u16
 *
	mblue
;

272 
__u16
 *
	må™•
;

275 
	sfb_c⁄2fbm≠
 {

276 
__u32
 
	mc⁄sﬁe
;

277 
__u32
 
	m‰amebuf„r
;

281 
	#VESA_NO_BLANKING
 0

	)

282 
	#VESA_VSYNC_SUSPEND
 1

	)

283 
	#VESA_HSYNC_SUSPEND
 2

	)

284 
	#VESA_POWERDOWN
 3

	)

289 
	mFB_BLANK_UNBLANK
 = 
VESA_NO_BLANKING
,

292 
	mFB_BLANK_NORMAL
 = 
VESA_NO_BLANKING
 + 1,

295 
	mFB_BLANK_VSYNC_SUSPEND
 = 
VESA_VSYNC_SUSPEND
 + 1,

298 
	mFB_BLANK_HSYNC_SUSPEND
 = 
VESA_HSYNC_SUSPEND
 + 1,

301 
	mFB_BLANK_POWERDOWN
 = 
VESA_POWERDOWN
 + 1

304 
	#FB_VBLANK_VBLANKING
 0x001

	)

305 
	#FB_VBLANK_HBLANKING
 0x002

	)

306 
	#FB_VBLANK_HAVE_VBLANK
 0x004

	)

307 
	#FB_VBLANK_HAVE_HBLANK
 0x008

	)

308 
	#FB_VBLANK_HAVE_COUNT
 0x010

	)

309 
	#FB_VBLANK_HAVE_VCOUNT
 0x020

	)

310 
	#FB_VBLANK_HAVE_HCOUNT
 0x040

	)

311 
	#FB_VBLANK_VSYNCING
 0x080

	)

312 
	#FB_VBLANK_HAVE_VSYNC
 0x100

	)

314 
	sfb_vbœnk
 {

315 
__u32
 
	mÊags
;

316 
__u32
 
	mcou¡
;

317 
__u32
 
	mvcou¡
;

318 
__u32
 
	mhcou¡
;

319 
__u32
 
	mª£rved
[4];

323 
	#ROP_COPY
 0

	)

324 
	#ROP_XOR
 1

	)

326 
	sfb_c›y¨ó
 {

327 
__u32
 
	mdx
;

328 
__u32
 
	mdy
;

329 
__u32
 
	mwidth
;

330 
__u32
 
	mheight
;

331 
__u32
 
	msx
;

332 
__u32
 
	msy
;

335 
	sfb_fûÃe˘
 {

336 
__u32
 
	mdx
;

337 
__u32
 
	mdy
;

338 
__u32
 
	mwidth
;

339 
__u32
 
	mheight
;

340 
__u32
 
	mcﬁ‹
;

341 
__u32
 
	mr›
;

344 
	sfb_image
 {

345 
__u32
 
	mdx
;

346 
__u32
 
	mdy
;

347 
__u32
 
	mwidth
;

348 
__u32
 
	mheight
;

349 
__u32
 
	mfg_cﬁ‹
;

350 
__u32
 
	mbg_cﬁ‹
;

351 
__u8
 
	mdïth
;

352 c⁄° *
	md©a
;

353 
fb_cm≠
 
	mcm≠
;

360 
	#FB_CUR_SETIMAGE
 0x01

	)

361 
	#FB_CUR_SETPOS
 0x02

	)

362 
	#FB_CUR_SETHOT
 0x04

	)

363 
	#FB_CUR_SETCMAP
 0x08

	)

364 
	#FB_CUR_SETSHAPE
 0x10

	)

365 
	#FB_CUR_SETSIZE
 0x20

	)

366 
	#FB_CUR_SETALL
 0xFF

	)

368 
	sfbcuΩos
 {

369 
__u16
 
	mx
, 
	my
;

372 
	sfb_curs‹
 {

373 
__u16
 
	m£t
;

374 
__u16
 
	míabÀ
;

375 
__u16
 
	mr›
;

376 c⁄° *
	mmask
;

377 
fbcuΩos
 
	mhŸ
;

378 
fb_image
 
	mimage
;

381 #ifde‡
CONFIG_FB_BACKLIGHT


383 
	#FB_BACKLIGHT_LEVELS
 128

	)

384 
	#FB_BACKLIGHT_MAX
 0xFF

	)

	@/usr/include/math.h

25 #i‚def 
_MATH_H


26 
	#_MATH_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 
	~<bôs/huge_vÆ.h
>

35 #ifde‡
__USE_ISOC99


36 
	~<bôs/huge_vÆf.h
>

37 
	~<bôs/huge_vÆl.h
>

40 
	~<bôs/öf.h
>

43 
	~<bôs/«n.h
>

47 
	~<bôs/m©hdef.h
>

54 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

55 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

56 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

57 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

58 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

59 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

60 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

61 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

62 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

63 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

64 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

65 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

67 
	#_MdoubÀ_
 

	)

68 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

69 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_STD


	)

70 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_STD


	)

71 
	~<bôs/m©hˇŒs.h
>

72 #unde‡
_MdoubÀ_


73 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


74 #unde‡
_MdoubÀ_END_NAMESPACE


75 #unde‡
__MATH_PRECNAME


77 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


83 #i‚de‡
_MÊﬂt_


84 
	#_MÊﬂt_
 

	)

86 
	#_MdoubÀ_
 
_MÊﬂt_


	)

87 #ifde‡
__STDC__


88 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

90 
	#__MATH_PRECNAME
(
«me
,
r
Ë«mê
f
 
	)
r

92 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

93 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

94 
	~<bôs/m©hˇŒs.h
>

95 #unde‡
_MdoubÀ_


96 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


97 #unde‡
_MdoubÀ_END_NAMESPACE


98 #unde‡
__MATH_PRECNAME


100 #i‡(
__STDC__
 - 0 || 
__GNUC__
 - 0) \

101 && (!
deföed
 
__NO_LONG_DOUBLE_MATH
 || deföed 
__LDBL_COMPAT
)

102 #ifde‡
__LDBL_COMPAT


104 #ifde‡
__USE_ISOC99


105 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

106 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

107 #ifde‡
__REDIRECT_NTH


108 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

109 
__∆dbl_√xâow¨df
)

110 
	`__©åibuã__
 ((
__c⁄°__
));

111 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

112 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

113 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

114 (
__x
, 
__y
),

115 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

122 #unde‡
__MATHDECL_1


123 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

124 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

125 
¨gs
, 
Æüs
)

	)

126 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

127 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

130 #i‚de‡
_Ml⁄g_doubÀ_


131 
	#_Ml⁄g_doubÀ_
 

	)

133 
	#_MdoubÀ_
 
_Ml⁄g_doubÀ_


	)

134 #ifde‡
__STDC__


135 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

137 
	#__MATH_PRECNAME
(
«me
,
r
Ë«mê
l
 
	)
r

139 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

140 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

141 
	~<bôs/m©hˇŒs.h
>

142 #unde‡
_MdoubÀ_


143 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


144 #unde‡
_MdoubÀ_END_NAMESPACE


145 #unde‡
__MATH_PRECNAME


150 #unde‡
__MATHDECL_1


151 #unde‡
__MATHDECL


152 #unde‡
__MATHCALL


155 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


157 
signgam
;

162 #ifde‡
__USE_ISOC99


200 
FP_NAN
,

201 
	#FP_NAN
 
FP_NAN


	)

202 
FP_INFINITE
,

203 
	#FP_INFINITE
 
FP_INFINITE


	)

204 
FP_ZERO
,

205 
	#FP_ZERO
 
FP_ZERO


	)

206 
FP_SUBNORMAL
,

207 
	#FP_SUBNORMAL
 
FP_SUBNORMAL


	)

208 
FP_NORMAL


209 
	#FP_NORMAL
 
FP_NORMAL


	)

213 #ifde‡
__NO_LONG_DOUBLE_MATH


214 
	#Â˛assify
(
x
) \

215 ( (
x
Ë= (Ë? 
	`__Â˛assifyf
 (xË: 
	`__Â˛assify
 (x))

	)

217 
	#Â˛assify
(
x
) \

218 ( (
x
) ==  () \

219 ? 
	`__Â˛assifyf
 (
x
) \

220 :  (
x
) ==  () \

221 ? 
	`__Â˛assify
 (
x
Ë: 
	`__Â˛assifyl
 (x))

	)

225 #ifde‡
__NO_LONG_DOUBLE_MATH


226 
	#signbô
(
x
) \

227 ( (
x
Ë= (Ë? 
	`__signbôf
 (xË: 
	`__signbô
 (x))

	)

229 
	#signbô
(
x
) \

230 ( (
x
) ==  () \

231 ? 
	`__signbôf
 (
x
) \

232 :  (
x
) ==  () \

233 ? 
	`__signbô
 (
x
Ë: 
	`__signbôl
 (x))

	)

237 #ifde‡
__NO_LONG_DOUBLE_MATH


238 
	#isföôe
(
x
) \

239 ( (
x
Ë= (Ë? 
	`__föôef
 (xË: 
	`__föôe
 (x))

	)

241 
	#isföôe
(
x
) \

242 ( (
x
) ==  () \

243 ? 
	`__föôef
 (
x
) \

244 :  (
x
) ==  () \

245 ? 
	`__föôe
 (
x
Ë: 
	`__föôñ
 (x))

	)

249 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

253 #ifde‡
__NO_LONG_DOUBLE_MATH


254 
	#i¢™
(
x
) \

255 ( (
x
Ë= (Ë? 
	`__i¢™f
 (xË: 
	`__i¢™
 (x))

	)

257 
	#i¢™
(
x
) \

258 ( (
x
) ==  () \

259 ? 
	`__i¢™f
 (
x
) \

260 :  (
x
) ==  () \

261 ? 
	`__i¢™
 (
x
Ë: 
	`__i¢™l
 (x))

	)

265 #ifde‡
__NO_LONG_DOUBLE_MATH


266 
	#isöf
(
x
) \

267 ( (
x
Ë= (Ë? 
	`__isöff
 (xË: 
	`__isöf
 (x))

	)

269 
	#isöf
(
x
) \

270 ( (
x
) ==  () \

271 ? 
	`__isöff
 (
x
) \

272 :  (
x
) ==  () \

273 ? 
	`__isöf
 (
x
Ë: 
	`__isöÊ
 (x))

	)

277 
	#MATH_ERRNO
 1

	)

278 
	#MATH_ERREXCEPT
 2

	)

282 #ifdef 
__USE_MISC


286 
_IEEE_
 = -1,

287 
_SVID_
,

288 
_XOPEN_
,

289 
_POSIX_
,

290 
_ISOC_


291 } 
	t_LIB_VERSION_TYPE
;

296 
_LIB_VERSION_TYPE
 
_LIB_VERSION
;

300 #ifde‡
__USE_SVID


306 #ifde‡
__˝lu•lus


307 
__ex˚±i⁄


309 
ex˚±i⁄


312 
ty≥
;

313 *
«me
;

314 
¨g1
;

315 
¨g2
;

316 
ªtvÆ
;

317 
	}
};

319 #ifde‡
__˝lu•lus


320 
	$m©hîr
 (
__ex˚±i⁄
 *
__exc
Ë
	`throw
 ();

322 
	`m©hîr
 (
ex˚±i⁄
 *
__exc
);

325 
	#X_TLOSS
 1.41484755040568800000e+16

	)

328 
	#DOMAIN
 1

	)

329 
	#SING
 2

	)

330 
	#OVERFLOW
 3

	)

331 
	#UNDERFLOW
 4

	)

332 
	#TLOSS
 5

	)

333 
	#PLOSS
 6

	)

336 
	#HUGE
 3.40282347e+38F

	)

340 #ifde‡
__USE_XOPEN


342 
	#MAXFLOAT
 3.40282347e+38F

	)

349 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


350 
	#M_E
 2.7182818284590452354

	)

351 
	#M_LOG2E
 1.4426950408889634074

	)

352 
	#M_LOG10E
 0.43429448190325182765

	)

353 
	#M_LN2
 0.69314718055994530942

	)

354 
	#M_LN10
 2.30258509299404568402

	)

355 
	#M_PI
 3.14159265358979323846

	)

356 
	#M_PI_2
 1.57079632679489661923

	)

357 
	#M_PI_4
 0.78539816339744830962

	)

358 
	#M_1_PI
 0.31830988618379067154

	)

359 
	#M_2_PI
 0.63661977236758134308

	)

360 
	#M_2_SQRTPI
 1.12837916709551257390

	)

361 
	#M_SQRT2
 1.41421356237309504880

	)

362 
	#M_SQRT1_2
 0.70710678118654752440

	)

368 #ifde‡
__USE_GNU


369 
	#M_El
 2.7182818284590452353602874713526625L

	)

370 
	#M_LOG2El
 1.4426950408889634073599246810018921L

	)

371 
	#M_LOG10El
 0.4342944819032518276511289189166051L

	)

372 
	#M_LN2l
 0.6931471805599453094172321214581766L

	)

373 
	#M_LN10l
 2.3025850929940456840179914546843642L

	)

374 
	#M_PIl
 3.1415926535897932384626433832795029L

	)

375 
	#M_PI_2l
 1.5707963267948966192313216916397514L

	)

376 
	#M_PI_4l
 0.7853981633974483096156608458198757L

	)

377 
	#M_1_PIl
 0.3183098861837906715377675267450287L

	)

378 
	#M_2_PIl
 0.6366197723675813430755350534900574L

	)

379 
	#M_2_SQRTPIl
 1.1283791670955125738961589031215452L

	)

380 
	#M_SQRT2l
 1.4142135623730950488016887242096981L

	)

381 
	#M_SQRT1_2l
 0.7071067811865475244008443621048490L

	)

388 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


389 
	#__NO_MATH_INLINES
 1

	)

392 #i‡
deföed
 
__USE_ISOC99
 && 
	`__GNUC_PREREQ
(2,97)

399 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

400 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

401 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

402 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

403 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

404 
	#isun‹dîed
(
u
, 
v
Ë
	`__buûtö_isun‹dîed
(u, v)

	)

408 #ifde‡
__USE_EXTERN_INLINES


409 
	~<bôs/m©hölöe.h
>

412 #ifde‡
__USE_ISOC99


416 #i‚de‡
isgª©î


417 
	#isgª©î
(
x
, 
y
) \

418 (
__exãnsi⁄__
 \

419 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

420 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; 
	}
}))

	)

424 #i‚de‡
isgª©îequÆ


425 
	#isgª©îequÆ
(
x
, 
y
) \

426 (
__exãnsi⁄__
 \

427 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

428 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

432 #i‚de‡
i¶ess


433 
	#i¶ess
(
x
, 
y
) \

434 (
__exãnsi⁄__
 \

435 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

436 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

440 #i‚de‡
i¶es£quÆ


441 
	#i¶es£quÆ
(
x
, 
y
) \

442 (
__exãnsi⁄__
 \

443 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

444 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

448 #i‚de‡
i¶essgª©î


449 
	#i¶essgª©î
(
x
, 
y
) \

450 (
__exãnsi⁄__
 \

451 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

452 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& (__x < __y || __y < __x); }))

	)

456 #i‚de‡
isun‹dîed


457 
	#isun‹dîed
(
u
, 
v
) \

458 (
__exãnsi⁄__
 \

459 ({ 
	`__ty≥of__
(
u
Ë
__u
 = (u); __ty≥of__(
v
Ë
__v
 = (v); \

460 
	`Â˛assify
 (
__u
Ë=
FP_NAN
 || fp˛assify (
__v
Ë=FP_NAN; }))

	)

465 
	g__END_DECLS


	@/usr/include/pthread.h

20 #i‚de‡
_PTHREAD_H


21 
	#_PTHREAD_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<ídün.h
>

25 
	~<sched.h
>

26 
	~<time.h
>

28 
	#__√ed_sig£t_t


	)

29 
	~<sig«l.h
>

30 
	~<bôs/±hªadty≥s.h
>

31 
	~<bôs/£tjmp.h
>

32 
	~<bôs/w‹dsize.h
>

38 
	mPTHREAD_CREATE_JOINABLE
,

39 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

40 
	mPTHREAD_CREATE_DETACHED


41 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

48 
	mPTHREAD_MUTEX_TIMED_NP
,

49 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

50 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

51 
	mPTHREAD_MUTEX_ADAPTIVE_NP


52 #ifde‡
__USE_UNIX98


54 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

55 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

56 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

57 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


59 #ifde‡
__USE_GNU


61 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


66 #ifde‡
__USE_GNU


70 
	mPTHREAD_MUTEX_STALLED_NP
,

71 
	mPTHREAD_MUTEX_ROBUST_NP


76 #ifde‡
__USE_UNIX98


80 
	mPTHREAD_PRIO_NONE
,

81 
	mPTHREAD_PRIO_INHERIT
,

82 
	mPTHREAD_PRIO_PROTECT


88 #i‡
__WORDSIZE
 == 64

89 
	#PTHREAD_MUTEX_INITIALIZER
 \

90 { { 0, 0, 0, 0, 0, 0, { 0, 0 } } }

	)

91 #ifde‡
__USE_GNU


92 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

93 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0, 0 } } }

	)

94 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

95 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0, 0 } } }

	)

96 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

97 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0, 0 } } }

	)

100 
	#PTHREAD_MUTEX_INITIALIZER
 \

101 { { 0, 0, 0, 0, 0, { 0 } } }

	)

102 #ifde‡
__USE_GNU


103 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

104 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0 } } }

	)

105 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0 } } }

	)

107 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

108 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0 } } }

	)

114 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


117 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

118 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

119 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

120 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


124 
	#PTHREAD_RWLOCK_INITIALIZER
 \

125 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

126 #ifde‡
__USE_GNU


127 #i‡
__WORDSIZE
 == 64

128 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

130 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

132 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


133 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

134 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

135 0, 0, 0, 0 } }

	)

137 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

138 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

139 0 } }

	)

149 
	mPTHREAD_INHERIT_SCHED
,

150 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

151 
	mPTHREAD_EXPLICIT_SCHED


152 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

159 
	mPTHREAD_SCOPE_SYSTEM
,

160 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

161 
	mPTHREAD_SCOPE_PROCESS


162 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

169 
	mPTHREAD_PROCESS_PRIVATE
,

170 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

171 
	mPTHREAD_PROCESS_SHARED


172 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

178 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

182 
	s_±hªad_˛ónup_buf„r


184 (*
	m__routöe
) (*);

185 *
	m__¨g
;

186 
	m__ˇn˚…y≥
;

187 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

193 
	mPTHREAD_CANCEL_ENABLE
,

194 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

195 
	mPTHREAD_CANCEL_DISABLE


196 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

200 
	mPTHREAD_CANCEL_DEFERRED
,

201 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

202 
	mPTHREAD_CANCEL_ASYNCHRONOUS


203 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

205 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

209 
	#PTHREAD_ONCE_INIT
 0

	)

212 #ifde‡
__USE_XOPEN2K


216 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

220 
__BEGIN_DECLS


225 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

226 
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

227 *(*
__°¨t_routöe
) (*),

228 *
__ª°ri˘
 
__¨g
Ë
__THROW
 
__n⁄nuŒ
 ((1, 3));

234 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

242 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

244 #ifde‡
__USE_GNU


247 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

255 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

256 
__c⁄°
 
time•ec
 *
__ab°ime
);

263 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

267 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

270 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
Ë
__THROW
;

278 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

281 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

282 
__THROW
 
	`__n⁄nuŒ
 ((1));

285 
	$±hªad_©å_gëdëach°©e
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

286 *
__dëach°©e
)

287 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

290 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

291 
__dëach°©e
)

292 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$±hªad_©å_gëgu¨dsize
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

297 
size_t
 *
__gu¨dsize
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

301 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

302 
size_t
 
__gu¨dsize
)

303 
__THROW
 
	`__n⁄nuŒ
 ((1));

307 
	$±hªad_©å_gësched∑øm
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


308 
__©å
,

309 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

310 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

313 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

314 
__c⁄°
 
sched_∑øm
 *
__ª°ri˘


315 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

318 
	$±hªad_©å_gëschedpﬁicy
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


319 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

320 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

323 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

324 
__THROW
 
	`__n⁄nuŒ
 ((1));

327 
	$±hªad_©å_gëöhîôsched
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


328 
__©å
, *
__ª°ri˘
 
__öhîô
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

332 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

333 
__öhîô
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

338 
	$±hªad_©å_gësc›e
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

339 *
__ª°ri˘
 
__sc›e
)

340 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

343 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

344 
__THROW
 
	`__n⁄nuŒ
 ((1));

347 
	$±hªad_©å_gë°ackaddr
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


348 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

349 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

355 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

356 *
__°ackaddr
)

357 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

360 
	$±hªad_©å_gë°acksize
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


361 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

362 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

367 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

368 
size_t
 
__°acksize
)

369 
__THROW
 
	`__n⁄nuŒ
 ((1));

371 #ifde‡
__USE_XOPEN2K


373 
	$±hªad_©å_gë°ack
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

374 **
__ª°ri˘
 
__°ackaddr
,

375 
size_t
 *
__ª°ri˘
 
__°acksize
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

381 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

382 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

385 #ifde‡
__USE_GNU


388 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

389 
size_t
 
__˝u£tsize
,

390 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

391 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

395 
	$±hªad_©å_gëafföôy_≈
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

396 
size_t
 
__˝u£tsize
,

397 
˝u_£t_t
 *
__˝u£t
)

398 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

404 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

405 
__THROW
 
	`__n⁄nuŒ
 ((2));

413 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

414 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

415 
__THROW
 
	`__n⁄nuŒ
 ((3));

418 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

419 *
__ª°ri˘
 
__pﬁicy
,

420 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

421 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

424 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

425 
__THROW
;

428 #ifde‡
__USE_UNIX98


430 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

433 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

436 #ifde‡
__USE_GNU


441 
	$±hªad_yõld
 (Ë
__THROW
;

446 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

447 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

448 
__THROW
 
	`__n⁄nuŒ
 ((3));

451 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

452 
˝u_£t_t
 *
__˝u£t
)

453 
__THROW
 
	`__n⁄nuŒ
 ((3));

466 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

467 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

478 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

482 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

485 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

490 
	`±hªad_ã°ˇn˚l
 ();

499 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

500 
__mask_was_ßved
;

501 } 
__ˇn˚l_jmp_buf
[1];

502 *
__∑d
[4];

503 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

506 #i‚de‡
__˛ónup_f˘_©åibuã


507 
	#__˛ónup_f˘_©åibuã


	)

512 
	s__±hªad_˛ónup_‰ame


514 (*
__ˇn˚l_routöe
) (*);

515 *
__ˇn˚l_¨g
;

516 
__do_ô
;

517 
__ˇn˚l_ty≥
;

520 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


521 #ifde‡
__˝lu•lus


523 ˛as†
	c__±hªad_˛ónup_˛ass


525 (*
__ˇn˚l_routöe
) (*);

526 *
__ˇn˚l_¨g
;

527 
__do_ô
;

528 
__ˇn˚l_ty≥
;

530 
public
:

531 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

532 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

533 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

534 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

535 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

536 &
__ˇn˚l_ty≥
); 
	}
}

537 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

547 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

549 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

553 
	#±hªad_˛ónup_p›
(
execuã
) \

554 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

555 } 0)

	)

557 #ifde‡
__USE_GNU


561 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

563 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

564 
__˛‰ame
.
	`__de„r
 ()

	)

569 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

570 
__˛‰ame
.
	`__ª°‹e
 (); \

571 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

572 } 0)

	)

579 
__exã∫_ölöe
 

580 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

582 i‡(
__‰ame
->
__do_ô
)

583 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

584 
	}
}

593 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

595 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

596 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

597 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

598 .
__do_ô
 = 1 };

	)

602 
	#±hªad_˛ónup_p›
(
execuã
) \

603 
__˛‰ame
.
__do_ô
 = (
execuã
); \

604 } 0)

	)

606 #ifde‡
__USE_GNU


610 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

612 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

613 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

614 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

615 .
__do_ô
 = 1 }; \

616 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

617 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

622 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

623 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

624 
__˛‰ame
.
__do_ô
 = (
execuã
); \

625 } 0)

	)

636 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

638 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

639 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

640 *
__ˇn˚l_¨g
 = (
¨g
); \

641 
nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

642 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

643 i‡(
	`__buûtö_ex≥˘
 (
nŸ_fú°_ˇŒ
, 0)) \

645 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

646 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

650 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

651 dÿ{

	)

652 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

653 
__˛ónup_f˘_©åibuã
;

657 
	#±hªad_˛ónup_p›
(
execuã
) \

660 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

661 i‡(
execuã
) \

662 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

663 } 0)

	)

664 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

665 
__˛ónup_f˘_©åibuã
;

667 #ifde‡
__USE_GNU


671 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

673 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

674 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

675 *
__ˇn˚l_¨g
 = (
¨g
); \

676 
nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

677 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

678 i‡(
	`__buûtö_ex≥˘
 (
nŸ_fú°_ˇŒ
, 0)) \

680 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

681 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

685 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

686 dÿ{

	)

687 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

688 
__˛ónup_f˘_©åibuã
;

693 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

696 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

697 i‡(
execuã
) \

698 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

699 
	}
} 0)

	)

700 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

701 
__˛ónup_f˘_©åibuã
;

705 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

706 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

707 #i‚de‡
SHARED


708 
	`__©åibuã__
 ((
__wók__
))

714 
__jmp_buf_èg
;

715 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROW
;

721 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

722 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx©å
)

723 
__THROW
 
	`__n⁄nuŒ
 ((1));

726 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

727 
__THROW
 
	`__n⁄nuŒ
 ((1));

730 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

731 
__THROW
 
	`__n⁄nuŒ
 ((1));

734 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

735 
__THROW
 
	`__n⁄nuŒ
 ((1));

737 #ifde‡
__USE_XOPEN2K


739 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

740 
__c⁄°
 
time•ec
 *
__ª°ri˘


741 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

745 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

746 
__THROW
 
	`__n⁄nuŒ
 ((1));

749 #ifde‡
__USE_UNIX98


751 
	$±hªad_muãx_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx_t
 *

752 
__ª°ri˘
 
__muãx
,

753 *
__ª°ri˘
 
__¥io˚ûög
)

754 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

758 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

759 
__¥io˚ûög
,

760 *
__ª°ri˘
 
__ﬁd_˚ûög
)

761 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

765 #ifde‡
__USE_GNU


767 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

768 
__THROW
 
	`__n⁄nuŒ
 ((1));

776 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

777 
__THROW
 
	`__n⁄nuŒ
 ((1));

780 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

781 
__THROW
 
	`__n⁄nuŒ
 ((1));

784 
	$±hªad_muãx©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_muãx©å_t
 *

785 
__ª°ri˘
 
__©å
,

786 *
__ª°ri˘
 
__psh¨ed
)

787 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

790 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

791 
__psh¨ed
)

792 
__THROW
 
	`__n⁄nuŒ
 ((1));

794 #ifde‡
__USE_UNIX98


796 
	$±hªad_muãx©å_gëty≥
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__ª°ri˘


797 
__©å
, *
__ª°ri˘
 
__köd
)

798 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

803 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

804 
__THROW
 
	`__n⁄nuŒ
 ((1));

807 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (
__c⁄°
 
±hªad_muãx©å_t
 *

808 
__ª°ri˘
 
__©å
,

809 *
__ª°ri˘
 
__¥Ÿocﬁ
)

810 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

814 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

815 
__¥Ÿocﬁ
)

816 
__THROW
 
	`__n⁄nuŒ
 ((1));

819 
	$±hªad_muãx©å_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx©å_t
 *

820 
__ª°ri˘
 
__©å
,

821 *
__ª°ri˘
 
__¥io˚ûög
)

822 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

825 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

826 
__¥io˚ûög
)

827 
__THROW
 
	`__n⁄nuŒ
 ((1));

830 #ifde‡
__USE_GNU


832 
	$±hªad_muãx©å_gërobu°_≈
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

833 *
__robu°√ss
)

834 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

837 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

838 
__robu°√ss
)

839 
__THROW
 
	`__n⁄nuŒ
 ((1));

843 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


848 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

849 
__c⁄°
 
±hªad_rwlock©å_t
 *
__ª°ri˘


850 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

853 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

854 
__THROW
 
	`__n⁄nuŒ
 ((1));

857 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1));

861 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

862 
__THROW
 
	`__n⁄nuŒ
 ((1));

864 #ifde‡
__USE_XOPEN2K


866 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

867 
__c⁄°
 
time•ec
 *
__ª°ri˘


868 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

872 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

873 
__THROW
 
	`__n⁄nuŒ
 ((1));

876 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

877 
__THROW
 
	`__n⁄nuŒ
 ((1));

879 #ifde‡
__USE_XOPEN2K


881 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

882 
__c⁄°
 
time•ec
 *
__ª°ri˘


883 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

887 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

888 
__THROW
 
	`__n⁄nuŒ
 ((1));

894 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

895 
__THROW
 
	`__n⁄nuŒ
 ((1));

898 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

899 
__THROW
 
	`__n⁄nuŒ
 ((1));

902 
	$±hªad_rwlock©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

903 
__ª°ri˘
 
__©å
,

904 *
__ª°ri˘
 
__psh¨ed
)

905 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

908 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

909 
__psh¨ed
)

910 
__THROW
 
	`__n⁄nuŒ
 ((1));

913 
	$±hªad_rwlock©å_gëköd_≈
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

914 
__ª°ri˘
 
__©å
,

915 *
__ª°ri˘
 
__¥ef
)

916 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

919 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

920 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

928 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

929 
__c⁄°
 
±hªad_c⁄d©å_t
 *
__ª°ri˘


930 
__c⁄d_©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

933 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

934 
__THROW
 
	`__n⁄nuŒ
 ((1));

937 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

938 
__THROW
 
	`__n⁄nuŒ
 ((1));

941 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

942 
__THROW
 
	`__n⁄nuŒ
 ((1));

949 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

950 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

951 
	`__n⁄nuŒ
 ((1, 2));

960 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

961 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

962 
__c⁄°
 
time•ec
 *
__ª°ri˘


963 
__ab°ime
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

968 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

969 
__THROW
 
	`__n⁄nuŒ
 ((1));

972 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

973 
__THROW
 
	`__n⁄nuŒ
 ((1));

976 
	$±hªad_c⁄d©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

977 
__ª°ri˘
 
__©å
,

978 *
__ª°ri˘
 
__psh¨ed
)

979 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

982 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

983 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

985 #ifde‡
__USE_XOPEN2K


987 
	$±hªad_c⁄d©å_gë˛ock
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

988 
__ª°ri˘
 
__©å
,

989 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

990 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

993 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

994 
__˛ockid_t
 
__˛ock_id
)

995 
__THROW
 
	`__n⁄nuŒ
 ((1));

999 #ifde‡
__USE_XOPEN2K


1004 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1005 
__THROW
 
	`__n⁄nuŒ
 ((1));

1008 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1009 
__THROW
 
	`__n⁄nuŒ
 ((1));

1012 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1013 
__THROW
 
	`__n⁄nuŒ
 ((1));

1016 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1017 
__THROW
 
	`__n⁄nuŒ
 ((1));

1020 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1021 
__THROW
 
	`__n⁄nuŒ
 ((1));

1028 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1029 
__c⁄°
 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1030 
__©å
, 
__cou¡
)

1031 
__THROW
 
	`__n⁄nuŒ
 ((1));

1034 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1035 
__THROW
 
	`__n⁄nuŒ
 ((1));

1038 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1039 
__THROW
 
	`__n⁄nuŒ
 ((1));

1043 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1044 
__THROW
 
	`__n⁄nuŒ
 ((1));

1047 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1048 
__THROW
 
	`__n⁄nuŒ
 ((1));

1051 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (
__c⁄°
 
±hªad_b¨rõøâr_t
 *

1052 
__ª°ri˘
 
__©å
,

1053 *
__ª°ri˘
 
__psh¨ed
)

1054 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1057 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1058 
__psh¨ed
)

1059 
__THROW
 
	`__n⁄nuŒ
 ((1));

1071 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1072 (*
__de°r_fun˘i⁄
) (*))

1073 
__THROW
 
	`__n⁄nuŒ
 ((1));

1076 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1079 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1082 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1083 
__c⁄°
 *
__poöãr
Ë
__THROW
 ;

1086 #ifde‡
__USE_XOPEN2K


1088 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1089 
__˛ockid_t
 *
__˛ock_id
)

1090 
__THROW
 
	`__n⁄nuŒ
 ((2));

1105 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1106 (*
__∑ª¡
) (),

1107 (*
__chûd
Ë()Ë
__THROW
;

1110 #ifde‡
__USE_EXTERN_INLINES


1112 
__exã∫_ölöe
 

1113 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1115  
__thªad1
 =
__thªad2
;

1116 
	}
}

1119 
	g__END_DECLS


	@/usr/include/stdio.h

24 #i‚de‡
_STDIO_H


26 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


27 
	#_STDIO_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

36 
	~<bôs/ty≥s.h
>

37 
	#__√ed_FILE


	)

38 
	#__√ed___FILE


	)

42 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


45 
	g_IO_FILE
;

47 
__BEGIN_NAMESPACE_STD


49 
_IO_FILE
 
	tFILE
;

50 
	g__END_NAMESPACE_STD


51 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

52 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

53 || 
deföed
 
__USE_POSIX2


54 
	$__USING_NAMESPACE_STD
(
FILE
)

57 
	#__FILE_deföed
 1

	)

59 #unde‡
__√ed_FILE


62 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


65 
_IO_FILE
 
	t__FILE
;

67 
	#____FILE_deföed
 1

	)

69 #unde‡
__√ed___FILE


72 #ifdef 
_STDIO_H


73 
	#_STDIO_USES_IOSTREAM


	)

75 
	~<libio.h
>

77 #ifde‡
__USE_XOPEN


78 #ifde‡
__GNUC__


79 #i‚de‡
_VA_LIST_DEFINED


80 
_G_va_li°
 
	tva_li°
;

81 
	#_VA_LIST_DEFINED


	)

84 
	~<°d¨g.h
>

89 
__BEGIN_NAMESPACE_STD


90 #i‚de‡
__USE_FILE_OFFSET64


91 
_G_Âos_t
 
	tÂos_t
;

93 
_G_Âos64_t
 
	tÂos_t
;

95 
__END_NAMESPACE_STD


96 #ifde‡
__USE_LARGEFILE64


97 
_G_Âos64_t
 
	tÂos64_t
;

101 
	#_IOFBF
 0

	)

102 
	#_IOLBF
 1

	)

103 
	#_IONBF
 2

	)

107 #i‚de‡
BUFSIZ


108 
	#BUFSIZ
 
_IO_BUFSIZ


	)

114 #i‚de‡
EOF


115 
	#EOF
 (-1)

	)

121 
	#SEEK_SET
 0

	)

122 
	#SEEK_CUR
 1

	)

123 
	#SEEK_END
 2

	)

126 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


128 
	#P_tmpdú
 "/tmp"

	)

141 
	~<bôs/°dio_lim.h
>

145 
_IO_FILE
 *
°dö
;

146 
_IO_FILE
 *
°dout
;

147 
_IO_FILE
 *
°dîr
;

149 
	#°dö
 
°dö


	)

150 
	#°dout
 
°dout


	)

151 
	#°dîr
 
°dîr


	)

153 
__BEGIN_NAMESPACE_STD


155 
	$ªmove
 (
__c⁄°
 *
__fûíame
Ë
__THROW
;

157 
	$ª«me
 (
__c⁄°
 *
__ﬁd
, __c⁄° *
__√w
Ë
__THROW
;

158 
__END_NAMESPACE_STD


160 #ifde‡
__USE_ATFILE


162 
	$ª«mót
 (
__ﬁdfd
, 
__c⁄°
 *
__ﬁd
, 
__√wfd
,

163 
__c⁄°
 *
__√w
Ë
__THROW
;

166 
__BEGIN_NAMESPACE_STD


171 #i‚de‡
__USE_FILE_OFFSET64


172 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

174 #ifde‡
__REDIRECT


175 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

177 
	#tmpfûe
 
tmpfûe64


	)

181 #ifde‡
__USE_LARGEFILE64


182 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

186 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

187 
__END_NAMESPACE_STD


189 #ifde‡
__USE_MISC


192 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

196 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


204 *
	$ãm≤am
 (
__c⁄°
 *
__dú
, __c⁄° *
__pfx
)

205 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

209 
__BEGIN_NAMESPACE_STD


214 
	`f˛o£
 (
FILE
 *
__°ªam
);

219 
	`fÊush
 (
FILE
 *
__°ªam
);

220 
__END_NAMESPACE_STD


222 #ifde‡
__USE_MISC


229 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

232 #ifde‡
__USE_GNU


239 
	`f˛o£Æl
 ();

243 
__BEGIN_NAMESPACE_STD


244 #i‚de‡
__USE_FILE_OFFSET64


249 
FILE
 *
	$f›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

250 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

255 
FILE
 *
	$‰e›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

256 
__c⁄°
 *
__ª°ri˘
 
__modes
,

257 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

259 #ifde‡
__REDIRECT


260 
FILE
 *
	`__REDIRECT
 (
f›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

261 
__c⁄°
 *
__ª°ri˘
 
__modes
), 
f›í64
)

262 
__wur
;

263 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

264 
__c⁄°
 *
__ª°ri˘
 
__modes
,

265 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

266 
__wur
;

268 
	#f›í
 
f›í64


	)

269 
	#‰e›í
 
‰e›í64


	)

272 
__END_NAMESPACE_STD


273 #ifde‡
__USE_LARGEFILE64


274 
FILE
 *
	$f›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

275 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

276 
FILE
 *
	$‰e›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

277 
__c⁄°
 *
__ª°ri˘
 
__modes
,

278 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

281 #ifdef 
__USE_POSIX


283 
FILE
 *
	$fd›í
 (
__fd
, 
__c⁄°
 *
__modes
Ë
__THROW
 
__wur
;

286 #ifdef 
__USE_GNU


289 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

290 
__c⁄°
 *
__ª°ri˘
 
__modes
,

291 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

294 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, 
__c⁄°
 *
__modes
)

295 
__THROW
 
__wur
;

300 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

304 
__BEGIN_NAMESPACE_STD


307 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

311 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

312 
__modes
, 
size_t
 
__n
Ë
__THROW
;

313 
__END_NAMESPACE_STD


315 #ifdef 
__USE_BSD


318 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

319 
size_t
 
__size
Ë
__THROW
;

322 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

326 
__BEGIN_NAMESPACE_STD


331 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

332 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

337 
	`¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

339 
	$•rötf
 (*
__ª°ri˘
 
__s
,

340 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

346 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

347 
_G_va_li°
 
__¨g
);

352 
	`v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

354 
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

355 
_G_va_li°
 
__¨g
Ë
__THROW
;

356 
__END_NAMESPACE_STD


358 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


359 
__BEGIN_NAMESPACE_C99


361 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

362 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

363 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

365 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

366 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

367 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

368 
__END_NAMESPACE_C99


371 #ifde‡
__USE_GNU


374 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__f
,

375 
_G_va_li°
 
__¨g
)

376 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

377 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

378 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

379 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

380 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

381 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

382 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

390 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

391 
_G_va_li°
 
__¨g
)

392 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

393 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

394 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

398 
__BEGIN_NAMESPACE_STD


403 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

404 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

409 
	$sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

411 
	$ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

412 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

414 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

415 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

416 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

417 #ifde‡
__REDIRECT


421 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

422 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

423 
__isoc99_fsˇnf
Ë
__wur
;

424 
	`__REDIRECT
 (
sˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

425 
__isoc99_sˇnf
Ë
__wur
;

426 
	`__REDIRECT
 (
ssˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__s
,

427 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

428 
__isoc99_ssˇnf
Ë
__THROW
;

430 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

431 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

432 
	$__isoc99_sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$__isoc99_ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

434 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

435 
	#fsˇnf
 
__isoc99_fsˇnf


	)

436 
	#sˇnf
 
__isoc99_sˇnf


	)

437 
	#ssˇnf
 
__isoc99_ssˇnf


	)

441 
__END_NAMESPACE_STD


443 #ifdef 
__USE_ISOC99


444 
__BEGIN_NAMESPACE_C99


449 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

450 
_G_va_li°
 
__¨g
)

451 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

457 
	$vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

458 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

461 
	$vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

462 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

463 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

465 #i‡!
deföed
 
__USE_GNU
 \

466 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

467 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

468 #ifde‡
__REDIRECT


472 
	`__REDIRECT
 (
vfsˇnf
,

473 (
FILE
 *
__ª°ri˘
 
__s
,

474 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

475 
__isoc99_vfsˇnf
)

476 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

477 
	`__REDIRECT
 (
vsˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

478 
_G_va_li°
 
__¨g
), 
__isoc99_vfsˇnf
)

479 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

480 
	`__REDIRECT
 (
vssˇnf
,

481 (
__c⁄°
 *
__ª°ri˘
 
__s
,

482 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

483 
__isoc99_vssˇnf
)

484 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

486 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

487 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

488 
_G_va_li°
 
__¨g
Ë
__wur
;

489 
	$__isoc99_vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

490 
_G_va_li°
 
__¨g
Ë
__wur
;

491 
	$__isoc99_vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

492 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

493 
_G_va_li°
 
__¨g
Ë
__THROW
;

494 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

495 
	#vsˇnf
 
__isoc99_vsˇnf


	)

496 
	#vssˇnf
 
__isoc99_vssˇnf


	)

500 
__END_NAMESPACE_C99


504 
__BEGIN_NAMESPACE_STD


509 
	`fgëc
 (
FILE
 *
__°ªam
);

510 
	`gëc
 (
FILE
 *
__°ªam
);

516 
	`gëch¨
 ();

517 
__END_NAMESPACE_STD


521 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

523 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


528 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

529 
	`gëch¨_u∆ocked
 ();

532 #ifde‡
__USE_MISC


539 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

543 
__BEGIN_NAMESPACE_STD


551 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

552 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

558 
	`putch¨
 (
__c
);

559 
__END_NAMESPACE_STD


563 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

565 #ifde‡
__USE_MISC


572 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

575 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


580 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

581 
	`putch¨_u∆ocked
 (
__c
);

585 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

586 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

588 
	`gëw
 (
FILE
 *
__°ªam
);

591 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

595 
__BEGIN_NAMESPACE_STD


600 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

601 
__wur
;

608 *
	$gës
 (*
__s
Ë
__wur
;

609 
__END_NAMESPACE_STD


611 #ifde‡
__USE_GNU


618 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

619 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

623 #ifdef 
__USE_GNU


634 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

635 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

636 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

637 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

638 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

639 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

647 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

648 
size_t
 *
__ª°ri˘
 
__n
,

649 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

653 
__BEGIN_NAMESPACE_STD


658 
	`Âuts
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

664 
	`puts
 (
__c⁄°
 *
__s
);

671 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

678 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

679 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

684 
size_t
 
	$fwrôe
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

685 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
Ë
__wur
;

686 
__END_NAMESPACE_STD


688 #ifde‡
__USE_GNU


695 
	`Âuts_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

696 
FILE
 *
__ª°ri˘
 
__°ªam
);

699 #ifde‡
__USE_MISC


706 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

707 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

708 
size_t
 
	$fwrôe_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

709 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

713 
__BEGIN_NAMESPACE_STD


718 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

723 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

728 
	`ªwöd
 (
FILE
 *
__°ªam
);

729 
__END_NAMESPACE_STD


736 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


737 #i‚de‡
__USE_FILE_OFFSET64


742 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

747 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

749 #ifde‡
__REDIRECT


750 
	`__REDIRECT
 (
f£eko
,

751 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

752 
f£eko64
);

753 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

755 
	#f£eko
 
f£eko64


	)

756 
	#·ñlo
 
·ñlo64


	)

761 
__BEGIN_NAMESPACE_STD


762 #i‚de‡
__USE_FILE_OFFSET64


767 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

772 
	`f£ços
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
);

774 #ifde‡
__REDIRECT


775 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

776 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

777 
	`__REDIRECT
 (
f£ços
,

778 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
), 
f£ços64
);

780 
	#fgëpos
 
fgëpos64


	)

781 
	#f£ços
 
f£ços64


	)

784 
__END_NAMESPACE_STD


786 #ifde‡
__USE_LARGEFILE64


787 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

788 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

789 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

790 
	`f£ços64
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos64_t
 *
__pos
);

793 
__BEGIN_NAMESPACE_STD


795 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

797 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

799 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

800 
__END_NAMESPACE_STD


802 #ifde‡
__USE_MISC


804 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

805 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

806 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

810 
__BEGIN_NAMESPACE_STD


815 
	`≥º‹
 (
__c⁄°
 *
__s
);

816 
__END_NAMESPACE_STD


822 
	~<bôs/sys_îæi°.h
>

825 #ifdef 
__USE_POSIX


827 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 #ifde‡
__USE_MISC


832 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

836 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

837 
deföed
 
__USE_MISC
)

842 
FILE
 *
	$p›í
 (
__c⁄°
 *
__comm™d
, __c⁄° *
__modes
Ë
__wur
;

848 
	`p˛o£
 (
FILE
 *
__°ªam
);

852 #ifdef 
__USE_POSIX


854 *
	$˘îmid
 (*
__s
Ë
__THROW
;

858 #ifde‡
__USE_XOPEN


860 *
	`cu£rid
 (*
__s
);

864 #ifdef 
__USE_GNU


865 
ob°ack
;

868 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

869 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

870 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

871 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

872 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

873 
_G_va_li°
 
__¨gs
)

874 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

878 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


882 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

886 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

889 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

892 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


896 
	#__√ed_gë›t


	)

897 
	~<gë›t.h
>

902 #ifde‡
__USE_EXTERN_INLINES


903 
	~<bôs/°dio.h
>

905 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


906 
	~<bôs/°dio2.h
>

908 #ifde‡
__LDBL_COMPAT


909 
	~<bôs/°dio-ldbl.h
>

912 
__END_DECLS


	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	g__BEGIN_DECLS


37 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


38 
	#_STDLIB_H
 1

	)

40 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
_SYS_WAIT_H


42 
	~<bôs/waôÊags.h
>

43 
	~<bôs/waô°©us.h
>

45 #ifde‡
__USE_BSD


50 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


51 
	#__WAIT_INT
(
°©us
) \

52 (
	`__exãnsi⁄__
 ({ uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; } 
__u
; \

53 
__u
.
__ö
 = (
°©us
); __u.
__i
; }))

	)

55 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

63 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


64 
	#__WAIT_STATUS
 *

	)

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
waô
 *
	m__u±r
;

71 *
	m__ùå
;

72 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

79 
	#__WAIT_STATUS
 *

	)

80 
	#__WAIT_STATUS_DEFN
 *

	)

85 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
(
	`__WAIT_INT
(°©us))

	)

86 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
(
	`__WAIT_INT
(°©us))

	)

87 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
(
	`__WAIT_INT
(°©us))

	)

88 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
(
	`__WAIT_INT
(°©us))

	)

89 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
(
	`__WAIT_INT
(°©us))

	)

90 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
(
	`__WAIT_INT
(°©us))

	)

91 #ifde‡
__WIFCONTINUED


92 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
(
	`__WAIT_INT
(°©us))

	)

96 
__BEGIN_NAMESPACE_STD


100 
	mquŸ
;

101 
	mªm
;

102 } 
	tdiv_t
;

105 #i‚de‡
__ldiv_t_deföed


108 
	mquŸ
;

109 
	mªm
;

110 } 
	tldiv_t
;

111 
	#__ldiv_t_deföed
 1

	)

113 
	g__END_NAMESPACE_STD


115 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 struct

120 
	mquŸ
;

121 
	mªm
;

122 } 
	tŒdiv_t
;

123 
	#__Œdiv_t_deföed
 1

	)

124 
	g__END_NAMESPACE_C99


129 
	#RAND_MAX
 2147483647

	)

134 
	#EXIT_FAILURE
 1

	)

135 
	#EXIT_SUCCESS
 0

	)

139 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

140 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

143 
__BEGIN_NAMESPACE_STD


145 
	$©of
 (
__c⁄°
 *
__≈å
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

148 
	$©oi
 (
__c⁄°
 *
__≈å
)

149 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

151 
	$©ﬁ
 (
__c⁄°
 *
__≈å
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

153 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

156 
__BEGIN_NAMESPACE_C99


158 
__exãnsi⁄__
 
	$©ﬁl
 (
__c⁄°
 *
__≈å
)

159 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

160 
__END_NAMESPACE_C99


163 
__BEGIN_NAMESPACE_STD


165 
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
)

167 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

168 
__END_NAMESPACE_STD


170 #ifdef 
__USE_ISOC99


171 
__BEGIN_NAMESPACE_C99


173 
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

174 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

176 
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

179 
__END_NAMESPACE_C99


182 
__BEGIN_NAMESPACE_STD


184 
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

185 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

186 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

188 
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

189 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

190 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

191 
__END_NAMESPACE_STD


193 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


195 
__exãnsi⁄__


196 
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

197 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

198 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

200 
__exãnsi⁄__


201 
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

202 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

203 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

206 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

207 
__BEGIN_NAMESPACE_C99


209 
__exãnsi⁄__


210 
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

211 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

212 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

214 
__exãnsi⁄__


215 
	$°πouŒ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

216 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

217 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

218 
__END_NAMESPACE_C99


222 #ifde‡
__USE_GNU


236 
	~<xloˇÀ.h
>

240 
	$°πﬁ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

241 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

242 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

244 
	$°πoul_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

245 **
__ª°ri˘
 
__íd±r
,

246 
__ba£
, 
__loˇÀ_t
 
__loc
)

247 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

249 
__exãnsi⁄__


250 
	$°πﬁl_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

251 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

252 
__loˇÀ_t
 
__loc
)

253 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

255 
__exãnsi⁄__


256 
	$°πouŒ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

257 **
__ª°ri˘
 
__íd±r
,

258 
__ba£
, 
__loˇÀ_t
 
__loc
)

259 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

261 
	$°πod_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

262 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

263 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

265 
	$°πof_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

266 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

267 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

269 
	$°πﬁd_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

270 **
__ª°ri˘
 
__íd±r
,

271 
__loˇÀ_t
 
__loc
)

272 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

276 #ifde‡
__USE_EXTERN_INLINES


277 
__BEGIN_NAMESPACE_STD


278 
__exã∫_ölöe
 

279 
	`__NTH
 (
	$©of
 (
__c⁄°
 *
__≈å
))

281  
	`°πod
 (
__≈å
, (**Ë
NULL
);

282 
	}
}

283 
__exã∫_ölöe
 

284 
__NTH
 (
	$©oi
 (
__c⁄°
 *
__≈å
))

286  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

287 
	}
}

288 
__exã∫_ölöe
 

289 
__NTH
 (
	$©ﬁ
 (
__c⁄°
 *
__≈å
))

291  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

292 
	}
}

293 
	g__END_NAMESPACE_STD


295 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


296 
__BEGIN_NAMESPACE_C99


297 
__exãnsi⁄__
 
__exã∫_ölöe
 

298 
__NTH
 (
	$©ﬁl
 (
__c⁄°
 *
__≈å
))

300  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

301 
	}
}

302 
	g__END_NAMESPACE_C99


307 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


311 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

314 
	$a64l
 (
__c⁄°
 *
__s
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


320 
	~<sys/ty≥s.h
>

327 
	$øndom
 (Ë
__THROW
;

330 
	$§™dom
 (
__£ed
Ë
__THROW
;

336 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

337 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

341 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

344 #ifde‡
__USE_MISC


349 
	søndom_d©a


351 
öt32_t
 *
Âå
;

352 
öt32_t
 *
Ωå
;

353 
öt32_t
 *
°©e
;

354 
ønd_ty≥
;

355 
ønd_deg
;

356 
ønd_£p
;

357 
öt32_t
 *
íd_±r
;

360 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

361 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

363 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2));

366 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

367 
size_t
 
__°©ñí
,

368 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

369 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

371 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

372 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

373 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 
__BEGIN_NAMESPACE_STD


380 
	$ønd
 (Ë
__THROW
;

382 
	$§™d
 (
__£ed
Ë
__THROW
;

383 
__END_NAMESPACE_STD


385 #ifde‡
__USE_POSIX


387 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

391 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


395 
	$dønd48
 (Ë
__THROW
;

396 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

399 
	$Ã™d48
 (Ë
__THROW
;

400 
	$ƒ™d48
 (
__xsubi
[3])

401 
__THROW
 
	`__n⁄nuŒ
 ((1));

404 
	$mønd48
 (Ë
__THROW
;

405 
	$jønd48
 (
__xsubi
[3])

406 
__THROW
 
	`__n⁄nuŒ
 ((1));

409 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

410 *
	$£ed48
 (
__£ed16v
[3])

411 
__THROW
 
	`__n⁄nuŒ
 ((1));

412 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

414 #ifde‡
__USE_MISC


418 
	sdønd48_d©a


420 
__x
[3];

421 
__ﬁd_x
[3];

422 
__c
;

423 
__öô
;

424 
__a
;

428 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

429 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$î™d48_r
 (
__xsubi
[3],

431 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

432 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

435 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

436 *
__ª°ri˘
 
__ªsu…
)

437 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 
	$ƒ™d48_r
 (
__xsubi
[3],

439 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

445 *
__ª°ri˘
 
__ªsu…
)

446 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

447 
	$jønd48_r
 (
__xsubi
[3],

448 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

449 *
__ª°ri˘
 
__ªsu…
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

454 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 
	$£ed48_r
 (
__£ed16v
[3],

457 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$lc⁄g48_r
 (
__∑øm
[7],

460 
dønd48_d©a
 *
__buf„r
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

467 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


468 
	#__mÆloc_™d_ˇŒoc_deföed


	)

469 
__BEGIN_NAMESPACE_STD


471 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

473 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

474 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

475 
__END_NAMESPACE_STD


478 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


479 
__BEGIN_NAMESPACE_STD


485 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

486 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

488 
	$‰ì
 (*
__±r
Ë
__THROW
;

489 
__END_NAMESPACE_STD


491 #ifdef 
__USE_MISC


493 
	$c‰ì
 (*
__±r
Ë
__THROW
;

496 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


497 
	~<Æloˇ.h
>

500 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


502 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

505 #ifde‡
__USE_XOPEN2K


507 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

508 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

511 
__BEGIN_NAMESPACE_STD


513 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

517 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

518 
__END_NAMESPACE_STD


520 #ifdef 
__USE_MISC


523 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

524 
__THROW
 
	`__n⁄nuŒ
 ((1));

527 
__BEGIN_NAMESPACE_STD


531 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

532 
__END_NAMESPACE_STD


534 #ifde‡
__USE_ISOC99


535 
__BEGIN_NAMESPACE_C99


538 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

539 
__END_NAMESPACE_C99


543 
__BEGIN_NAMESPACE_STD


545 *
	$gëív
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

546 
__END_NAMESPACE_STD


550 *
	$__£cuª_gëív
 (
__c⁄°
 *
__«me
)

551 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

553 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


557 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

560 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


563 
	$£ãnv
 (
__c⁄°
 *
__«me
, __c⁄° *
__vÆue
, 
__ª∂a˚
)

564 
__THROW
 
	`__n⁄nuŒ
 ((2));

567 
	$un£ãnv
 (
__c⁄°
 *
__«me
Ë
__THROW
;

570 #ifdef 
__USE_MISC


574 
	$˛óªnv
 (Ë
__THROW
;

578 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


583 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

593 #i‚de‡
__USE_FILE_OFFSET64


594 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

596 #ifde‡
__REDIRECT


597 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

598 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

600 
	#mk°emp
 
mk°emp64


	)

603 #ifde‡
__USE_LARGEFILE64


604 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

608 #ifde‡
__USE_BSD


614 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

617 #ifde‡
__USE_GNU


624 #i‚de‡
__USE_FILE_OFFSET64


625 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

627 #ifde‡
__REDIRECT


628 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

629 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

631 
	#mko°emp
 
mko°emp64


	)

634 #ifde‡
__USE_LARGEFILE64


635 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

640 
__BEGIN_NAMESPACE_STD


645 
	$sy°em
 (
__c⁄°
 *
__comm™d
Ë
__wur
;

646 
__END_NAMESPACE_STD


649 #ifdef 
__USE_GNU


652 *
	$ˇn⁄iˇlize_fûe_«me
 (
__c⁄°
 *
__«me
)

653 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

656 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


662 *
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

663 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

668 #i‚de‡
__COMPAR_FN_T


669 
	#__COMPAR_FN_T


	)

670 (*
	t__com∑r_‚_t
Ë(
	t__c⁄°
 *, __const *);

672 #ifdef 
__USE_GNU


673 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

676 #ifde‡
__USE_GNU


677 (*
	t__com∑r_d_‚_t
Ë(
	t__c⁄°
 *, __const *, *);

680 
__BEGIN_NAMESPACE_STD


683 *
	$b£¨ch
 (
__c⁄°
 *
__key
, __c⁄° *
__ba£
,

684 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

685 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

689 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

690 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

691 #ifde‡
__USE_GNU


692 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

693 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

694 
	`__n⁄nuŒ
 ((1, 4));

699 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

700 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

701 
__END_NAMESPACE_STD


703 #ifde‡
__USE_ISOC99


704 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

705 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

709 
__BEGIN_NAMESPACE_STD


713 
div_t
 
	$div
 (
__numî
, 
__díom
)

714 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

715 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

716 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

717 
__END_NAMESPACE_STD


719 #ifde‡
__USE_ISOC99


720 
__BEGIN_NAMESPACE_C99


721 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

722 
__díom
)

723 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

724 
__END_NAMESPACE_C99


728 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


735 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

736 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

741 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

742 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

747 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

748 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

751 #ifde‡
__USE_MISC


753 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

754 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

755 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

756 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

757 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

758 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

759 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

760 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

765 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

766 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

767 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

768 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

769 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

770 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

772 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

773 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

774 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

775 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

776 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

777 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

778 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

779 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

784 
__BEGIN_NAMESPACE_STD


787 
	$mbÀn
 (
__c⁄°
 *
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

790 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

791 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

794 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
 
__wur
;

798 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

799 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

801 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

802 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

803 
__THROW
;

804 
__END_NAMESPACE_STD


807 #ifde‡
__USE_SVID


812 
	$Ωm©ch
 (
__c⁄°
 *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

816 #ifde‡
__USE_XOPEN_EXTENDED


823 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

824 *
__c⁄°
 *
__ª°ri˘
 
__tokís
,

825 **
__ª°ri˘
 
__vÆuï
)

826 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

830 #ifde‡
__USE_XOPEN


832 
	$£tkey
 (
__c⁄°
 *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

838 #ifde‡
__USE_XOPEN2K


840 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

843 #ifde‡
__USE_XOPEN


848 
	$gø¡±
 (
__fd
Ë
__THROW
;

852 
	$u∆ock±
 (
__fd
Ë
__THROW
;

857 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

860 #ifde‡
__USE_GNU


864 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

865 
__THROW
 
	`__n⁄nuŒ
 ((2));

868 
	`gë±
 ();

871 #ifde‡
__USE_BSD


875 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

876 
__THROW
 
	`__n⁄nuŒ
 ((1));

881 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


882 
	~<bôs/°dlib.h
>

884 #ifde‡
__LDBL_COMPAT


885 
	~<bôs/°dlib-ldbl.h
>

889 #unde‡
__√ed_mÆloc_™d_ˇŒoc


891 
__END_DECLS


	@/usr/include/string.h

23 #i‚def 
_STRING_H


24 
	#_STRING_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

36 
__BEGIN_NAMESPACE_STD


38 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
,

39 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

40 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

43 *
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

44 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

45 
__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


51 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

52 
__c
, 
size_t
 
__n
)

53 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

57 
__BEGIN_NAMESPACE_STD


59 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

62 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

63 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

66 *
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

67 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

68 
__END_NAMESPACE_STD


70 #ifde‡
__USE_GNU


73 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

74 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

78 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

82 
__BEGIN_NAMESPACE_STD


84 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

85 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

87 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

88 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

89 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

92 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

93 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

95 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

96 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

99 
	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

100 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

102 
	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

103 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

106 
	$°rcﬁl
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

107 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

109 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

110 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

111 
__THROW
 
	`__n⁄nuŒ
 ((2));

112 
__END_NAMESPACE_STD


114 #ifde‡
__USE_GNU


118 
	~<xloˇÀ.h
>

121 
	$°rcﬁl_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

122 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

124 
size_t
 
	$°rx‰m_l
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

125 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

128 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


130 *
	$°rdup
 (
__c⁄°
 *
__s
)

131 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

137 #i‡
deföed
 
__USE_GNU


138 *
	$°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

139 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

142 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


144 
	#°rdu∑
(
s
) \

145 (
__exãnsi⁄__
 \

147 
__c⁄°
 *
__ﬁd
 = (
s
); \

148 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

149 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

150 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

151 
	}
}))

	)

154 
	#°∫du∑
(
s
, 
n
) \

155 (
__exãnsi⁄__
 \

157 
__c⁄°
 *
__ﬁd
 = (
s
); \

158 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

159 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

160 
__√w
[
__Àn
] = '\0'; \

161 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

162 }))

	)

165 
__BEGIN_NAMESPACE_STD


167 *
	$°rchr
 (
__c⁄°
 *
__s
, 
__c
)

168 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

170 *
	$°ºchr
 (
__c⁄°
 *
__s
, 
__c
)

171 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

172 
__END_NAMESPACE_STD


174 #ifde‡
__USE_GNU


177 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

178 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

181 
__BEGIN_NAMESPACE_STD


184 
size_t
 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

185 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

188 
size_t
 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

189 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

191 *
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

192 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

194 *
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

195 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

199 *
	$°πok
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
)

200 
__THROW
 
	`__n⁄nuŒ
 ((2));

201 
__END_NAMESPACE_STD


205 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

206 
__c⁄°
 *
__ª°ri˘
 
__dñim
,

207 **
__ª°ri˘
 
__ßve_±r
)

208 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

209 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


210 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
,

211 **
__ª°ri˘
 
__ßve_±r
)

212 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

215 #ifde‡
__USE_GNU


217 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

218 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

221 #ifde‡
__USE_GNU


225 *
	$memmem
 (
__c⁄°
 *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

226 
__c⁄°
 *
__√edÀ
, 
size_t
 
__√edÀÀn
)

227 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

231 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

232 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

233 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

234 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

235 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

236 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

240 
__BEGIN_NAMESPACE_STD


242 
size_t
 
	$°æí
 (
__c⁄°
 *
__s
)

243 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 
__END_NAMESPACE_STD


246 #ifdef 
__USE_GNU


249 
size_t
 
	$°∫Àn
 (
__c⁄°
 *
__°rög
, 
size_t
 
__maxÀn
)

250 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

254 
__BEGIN_NAMESPACE_STD


256 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

257 
__END_NAMESPACE_STD


258 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


266 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


269 #ifde‡
__REDIRECT_NTH


270 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

271 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

272 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

274 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

275 
__THROW
 
	`__n⁄nuŒ
 ((2));

276 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

281 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

282 
__THROW
 
	`__n⁄nuŒ
 ((2));

286 #ifde‡
__USE_GNU


288 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

296 #ifde‡
__USE_BSD


298 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
)

299 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

302 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

305 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

306 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

309 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

310 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

313 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

314 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

318 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

322 #ifdef 
__USE_GNU


323 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

324 #ifde‡
__GNUC__


325 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

326 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

331 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

332 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

335 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

336 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

339 #ifdef 
__USE_GNU


342 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

343 
__loˇÀ_t
 
__loc
)

344 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

346 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

347 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

348 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

351 #ifdef 
__USE_BSD


354 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

355 
__c⁄°
 *
__ª°ri˘
 
__dñim
)

356 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

359 #ifdef 
__USE_GNU


361 
	$°rvîscmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

362 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

365 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

368 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

369 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

370 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

371 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

375 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

376 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

377 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

379 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

380 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

383 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

386 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

388 #i‚de‡
ba£«me


393 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

398 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

399 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

400 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


420 
	~<bôs/°rög.h
>

423 
	~<bôs/°rög2.h
>

426 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


428 
	~<bôs/°rög3.h
>

432 
__END_DECLS


	@/usr/include/strings.h

19 #i‚def 
_STRINGS_H


20 
	#_STRINGS_H
 1

	)

25 #i‡!
deföed
 
_STRING_H
 || !deföed 
__USE_BSD


27 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 
	~<°ddef.h
>

31 
__BEGIN_DECLS


34 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

35 
__THROW
 
__©åibuã_puª__
;

38 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
Ë
__THROW
;

41 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
;

45 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((const));

48 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW
 
__©åibuã_puª__
;

51 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW
 
__©åibuã_puª__
;

54 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

55 
__THROW
 
__©åibuã_puª__
;

58 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

59 
__THROW
 
__©åibuã_puª__
;

61 
__END_DECLS


	@/usr/include/sys/ioctl.h

19 #i‚def 
_SYS_IOCTL_H


20 
	#_SYS_IOCTL_H
 1

	)

22 
	~<„©uªs.h
>

24 
	g__BEGIN_DECLS


27 
	~<bôs/io˘ls.h
>

30 
	~<bôs/io˘l-ty≥s.h
>

37 
	~<sys/âydeÁu…s.h
>

42 
	$io˘l
 (
__fd
, 
__ªque°
, ...Ë
__THROW
;

44 
__END_DECLS


	@/usr/include/sys/mman.h

20 #i‚def 
_SYS_MMAN_H


21 
	#_SYS_MMAN_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<bôs/ty≥s.h
>

25 
	#__√ed_size_t


	)

26 
	~<°ddef.h
>

28 #i‚de‡
__off_t_deföed


29 #i‚de‡
__USE_FILE_OFFSET64


30 
__off_t
 
	toff_t
;

32 
__off64_t
 
	toff_t
;

34 
	#__off_t_deföed


	)

37 #i‚de‡
__mode_t_deföed


38 
__mode_t
 
	tmode_t
;

39 
	#__mode_t_deföed


	)

42 
	~<bôs/mm™.h
>

45 
	#MAP_FAILED
 ((*Ë-1)

	)

47 
	g__BEGIN_DECLS


57 #i‚de‡
__USE_FILE_OFFSET64


58 *
	$mm≠
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

59 
__Êags
, 
__fd
, 
__off_t
 
__off£t
Ë
__THROW
;

61 #ifde‡
__REDIRECT_NTH


62 * 
	`__REDIRECT_NTH
 (
mm≠
,

63 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

64 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
),

65 
mm≠64
);

67 
	#mm≠
 
mm≠64


	)

70 #ifde‡
__USE_LARGEFILE64


71 *
	$mm≠64
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

72 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
Ë
__THROW
;

77 
	$munm≠
 (*
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

82 
	$m¥Ÿe˘
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
Ë
__THROW
;

90 
	`msync
 (*
__addr
, 
size_t
 
__Àn
, 
__Êags
);

92 #ifde‡
__USE_BSD


95 
	$madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

97 #ifde‡
__USE_XOPEN2K


99 
	$posix_madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

104 
	$mlock
 (
__c⁄°
 *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

107 
	$mu∆ock
 (
__c⁄°
 *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

112 
	$mlockÆl
 (
__Êags
Ë
__THROW
;

116 
	$mu∆ockÆl
 (Ë
__THROW
;

118 #ifde‡
__USE_MISC


124 
	$möc‹e
 (*
__°¨t
, 
size_t
 
__Àn
, *
__vec
)

125 
__THROW
;

128 #ifde‡
__USE_GNU


134 *
	$mªm≠
 (*
__addr
, 
size_t
 
__ﬁd_Àn
, size_à
__√w_Àn
,

135 
__Êags
, ...Ë
__THROW
;

139 
	$ªm≠_fûe_∑ges
 (*
__°¨t
, 
size_t
 
__size
, 
__¥Ÿ
,

140 
size_t
 
__pgoff
, 
__Êags
Ë
__THROW
;

145 
	`shm_›í
 (
__c⁄°
 *
__«me
, 
__oÊag
, 
mode_t
 
__mode
);

148 
	`shm_u∆ök
 (
__c⁄°
 *
__«me
);

150 
__END_DECLS


	@/usr/include/sys/soundcard.h

1 
	~<löux/soundˇrd.h
>

	@/usr/include/sys/stat.h

24 #i‚def 
_SYS_STAT_H


25 
	#_SYS_STAT_H
 1

	)

27 
	~<„©uªs.h
>

29 
	~<bôs/ty≥s.h
>

31 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K
 || deföed 
__USE_MISC
 \

32 || 
deföed
 
	g__USE_ATFILE


33 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_time_t


	)

36 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ATFILE


37 
	#__√ed_time•ec


	)

39 
	~<time.h
>

42 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


45 #i‚de‡
__dev_t_deföed


46 
__dev_t
 
	tdev_t
;

47 
	#__dev_t_deföed


	)

50 #i‚de‡
__gid_t_deföed


51 
__gid_t
 
	tgid_t
;

52 
	#__gid_t_deföed


	)

55 #i‚de‡
__öo_t_deföed


56 #i‚de‡
__USE_FILE_OFFSET64


57 
__öo_t
 
	töo_t
;

59 
__öo64_t
 
	töo_t
;

61 
	#__öo_t_deföed


	)

64 #i‚de‡
__mode_t_deföed


65 
__mode_t
 
	tmode_t
;

66 
	#__mode_t_deföed


	)

69 #i‚de‡
__∆ök_t_deföed


70 
__∆ök_t
 
	t∆ök_t
;

71 
	#__∆ök_t_deföed


	)

74 #i‚de‡
__off_t_deföed


75 #i‚de‡
__USE_FILE_OFFSET64


76 
__off_t
 
	toff_t
;

78 
__off64_t
 
	toff_t
;

80 
	#__off_t_deföed


	)

83 #i‚de‡
__uid_t_deföed


84 
__uid_t
 
	tuid_t
;

85 
	#__uid_t_deföed


	)

89 #ifde‡
__USE_UNIX98


90 #i‚de‡
__blk˙t_t_deföed


91 #i‚de‡
__USE_FILE_OFFSET64


92 
__blk˙t_t
 
	tblk˙t_t
;

94 
__blk˙t64_t
 
	tblk˙t_t
;

96 
	#__blk˙t_t_deföed


	)

99 #i‚de‡
__blksize_t_deföed


100 
__blksize_t
 
	tblksize_t
;

101 
	#__blksize_t_deföed


	)

105 
	g__BEGIN_DECLS


107 
	~<bôs/°©.h
>

109 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


110 
	#S_IFMT
 
__S_IFMT


	)

111 
	#S_IFDIR
 
__S_IFDIR


	)

112 
	#S_IFCHR
 
__S_IFCHR


	)

113 
	#S_IFBLK
 
__S_IFBLK


	)

114 
	#S_IFREG
 
__S_IFREG


	)

115 #ifde‡
__S_IFIFO


116 
	#S_IFIFO
 
__S_IFIFO


	)

118 #ifde‡
__S_IFLNK


119 
	#S_IFLNK
 
__S_IFLNK


	)

121 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_UNIX98
) \

122 && 
deföed
 
	g__S_IFSOCK


123 
	#S_IFSOCK
 
__S_IFSOCK


	)

129 
	#__S_ISTYPE
(
mode
, 
mask
Ë(((modeË& 
__S_IFMT
Ë=(mask))

	)

131 
	#S_ISDIR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFDIR
)

	)

132 
	#S_ISCHR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFCHR
)

	)

133 
	#S_ISBLK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFBLK
)

	)

134 
	#S_ISREG
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFREG
)

	)

135 #ifde‡
__S_IFIFO


136 
	#S_ISFIFO
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFIFO
)

	)

138 #ifde‡
__S_IFLNK


139 
	#S_ISLNK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFLNK
)

	)

142 #i‡
deföed
 
__USE_BSD
 && !deföed 
__S_IFLNK


143 
	#S_ISLNK
(
mode
Ë0

	)

146 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
) \

147 && 
deföed
 
	g__S_IFSOCK


148 
	#S_ISSOCK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFSOCK
)

	)

155 #ifdef 
__USE_POSIX199309


156 
	#S_TYPEISMQ
(
buf
Ë
	`__S_TYPEISMQ
(buf)

	)

157 
	#S_TYPEISSEM
(
buf
Ë
	`__S_TYPEISSEM
(buf)

	)

158 
	#S_TYPEISSHM
(
buf
Ë
	`__S_TYPEISSHM
(buf)

	)

164 
	#S_ISUID
 
__S_ISUID


	)

165 
	#S_ISGID
 
__S_ISGID


	)

167 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


169 
	#S_ISVTX
 
__S_ISVTX


	)

172 
	#S_IRUSR
 
__S_IREAD


	)

173 
	#S_IWUSR
 
__S_IWRITE


	)

174 
	#S_IXUSR
 
__S_IEXEC


	)

176 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

178 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_BSD


179 
	#S_IREAD
 
S_IRUSR


	)

180 
	#S_IWRITE
 
S_IWUSR


	)

181 
	#S_IEXEC
 
S_IXUSR


	)

184 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

185 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

186 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

188 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

190 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

191 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

192 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

194 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

197 #ifdef 
__USE_BSD


199 
	#ACCESSPERMS
 (
S_IRWXU
|
S_IRWXG
|
S_IRWXO
Ë

	)

200 
	#ALLPERMS
 (
S_ISUID
|
S_ISGID
|
S_ISVTX
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

201 
	#DEFFILEMODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

203 
	#S_BLKSIZE
 512

	)

207 #i‚de‡
__USE_FILE_OFFSET64


209 
	$°©
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

210 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

214 
	$f°©
 (
__fd
, 
°©
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

216 #ifde‡
__REDIRECT_NTH


217 
	`__REDIRECT_NTH
 (
°©
, (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

218 
°©
 *
__ª°ri˘
 
__buf
), 
°©64
)

219 
	`__n⁄nuŒ
 ((1, 2));

220 
	`__REDIRECT_NTH
 (
f°©
, (
__fd
, 
°©
 *
__buf
), 
f°©64
)

221 
	`__n⁄nuŒ
 ((2));

223 
	#°©
 
°©64


	)

224 
	#f°©
 
f°©64


	)

227 #ifde‡
__USE_LARGEFILE64


228 
	$°©64
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

229 
°©64
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

230 
	$f°©64
 (
__fd
, 
°©64
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

233 #ifde‡
__USE_ATFILE


237 #i‚de‡
__USE_FILE_OFFSET64


238 
	$f°©©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

239 
°©
 *
__ª°ri˘
 
__buf
, 
__Êag
)

240 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

242 #ifde‡
__REDIRECT_NTH


243 
	`__REDIRECT_NTH
 (
f°©©
, (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

244 
°©
 *
__ª°ri˘
 
__buf
,

245 
__Êag
),

246 
f°©©64
Ë
	`__n⁄nuŒ
 ((2, 3));

248 
	#f°©©
 
f°©©64


	)

252 
	$f°©©64
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

253 
°©64
 *
__ª°ri˘
 
__buf
, 
__Êag
)

254 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

257 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


258 #i‚de‡
__USE_FILE_OFFSET64


261 
	$l°©
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

262 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

264 #ifde‡
__REDIRECT_NTH


265 
	`__REDIRECT_NTH
 (
l°©
,

266 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

267 
°©
 *
__ª°ri˘
 
__buf
), 
l°©64
)

268 
	`__n⁄nuŒ
 ((1, 2));

270 
	#l°©
 
l°©64


	)

273 #ifde‡
__USE_LARGEFILE64


274 
	$l°©64
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

275 
°©64
 *
__ª°ri˘
 
__buf
)

276 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

282 
	$chmod
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
)

283 
__THROW
 
	`__n⁄nuŒ
 ((1));

285 #ifde‡
__USE_BSD


289 
	$lchmod
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
)

290 
__THROW
 
	`__n⁄nuŒ
 ((1));

294 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


295 
	$fchmod
 (
__fd
, 
__mode_t
 
__mode
Ë
__THROW
;

298 #ifde‡
__USE_ATFILE


301 
	$fchmod©
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__mode_t
 
mode
, 
__Êag
)

302 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

309 
__mode_t
 
	$umask
 (
__mode_t
 
__mask
Ë
__THROW
;

311 #ifdef 
__USE_GNU


314 
__mode_t
 
	$gëumask
 (Ë
__THROW
;

318 
	$mkdú
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

319 
__THROW
 
	`__n⁄nuŒ
 ((1));

321 #ifde‡
__USE_ATFILE


325 
	$mkdú©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

326 
__THROW
 
	`__n⁄nuŒ
 ((2));

332 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


333 
	$mknod
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

337 #ifde‡
__USE_ATFILE


341 
	$mknod©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

342 
__dev_t
 
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

347 
	$mkfifo
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

348 
__THROW
 
	`__n⁄nuŒ
 ((1));

350 #ifde‡
__USE_ATFILE


354 
	$mkfifﬂt
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

355 
__THROW
 
	`__n⁄nuŒ
 ((2));

358 #ifde‡
__USE_ATFILE


361 
	$utimíßt
 (
__fd
, 
__c⁄°
 *
__∑th
,

362 
__c⁄°
 
time•ec
 
__times
[2],

363 
__Êags
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2));

367 #ifde‡
__USE_GNU


370 
	$futimís
 (
__fd
, 
__c⁄°
 
time•ec
 
__times
[2]Ë
__THROW
;

388 #i‚de‡
_STAT_VER


389 
	#_STAT_VER
 0

	)

391 #i‚de‡
_MKNOD_VER


392 
	#_MKNOD_VER
 0

	)

396 #i‚de‡
__USE_FILE_OFFSET64


397 
	$__fx°©
 (
__vî
, 
__fûdes
, 
°©
 *
__°©_buf
)

398 
__THROW
 
	`__n⁄nuŒ
 ((3));

399 
	$__x°©
 (
__vî
, 
__c⁄°
 *
__fûíame
,

400 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

401 
	$__lx°©
 (
__vî
, 
__c⁄°
 *
__fûíame
,

402 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

403 
	$__fx°©©
 (
__vî
, 
__fûdes
, 
__c⁄°
 *
__fûíame
,

404 
°©
 *
__°©_buf
, 
__Êag
)

405 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

407 #ifde‡
__REDIRECT_NTH


408 
	`__REDIRECT_NTH
 (
__fx°©
, (
__vî
, 
__fûdes
,

409 
°©
 *
__°©_buf
), 
__fx°©64
)

410 
	`__n⁄nuŒ
 ((3));

411 
	`__REDIRECT_NTH
 (
__x°©
, (
__vî
, 
__c⁄°
 *
__fûíame
,

412 
°©
 *
__°©_buf
), 
__x°©64
)

413 
	`__n⁄nuŒ
 ((2, 3));

414 
	`__REDIRECT_NTH
 (
__lx°©
, (
__vî
, 
__c⁄°
 *
__fûíame
,

415 
°©
 *
__°©_buf
), 
__lx°©64
)

416 
	`__n⁄nuŒ
 ((2, 3));

417 
	`__REDIRECT_NTH
 (
__fx°©©
, (
__vî
, 
__fûdes
,

418 
__c⁄°
 *
__fûíame
,

419 
°©
 *
__°©_buf
, 
__Êag
),

420 
__fx°©©64
Ë
	`__n⁄nuŒ
 ((3, 4));

423 
	#__fx°©
 
__fx°©64


	)

424 
	#__x°©
 
__x°©64


	)

425 
	#__lx°©
 
__lx°©64


	)

429 #ifde‡
__USE_LARGEFILE64


430 
	$__fx°©64
 (
__vî
, 
__fûdes
, 
°©64
 *
__°©_buf
)

431 
__THROW
 
	`__n⁄nuŒ
 ((3));

432 
	$__x°©64
 (
__vî
, 
__c⁄°
 *
__fûíame
,

433 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

434 
	$__lx°©64
 (
__vî
, 
__c⁄°
 *
__fûíame
,

435 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

436 
	$__fx°©©64
 (
__vî
, 
__fûdes
, 
__c⁄°
 *
__fûíame
,

437 
°©64
 *
__°©_buf
, 
__Êag
)

438 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

440 
	$__xmknod
 (
__vî
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

441 
__dev_t
 *
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

443 
	$__xmknod©
 (
__vî
, 
__fd
, 
__c⁄°
 *
__∑th
,

444 
__mode_t
 
__mode
, 
__dev_t
 *
__dev
)

445 
__THROW
 
	`__n⁄nuŒ
 ((3, 5));

447 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES


450 
__exã∫_ölöe
 

451 
	`__NTH
 (
	$°©
 (
__c⁄°
 *
__∑th
, 
°©
 *
__°©buf
))

453  
	`__x°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

454 
	}
}

456 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


457 
__exã∫_ölöe
 

458 
__NTH
 (
	$l°©
 (
__c⁄°
 *
__∑th
, 
°©
 *
__°©buf
))

460  
	`__lx°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

461 
	}
}

464 
__exã∫_ölöe
 

465 
__NTH
 (
	$f°©
 (
__fd
, 
°©
 *
__°©buf
))

467  
	`__fx°©
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

468 
	}
}

470 #ifde‡
__USE_ATFILE


471 
__exã∫_ölöe
 

472 
__NTH
 (
	$f°©©
 (
__fd
, 
__c⁄°
 *
__fûíame
, 
°©
 *
__°©buf
,

473 
__Êag
))

475  
	`__fx°©©
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

476 
	}
}

479 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD


480 
__exã∫_ölöe
 

481 
__NTH
 (
	$mknod
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
))

483  
	`__xmknod
 (
_MKNOD_VER
, 
__∑th
, 
__mode
, &
__dev
);

484 
	}
}

487 #ifde‡
__USE_ATFILE


488 
__exã∫_ölöe
 

489 
__NTH
 (
	$mknod©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

490 
__dev_t
 
__dev
))

492  
	`__xmknod©
 (
_MKNOD_VER
, 
__fd
, 
__∑th
, 
__mode
, &
__dev
);

493 
	}
}

496 #i‡
deföed
 
__USE_LARGEFILE64
 \

497 && (! 
deföed
 
	g__USE_FILE_OFFSET64
 \

498 || (
deföed
 
	g__REDIRECT_NTH
 && deföed 
	g__OPTIMIZE__
))

499 
__exã∫_ölöe
 

500 
__NTH
 (
	$°©64
 (
__c⁄°
 *
__∑th
, 
°©64
 *
__°©buf
))

502  
	`__x°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

503 
	}
}

505 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


506 
__exã∫_ölöe
 

507 
__NTH
 (
	$l°©64
 (
__c⁄°
 *
__∑th
, 
°©64
 *
__°©buf
))

509  
	`__lx°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

510 
	}
}

513 
__exã∫_ölöe
 

514 
__NTH
 (
	$f°©64
 (
__fd
, 
°©64
 *
__°©buf
))

516  
	`__fx°©64
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

517 
	}
}

519 #ifde‡
__USE_GNU


520 
__exã∫_ölöe
 

521 
__NTH
 (
	$f°©©64
 (
__fd
, 
__c⁄°
 *
__fûíame
, 
°©64
 *
__°©buf
,

522 
__Êag
))

524  
	`__fx°©©64
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

525 
	}
}

532 
	g__END_DECLS


	@/usr/include/sys/time.h

20 #i‚de‡
_SYS_TIME_H


21 
	#_SYS_TIME_H
 1

	)

23 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

26 
	#__√ed_time_t


	)

27 
	~<time.h
>

28 
	#__√ed_timevÆ


	)

29 
	~<bôs/time.h
>

31 
	~<sys/£À˘.h
>

33 #i‚de‡
__su£c⁄ds_t_deföed


34 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

35 
	#__su£c⁄ds_t_deföed


	)

39 
	g__BEGIN_DECLS


41 #ifde‡
__USE_GNU


43 
	#TIMEVAL_TO_TIMESPEC
(
tv
, 
ts
) { \

44 (
ts
)->
tv_£c
 = (
tv
)->tv_sec; \

45 (
ts
)->
tv_n£c
 = (
tv
)->
tv_u£c
 * 1000; \

46 }

	)

47 
	#TIMESPEC_TO_TIMEVAL
(
tv
, 
ts
) { \

48 (
tv
)->
tv_£c
 = (
ts
)->tv_sec; \

49 (
tv
)->
tv_u£c
 = (
ts
)->
tv_n£c
 / 1000; \

50 }

	)

54 #ifde‡
__USE_BSD


57 
	stimez⁄e


59 
	mtz_möuãswe°
;

60 
	mtz_d°time
;

63 
timez⁄e
 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

65 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

73 
	$gëtimeofday
 (
timevÆ
 *
__ª°ri˘
 
__tv
,

74 
__timez⁄e_±r_t
 
__tz
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

76 #ifde‡
__USE_BSD


79 
	$£âimeofday
 (
__c⁄°
 
timevÆ
 *
__tv
,

80 
__c⁄°
 
timez⁄e
 *
__tz
)

81 
__THROW
 
	`__n⁄nuŒ
 ((1));

87 
	$adjtime
 (
__c⁄°
 
timevÆ
 *
__dñè
,

88 
timevÆ
 *
__ﬁddñè
Ë
__THROW
;

93 
	e__ôimî_which


96 
ITIMER_REAL
 = 0,

97 
	#ITIMER_REAL
 
ITIMER_REAL


	)

99 
ITIMER_VIRTUAL
 = 1,

100 
	#ITIMER_VIRTUAL
 
ITIMER_VIRTUAL


	)

103 
ITIMER_PROF
 = 2

104 
	#ITIMER_PROF
 
ITIMER_PROF


	)

109 
	sôimîvÆ


112 
timevÆ
 
ô_öãrvÆ
;

114 
timevÆ
 
ô_vÆue
;

117 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


120 
__ôimî_which
 
	t__ôimî_which_t
;

122 
	t__ôimî_which_t
;

127 
	$gëôimî
 (
__ôimî_which_t
 
__which
,

128 
ôimîvÆ
 *
__vÆue
Ë
__THROW
;

133 
	$£tôimî
 (
__ôimî_which_t
 
__which
,

134 
__c⁄°
 
ôimîvÆ
 *
__ª°ri˘
 
__√w
,

135 
ôimîvÆ
 *
__ª°ri˘
 
__ﬁd
Ë
__THROW
;

140 
	$utimes
 (
__c⁄°
 *
__fûe
, __c⁄° 
timevÆ
 
__tvp
[2])

141 
__THROW
 
	`__n⁄nuŒ
 ((1));

143 #ifde‡
__USE_BSD


145 
	$lutimes
 (
__c⁄°
 *
__fûe
, __c⁄° 
timevÆ
 
__tvp
[2])

146 
__THROW
 
	`__n⁄nuŒ
 ((1));

149 
	$futimes
 (
__fd
, 
__c⁄°
 
timevÆ
 
__tvp
[2]Ë
__THROW
;

152 #ifde‡
__USE_ATFILE


156 
	$futimeßt
 (
__fd
, 
__c⁄°
 *
__fûe
,

157 
__c⁄°
 
timevÆ
 
__tvp
[2]Ë
__THROW
;

161 #ifde‡
__USE_BSD


164 
	#timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

165 
	#timî˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0)

	)

166 
	#timîcmp
(
a
, 
b
, 
CMP
) \

167 (((
a
)->
tv_£c
 =(
b
)->tv_sec) ? \

168 ((
a
)->
tv_u£c
 
	`CMP
 (
b
)->tv_usec) : \

169 ((
a
)->
tv_£c
 
	`CMP
 (
b
)->tv_£c))

	)

170 
	#timîadd
(
a
, 
b
, 
ªsu…
) \

172 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯+ (
b
)->tv_sec; \

173 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯+ (
b
)->tv_usec; \

174 i‡((
ªsu…
)->
tv_u£c
 >= 1000000) \

176 ++(
ªsu…
)->
tv_£c
; \

177 (
ªsu…
)->
tv_u£c
 -= 1000000; \

179 
	}
} 0)

	)

180 
	#timîsub
(
a
, 
b
, 
ªsu…
) \

182 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯- (
b
)->tv_sec; \

183 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯- (
b
)->tv_usec; \

184 i‡((
ªsu…
)->
tv_u£c
 < 0) { \

185 --(
ªsu…
)->
tv_£c
; \

186 (
ªsu…
)->
tv_u£c
 += 1000000; \

188 } 0)

	)

191 
	g__END_DECLS


	@/usr/include/sys/types.h

24 #i‚def 
_SYS_TYPES_H


25 
	#_SYS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

33 #ifdef 
__USE_BSD


34 #i‚de‡
__u_ch¨_deföed


35 
__u_ch¨
 
	tu_ch¨
;

36 
__u_sh‹t
 
	tu_sh‹t
;

37 
__u_öt
 
	tu_öt
;

38 
__u_l⁄g
 
	tu_l⁄g
;

39 
__quad_t
 
	tquad_t
;

40 
__u_quad_t
 
	tu_quad_t
;

41 
__fsid_t
 
	tfsid_t
;

42 
	#__u_ch¨_deföed


	)

46 
__loff_t
 
	tloff_t
;

48 #i‚de‡
__öo_t_deföed


49 #i‚de‡
__USE_FILE_OFFSET64


50 
__öo_t
 
	töo_t
;

52 
__öo64_t
 
	töo_t
;

54 
	#__öo_t_deföed


	)

56 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


57 
__öo64_t
 
	töo64_t
;

58 
	#__öo64_t_deföed


	)

61 #i‚de‡
__dev_t_deföed


62 
__dev_t
 
	tdev_t
;

63 
	#__dev_t_deföed


	)

66 #i‚de‡
__gid_t_deföed


67 
__gid_t
 
	tgid_t
;

68 
	#__gid_t_deföed


	)

71 #i‚de‡
__mode_t_deföed


72 
__mode_t
 
	tmode_t
;

73 
	#__mode_t_deföed


	)

76 #i‚de‡
__∆ök_t_deföed


77 
__∆ök_t
 
	t∆ök_t
;

78 
	#__∆ök_t_deföed


	)

81 #i‚de‡
__uid_t_deföed


82 
__uid_t
 
	tuid_t
;

83 
	#__uid_t_deföed


	)

86 #i‚de‡
__off_t_deföed


87 #i‚de‡
__USE_FILE_OFFSET64


88 
__off_t
 
	toff_t
;

90 
__off64_t
 
	toff_t
;

92 
	#__off_t_deföed


	)

94 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


95 
__off64_t
 
	toff64_t
;

96 
	#__off64_t_deföed


	)

99 #i‚de‡
__pid_t_deföed


100 
__pid_t
 
	tpid_t
;

101 
	#__pid_t_deföed


	)

104 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__id_t_deföed


105 
__id_t
 
	tid_t
;

106 
	#__id_t_deföed


	)

109 #i‚de‡
__ssize_t_deföed


110 
__ssize_t
 
	tssize_t
;

111 
	#__ssize_t_deföed


	)

114 #ifdef 
__USE_BSD


115 #i‚de‡
__daddr_t_deföed


116 
__daddr_t
 
	tdaddr_t
;

117 
__ˇddr_t
 
	tˇddr_t
;

118 
	#__daddr_t_deföed


	)

122 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


123 
__key_t
 
	tkey_t
;

124 
	#__key_t_deföed


	)

127 #ifde‡
__USE_XOPEN


128 
	#__√ed_˛ock_t


	)

130 
	#__√ed_time_t


	)

131 
	#__√ed_timî_t


	)

132 
	#__√ed_˛ockid_t


	)

133 
	~<time.h
>

135 #ifde‡
__USE_XOPEN


136 #i‚de‡
__u£c⁄ds_t_deföed


137 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

138 
	#__u£c⁄ds_t_deföed


	)

140 #i‚de‡
__su£c⁄ds_t_deföed


141 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

142 
	#__su£c⁄ds_t_deföed


	)

146 
	#__√ed_size_t


	)

147 
	~<°ddef.h
>

149 #ifde‡
__USE_MISC


151 
	tul⁄g
;

152 
	tush‹t
;

153 
	tuöt
;

158 #i‡!
__GNUC_PREREQ
 (2, 7)

161 #i‚de‡
__öt8_t_deföed


162 
	#__öt8_t_deföed


	)

163 
	töt8_t
;

164 
	töt16_t
;

165 
	töt32_t
;

166 #i‡
__WORDSIZE
 == 64

167 
	töt64_t
;

168 #ñi‡
__GLIBC_HAVE_LONG_LONG


169 
__exãnsi⁄__
 
	töt64_t
;

174 
	tu_öt8_t
;

175 
	tu_öt16_t
;

176 
	tu_öt32_t
;

177 #i‡
__WORDSIZE
 == 64

178 
	tu_öt64_t
;

179 #ñi‡
__GLIBC_HAVE_LONG_LONG


180 
__exãnsi⁄__
 
	tu_öt64_t
;

183 
	tªgi°î_t
;

188 
	#__ötN_t
(
N
, 
MODE
) \

189 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

190 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

191 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

193 #i‚de‡
	t__öt8_t_deföed


194 
	t__öt8_t_deföed


	)

195 
	t__ötN_t
 (8, 
	t__QI__
);

196 
__ötN_t
 (16, 
__HI__
);

197 
__ötN_t
 (32, 
__SI__
);

198 
__ötN_t
 (64, 
__DI__
);

201 
__u_ötN_t
 (8, 
__QI__
);

202 
__u_ötN_t
 (16, 
__HI__
);

203 
__u_ötN_t
 (32, 
__SI__
);

204 
__u_ötN_t
 (64, 
__DI__
);

206 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

212 
	#__BIT_TYPES_DEFINED__
 1

	)

215 #ifdef 
__USE_BSD


217 
	~<ídün.h
>

220 
	~<sys/£À˘.h
>

223 
	~<sys/sysma¸os.h
>

227 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__blksize_t_deföed


228 
__blksize_t
 
	tblksize_t
;

229 
	#__blksize_t_deföed


	)

233 #i‚de‡
__USE_FILE_OFFSET64


234 #i‚de‡
__blk˙t_t_deföed


235 
__blk˙t_t
 
	tblk˙t_t
;

236 
	#__blk˙t_t_deföed


	)

238 #i‚de‡
__fsblk˙t_t_deföed


239 
__fsblk˙t_t
 
	tfsblk˙t_t
;

240 
	#__fsblk˙t_t_deföed


	)

242 #i‚de‡
__fsfû˙t_t_deföed


243 
__fsfû˙t_t
 
	tfsfû˙t_t
;

244 
	#__fsfû˙t_t_deföed


	)

247 #i‚de‡
__blk˙t_t_deföed


248 
__blk˙t64_t
 
	tblk˙t_t
;

249 
	#__blk˙t_t_deföed


	)

251 #i‚de‡
__fsblk˙t_t_deföed


252 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

253 
	#__fsblk˙t_t_deföed


	)

255 #i‚de‡
__fsfû˙t_t_deföed


256 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

257 
	#__fsfû˙t_t_deföed


	)

261 #ifde‡
__USE_LARGEFILE64


262 
__blk˙t64_t
 
	tblk˙t64_t
;

263 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

264 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

269 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


270 
	~<bôs/±hªadty≥s.h
>

273 
	g__END_DECLS


	@/usr/include/time.h

24 #i‚def 
_TIME_H


26 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

27 ! 
deföed
 
	g__√ed_time•ec
)

28 
	#_TIME_H
 1

	)

29 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


35 #ifdef 
_TIME_H


37 
	#__√ed_size_t


	)

38 
	#__√ed_NULL


	)

39 
	~<°ddef.h
>

43 
	~<bôs/time.h
>

46 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


47 #i‚de‡
CLK_TCK


48 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

54 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

55 
	#__˛ock_t_deföed
 1

	)

57 
	~<bôs/ty≥s.h
>

59 
__BEGIN_NAMESPACE_STD


61 
__˛ock_t
 
	t˛ock_t
;

62 
	g__END_NAMESPACE_STD


63 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


64 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

68 #unde‡
__√ed_˛ock_t


70 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

71 
	#__time_t_deföed
 1

	)

73 
	~<bôs/ty≥s.h
>

75 
__BEGIN_NAMESPACE_STD


77 
__time_t
 
	ttime_t
;

78 
__END_NAMESPACE_STD


79 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


80 
	$__USING_NAMESPACE_STD
(
time_t
)

84 #unde‡
__√ed_time_t


86 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

87 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

88 
	#__˛ockid_t_deföed
 1

	)

90 
	~<bôs/ty≥s.h
>

93 
__˛ockid_t
 
	t˛ockid_t
;

96 #unde‡
__˛ockid_time_t


98 #i‡!
deföed
 
__timî_t_deföed
 && \

99 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

100 
	#__timî_t_deföed
 1

	)

102 
	~<bôs/ty≥s.h
>

105 
__timî_t
 
	ttimî_t
;

108 #unde‡
__√ed_timî_t


111 #i‡!
deföed
 
__time•ec_deföed
 && \

112 ((
deföed
 
_TIME_H
 && \

113 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

114 
deföed
 
__√ed_time•ec
)

115 
	#__time•ec_deföed
 1

	)

117 
	~<bôs/ty≥s.h
>

121 
	stime•ec


123 
__time_t
 
tv_£c
;

124 
tv_n£c
;

128 #unde‡
__√ed_time•ec


131 #ifdef 
_TIME_H


132 
__BEGIN_NAMESPACE_STD


134 
	stm


136 
tm_£c
;

137 
tm_mö
;

138 
tm_hour
;

139 
tm_mday
;

140 
tm_m⁄
;

141 
tm_yór
;

142 
tm_wday
;

143 
tm_yday
;

144 
tm_isd°
;

146 #ifdef 
__USE_BSD


147 
tm_gmtoff
;

148 
__c⁄°
 *
tm_z⁄e
;

150 
__tm_gmtoff
;

151 
__c⁄°
 *
__tm_z⁄e
;

154 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


156 
	$__USING_NAMESPACE_STD
(
tm
)

160 #ifde‡
__USE_POSIX199309


162 
	sôimî•ec


164 
time•ec
 
ô_öãrvÆ
;

165 
time•ec
 
ô_vÆue
;

169 
sigevít
;

173 #ifde‡
__USE_XOPEN2K


174 #i‚de‡
__pid_t_deföed


175 
__pid_t
 
	tpid_t
;

176 
	#__pid_t_deföed


	)

181 
__BEGIN_NAMESPACE_STD


184 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

187 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

190 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

191 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

194 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

200 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

201 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

202 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

203 
__END_NAMESPACE_STD


205 #ifde‡
__USE_XOPEN


208 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

209 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

210 
__THROW
;

213 #ifde‡
__USE_GNU


216 
	~<xloˇÀ.h
>

218 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

219 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

220 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

221 
__loˇÀ_t
 
__loc
Ë
__THROW
;

223 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

224 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

225 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 
__BEGIN_NAMESPACE_STD


232 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

236 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

237 
__END_NAMESPACE_STD


239 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


242 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

243 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

247 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

248 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

251 
__BEGIN_NAMESPACE_STD


254 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

257 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

258 
__END_NAMESPACE_STD


260 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


265 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

266 *
__ª°ri˘
 
__buf
Ë
__THROW
;

269 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

270 *
__ª°ri˘
 
__buf
Ë
__THROW
;

275 *
__tz«me
[2];

276 
__daylight
;

277 
__timez⁄e
;

280 #ifdef 
__USE_POSIX


282 *
tz«me
[2];

286 
	$tz£t
 (Ë
__THROW
;

289 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


290 
daylight
;

291 
timez⁄e
;

294 #ifde‡
__USE_SVID


297 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

303 
	#__i¶óp
(
yór
) \

304 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

307 #ifde‡
__USE_MISC


312 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

315 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

318 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

322 #ifde‡
__USE_POSIX199309


327 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

328 
time•ec
 *
__ªmaöög
);

332 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

335 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

338 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

339 
__THROW
;

341 #ifde‡
__USE_XOPEN2K


346 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

347 
__c⁄°
 
time•ec
 *
__ªq
,

348 
time•ec
 *
__ªm
);

351 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

356 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

357 
sigevít
 *
__ª°ri˘
 
__evp
,

358 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

361 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

364 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

365 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

366 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

369 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

370 
__THROW
;

373 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

377 #ifde‡
__USE_XOPEN_EXTENDED


389 
gëd©e_îr
;

398 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

401 #ifde‡
__USE_GNU


412 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

413 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

416 
__END_DECLS


	@/usr/include/unistd.h

23 #i‚def 
_UNISTD_H


24 
	#_UNISTD_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


34 
	#_POSIX_VERSION
 200112L

	)

40 
	#_POSIX2_VERSION
 200112L

	)

44 
	#_POSIX2_C_BIND
 200112L

	)

48 
	#_POSIX2_C_DEV
 200112L

	)

52 
	#_POSIX2_SW_DEV
 200112L

	)

56 
	#_POSIX2_LOCALEDEF
 200112L

	)

59 #ifde‡
__USE_XOPEN2K


60 
	#_XOPEN_VERSION
 600

	)

61 #ñi‡
deföed
 
__USE_UNIX98


62 
	#_XOPEN_VERSION
 500

	)

64 
	#_XOPEN_VERSION
 4

	)

68 
	#_XOPEN_XCU_VERSION
 4

	)

71 
	#_XOPEN_XPG2
 1

	)

72 
	#_XOPEN_XPG3
 1

	)

73 
	#_XOPEN_XPG4
 1

	)

76 
	#_XOPEN_UNIX
 1

	)

79 
	#_XOPEN_CRYPT
 1

	)

83 
	#_XOPEN_ENH_I18N
 1

	)

86 
	#_XOPEN_LEGACY
 1

	)

173 
	~<bôs/posix_›t.h
>

176 #ifde‡
__USE_UNIX98


177 
	~<bôs/ívú⁄míts.h
>

181 
	#STDIN_FILENO
 0

	)

182 
	#STDOUT_FILENO
 1

	)

183 
	#STDERR_FILENO
 2

	)

188 
	~<bôs/ty≥s.h
>

190 #i‚def 
__ssize_t_deföed


191 
__ssize_t
 
	tssize_t
;

192 
	#__ssize_t_deföed


	)

195 
	#__√ed_size_t


	)

196 
	#__√ed_NULL


	)

197 
	~<°ddef.h
>

199 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


202 #i‚de‡
__gid_t_deföed


203 
__gid_t
 
	tgid_t
;

204 
	#__gid_t_deföed


	)

207 #i‚de‡
__uid_t_deföed


208 
__uid_t
 
	tuid_t
;

209 
	#__uid_t_deföed


	)

212 #i‚de‡
__off_t_deföed


213 #i‚de‡
__USE_FILE_OFFSET64


214 
__off_t
 
	toff_t
;

216 
__off64_t
 
	toff_t
;

218 
	#__off_t_deföed


	)

220 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


221 
__off64_t
 
	toff64_t
;

222 
	#__off64_t_deföed


	)

225 #i‚de‡
__u£c⁄ds_t_deföed


226 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

227 
	#__u£c⁄ds_t_deföed


	)

230 #i‚de‡
__pid_t_deföed


231 
__pid_t
 
	tpid_t
;

232 
	#__pid_t_deföed


	)

236 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


237 #i‚de‡
__öçå_t_deföed


238 
__öçå_t
 
	töçå_t
;

239 
	#__öçå_t_deföed


	)

243 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


244 #i‚de‡
__sockÀn_t_deföed


245 
__sockÀn_t
 
	tsockÀn_t
;

246 
	#__sockÀn_t_deföed


	)

252 
	#R_OK
 4

	)

253 
	#W_OK
 2

	)

254 
	#X_OK
 1

	)

255 
	#F_OK
 0

	)

258 
	$ac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

260 #ifde‡
__USE_GNU


263 
	$euidac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

264 
__THROW
 
	`__n⁄nuŒ
 ((1));

267 
	$óc˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

268 
__THROW
 
	`__n⁄nuŒ
 ((1));

271 #ifde‡
__USE_ATFILE


275 
	$Ác˚sßt
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__ty≥
, 
__Êag
)

276 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

281 #i‚def 
_STDIO_H


282 
	#SEEK_SET
 0

	)

283 
	#SEEK_CUR
 1

	)

284 
	#SEEK_END
 2

	)

287 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


289 
	#L_SET
 
SEEK_SET


	)

290 
	#L_INCR
 
SEEK_CUR


	)

291 
	#L_XTND
 
SEEK_END


	)

300 #i‚de‡
__USE_FILE_OFFSET64


301 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

303 #ifde‡
__REDIRECT_NTH


304 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

305 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

306 
l£ek64
);

308 
	#l£ek
 
l£ek64


	)

311 #ifde‡
__USE_LARGEFILE64


312 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

313 
__THROW
;

320 
	`˛o£
 (
__fd
);

327 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

333 
ssize_t
 
	$wrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
Ë
__wur
;

335 #ifde‡
__USE_UNIX98


336 #i‚de‡
__USE_FILE_OFFSET64


343 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

344 
__off_t
 
__off£t
Ë
__wur
;

351 
ssize_t
 
	$pwrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

352 
__off_t
 
__off£t
Ë
__wur
;

354 #ifde‡
__REDIRECT


355 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

356 
__off64_t
 
__off£t
),

357 
¥ód64
Ë
__wur
;

358 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, 
__c⁄°
 *
__buf
,

359 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

360 
pwrôe64
Ë
__wur
;

362 
	#¥ód
 
¥ód64


	)

363 
	#pwrôe
 
pwrôe64


	)

367 #ifde‡
__USE_LARGEFILE64


371 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

372 
__off64_t
 
__off£t
Ë
__wur
;

375 
ssize_t
 
	$pwrôe64
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

376 
__off64_t
 
__off£t
Ë
__wur
;

384 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

393 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

405 
	`¶ìp
 (
__£c⁄ds
);

407 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


412 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

413 
__THROW
;

420 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

429 
	`∑u£
 ();

433 
	$chown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

434 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

436 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


438 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

443 
	$lchown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

444 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

448 #ifde‡
__USE_ATFILE


451 
	$fchow«t
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
,

452 
__gid_t
 
__group
, 
__Êag
)

453 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

457 
	$chdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

459 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


461 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

471 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

473 #ifdef 
__USE_GNU


477 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

480 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


484 *
	$gëwd
 (*
__buf
)

485 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

490 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

493 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

496 **
__ívú⁄
;

497 #ifde‡
__USE_GNU


498 **
ívú⁄
;

504 
	$execve
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[],

505 *
__c⁄°
 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

507 #ifde‡
__USE_GNU


510 
	$„xecve
 (
__fd
, *
__c⁄°
 
__¨gv
[], *__c⁄° 
__ívp
[])

511 
__THROW
;

516 
	$execv
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[])

517 
__THROW
 
	`__n⁄nuŒ
 ((1));

521 
	$exe˛e
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

522 
__THROW
 
	`__n⁄nuŒ
 ((1));

526 
	$exe˛
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

527 
__THROW
 
	`__n⁄nuŒ
 ((1));

531 
	$execvp
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[])

532 
__THROW
 
	`__n⁄nuŒ
 ((1));

537 
	$exe˛p
 (
__c⁄°
 *
__fûe
, __c⁄° *
__¨g
, ...)

538 
__THROW
 
	`__n⁄nuŒ
 ((1));

541 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


543 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

548 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

554 
	~<bôs/c⁄‚ame.h
>

557 
	$∑thc⁄f
 (
__c⁄°
 *
__∑th
, 
__«me
)

558 
__THROW
 
	`__n⁄nuŒ
 ((1));

561 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

564 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

566 #ifdef 
__USE_POSIX2


568 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

573 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

576 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

580 #i‚de‡
__FAVOR_BSD


581 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

583 #ifde‡
__REDIRECT_NTH


584 
__pid_t
 
	`__REDIRECT_NTH
 (
gëpgΩ
, (__pid_à
__pid
), 
__gëpgid
);

586 
	#gëpgΩ
 
__gëpgid


	)

591 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

592 #ifde‡
__USE_XOPEN_EXTENDED


593 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

600 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

602 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


613 #i‚de‡
__FAVOR_BSD


617 
	$£çgΩ
 (Ë
__THROW
;

622 #ifde‡
__REDIRECT_NTH


623 
	`__REDIRECT_NTH
 (
£çgΩ
, (
__pid_t
 
__pid
, __pid_à
__pgΩ
), 
£çgid
);

625 
	#£çgΩ
 
£çgid


	)

634 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

636 #ifde‡
__USE_XOPEN_EXTENDED


638 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

642 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

645 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

648 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

651 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

656 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

658 #ifdef 
__USE_GNU


660 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

667 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
;

669 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


672 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
;

675 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


677 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
;

684 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
;

686 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


689 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
;

692 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


694 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
;

697 #ifde‡
__USE_GNU


700 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

701 
__THROW
;

705 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

706 
__THROW
;

710 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

711 
__THROW
;

715 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

716 
__THROW
;

723 
__pid_t
 
	$f‹k
 (Ë
__THROW
;

725 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


730 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

736 *
	$ây«me
 (
__fd
Ë
__THROW
;

740 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

741 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

745 
	$ißây
 (
__fd
Ë
__THROW
;

747 #i‡
deföed
 
__USE_BSD
 \

748 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

751 
	$ây¶Ÿ
 (Ë
__THROW
;

756 
	$lök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

757 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

759 #ifde‡
__USE_ATFILE


762 
	$lök©
 (
__‰omfd
, 
__c⁄°
 *
__‰om
, 
__tofd
,

763 
__c⁄°
 *
__to
, 
__Êags
)

764 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

767 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


769 
	$symlök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

770 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

775 
ssize_t
 
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

776 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

777 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

780 #ifde‡
__USE_ATFILE


782 
	$symlök©
 (
__c⁄°
 *
__‰om
, 
__tofd
,

783 
__c⁄°
 *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

786 
ssize_t
 
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

787 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

788 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

792 
	$u∆ök
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

794 #ifde‡
__USE_ATFILE


796 
	$u∆ök©
 (
__fd
, 
__c⁄°
 *
__«me
, 
__Êag
)

797 
__THROW
 
	`__n⁄nuŒ
 ((2));

801 
	$rmdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

805 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

808 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

815 *
	`gëlogö
 ();

816 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


823 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

826 #ifdef 
__USE_BSD


828 
	$£éogö
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

832 #ifdef 
__USE_POSIX2


836 
	#__√ed_gë›t


	)

837 
	~<gë›t.h
>

841 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


845 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

849 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

852 
	$£tho°«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

853 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

857 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

863 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

864 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

865 
	$£tdomaö«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

866 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

872 
	$vh™gup
 (Ë
__THROW
;

875 
	$ªvoke
 (
__c⁄°
 *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

883 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

884 
size_t
 
__off£t
, 
__sˇÀ
)

885 
__THROW
 
	`__n⁄nuŒ
 ((1));

891 
	$ac˘
 (
__c⁄°
 *
__«me
Ë
__THROW
;

895 *
	$gëu£rshñl
 (Ë
__THROW
;

896 
	$ídu£rshñl
 (Ë
__THROW
;

897 
	$£tu£rshñl
 (Ë
__THROW
;

903 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

907 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

910 
	$chroŸ
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

914 *
	$gë∑ss
 (
__c⁄°
 *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

918 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


923 
	`fsync
 (
__fd
);

927 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


930 
	`gëho°id
 ();

933 
	$sync
 (Ë
__THROW
;

938 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

943 
	$gëdèbÀsize
 (Ë
__THROW
;

947 #i‚de‡
__USE_FILE_OFFSET64


948 
	$åunˇã
 (
__c⁄°
 *
__fûe
, 
__off_t
 
__Àngth
)

949 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

951 #ifde‡
__REDIRECT_NTH


952 
	`__REDIRECT_NTH
 (
åunˇã
,

953 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
),

954 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

956 
	#åunˇã
 
åunˇã64


	)

959 #ifde‡
__USE_LARGEFILE64


960 
	$åunˇã64
 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
)

961 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

966 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


969 #i‚de‡
__USE_FILE_OFFSET64


970 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

972 #ifde‡
__REDIRECT_NTH


973 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

974 
·runˇã64
Ë
__wur
;

976 
	#·runˇã
 
·runˇã64


	)

979 #ifde‡
__USE_LARGEFILE64


980 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

986 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


990 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

996 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1000 #ifde‡
__USE_MISC


1011 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1016 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1028 
	#F_ULOCK
 0

	)

1029 
	#F_LOCK
 1

	)

1030 
	#F_TLOCK
 2

	)

1031 
	#F_TEST
 3

	)

1033 #i‚de‡
__USE_FILE_OFFSET64


1034 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1036 #ifde‡
__REDIRECT


1037 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1038 
lockf64
Ë
__wur
;

1040 
	#lockf
 
lockf64


	)

1043 #ifde‡
__USE_LARGEFILE64


1044 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1049 #ifde‡
__USE_GNU


1054 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1055 (
__exãnsi⁄__
 \

1056 ({ 
__ªsu…
; \

1057 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1058 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1059 
__ªsu…
; 
	}
}))

	)

1062 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1065 
fd©async
 (
__fûdes
);

1071 #ifdef 
__USE_XOPEN


1073 *
	$¸y±
 (
__c⁄°
 *
__key
, __c⁄° *
__ß…
)

1074 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1078 
	$í¸y±
 (*
__block
, 
__edÊag
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1085 
	$swab
 (
__c⁄°
 *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1086 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1092 #ifde‡
__USE_XOPEN


1094 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1099 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


1100 
	~<bôs/uni°d.h
>

1103 
__END_DECLS


	@/usr/include/zlib.h

31 #i‚de‡
ZLIB_H


32 
	#ZLIB_H


	)

34 
	~"zc⁄f.h
"

36 #ifde‡
__˝lu•lus


40 
	#ZLIB_VERSION
 "1.2.3.3"

	)

41 
	#ZLIB_VERNUM
 0x1233

	)

42 
	#ZLIB_VER_MAJOR
 1

	)

43 
	#ZLIB_VER_MINOR
 2

	)

44 
	#ZLIB_VER_REVISION
 3

	)

80 
voidpf
 (*
	tÆloc_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, 
	tuI¡
 
	tôems
, uI¡ 
	tsize
));

81 (*
‰ì_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, voidp‡
	taddªss
));

83 
öã∫Æ_°©e
;

85 
	sz_°ªam_s
 {

86 
Byãf
 *
√xt_ö
;

87 
uI¡
 
avaû_ö
;

88 
uL⁄g
 
tŸÆ_ö
;

90 
Byãf
 *
√xt_out
;

91 
uI¡
 
avaû_out
;

92 
uL⁄g
 
tŸÆ_out
;

94 *
msg
;

95 
öã∫Æ_°©e
 
FAR
 *
°©e
;

97 
Æloc_func
 
zÆloc
;

98 
‰ì_func
 
z‰ì
;

99 
voidpf
 
›aque
;

101 
d©a_ty≥
;

102 
uL⁄g
 
adÀr
;

103 
uL⁄g
 
ª£rved
;

104 } 
	tz_°ªam
;

106 
z_°ªam
 
	tFAR
 *
	tz_°ªamp
;

112 
	sgz_hódî_s
 {

113 
ãxt
;

114 
uL⁄g
 
time
;

115 
xÊags
;

116 
os
;

117 
Byãf
 *
exåa
;

118 
uI¡
 
exåa_Àn
;

119 
uI¡
 
exåa_max
;

120 
Byãf
 *
«me
;

121 
uI¡
 
«me_max
;

122 
Byãf
 *
commít
;

123 
uI¡
 
comm_max
;

124 
h¸c
;

125 
d⁄e
;

127 } 
	tgz_hódî
;

129 
gz_hódî
 
	tFAR
 *
	tgz_hódîp
;

165 
	#Z_NO_FLUSH
 0

	)

166 
	#Z_PARTIAL_FLUSH
 1

	)

167 
	#Z_SYNC_FLUSH
 2

	)

168 
	#Z_FULL_FLUSH
 3

	)

169 
	#Z_FINISH
 4

	)

170 
	#Z_BLOCK
 5

	)

173 
	#Z_OK
 0

	)

174 
	#Z_STREAM_END
 1

	)

175 
	#Z_NEED_DICT
 2

	)

176 
	#Z_ERRNO
 (-1)

	)

177 
	#Z_STREAM_ERROR
 (-2)

	)

178 
	#Z_DATA_ERROR
 (-3)

	)

179 
	#Z_MEM_ERROR
 (-4)

	)

180 
	#Z_BUF_ERROR
 (-5)

	)

181 
	#Z_VERSION_ERROR
 (-6)

	)

186 
	#Z_NO_COMPRESSION
 0

	)

187 
	#Z_BEST_SPEED
 1

	)

188 
	#Z_BEST_COMPRESSION
 9

	)

189 
	#Z_DEFAULT_COMPRESSION
 (-1)

	)

192 
	#Z_FILTERED
 1

	)

193 
	#Z_HUFFMAN_ONLY
 2

	)

194 
	#Z_RLE
 3

	)

195 
	#Z_FIXED
 4

	)

196 
	#Z_DEFAULT_STRATEGY
 0

	)

199 
	#Z_BINARY
 0

	)

200 
	#Z_TEXT
 1

	)

201 
	#Z_ASCII
 
Z_TEXT


	)

202 
	#Z_UNKNOWN
 2

	)

205 
	#Z_DEFLATED
 8

	)

208 
	#Z_NULL
 0

	)

210 
	#zlib_vîsi⁄
 
	`zlibVîsi⁄
()

	)

215 
ZEXTERN
 c⁄° * 
ZEXPORT
 
zlibVîsi⁄
 
OF
(());

245 
ZEXTERN
 
ZEXPORT
 
deÊ©e
 
OF
((
z_°ªamp
 
°rm
, 
Êush
));

331 
ZEXTERN
 
ZEXPORT
 
deÊ©eEnd
 
OF
((
z_°ªamp
 
°rm
));

370 
ZEXTERN
 
ZEXPORT
 
öÊ©e
 
OF
((
z_°ªamp
 
°rm
, 
Êush
));

469 
ZEXTERN
 
ZEXPORT
 
öÊ©eEnd
 
OF
((
z_°ªamp
 
°rm
));

545 
ZEXTERN
 
ZEXPORT
 
deÊ©eSëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

546 c⁄° 
Byãf
 *
di˘i⁄¨y
,

547 
uI¡
 
di˘Lígth
));

584 
ZEXTERN
 
ZEXPORT
 
deÊ©eC›y
 
OF
((
z_°ªamp
 
de°
,

585 
z_°ªamp
 
sour˚
));

602 
ZEXTERN
 
ZEXPORT
 
deÊ©eRe£t
 
OF
((
z_°ªamp
 
°rm
));

613 
ZEXTERN
 
ZEXPORT
 
deÊ©eP¨ams
 
OF
((
z_°ªamp
 
°rm
,

614 
Àvñ
,

615 
°øãgy
));

634 
ZEXTERN
 
ZEXPORT
 
deÊ©eTu√
 
OF
((
z_°ªamp
 
°rm
,

635 
good_Àngth
,

636 
max_œzy
,

637 
ni˚_Àngth
,

638 
max_chaö
));

651 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
deÊ©eBound
 
OF
((
z_°ªamp
 
°rm
,

652 
uL⁄g
 
sour˚Lí
));

661 
ZEXTERN
 
ZEXPORT
 
deÊ©ePrime
 
OF
((
z_°ªamp
 
°rm
,

662 
bôs
,

663 
vÆue
));

677 
ZEXTERN
 
ZEXPORT
 
deÊ©eSëHódî
 
OF
((
z_°ªamp
 
°rm
,

678 
gz_hódîp
 
hód
));

748 
ZEXTERN
 
ZEXPORT
 
öÊ©eSëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

749 c⁄° 
Byãf
 *
di˘i⁄¨y
,

750 
uI¡
 
di˘Lígth
));

770 
ZEXTERN
 
ZEXPORT
 
öÊ©eSync
 
OF
((
z_°ªamp
 
°rm
));

785 
ZEXTERN
 
ZEXPORT
 
öÊ©eC›y
 
OF
((
z_°ªamp
 
de°
,

786 
z_°ªamp
 
sour˚
));

801 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£t
 
OF
((
z_°ªamp
 
°rm
));

811 
ZEXTERN
 
ZEXPORT
 
öÊ©ePrime
 
OF
((
z_°ªamp
 
°rm
,

812 
bôs
,

813 
vÆue
));

827 
ZEXTERN
 
ZEXPORT
 
öÊ©eGëHódî
 
OF
((
z_°ªamp
 
°rm
,

828 
gz_hódîp
 
hód
));

889 (*
ö_func
Ë
	tOF
((
	tFAR
 *, FAR * FAR *));

890 (*
out_func
Ë
	tOF
((
	tFAR
 *, FAR *, ));

892 
ZEXTERN
 
ZEXPORT
 
öÊ©eBack
 
OF
((
z_°ªamp
 
°rm
,

893 
ö_func
 
ö
, 
FAR
 *
ö_desc
,

894 
out_func
 
out
, 
FAR
 *
out_desc
));

961 
ZEXTERN
 
ZEXPORT
 
öÊ©eBackEnd
 
OF
((
z_°ªamp
 
°rm
));

969 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
zlibCompûeFœgs
 
OF
(());

1021 
ZEXTERN
 
ZEXPORT
 
com¥ess
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1022 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
));

1036 
ZEXTERN
 
ZEXPORT
 
com¥ess2
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1037 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
,

1038 
Àvñ
));

1052 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
com¥essBound
 
OF
((uL⁄g 
sour˚Lí
));

1059 
ZEXTERN
 
ZEXPORT
 
uncom¥ess
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1060 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
));

1078 
voidp
 
	tgzFûe
;

1098 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gzd›í
 
OF
((
fd
, c⁄° *
mode
));

1111 
ZEXTERN
 
ZEXPORT
 
gz£ç¨ams
 
OF
((
gzFûe
 
fûe
, 
Àvñ
, 
°øãgy
));

1119 
ZEXTERN
 
ZEXPORT
 
gzªad
 
OF
((
gzFûe
 
fûe
, 
voidp
 
buf
, 
Àn
));

1127 
ZEXTERN
 
ZEXPORT
 
gzwrôe
 
OF
((
gzFûe
 
fûe
,

1128 
voidpc
 
buf
, 
Àn
));

1135 
ZEXTERN
 
ZEXPORTVA
 
gz¥ötf
 
OF
((
gzFûe
 
fûe
, c⁄° *
f‹m©
, ...));

1148 
ZEXTERN
 
ZEXPORT
 
gzputs
 
OF
((
gzFûe
 
fûe
, c⁄° *
s
));

1155 
ZEXTERN
 * 
ZEXPORT
 
gzgës
 
OF
((
gzFûe
 
fûe
, *
buf
, 
Àn
));

1164 
ZEXTERN
 
ZEXPORT
 
gzputc
 
OF
((
gzFûe
 
fûe
, 
c
));

1170 
ZEXTERN
 
ZEXPORT
 
gzgëc
 
OF
((
gzFûe
 
fûe
));

1176 
ZEXTERN
 
ZEXPORT
 
gzungëc
 
OF
((
c
, 
gzFûe
 
fûe
));

1186 
ZEXTERN
 
ZEXPORT
 
gzÊush
 
OF
((
gzFûe
 
fûe
, 
Êush
));

1215 
ZEXTERN
 
ZEXPORT
 
gzªwöd
 
OF
((
gzFûe
 
fûe
));

1232 
ZEXTERN
 
ZEXPORT
 
gzeof
 
OF
((
gzFûe
 
fûe
));

1238 
ZEXTERN
 
ZEXPORT
 
gzdúe˘
 
OF
((
gzFûe
 
fûe
));

1244 
ZEXTERN
 
ZEXPORT
 
gz˛o£
 
OF
((
gzFûe
 
fûe
));

1252 
ZEXTERN
 c⁄° * 
ZEXPORT
 
gzîr‹
 
OF
((
gzFûe
 
fûe
, *
î∫um
));

1264 
ZEXTERN
 
ZEXPORT
 
gz˛óªº
 
OF
((
gzFûe
 
fûe
));

1279 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32
 
OF
((uL⁄g 
adÀr
, c⁄° 
Byãf
 *
buf
, 
uI¡
 
Àn
));

1305 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32
 
OF
((uL⁄g 
¸c
, c⁄° 
Byãf
 *
buf
, 
uI¡
 
Àn
));

1337 
ZEXTERN
 
ZEXPORT
 
deÊ©eInô_
 
OF
((
z_°ªamp
 
°rm
, 
Àvñ
,

1338 c⁄° *
vîsi⁄
, 
°ªam_size
));

1339 
ZEXTERN
 
ZEXPORT
 
öÊ©eInô_
 
OF
((
z_°ªamp
 
°rm
,

1340 c⁄° *
vîsi⁄
, 
°ªam_size
));

1341 
ZEXTERN
 
ZEXPORT
 
deÊ©eInô2_
 
OF
((
z_°ªamp
 
°rm
, 
Àvñ
, 
mëhod
,

1342 
wödowBôs
, 
memLevñ
,

1343 
°øãgy
, c⁄° *
vîsi⁄
,

1344 
°ªam_size
));

1345 
ZEXTERN
 
ZEXPORT
 
öÊ©eInô2_
 
OF
((
z_°ªamp
 
°rm
, 
wödowBôs
,

1346 c⁄° *
vîsi⁄
, 
°ªam_size
));

1347 
ZEXTERN
 
ZEXPORT
 
öÊ©eBackInô_
 
OF
((
z_°ªamp
 
°rm
, 
wödowBôs
,

1348 
FAR
 *
wödow
,

1349 c⁄° *
vîsi⁄
,

1350 
°ªam_size
));

1351 
	#deÊ©eInô
(
°rm
, 
Àvñ
) \

1352 
	`deÊ©eInô_
((
°rm
), (
Àvñ
), 
ZLIB_VERSION
, (
z_°ªam
))

	)

1353 
	#öÊ©eInô
(
°rm
) \

1354 
	`öÊ©eInô_
((
°rm
), 
ZLIB_VERSION
, (
z_°ªam
))

	)

1355 
	#deÊ©eInô2
(
°rm
, 
Àvñ
, 
mëhod
, 
wödowBôs
, 
memLevñ
, 
°øãgy
) \

1356 
	`deÊ©eInô2_
((
°rm
),(
Àvñ
),(
mëhod
),(
wödowBôs
),(
memLevñ
),\

1357 (
°øãgy
), 
ZLIB_VERSION
, (
z_°ªam
))

	)

1358 
	#öÊ©eInô2
(
°rm
, 
wödowBôs
) \

1359 
	`öÊ©eInô2_
((
°rm
), (
wödowBôs
), 
ZLIB_VERSION
, (
z_°ªam
))

	)

1360 
	#öÊ©eBackInô
(
°rm
, 
wödowBôs
, 
wödow
) \

1361 
	`öÊ©eBackInô_
((
°rm
), (
wödowBôs
), (
wödow
), \

1362 
ZLIB_VERSION
, (
z_°ªam
))

	)

1364 #ifde‡
_LARGEFILE64_SOURCE


1365 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í64
 
OF
((const *, const *));

1366 
ZEXTERN
 
off64_t
 
ZEXPORT
 
gz£ek64
 
OF
((
gzFûe
, off64_t, ));

1367 
ZEXTERN
 
off64_t
 
ZEXPORT
 
gzãŒ64
 
OF
((
gzFûe
));

1368 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe64
 
OF
((uL⁄g, uL⁄g, 
off64_t
));

1369 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe64
 
OF
((uL⁄g, uL⁄g, 
off64_t
));

1372 #i‡
_FILE_OFFSET_BITS
 == 64

1373 
	#gz›í
 
gz›í64


	)

1374 
	#gz£ek
 
gz£ek64


	)

1375 
	#gzãŒ
 
gzãŒ64


	)

1376 
	#adÀr32_comböe
 
adÀr32_comböe64


	)

1377 
	#¸c32_comböe
 
¸c32_comböe64


	)

1379 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í
 
OF
((const *, const *));

1380 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gz£ek
 
OF
((
gzFûe
, z_off_t, ));

1381 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzãŒ
 
OF
((
gzFûe
));

1382 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1383 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1386 #i‡!
deföed
(
ZUTIL_H
Ë&& !deföed(
NO_DUMMY_DECL
)

1387 
	söã∫Æ_°©e
 {
dummy
;};

1390 
ZEXTERN
 c⁄° * 
ZEXPORT
 
zEº‹
 
OF
(());

1391 
ZEXTERN
 
ZEXPORT
 
öÊ©eSyncPoöt
 
OF
((
z_°ªamp
));

1392 
ZEXTERN
 c⁄° 
uL⁄gf
 * 
ZEXPORT
 
gë_¸c_èbÀ
 
OF
(());

1393 
ZEXTERN
 
ZEXPORT
 
öÊ©eUndîmöe
 
OF
((
z_°ªamp
, ));

1395 #ifde‡
__˝lu•lus


	@/usr/include/alloca.h

19 #i‚def 
_ALLOCA_H


20 
	#_ALLOCA_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 
	g__BEGIN_DECLS


30 #unde‡
Æloˇ


33 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

35 #ifdef 
__GNUC__


36 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

39 
__END_DECLS


	@/usr/include/asm/types.h

1 #i‚de‡
_ASM_X86_TYPES_H


2 
	#_ASM_X86_TYPES_H


	)

4 
	~<asm-gíîic/öt-Œ64.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	tumode_t
;

	@/usr/include/bits/confname.h

21 #i‚de‡
_UNISTD_H


28 
	m_PC_LINK_MAX
,

29 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

30 
	m_PC_MAX_CANON
,

31 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

32 
	m_PC_MAX_INPUT
,

33 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

34 
	m_PC_NAME_MAX
,

35 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

36 
	m_PC_PATH_MAX
,

37 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

38 
	m_PC_PIPE_BUF
,

39 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

40 
	m_PC_CHOWN_RESTRICTED
,

41 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

42 
	m_PC_NO_TRUNC
,

43 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

44 
	m_PC_VDISABLE
,

45 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

46 
	m_PC_SYNC_IO
,

47 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

48 
	m_PC_ASYNC_IO
,

49 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

50 
	m_PC_PRIO_IO
,

51 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

52 
	m_PC_SOCK_MAXBUF
,

53 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

54 
	m_PC_FILESIZEBITS
,

55 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

56 
	m_PC_REC_INCR_XFER_SIZE
,

57 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

58 
	m_PC_REC_MAX_XFER_SIZE
,

59 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

60 
	m_PC_REC_MIN_XFER_SIZE
,

61 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

62 
	m_PC_REC_XFER_ALIGN
,

63 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

64 
	m_PC_ALLOC_SIZE_MIN
,

65 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

66 
	m_PC_SYMLINK_MAX
,

67 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

68 
	m_PC_2_SYMLINKS


69 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

75 
	m_SC_ARG_MAX
,

76 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

77 
	m_SC_CHILD_MAX
,

78 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

79 
	m_SC_CLK_TCK
,

80 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

81 
	m_SC_NGROUPS_MAX
,

82 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

83 
	m_SC_OPEN_MAX
,

84 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

85 
	m_SC_STREAM_MAX
,

86 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

87 
	m_SC_TZNAME_MAX
,

88 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

89 
	m_SC_JOB_CONTROL
,

90 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

91 
	m_SC_SAVED_IDS
,

92 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

93 
	m_SC_REALTIME_SIGNALS
,

94 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

95 
	m_SC_PRIORITY_SCHEDULING
,

96 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

97 
	m_SC_TIMERS
,

98 
	#_SC_TIMERS
 
_SC_TIMERS


	)

99 
	m_SC_ASYNCHRONOUS_IO
,

100 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

101 
	m_SC_PRIORITIZED_IO
,

102 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

103 
	m_SC_SYNCHRONIZED_IO
,

104 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

105 
	m_SC_FSYNC
,

106 
	#_SC_FSYNC
 
_SC_FSYNC


	)

107 
	m_SC_MAPPED_FILES
,

108 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

109 
	m_SC_MEMLOCK
,

110 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

111 
	m_SC_MEMLOCK_RANGE
,

112 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

113 
	m_SC_MEMORY_PROTECTION
,

114 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

115 
	m_SC_MESSAGE_PASSING
,

116 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

117 
	m_SC_SEMAPHORES
,

118 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

119 
	m_SC_SHARED_MEMORY_OBJECTS
,

120 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

121 
	m_SC_AIO_LISTIO_MAX
,

122 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

123 
	m_SC_AIO_MAX
,

124 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

125 
	m_SC_AIO_PRIO_DELTA_MAX
,

126 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

127 
	m_SC_DELAYTIMER_MAX
,

128 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

129 
	m_SC_MQ_OPEN_MAX
,

130 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

131 
	m_SC_MQ_PRIO_MAX
,

132 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

133 
	m_SC_VERSION
,

134 
	#_SC_VERSION
 
_SC_VERSION


	)

135 
	m_SC_PAGESIZE
,

136 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

137 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

138 
	m_SC_RTSIG_MAX
,

139 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

140 
	m_SC_SEM_NSEMS_MAX
,

141 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

142 
	m_SC_SEM_VALUE_MAX
,

143 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

144 
	m_SC_SIGQUEUE_MAX
,

145 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

146 
	m_SC_TIMER_MAX
,

147 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

151 
	m_SC_BC_BASE_MAX
,

152 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

153 
	m_SC_BC_DIM_MAX
,

154 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

155 
	m_SC_BC_SCALE_MAX
,

156 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

157 
	m_SC_BC_STRING_MAX
,

158 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

159 
	m_SC_COLL_WEIGHTS_MAX
,

160 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

161 
	m_SC_EQUIV_CLASS_MAX
,

162 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

163 
	m_SC_EXPR_NEST_MAX
,

164 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

165 
	m_SC_LINE_MAX
,

166 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

167 
	m_SC_RE_DUP_MAX
,

168 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

169 
	m_SC_CHARCLASS_NAME_MAX
,

170 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

172 
	m_SC_2_VERSION
,

173 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

174 
	m_SC_2_C_BIND
,

175 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

176 
	m_SC_2_C_DEV
,

177 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

178 
	m_SC_2_FORT_DEV
,

179 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

180 
	m_SC_2_FORT_RUN
,

181 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

182 
	m_SC_2_SW_DEV
,

183 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

184 
	m_SC_2_LOCALEDEF
,

185 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

187 
	m_SC_PII
,

188 
	#_SC_PII
 
_SC_PII


	)

189 
	m_SC_PII_XTI
,

190 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

191 
	m_SC_PII_SOCKET
,

192 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

193 
	m_SC_PII_INTERNET
,

194 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

195 
	m_SC_PII_OSI
,

196 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

197 
	m_SC_POLL
,

198 
	#_SC_POLL
 
_SC_POLL


	)

199 
	m_SC_SELECT
,

200 
	#_SC_SELECT
 
_SC_SELECT


	)

201 
	m_SC_UIO_MAXIOV
,

202 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

203 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

204 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

205 
	m_SC_PII_INTERNET_STREAM
,

206 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

207 
	m_SC_PII_INTERNET_DGRAM
,

208 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

209 
	m_SC_PII_OSI_COTS
,

210 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

211 
	m_SC_PII_OSI_CLTS
,

212 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

213 
	m_SC_PII_OSI_M
,

214 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

215 
	m_SC_T_IOV_MAX
,

216 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

219 
	m_SC_THREADS
,

220 
	#_SC_THREADS
 
_SC_THREADS


	)

221 
	m_SC_THREAD_SAFE_FUNCTIONS
,

222 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

223 
	m_SC_GETGR_R_SIZE_MAX
,

224 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

225 
	m_SC_GETPW_R_SIZE_MAX
,

226 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

227 
	m_SC_LOGIN_NAME_MAX
,

228 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

229 
	m_SC_TTY_NAME_MAX
,

230 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

231 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

232 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

233 
	m_SC_THREAD_KEYS_MAX
,

234 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

235 
	m_SC_THREAD_STACK_MIN
,

236 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

237 
	m_SC_THREAD_THREADS_MAX
,

238 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

239 
	m_SC_THREAD_ATTR_STACKADDR
,

240 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

241 
	m_SC_THREAD_ATTR_STACKSIZE
,

242 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

243 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

244 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

245 
	m_SC_THREAD_PRIO_INHERIT
,

246 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

247 
	m_SC_THREAD_PRIO_PROTECT
,

248 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

249 
	m_SC_THREAD_PROCESS_SHARED
,

250 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

252 
	m_SC_NPROCESSORS_CONF
,

253 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

254 
	m_SC_NPROCESSORS_ONLN
,

255 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

256 
	m_SC_PHYS_PAGES
,

257 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

258 
	m_SC_AVPHYS_PAGES
,

259 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

260 
	m_SC_ATEXIT_MAX
,

261 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

262 
	m_SC_PASS_MAX
,

263 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

265 
	m_SC_XOPEN_VERSION
,

266 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

267 
	m_SC_XOPEN_XCU_VERSION
,

268 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

269 
	m_SC_XOPEN_UNIX
,

270 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

271 
	m_SC_XOPEN_CRYPT
,

272 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

273 
	m_SC_XOPEN_ENH_I18N
,

274 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

275 
	m_SC_XOPEN_SHM
,

276 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

278 
	m_SC_2_CHAR_TERM
,

279 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

280 
	m_SC_2_C_VERSION
,

281 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

282 
	m_SC_2_UPE
,

283 
	#_SC_2_UPE
 
_SC_2_UPE


	)

285 
	m_SC_XOPEN_XPG2
,

286 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

287 
	m_SC_XOPEN_XPG3
,

288 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

289 
	m_SC_XOPEN_XPG4
,

290 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

292 
	m_SC_CHAR_BIT
,

293 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

294 
	m_SC_CHAR_MAX
,

295 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

296 
	m_SC_CHAR_MIN
,

297 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

298 
	m_SC_INT_MAX
,

299 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

300 
	m_SC_INT_MIN
,

301 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

302 
	m_SC_LONG_BIT
,

303 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

304 
	m_SC_WORD_BIT
,

305 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

306 
	m_SC_MB_LEN_MAX
,

307 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

308 
	m_SC_NZERO
,

309 
	#_SC_NZERO
 
_SC_NZERO


	)

310 
	m_SC_SSIZE_MAX
,

311 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

312 
	m_SC_SCHAR_MAX
,

313 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

314 
	m_SC_SCHAR_MIN
,

315 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

316 
	m_SC_SHRT_MAX
,

317 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

318 
	m_SC_SHRT_MIN
,

319 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

320 
	m_SC_UCHAR_MAX
,

321 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

322 
	m_SC_UINT_MAX
,

323 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

324 
	m_SC_ULONG_MAX
,

325 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

326 
	m_SC_USHRT_MAX
,

327 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

329 
	m_SC_NL_ARGMAX
,

330 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

331 
	m_SC_NL_LANGMAX
,

332 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

333 
	m_SC_NL_MSGMAX
,

334 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

335 
	m_SC_NL_NMAX
,

336 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

337 
	m_SC_NL_SETMAX
,

338 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

339 
	m_SC_NL_TEXTMAX
,

340 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

342 
	m_SC_XBS5_ILP32_OFF32
,

343 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

344 
	m_SC_XBS5_ILP32_OFFBIG
,

345 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

346 
	m_SC_XBS5_LP64_OFF64
,

347 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

348 
	m_SC_XBS5_LPBIG_OFFBIG
,

349 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

351 
	m_SC_XOPEN_LEGACY
,

352 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

353 
	m_SC_XOPEN_REALTIME
,

354 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

355 
	m_SC_XOPEN_REALTIME_THREADS
,

356 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

358 
	m_SC_ADVISORY_INFO
,

359 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

360 
	m_SC_BARRIERS
,

361 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

362 
	m_SC_BASE
,

363 
	#_SC_BASE
 
_SC_BASE


	)

364 
	m_SC_C_LANG_SUPPORT
,

365 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

366 
	m_SC_C_LANG_SUPPORT_R
,

367 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

368 
	m_SC_CLOCK_SELECTION
,

369 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

370 
	m_SC_CPUTIME
,

371 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

372 
	m_SC_THREAD_CPUTIME
,

373 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

374 
	m_SC_DEVICE_IO
,

375 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

376 
	m_SC_DEVICE_SPECIFIC
,

377 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

378 
	m_SC_DEVICE_SPECIFIC_R
,

379 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

380 
	m_SC_FD_MGMT
,

381 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

382 
	m_SC_FIFO
,

383 
	#_SC_FIFO
 
_SC_FIFO


	)

384 
	m_SC_PIPE
,

385 
	#_SC_PIPE
 
_SC_PIPE


	)

386 
	m_SC_FILE_ATTRIBUTES
,

387 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

388 
	m_SC_FILE_LOCKING
,

389 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

390 
	m_SC_FILE_SYSTEM
,

391 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

392 
	m_SC_MONOTONIC_CLOCK
,

393 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

394 
	m_SC_MULTI_PROCESS
,

395 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

396 
	m_SC_SINGLE_PROCESS
,

397 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

398 
	m_SC_NETWORKING
,

399 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

400 
	m_SC_READER_WRITER_LOCKS
,

401 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

402 
	m_SC_SPIN_LOCKS
,

403 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

404 
	m_SC_REGEXP
,

405 
	#_SC_REGEXP
 
_SC_REGEXP


	)

406 
	m_SC_REGEX_VERSION
,

407 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

408 
	m_SC_SHELL
,

409 
	#_SC_SHELL
 
_SC_SHELL


	)

410 
	m_SC_SIGNALS
,

411 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

412 
	m_SC_SPAWN
,

413 
	#_SC_SPAWN
 
_SC_SPAWN


	)

414 
	m_SC_SPORADIC_SERVER
,

415 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

416 
	m_SC_THREAD_SPORADIC_SERVER
,

417 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

418 
	m_SC_SYSTEM_DATABASE
,

419 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

420 
	m_SC_SYSTEM_DATABASE_R
,

421 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

422 
	m_SC_TIMEOUTS
,

423 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

424 
	m_SC_TYPED_MEMORY_OBJECTS
,

425 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

426 
	m_SC_USER_GROUPS
,

427 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

428 
	m_SC_USER_GROUPS_R
,

429 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

430 
	m_SC_2_PBS
,

431 
	#_SC_2_PBS
 
_SC_2_PBS


	)

432 
	m_SC_2_PBS_ACCOUNTING
,

433 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

434 
	m_SC_2_PBS_LOCATE
,

435 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

436 
	m_SC_2_PBS_MESSAGE
,

437 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

438 
	m_SC_2_PBS_TRACK
,

439 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

440 
	m_SC_SYMLOOP_MAX
,

441 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

442 
	m_SC_STREAMS
,

443 
	#_SC_STREAMS
 
_SC_STREAMS


	)

444 
	m_SC_2_PBS_CHECKPOINT
,

445 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

447 
	m_SC_V6_ILP32_OFF32
,

448 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

449 
	m_SC_V6_ILP32_OFFBIG
,

450 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

451 
	m_SC_V6_LP64_OFF64
,

452 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

453 
	m_SC_V6_LPBIG_OFFBIG
,

454 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

456 
	m_SC_HOST_NAME_MAX
,

457 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

458 
	m_SC_TRACE
,

459 
	#_SC_TRACE
 
_SC_TRACE


	)

460 
	m_SC_TRACE_EVENT_FILTER
,

461 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

462 
	m_SC_TRACE_INHERIT
,

463 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

464 
	m_SC_TRACE_LOG
,

465 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

467 
	m_SC_LEVEL1_ICACHE_SIZE
,

468 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

469 
	m_SC_LEVEL1_ICACHE_ASSOC
,

470 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

471 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

472 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

473 
	m_SC_LEVEL1_DCACHE_SIZE
,

474 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

475 
	m_SC_LEVEL1_DCACHE_ASSOC
,

476 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

477 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

478 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

479 
	m_SC_LEVEL2_CACHE_SIZE
,

480 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

481 
	m_SC_LEVEL2_CACHE_ASSOC
,

482 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

483 
	m_SC_LEVEL2_CACHE_LINESIZE
,

484 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

485 
	m_SC_LEVEL3_CACHE_SIZE
,

486 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

487 
	m_SC_LEVEL3_CACHE_ASSOC
,

488 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

489 
	m_SC_LEVEL3_CACHE_LINESIZE
,

490 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

491 
	m_SC_LEVEL4_CACHE_SIZE
,

492 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

493 
	m_SC_LEVEL4_CACHE_ASSOC
,

494 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

495 
	m_SC_LEVEL4_CACHE_LINESIZE
,

496 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

499 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

500 
	#_SC_IPV6
 
_SC_IPV6


	)

501 
	m_SC_RAW_SOCKETS


502 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

508 
	m_CS_PATH
,

509 
	#_CS_PATH
 
_CS_PATH


	)

511 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

512 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

513 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

515 
	m_CS_GNU_LIBC_VERSION
,

516 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

517 
	m_CS_GNU_LIBPTHREAD_VERSION
,

518 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

520 
	m_CS_LFS_CFLAGS
 = 1000,

521 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

522 
	m_CS_LFS_LDFLAGS
,

523 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

524 
	m_CS_LFS_LIBS
,

525 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

526 
	m_CS_LFS_LINTFLAGS
,

527 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

528 
	m_CS_LFS64_CFLAGS
,

529 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

530 
	m_CS_LFS64_LDFLAGS
,

531 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

532 
	m_CS_LFS64_LIBS
,

533 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

534 
	m_CS_LFS64_LINTFLAGS
,

535 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

537 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

538 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

539 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

540 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

541 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

542 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

543 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

544 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

545 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

546 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

547 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

548 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

549 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

550 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

551 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

552 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

553 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

554 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

555 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

556 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

557 
	m_CS_XBS5_LP64_OFF64_LIBS
,

558 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

559 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

560 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

561 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

562 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

563 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

564 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

565 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

566 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

567 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

568 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

570 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

571 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

572 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

573 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

574 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

575 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

576 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

577 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

578 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

579 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

580 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

581 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

582 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

583 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

584 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

585 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

586 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

587 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

588 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

589 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

590 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

591 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

592 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

593 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

594 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

595 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

596 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

597 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

598 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

599 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

600 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


601 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

	@/usr/include/bits/dirent.h

19 #i‚de‡
_DIRENT_H


23 
	sdúít


25 #i‚de‡
__USE_FILE_OFFSET64


26 
__öo_t
 
	md_öo
;

27 
__off_t
 
	md_off
;

29 
__öo64_t
 
	md_öo
;

30 
__off64_t
 
	md_off
;

32 
	md_ª˛í
;

33 
	md_ty≥
;

34 
	md_«me
[256];

37 #ifde‡
__USE_LARGEFILE64


38 
	sdúít64


40 
__öo64_t
 
	md_öo
;

41 
__off64_t
 
	md_off
;

42 
	md_ª˛í
;

43 
	md_ty≥
;

44 
	md_«me
[256];

48 
	#d_fûío
 
d_öo


	)

50 #unde‡
_DIRENT_HAVE_D_NAMLEN


51 
	#_DIRENT_HAVE_D_RECLEN


	)

52 
	#_DIRENT_HAVE_D_OFF


	)

53 
	#_DIRENT_HAVE_D_TYPE


	)

	@/usr/include/bits/environments.h

19 #i‚de‡
_UNISTD_H


23 
	~<bôs/w‹dsize.h
>

41 #i‡
__WORDSIZE
 == 64

53 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

54 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

57 
	#_POSIX_V6_LP64_OFF64
 1

	)

58 
	#_XBS5_LP64_OFF64
 1

	)

64 
	#_POSIX_V6_ILP32_OFF32
 1

	)

65 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

66 
	#_XBS5_ILP32_OFF32
 1

	)

67 
	#_XBS5_ILP32_OFFBIG
 1

	)

82 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

83 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

84 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

85 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

86 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

87 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/fcntl.h

20 #i‚def 
_FCNTL_H


24 
	~<sys/ty≥s.h
>

25 
	~<bôs/w‹dsize.h
>

26 #ifde‡
__USE_GNU


27 
	~<bôs/uio.h
>

33 
	#O_ACCMODE
 0003

	)

34 
	#O_RDONLY
 00

	)

35 
	#O_WRONLY
 01

	)

36 
	#O_RDWR
 02

	)

37 
	#O_CREAT
 0100

	)

38 
	#O_EXCL
 0200

	)

39 
	#O_NOCTTY
 0400

	)

40 
	#O_TRUNC
 01000

	)

41 
	#O_APPEND
 02000

	)

42 
	#O_NONBLOCK
 04000

	)

43 
	#O_NDELAY
 
O_NONBLOCK


	)

44 
	#O_SYNC
 010000

	)

45 
	#O_FSYNC
 
O_SYNC


	)

46 
	#O_ASYNC
 020000

	)

48 #ifde‡
__USE_GNU


49 
	#O_DIRECT
 040000

	)

50 
	#O_DIRECTORY
 0200000

	)

51 
	#O_NOFOLLOW
 0400000

	)

52 
	#O_NOATIME
 01000000

	)

53 
	#O_CLOEXEC
 02000000

	)

59 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


60 
	#O_DSYNC
 
O_SYNC


	)

61 
	#O_RSYNC
 
O_SYNC


	)

64 #ifde‡
__USE_LARGEFILE64


65 #i‡
__WORDSIZE
 == 64

66 
	#O_LARGEFILE
 0

	)

68 
	#O_LARGEFILE
 0100000

	)

73 
	#F_DUPFD
 0

	)

74 
	#F_GETFD
 1

	)

75 
	#F_SETFD
 2

	)

76 
	#F_GETFL
 3

	)

77 
	#F_SETFL
 4

	)

78 #i‡
__WORDSIZE
 == 64

79 
	#F_GETLK
 5

	)

80 
	#F_SETLK
 6

	)

81 
	#F_SETLKW
 7

	)

83 
	#F_GETLK64
 5

	)

84 
	#F_SETLK64
 6

	)

85 
	#F_SETLKW64
 7

	)

87 #i‚de‡
__USE_FILE_OFFSET64


88 
	#F_GETLK
 5

	)

89 
	#F_SETLK
 6

	)

90 
	#F_SETLKW
 7

	)

92 
	#F_GETLK
 
F_GETLK64


	)

93 
	#F_SETLK
 
F_SETLK64


	)

94 
	#F_SETLKW
 
F_SETLKW64


	)

96 
	#F_GETLK64
 12

	)

97 
	#F_SETLK64
 13

	)

98 
	#F_SETLKW64
 14

	)

101 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


102 
	#F_SETOWN
 8

	)

103 
	#F_GETOWN
 9

	)

106 #ifde‡
__USE_GNU


107 
	#F_SETSIG
 10

	)

108 
	#F_GETSIG
 11

	)

111 #ifde‡
__USE_GNU


112 
	#F_SETLEASE
 1024

	)

113 
	#F_GETLEASE
 1025

	)

114 
	#F_NOTIFY
 1026

	)

115 
	#F_DUPFD_CLOEXEC
 1030

	)

120 
	#FD_CLOEXEC
 1

	)

123 
	#F_RDLCK
 0

	)

124 
	#F_WRLCK
 1

	)

125 
	#F_UNLCK
 2

	)

128 
	#F_EXLCK
 4

	)

129 
	#F_SHLCK
 8

	)

131 #ifde‡
__USE_BSD


133 
	#LOCK_SH
 1

	)

134 
	#LOCK_EX
 2

	)

135 
	#LOCK_NB
 4

	)

137 
	#LOCK_UN
 8

	)

140 #ifde‡
__USE_GNU


141 
	#LOCK_MAND
 32

	)

142 
	#LOCK_READ
 64

	)

143 
	#LOCK_WRITE
 128

	)

144 
	#LOCK_RW
 192

	)

147 #ifde‡
__USE_GNU


149 
	#DN_ACCESS
 0x00000001

	)

150 
	#DN_MODIFY
 0x00000002

	)

151 
	#DN_CREATE
 0x00000004

	)

152 
	#DN_DELETE
 0x00000008

	)

153 
	#DN_RENAME
 0x00000010

	)

154 
	#DN_ATTRIB
 0x00000020

	)

155 
	#DN_MULTISHOT
 0x80000000

	)

158 
	sÊock


160 
	ml_ty≥
;

161 
	ml_whí˚
;

162 #i‚de‡
__USE_FILE_OFFSET64


163 
__off_t
 
	ml_°¨t
;

164 
__off_t
 
	ml_Àn
;

166 
__off64_t
 
	ml_°¨t
;

167 
__off64_t
 
	ml_Àn
;

169 
__pid_t
 
	ml_pid
;

172 #ifde‡
__USE_LARGEFILE64


173 
	sÊock64


175 
	ml_ty≥
;

176 
	ml_whí˚
;

177 
__off64_t
 
	ml_°¨t
;

178 
__off64_t
 
	ml_Àn
;

179 
__pid_t
 
	ml_pid
;

185 #ifdef 
__USE_BSD


186 
	#FAPPEND
 
O_APPEND


	)

187 
	#FFSYNC
 
O_FSYNC


	)

188 
	#FASYNC
 
O_ASYNC


	)

189 
	#FNONBLOCK
 
O_NONBLOCK


	)

190 
	#FNDELAY
 
O_NDELAY


	)

194 #ifde‡
__USE_XOPEN2K


195 
	#POSIX_FADV_NORMAL
 0

	)

196 
	#POSIX_FADV_RANDOM
 1

	)

197 
	#POSIX_FADV_SEQUENTIAL
 2

	)

198 
	#POSIX_FADV_WILLNEED
 3

	)

199 
	#POSIX_FADV_DONTNEED
 4

	)

200 
	#POSIX_FADV_NOREUSE
 5

	)

204 #ifde‡
__USE_GNU


206 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

209 
	#SYNC_FILE_RANGE_WRITE
 2

	)

212 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

217 
	#SPLICE_F_MOVE
 1

	)

218 
	#SPLICE_F_NONBLOCK
 2

	)

221 
	#SPLICE_F_MORE
 4

	)

222 
	#SPLICE_F_GIFT
 8

	)

225 
	g__BEGIN_DECLS


227 #ifde‡
__USE_GNU


230 
ssize_t
 
	$ªadahód
 (
__fd
, 
__off64_t
 
__off£t
, 
size_t
 
__cou¡
)

231 
__THROW
;

235 
	`sync_fûe_ønge
 (
__fd
, 
__off64_t
 
__‰om
, __off64_à
__to
,

236 
__Êags
);

240 
ssize_t
 
	`vm•li˚
 (
__fdout
, c⁄° 
iovec
 *
__iov
,

241 
size_t
 
__cou¡
, 
__Êags
);

244 
ssize_t
 
	`•li˚
 (
__fdö
, 
__off64_t
 *
__offö
, 
__fdout
,

245 
__off64_t
 *
__offout
, 
size_t
 
__Àn
,

246 
__Êags
);

249 
ssize_t
 
	`ãe
 (
__fdö
, 
__fdout
, 
size_t
 
__Àn
,

250 
__Êags
);

254 
__END_DECLS


	@/usr/include/bits/fcntl2.h

20 #i‚def 
_FCNTL_H


26 #i‚de‡
__USE_FILE_OFFSET64


27 
	$__›í_2
 (
__c⁄°
 *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

28 
	`__REDIRECT
 (
__›í_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
, ...),

29 
›í
Ë
	`__n⁄nuŒ
 ((1));

31 
	`__REDIRECT
 (
__›í_2
, (
__c⁄°
 *
__∑th
, 
__oÊag
),

32 
__›í64_2
Ë
	`__n⁄nuŒ
 ((1));

33 
	`__REDIRECT
 (
__›í_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
, ...),

34 
›í64
Ë
	`__n⁄nuŒ
 ((1));

36 
	`__îr‹de˛
 (
__›í_too_m™y_¨gs
,

38 
	`__îr‹de˛
 (
__›í_missög_mode
,

41 
__exã∫_Æways_ölöe
 

42 
	$›í
 (
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

44 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

45 
	`__›í_too_m™y_¨gs
 ();

47 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

49 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

51 
	`__›í_missög_mode
 ();

52  
	`__›í_2
 (
__∑th
, 
__oÊag
);

54  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

57 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

58  
	`__›í_2
 (
__∑th
, 
__oÊag
);

60  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

61 
	}
}

64 #ifde‡
__USE_LARGEFILE64


65 
	$__›í64_2
 (
__c⁄°
 *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

66 
	`__REDIRECT
 (
__›í64_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
,

67 ...), 
›í64
Ë
	`__n⁄nuŒ
 ((1));

68 
	`__îr‹de˛
 (
__›í64_too_m™y_¨gs
,

70 
	`__îr‹de˛
 (
__›í64_missög_mode
,

73 
__exã∫_Æways_ölöe
 

74 
	$›í64
 (
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

76 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

77 
	`__›í64_too_m™y_¨gs
 ();

79 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

81 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

83 
	`__›í64_missög_mode
 ();

84  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

86  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

89 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

90  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

92  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

93 
	}
}

97 #ifde‡
__USE_ATFILE


98 #i‚de‡
__USE_FILE_OFFSET64


99 
	$__›í©_2
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
)

100 
	`__n⁄nuŒ
 ((2));

101 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

102 
__oÊag
, ...), 
›í©
)

103 
	`__n⁄nuŒ
 ((2));

105 
	`__REDIRECT
 (
__›í©_2
, (
__fd
, 
__c⁄°
 *
__∑th
,

106 
__oÊag
), 
__›í©64_2
)

107 
	`__n⁄nuŒ
 ((2));

108 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

109 
__oÊag
, ...), 
›í©64
)

110 
	`__n⁄nuŒ
 ((2));

112 
	`__îr‹de˛
 (
__›í©_too_m™y_¨gs
,

114 
	`__îr‹de˛
 (
__›í©_missög_mode
,

117 
__exã∫_Æways_ölöe
 

118 
	$›í©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

120 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

121 
	`__›í©_too_m™y_¨gs
 ();

123 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

125 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

127 
	`__›í©_missög_mode
 ();

128  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

130  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

133 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

134  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

136  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

137 
	}
}

140 #ifde‡
__USE_LARGEFILE64


141 
	$__›í©64_2
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
)

142 
	`__n⁄nuŒ
 ((2));

143 
	`__REDIRECT
 (
__›í©64_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

144 
__oÊag
, ...), 
›í©64
)

145 
	`__n⁄nuŒ
 ((2));

146 
	`__îr‹de˛
 (
__›í©64_too_m™y_¨gs
,

148 
	`__îr‹de˛
 (
__›í©64_missög_mode
,

151 
__exã∫_Æways_ölöe
 

152 
	$›í©64
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

154 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

155 
	`__›í©64_too_m™y_¨gs
 ();

157 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

159 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

161 
	`__›í©64_missög_mode
 ();

162  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

164  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

167 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

168  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

170  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

171 
	}
}

	@/usr/include/bits/huge_val.h

22 #i‚de‡
_MATH_H


28 #i‡
__GNUC_PREREQ
(3,3)

29 
	#HUGE_VAL
 (
	`__buûtö_huge_vÆ
())

	)

30 #ñi‡
__GNUC_PREREQ
(2,96)

31 
	#HUGE_VAL
 (
__exãnsi⁄__
 0x1.0
p2047
)

	)

32 #ñi‡
deföed
 
__GNUC__


34 
	#HUGE_VAL
 \

35 (
__exãnsi⁄__
 \

36 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__DI__
))); 
__d
; }) \

37 { 
__l
: 0x7ff0000000000000ULL }).
__d
)

	)

41 
	~<ídün.h
>

43 uni⁄ { 
	m__c
[8]; 
	m__d
; } 
	t__huge_vÆ_t
;

45 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


46 
	#__HUGE_VAL_byãs
 { 0x7f, 0xf0, 0, 0, 0, 0, 0, 0 }

	)

48 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


49 
	#__HUGE_VAL_byãs
 { 0, 0, 0, 0, 0, 0, 0xf0, 0x7‡}

	)

52 
__huge_vÆ_t
 
	g__huge_vÆ
 = { 
__HUGE_VAL_byãs
 };

53 
	#HUGE_VAL
 (
__huge_vÆ
.
__d
)

	)

	@/usr/include/bits/huge_valf.h

22 #i‚de‡
_MATH_H


28 #i‡
__GNUC_PREREQ
(3,3)

29 
	#HUGE_VALF
 (
	`__buûtö_huge_vÆf
())

	)

30 #ñi‡
__GNUC_PREREQ
(2,96)

31 
	#HUGE_VALF
 (
__exãnsi⁄__
 0x1.0
p255f
)

	)

32 #ñi‡
deföed
 
__GNUC__


34 
	#HUGE_VALF
 \

35 (
__exãnsi⁄__
 \

36 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__SI__
))); 
__d
; }) \

37 { 
__l
: 0x7f800000UL }).
__d
)

	)

41 uni⁄ { 
	m__c
[4]; 
	m__f
; } 
	t__huge_vÆf_t
;

43 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


44 
	#__HUGE_VALF_byãs
 { 0x7f, 0x80, 0, 0 }

	)

46 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


47 
	#__HUGE_VALF_byãs
 { 0, 0, 0x80, 0x7‡}

	)

50 
__huge_vÆf_t
 
	g__huge_vÆf
 = { 
__HUGE_VALF_byãs
 };

51 
	#HUGE_VALF
 (
__huge_vÆf
.
__f
)

	)

	@/usr/include/bits/huge_vall.h

21 #i‚de‡
_MATH_H


25 #i‡
__GNUC_PREREQ
(3,3)

26 
	#HUGE_VALL
 (
	`__buûtö_huge_vÆl
())

	)

28 
	#HUGE_VALL
 ((Ë
HUGE_VAL
)

	)

	@/usr/include/bits/inf.h

20 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

27 
	#INFINITY
 (
	`__buûtö_öff
())

	)

29 
	#INFINITY
 
HUGE_VALF


	)

	@/usr/include/bits/ioctl-types.h

20 #i‚de‡
_SYS_IOCTL_H


25 
	~<asm/io˘ls.h
>

28 
	swösize


30 
	mws_row
;

31 
	mws_cﬁ
;

32 
	mws_xpixñ
;

33 
	mws_ypixñ
;

36 
	#NCC
 8

	)

37 
	sãrmio


39 
	mc_iÊag
;

40 
	mc_oÊag
;

41 
	mc_cÊag
;

42 
	mc_lÊag
;

43 
	mc_löe
;

44 
	mc_cc
[
NCC
];

48 
	#TIOCM_LE
 0x001

	)

49 
	#TIOCM_DTR
 0x002

	)

50 
	#TIOCM_RTS
 0x004

	)

51 
	#TIOCM_ST
 0x008

	)

52 
	#TIOCM_SR
 0x010

	)

53 
	#TIOCM_CTS
 0x020

	)

54 
	#TIOCM_CAR
 0x040

	)

55 
	#TIOCM_RNG
 0x080

	)

56 
	#TIOCM_DSR
 0x100

	)

57 
	#TIOCM_CD
 
TIOCM_CAR


	)

58 
	#TIOCM_RI
 
TIOCM_RNG


	)

63 
	#N_TTY
 0

	)

64 
	#N_SLIP
 1

	)

65 
	#N_MOUSE
 2

	)

66 
	#N_PPP
 3

	)

67 
	#N_STRIP
 4

	)

68 
	#N_AX25
 5

	)

69 
	#N_X25
 6

	)

70 
	#N_6PACK
 7

	)

71 
	#N_MASC
 8

	)

72 
	#N_R3964
 9

	)

73 
	#N_PROFIBUS_FDL
 10

	)

74 
	#N_IRDA
 11

	)

75 
	#N_SMSBLOCK
 12

	)

76 
	#N_HDLC
 13

	)

77 
	#N_SYNC_PPP
 14

	)

78 
	#N_HCI
 15

	)

	@/usr/include/bits/ioctls.h

19 #i‚de‡
_SYS_IOCTL_H


24 
	~<asm/io˘ls.h
>

27 
	#SIOCADDRT
 0x890B

	)

28 
	#SIOCDELRT
 0x890C

	)

29 
	#SIOCRTMSG
 0x890D

	)

32 
	#SIOCGIFNAME
 0x8910

	)

33 
	#SIOCSIFLINK
 0x8911

	)

34 
	#SIOCGIFCONF
 0x8912

	)

35 
	#SIOCGIFFLAGS
 0x8913

	)

36 
	#SIOCSIFFLAGS
 0x8914

	)

37 
	#SIOCGIFADDR
 0x8915

	)

38 
	#SIOCSIFADDR
 0x8916

	)

39 
	#SIOCGIFDSTADDR
 0x8917

	)

40 
	#SIOCSIFDSTADDR
 0x8918

	)

41 
	#SIOCGIFBRDADDR
 0x8919

	)

42 
	#SIOCSIFBRDADDR
 0x891®

	)

43 
	#SIOCGIFNETMASK
 0x891b

	)

44 
	#SIOCSIFNETMASK
 0x891¯

	)

45 
	#SIOCGIFMETRIC
 0x891d

	)

46 
	#SIOCSIFMETRIC
 0x891ê

	)

47 
	#SIOCGIFMEM
 0x891‡

	)

48 
	#SIOCSIFMEM
 0x8920

	)

49 
	#SIOCGIFMTU
 0x8921

	)

50 
	#SIOCSIFMTU
 0x8922

	)

51 
	#SIOCSIFNAME
 0x8923

	)

52 
	#SIOCSIFHWADDR
 0x8924

	)

53 
	#SIOCGIFENCAP
 0x8925

	)

54 
	#SIOCSIFENCAP
 0x8926

	)

55 
	#SIOCGIFHWADDR
 0x8927

	)

56 
	#SIOCGIFSLAVE
 0x8929

	)

57 
	#SIOCSIFSLAVE
 0x8930

	)

58 
	#SIOCADDMULTI
 0x8931

	)

59 
	#SIOCDELMULTI
 0x8932

	)

60 
	#SIOCGIFINDEX
 0x8933

	)

61 
	#SIOGIFINDEX
 
SIOCGIFINDEX


	)

62 
	#SIOCSIFPFLAGS
 0x8934

	)

63 
	#SIOCGIFPFLAGS
 0x8935

	)

64 
	#SIOCDIFADDR
 0x8936

	)

65 
	#SIOCSIFHWBROADCAST
 0x8937

	)

66 
	#SIOCGIFCOUNT
 0x8938

	)

68 
	#SIOCGIFBR
 0x8940

	)

69 
	#SIOCSIFBR
 0x8941

	)

71 
	#SIOCGIFTXQLEN
 0x8942

	)

72 
	#SIOCSIFTXQLEN
 0x8943

	)

77 
	#SIOCDARP
 0x8953

	)

78 
	#SIOCGARP
 0x8954

	)

79 
	#SIOCSARP
 0x8955

	)

82 
	#SIOCDRARP
 0x8960

	)

83 
	#SIOCGRARP
 0x8961

	)

84 
	#SIOCSRARP
 0x8962

	)

88 
	#SIOCGIFMAP
 0x8970

	)

89 
	#SIOCSIFMAP
 0x8971

	)

93 
	#SIOCADDDLCI
 0x8980

	)

94 
	#SIOCDELDLCI
 0x8981

	)

103 
	#SIOCDEVPRIVATE
 0x89F0

	)

109 
	#SIOCPROTOPRIVATE
 0x89E0

	)

	@/usr/include/bits/mathcalls.h

46 #i‚de‡
_MATH_H


53 
_MdoubÀ_BEGIN_NAMESPACE


55 
__MATHCALL
 (
acos
,, (
_MdoubÀ_
 
__x
));

57 
__MATHCALL
 (
asö
,, (
_MdoubÀ_
 
__x
));

59 
__MATHCALL
 (
©™
,, (
_MdoubÀ_
 
__x
));

61 
__MATHCALL
 (
©™2
,, (
_MdoubÀ_
 
__y
, _MdoubÀ_ 
__x
));

64 
__MATHCALL
 (
cos
,, (
_MdoubÀ_
 
__x
));

66 
__MATHCALL
 (
sö
,, (
_MdoubÀ_
 
__x
));

68 
__MATHCALL
 (
èn
,, (
_MdoubÀ_
 
__x
));

73 
__MATHCALL
 (
cosh
,, (
_MdoubÀ_
 
__x
));

75 
__MATHCALL
 (
söh
,, (
_MdoubÀ_
 
__x
));

77 
__MATHCALL
 (
ènh
,, (
_MdoubÀ_
 
__x
));

78 
	g_MdoubÀ_END_NAMESPACE


80 #ifde‡
__USE_GNU


82 
__MATHDECL
 (,
söcos
,,

83 (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__söx
, _MdoubÀ_ *
__cosx
));

86 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


87 
__BEGIN_NAMESPACE_C99


89 
__MATHCALL
 (
acosh
,, (
_MdoubÀ_
 
__x
));

91 
__MATHCALL
 (
asöh
,, (
_MdoubÀ_
 
__x
));

93 
__MATHCALL
 (
©™h
,, (
_MdoubÀ_
 
__x
));

94 
	g__END_NAMESPACE_C99


99 
_MdoubÀ_BEGIN_NAMESPACE


101 
__MATHCALL
 (
exp
,, (
_MdoubÀ_
 
__x
));

104 
__MATHCALL
 (
‰exp
,, (
_MdoubÀ_
 
__x
, *
__exp⁄ít
));

107 
__MATHCALL
 (
ldexp
,, (
_MdoubÀ_
 
__x
, 
__exp⁄ít
));

110 
__MATHCALL
 (
log
,, (
_MdoubÀ_
 
__x
));

113 
__MATHCALL
 (
log10
,, (
_MdoubÀ_
 
__x
));

116 
__MATHCALL
 (
modf
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__ùå
));

117 
	g_MdoubÀ_END_NAMESPACE


119 #ifde‡
__USE_GNU


121 
__MATHCALL
 (
exp10
,, (
_MdoubÀ_
 
__x
));

123 
__MATHCALL
 (
pow10
,, (
_MdoubÀ_
 
__x
));

126 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


127 
__BEGIN_NAMESPACE_C99


129 
__MATHCALL
 (
expm1
,, (
_MdoubÀ_
 
__x
));

132 
__MATHCALL
 (
log1p
,, (
_MdoubÀ_
 
__x
));

135 
__MATHCALL
 (
logb
,, (
_MdoubÀ_
 
__x
));

136 
	g__END_NAMESPACE_C99


139 #ifde‡
__USE_ISOC99


140 
__BEGIN_NAMESPACE_C99


142 
__MATHCALL
 (
exp2
,, (
_MdoubÀ_
 
__x
));

145 
__MATHCALL
 (
log2
,, (
_MdoubÀ_
 
__x
));

146 
	g__END_NAMESPACE_C99


152 
_MdoubÀ_BEGIN_NAMESPACE


154 
__MATHCALL
 (
pow
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

157 
__MATHCALL
 (
sqπ
,, (
_MdoubÀ_
 
__x
));

158 
	g_MdoubÀ_END_NAMESPACE


160 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || deföed 
__USE_ISOC99


161 
__BEGIN_NAMESPACE_C99


163 
__MATHCALL
 (
hypŸ
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

164 
	g__END_NAMESPACE_C99


167 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


168 
__BEGIN_NAMESPACE_C99


170 
__MATHCALL
 (
cbπ
,, (
_MdoubÀ_
 
__x
));

171 
	g__END_NAMESPACE_C99


177 
_MdoubÀ_BEGIN_NAMESPACE


179 
__MATHCALLX
 (
˚û
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

182 
__MATHCALLX
 (
Ábs
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

185 
__MATHCALLX
 (
Êo‹
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

188 
__MATHCALL
 (
fmod
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

193 
__MATHDECL_1
 (,
__isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

196 
__MATHDECL_1
 (,
__föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

197 
	g_MdoubÀ_END_NAMESPACE


199 #ifde‡
__USE_MISC


202 
__MATHDECL_1
 (,
isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

205 
__MATHDECL_1
 (,
föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

208 
__MATHCALL
 (
dªm
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

212 
__MATHCALL
 (
signifiˇnd
,, (
_MdoubÀ_
 
__x
));

215 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


216 
__BEGIN_NAMESPACE_C99


218 
__MATHCALLX
 (
c›ysign
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

219 
	g__END_NAMESPACE_C99


222 #ifde‡
__USE_ISOC99


223 
__BEGIN_NAMESPACE_C99


225 
__MATHCALLX
 (
«n
,, (
__c⁄°
 *
__ègb
), (
__c⁄°__
));

226 
	g__END_NAMESPACE_C99


231 
__MATHDECL_1
 (,
__i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

233 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


235 
__MATHDECL_1
 (,
i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

238 
__MATHCALL
 (
j0
,, (
_MdoubÀ_
));

239 
__MATHCALL
 (
j1
,, (
_MdoubÀ_
));

240 
__MATHCALL
 (
jn
,, (, 
_MdoubÀ_
));

241 
__MATHCALL
 (
y0
,, (
_MdoubÀ_
));

242 
__MATHCALL
 (
y1
,, (
_MdoubÀ_
));

243 
__MATHCALL
 (
yn
,, (, 
_MdoubÀ_
));

247 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || deföed 
__USE_ISOC99


248 
__BEGIN_NAMESPACE_C99


250 
__MATHCALL
 (
îf
,, (
_MdoubÀ_
));

251 
__MATHCALL
 (
îfc
,, (
_MdoubÀ_
));

252 
__MATHCALL
 (
lgamma
,, (
_MdoubÀ_
));

253 
	g__END_NAMESPACE_C99


256 #ifde‡
__USE_ISOC99


257 
__BEGIN_NAMESPACE_C99


259 
__MATHCALL
 (
tgamma
,, (
_MdoubÀ_
));

260 
	g__END_NAMESPACE_C99


263 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


265 
__MATHCALL
 (
gamma
,, (
_MdoubÀ_
));

268 #ifde‡
__USE_MISC


272 
__MATHCALL
 (
lgamma
,
_r
, (
_MdoubÀ_
, *
__signgamp
));

276 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


277 
__BEGIN_NAMESPACE_C99


280 
__MATHCALL
 (
röt
,, (
_MdoubÀ_
 
__x
));

283 
__MATHCALLX
 (
√xè·î
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

284 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__LDBL_COMPAT


285 
__MATHCALLX
 (
√xâow¨d
,, (
_MdoubÀ_
 
__x
, 
__y
), (
__c⁄°__
));

289 
__MATHCALL
 (
ªmaödî
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

291 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


293 
__MATHCALL
 (
sˇlbn
,, (
_MdoubÀ_
 
__x
, 
__n
));

297 
__MATHDECL
 (,
ûogb
,, (
_MdoubÀ_
 
__x
));

300 #ifde‡
__USE_ISOC99


302 
__MATHCALL
 (
sˇlb 
,, (
_MdoubÀ_
 
__x
, 
__n
));

306 
__MATHCALL
 (
√¨byöt
,, (
_MdoubÀ_
 
__x
));

310 
__MATHCALLX
 (
round
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

314 
__MATHCALLX
 (
åunc
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

319 
__MATHCALL
 (
ªmquo
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, *
__quo
));

326 
__MATHDECL
 (,
Ãöt
,, (
_MdoubÀ_
 
__x
));

327 
__MATHDECL
 (,
Œröt
,, (
_MdoubÀ_
 
__x
));

331 
__MATHDECL
 (,
Ãound
,, (
_MdoubÀ_
 
__x
));

332 
__MATHDECL
 (,
Œround
,, (
_MdoubÀ_
 
__x
));

336 
__MATHCALL
 (
fdim
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

339 
__MATHCALL
 (
fmax
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

342 
__MATHCALL
 (
fmö
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

346 
__MATHDECL_1
 (, 
__Â˛assify
,, (
_MdoubÀ_
 
__vÆue
))

347 
__©åibuã__
 ((
__c⁄°__
));

350 
__MATHDECL_1
 (, 
__signbô
,, (
_MdoubÀ_
 
__vÆue
))

351 
__©åibuã__
 ((
__c⁄°__
));

355 
__MATHCALL
 (
fma
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, _MdoubÀ_ 
__z
));

358 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


359 
	g__END_NAMESPACE_C99


362 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


364 
__MATHCALL
 (
sˇlb
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__n
));

	@/usr/include/bits/mathdef.h

19 #i‡!
deföed
 
_MATH_H
 && !deföed 
_COMPLEX_H


23 #i‡
deföed
 
__USE_ISOC99
 && deföed 
_MATH_H
 && !deföed 
_MATH_H_MATHDEF


24 
	#_MATH_H_MATHDEF
 1

	)

26 
	~<bôs/w‹dsize.h
>

28 #i‡
__WORDSIZE
 =64 || (
deföed
 
__FLT_EVAL_METHOD__
 && __FLT_EVAL_METHOD__ == 0)

31 
	tÊﬂt_t
;

32 
	tdoubÀ_t
;

38 
	tÊﬂt_t
;

40 
	tdoubÀ_t
;

45 
	#FP_ILOGB0
 (-2147483647 - 1)

	)

46 
	#FP_ILOGBNAN
 (-2147483647 - 1)

	)

	@/usr/include/bits/mathinline.h

21 #i‚de‡
_MATH_H


25 #i‚de‡
__exã∫_ölöe


26 
	#__MATH_INLINE
 
__ölöe


	)

28 
	#__MATH_INLINE
 
__exã∫_ölöe


	)

32 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__
 && __GNUC__ >= 2

35 
__MATH_INLINE
 

36 
__NTH
 (
	$__signbôf
 (
__x
))

38 
__exãnsi⁄__
 uni⁄ { 
__f
; 
__i
; } 
__u
 = { __f: 
__x
 };

39  
__u
.
__i
 < 0;

40 
	}
}

41 
__MATH_INLINE
 

42 
__NTH
 (
	$__signbô
 (
__x
))

44 
__exãnsi⁄__
 uni⁄ { 
__d
; 
__i
[2]; } 
__u
 = { __d: 
__x
 };

45  
__u
.
__i
[1] < 0;

46 
	}
}

47 
__MATH_INLINE
 

48 
__NTH
 (
	$__signbôl
 (
__x
))

50 
__exãnsi⁄__
 uni⁄ { 
__l
; 
__i
[3]; } 
__u
 = { __l: 
__x
 };

51  (
__u
.
__i
[2] & 0x8000) != 0;

52 
	}
}

	@/usr/include/bits/mman.h

20 #i‚de‡
_SYS_MMAN_H


33 
	#PROT_READ
 0x1

	)

34 
	#PROT_WRITE
 0x2

	)

35 
	#PROT_EXEC
 0x4

	)

36 
	#PROT_NONE
 0x0

	)

37 
	#PROT_GROWSDOWN
 0x01000000

	)

39 
	#PROT_GROWSUP
 0x02000000

	)

43 
	#MAP_SHARED
 0x01

	)

44 
	#MAP_PRIVATE
 0x02

	)

45 #ifde‡
__USE_MISC


46 
	#MAP_TYPE
 0x0‡

	)

50 
	#MAP_FIXED
 0x10

	)

51 #ifde‡
__USE_MISC


52 
	#MAP_FILE
 0

	)

53 
	#MAP_ANONYMOUS
 0x20

	)

54 
	#MAP_ANON
 
MAP_ANONYMOUS


	)

55 
	#MAP_32BIT
 0x40

	)

59 #ifde‡
__USE_MISC


60 
	#MAP_GROWSDOWN
 0x00100

	)

61 
	#MAP_DENYWRITE
 0x00800

	)

62 
	#MAP_EXECUTABLE
 0x01000

	)

63 
	#MAP_LOCKED
 0x02000

	)

64 
	#MAP_NORESERVE
 0x04000

	)

65 
	#MAP_POPULATE
 0x08000

	)

66 
	#MAP_NONBLOCK
 0x10000

	)

70 
	#MS_ASYNC
 1

	)

71 
	#MS_SYNC
 4

	)

72 
	#MS_INVALIDATE
 2

	)

75 
	#MCL_CURRENT
 1

	)

76 
	#MCL_FUTURE
 2

	)

80 #ifde‡
__USE_GNU


81 
	#MREMAP_MAYMOVE
 1

	)

82 
	#MREMAP_FIXED
 2

	)

86 #ifde‡
__USE_BSD


87 
	#MADV_NORMAL
 0

	)

88 
	#MADV_RANDOM
 1

	)

89 
	#MADV_SEQUENTIAL
 2

	)

90 
	#MADV_WILLNEED
 3

	)

91 
	#MADV_DONTNEED
 4

	)

92 
	#MADV_REMOVE
 9

	)

93 
	#MADV_DONTFORK
 10

	)

94 
	#MADV_DOFORK
 11

	)

98 #ifde‡
__USE_XOPEN2K


99 
	#POSIX_MADV_NORMAL
 0

	)

100 
	#POSIX_MADV_RANDOM
 1

	)

101 
	#POSIX_MADV_SEQUENTIAL
 2

	)

102 
	#POSIX_MADV_WILLNEED
 3

	)

103 
	#POSIX_MADV_DONTNEED
 4

	)

	@/usr/include/bits/nan.h

20 #i‚de‡
_MATH_H


27 #i‡
__GNUC_PREREQ
(3,3)

29 
	#NAN
 (
	`__buûtö_«nf
 (""))

	)

31 #ñi‡
deföed
 
__GNUC__


33 
	#NAN
 \

34 (
__exãnsi⁄__
 \

35 ((uni⁄ { 
__l
 
	`__©åibuã__
 ((
	`__mode__
 (
__SI__
))); 
__d
; }) \

36 { 
__l
: 0x7fc00000UL }).
__d
)

	)

40 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#__«n_byãs
 { 0x7f, 0xc0, 0, 0 }

	)

45 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


46 
	#__«n_byãs
 { 0, 0, 0xc0, 0x7‡}

	)

49 uni⁄ { 
	m__c
[4]; 
	m__d
; } 
__«n_uni⁄


50 
	g__©åibuã_u£d__
 = { 
__«n_byãs
 };

51 
	#NAN
 (
__«n_uni⁄
.
__d
)

	)

	@/usr/include/bits/posix1_lim.h

25 #i‚def 
_BITS_POSIX1_LIM_H


26 
	#_BITS_POSIX1_LIM_H
 1

	)

32 
	#_POSIX_AIO_LISTIO_MAX
 2

	)

35 
	#_POSIX_AIO_MAX
 1

	)

38 
	#_POSIX_ARG_MAX
 4096

	)

41 #ifde‡
__USE_XOPEN2K


42 
	#_POSIX_CHILD_MAX
 25

	)

44 
	#_POSIX_CHILD_MAX
 6

	)

48 
	#_POSIX_DELAYTIMER_MAX
 32

	)

52 
	#_POSIX_HOST_NAME_MAX
 255

	)

55 
	#_POSIX_LINK_MAX
 8

	)

58 
	#_POSIX_LOGIN_NAME_MAX
 9

	)

61 
	#_POSIX_MAX_CANON
 255

	)

65 
	#_POSIX_MAX_INPUT
 255

	)

68 
	#_POSIX_MQ_OPEN_MAX
 8

	)

71 
	#_POSIX_MQ_PRIO_MAX
 32

	)

74 
	#_POSIX_NAME_MAX
 14

	)

77 #ifde‡
__USE_XOPEN2K


78 
	#_POSIX_NGROUPS_MAX
 8

	)

80 
	#_POSIX_NGROUPS_MAX
 0

	)

84 #ifde‡
__USE_XOPEN2K


85 
	#_POSIX_OPEN_MAX
 20

	)

87 
	#_POSIX_OPEN_MAX
 16

	)

92 
	#_POSIX_FD_SETSIZE
 
_POSIX_OPEN_MAX


	)

95 
	#_POSIX_PATH_MAX
 256

	)

98 
	#_POSIX_PIPE_BUF
 512

	)

102 
	#_POSIX_RE_DUP_MAX
 255

	)

105 
	#_POSIX_RTSIG_MAX
 8

	)

108 
	#_POSIX_SEM_NSEMS_MAX
 256

	)

111 
	#_POSIX_SEM_VALUE_MAX
 32767

	)

114 
	#_POSIX_SIGQUEUE_MAX
 32

	)

117 
	#_POSIX_SSIZE_MAX
 32767

	)

120 
	#_POSIX_STREAM_MAX
 8

	)

123 
	#_POSIX_SYMLINK_MAX
 255

	)

127 
	#_POSIX_SYMLOOP_MAX
 8

	)

130 
	#_POSIX_TIMER_MAX
 32

	)

133 
	#_POSIX_TTY_NAME_MAX
 9

	)

136 
	#_POSIX_TZNAME_MAX
 6

	)

139 
	#_POSIX_QLIMIT
 1

	)

143 
	#_POSIX_HIWAT
 
_POSIX_PIPE_BUF


	)

146 
	#_POSIX_UIO_MAXIOV
 16

	)

149 
	#_POSIX_CLOCKRES_MIN
 20000000

	)

153 
	~<bôs/loˇl_lim.h
>

156 #i‚def 
SSIZE_MAX


157 
	#SSIZE_MAX
 
LONG_MAX


	)

164 #i‚def 
NGROUPS_MAX


165 
	#NGROUPS_MAX
 8

	)

	@/usr/include/bits/posix_opt.h

20 #i‚def 
_POSIX_OPT_H


21 
	#_POSIX_OPT_H
 1

	)

24 
	#_POSIX_JOB_CONTROL
 1

	)

27 
	#_POSIX_SAVED_IDS
 1

	)

30 
	#_POSIX_PRIORITY_SCHEDULING
 200112L

	)

33 
	#_POSIX_SYNCHRONIZED_IO
 200112L

	)

36 
	#_POSIX_FSYNC
 200112L

	)

39 
	#_POSIX_MAPPED_FILES
 200112L

	)

42 
	#_POSIX_MEMLOCK
 200112L

	)

45 
	#_POSIX_MEMLOCK_RANGE
 200112L

	)

48 
	#_POSIX_MEMORY_PROTECTION
 200112L

	)

51 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

55 
	#_POSIX_VDISABLE
 '\0'

	)

58 
	#_POSIX_NO_TRUNC
 1

	)

61 
	#_XOPEN_REALTIME
 1

	)

64 
	#_XOPEN_REALTIME_THREADS
 1

	)

67 
	#_XOPEN_SHM
 1

	)

70 
	#_POSIX_THREADS
 200112L

	)

73 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

74 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200112L

	)

77 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200112L

	)

80 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200112L

	)

83 
	#_POSIX_THREAD_ATTR_STACKADDR
 200112L

	)

86 
	#_POSIX_THREAD_PRIO_INHERIT
 200112L

	)

90 
	#_POSIX_THREAD_PRIO_PROTECT
 200112L

	)

93 
	#_POSIX_SEMAPHORES
 200112L

	)

96 
	#_POSIX_REALTIME_SIGNALS
 200112L

	)

99 
	#_POSIX_ASYNCHRONOUS_IO
 200112L

	)

100 
	#_POSIX_ASYNC_IO
 1

	)

102 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

104 
	#_POSIX_PRIORITIZED_IO
 200112L

	)

107 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

110 
	#_LFS_LARGEFILE
 1

	)

111 
	#_LFS64_LARGEFILE
 1

	)

112 
	#_LFS64_STDIO
 1

	)

115 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200112L

	)

118 
	#_POSIX_CPUTIME
 0

	)

121 
	#_POSIX_THREAD_CPUTIME
 0

	)

124 
	#_POSIX_REGEXP
 1

	)

127 
	#_POSIX_READER_WRITER_LOCKS
 200112L

	)

130 
	#_POSIX_SHELL
 1

	)

133 
	#_POSIX_TIMEOUTS
 200112L

	)

136 
	#_POSIX_SPIN_LOCKS
 200112L

	)

139 
	#_POSIX_SPAWN
 200112L

	)

142 
	#_POSIX_TIMERS
 200112L

	)

145 
	#_POSIX_BARRIERS
 200112L

	)

148 
	#_POSIX_MESSAGE_PASSING
 200112L

	)

151 
	#_POSIX_THREAD_PROCESS_SHARED
 200112L

	)

154 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

157 
	#_POSIX_CLOCK_SELECTION
 200112L

	)

160 
	#_POSIX_ADVISORY_INFO
 200112L

	)

163 
	#_POSIX_IPV6
 200112L

	)

166 
	#_POSIX_RAW_SOCKETS
 200112L

	)

169 
	#_POSIX2_CHAR_TERM
 200112L

	)

172 
	#_POSIX_SPORADIC_SERVER
 -1

	)

173 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

176 
	#_POSIX_TRACE
 -1

	)

177 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

178 
	#_POSIX_TRACE_INHERIT
 -1

	)

179 
	#_POSIX_TRACE_LOG
 -1

	)

182 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

	@/usr/include/bits/pthreadtypes.h

20 #i‚de‡
_BITS_PTHREADTYPES_H


21 
	#_BITS_PTHREADTYPES_H
 1

	)

23 
	~<bôs/w‹dsize.h
>

25 #i‡
__WORDSIZE
 == 64

26 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

27 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

28 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

29 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

30 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

31 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

32 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

33 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

34 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

36 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

37 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

38 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

39 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

40 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

41 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

42 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

43 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

44 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

50 
	t±hªad_t
;

55 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

56 
	m__Æign
;

57 } 
	t±hªad_©å_t
;

60 #i‡
__WORDSIZE
 == 64

61 
	s__±hªad_öã∫Æ_li°


63 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

64 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

65 } 
	t__±hªad_li°_t
;

67 
	s__±hªad_öã∫Æ_¶i°


69 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

70 } 
	t__±hªad_¶i°_t
;

78 
	s__±hªad_muãx_s


80 
	m__lock
;

81 
	m__cou¡
;

82 
	m__ow√r
;

83 #i‡
__WORDSIZE
 == 64

84 
	m__nu£rs
;

88 
	m__köd
;

89 #i‡
__WORDSIZE
 == 64

90 
	m__•ös
;

91 
__±hªad_li°_t
 
	m__li°
;

92 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

94 
	m__nu£rs
;

95 
__exãnsi⁄__
 union

97 
	m__•ös
;

98 
__±hªad_¶i°_t
 
	m__li°
;

101 } 
	m__d©a
;

102 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

103 
	m__Æign
;

104 } 
	t±hªad_muãx_t
;

108 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

109 
	m__Æign
;

110 } 
	t±hªad_muãx©å_t
;

119 
	m__lock
;

120 
	m__fuãx
;

121 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

122 
__exãnsi⁄__
 
	m__wakeup_£q
;

123 
__exãnsi⁄__
 
	m__wokí_£q
;

124 *
	m__muãx
;

125 
	m__nwaôîs
;

126 
	m__brﬂdˇ°_£q
;

127 } 
	m__d©a
;

128 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

129 
__exãnsi⁄__
 
	m__Æign
;

130 } 
	t±hªad_c⁄d_t
;

134 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

135 
	m__Æign
;

136 } 
	t±hªad_c⁄d©å_t
;

140 
	t±hªad_key_t
;

144 
	t±hªad_⁄˚_t
;

147 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


152 #i‡
__WORDSIZE
 == 64

155 
	m__lock
;

156 
	m__ƒ_ªadîs
;

157 
	m__ªadîs_wakeup
;

158 
	m__wrôî_wakeup
;

159 
	m__ƒ_ªadîs_queued
;

160 
	m__ƒ_wrôîs_queued
;

161 
	m__wrôî
;

162 
	m__sh¨ed
;

163 
	m__∑d1
;

164 
	m__∑d2
;

167 
	m__Êags
;

168 } 
	m__d©a
;

172 
	m__lock
;

173 
	m__ƒ_ªadîs
;

174 
	m__ªadîs_wakeup
;

175 
	m__wrôî_wakeup
;

176 
	m__ƒ_ªadîs_queued
;

177 
	m__ƒ_wrôîs_queued
;

180 
	m__Êags
;

181 
	m__sh¨ed
;

182 
	m__∑d1
;

183 
	m__∑d2
;

184 
	m__wrôî
;

185 } 
	m__d©a
;

187 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

188 
	m__Æign
;

189 } 
	t±hªad_rwlock_t
;

193 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

194 
	m__Æign
;

195 } 
	t±hªad_rwlock©å_t
;

199 #ifde‡
__USE_XOPEN2K


201 vﬁ©ûê
	t±hªad_•ölock_t
;

208 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

209 
	m__Æign
;

210 } 
	t±hªad_b¨rõr_t
;

214 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

215 
	m__Æign
;

216 } 
	t±hªad_b¨rõøâr_t
;

220 #i‡
__WORDSIZE
 == 32

222 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/setjmp.h

20 #i‚de‡
_BITS_SETJMP_H


21 
	#_BITS_SETJMP_H
 1

	)

23 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


27 
	~<bôs/w‹dsize.h
>

29 #i‚de‡
_ASM


31 #i‡
__WORDSIZE
 == 64

32 
	t__jmp_buf
[8];

34 
	t__jmp_buf
[6];

	@/usr/include/bits/stat.h

19 #i‚de‡
_SYS_STAT_H


24 
	#_STAT_VER_KERNEL
 0

	)

26 #i‡
__WORDSIZE
 == 32

27 
	#_STAT_VER_SVR4
 2

	)

28 
	#_STAT_VER_LINUX
 3

	)

31 
	#_MKNOD_VER_LINUX
 1

	)

32 
	#_MKNOD_VER_SVR4
 2

	)

33 
	#_MKNOD_VER
 
_MKNOD_VER_LINUX


	)

35 
	#_STAT_VER_LINUX
 1

	)

38 
	#_MKNOD_VER_LINUX
 0

	)

41 
	#_STAT_VER
 
_STAT_VER_LINUX


	)

43 
	s°©


45 
__dev_t
 
	m°_dev
;

46 #i‡
__WORDSIZE
 == 32

47 
	m__∑d1
;

49 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


50 
__öo_t
 
	m°_öo
;

52 
__öo_t
 
	m__°_öo
;

54 #i‡
__WORDSIZE
 == 32

55 
__mode_t
 
	m°_mode
;

56 
__∆ök_t
 
	m°_∆ök
;

58 
__∆ök_t
 
	m°_∆ök
;

59 
__mode_t
 
	m°_mode
;

61 
__uid_t
 
	m°_uid
;

62 
__gid_t
 
	m°_gid
;

63 #i‡
__WORDSIZE
 == 64

64 
	m__∑d0
;

66 
__dev_t
 
	m°_rdev
;

67 #i‡
__WORDSIZE
 == 32

68 
	m__∑d2
;

70 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


71 
__off_t
 
	m°_size
;

73 
__off64_t
 
	m°_size
;

75 
__blksize_t
 
	m°_blksize
;

76 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


77 
__blk˙t_t
 
	m°_blocks
;

79 
__blk˙t64_t
 
	m°_blocks
;

81 #ifde‡
__USE_MISC


88 
time•ec
 
	m°_©im
;

89 
time•ec
 
	m°_mtim
;

90 
time•ec
 
	m°_˘im
;

91 
	#°_©ime
 
°_©im
.
tv_£c


	)

92 
	#°_mtime
 
°_mtim
.
tv_£c


	)

93 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

95 
__time_t
 
	m°_©ime
;

96 
	m°_©imí£c
;

97 
__time_t
 
	m°_mtime
;

98 
	m°_mtimí£c
;

99 
__time_t
 
	m°_˘ime
;

100 
	m°_˘imí£c
;

102 #i‡
__WORDSIZE
 == 64

103 
	m__unu£d
[3];

105 #i‚de‡
__USE_FILE_OFFSET64


106 
	m__unu£d4
;

107 
	m__unu£d5
;

109 
__öo64_t
 
	m°_öo
;

114 #ifde‡
__USE_LARGEFILE64


116 
	s°©64


118 
__dev_t
 
	m°_dev
;

119 #i‡
__WORDSIZE
 == 64

120 
__öo64_t
 
	m°_öo
;

121 
__∆ök_t
 
	m°_∆ök
;

122 
__mode_t
 
	m°_mode
;

124 
	m__∑d1
;

125 
__öo_t
 
	m__°_öo
;

126 
__mode_t
 
	m°_mode
;

127 
__∆ök_t
 
	m°_∆ök
;

129 
__uid_t
 
	m°_uid
;

130 
__gid_t
 
	m°_gid
;

131 #i‡
__WORDSIZE
 == 64

132 
	m__∑d0
;

133 
__dev_t
 
	m°_rdev
;

134 
__off_t
 
	m°_size
;

136 
__dev_t
 
	m°_rdev
;

137 
	m__∑d2
;

138 
__off64_t
 
	m°_size
;

140 
__blksize_t
 
	m°_blksize
;

141 
__blk˙t64_t
 
	m°_blocks
;

142 #ifde‡
__USE_MISC


149 
time•ec
 
	m°_©im
;

150 
time•ec
 
	m°_mtim
;

151 
time•ec
 
	m°_˘im
;

152 
	#°_©ime
 
°_©im
.
tv_£c


	)

153 
	#°_mtime
 
°_mtim
.
tv_£c


	)

154 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

156 
__time_t
 
	m°_©ime
;

157 
	m°_©imí£c
;

158 
__time_t
 
	m°_mtime
;

159 
	m°_mtimí£c
;

160 
__time_t
 
	m°_˘ime
;

161 
	m°_˘imí£c
;

163 #i‡
__WORDSIZE
 == 64

164 
	m__unu£d
[3];

166 
__öo64_t
 
	m°_öo
;

172 
	#_STATBUF_ST_BLKSIZE


	)

173 
	#_STATBUF_ST_RDEV


	)

175 
	#_STATBUF_ST_NSEC


	)

179 
	#__S_IFMT
 0170000

	)

182 
	#__S_IFDIR
 0040000

	)

183 
	#__S_IFCHR
 0020000

	)

184 
	#__S_IFBLK
 0060000

	)

185 
	#__S_IFREG
 0100000

	)

186 
	#__S_IFIFO
 0010000

	)

187 
	#__S_IFLNK
 0120000

	)

188 
	#__S_IFSOCK
 0140000

	)

192 
	#__S_TYPEISMQ
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

193 
	#__S_TYPEISSEM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

194 
	#__S_TYPEISSHM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

198 
	#__S_ISUID
 04000

	)

199 
	#__S_ISGID
 02000

	)

200 
	#__S_ISVTX
 01000

	)

201 
	#__S_IREAD
 0400

	)

202 
	#__S_IWRITE
 0200

	)

203 
	#__S_IEXEC
 0100

	)

205 #i‡
deföed
 
__USE_ATFILE
 || deföed 
__USE_GNU


207 
	#UTIME_NOW
 ((1»<< 30Ë- 1l)

	)

208 
	#UTIME_OMIT
 ((1»<< 30Ë- 2l)

	)

	@/usr/include/bits/stdio-ldbl.h

20 #i‚de‡
_STDIO_H


24 
__BEGIN_NAMESPACE_STD


25 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

26 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

27 
	$__LDBL_REDIR_DECL
 (
•rötf
)

28 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

29 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

30 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

31 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

32 && !
deföed
 
__REDIRECT
 \

33 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

39 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

40 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

42 
__END_NAMESPACE_STD


44 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


45 
__BEGIN_NAMESPACE_C99


46 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

47 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

48 
__END_NAMESPACE_C99


51 #ifdef 
__USE_ISOC99


52 
__BEGIN_NAMESPACE_C99


53 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

54 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

55 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

57 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

59 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

60 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

61 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

63 
__END_NAMESPACE_C99


66 #ifde‡
__USE_GNU


67 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

68 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

69 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

70 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

71 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

72 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

73 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

76 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


77 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

78 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

79 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


80 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

81 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

83 #i‡
__USE_FORTIFY_LEVEL
 > 1

84 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

85 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

86 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

88 #ifde‡
__USE_GNU


89 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

90 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

91 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

93 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

94 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

20 #i‚de‡
_STDIO_H


24 #i‚de‡
__exã∫_ölöe


25 
	#__STDIO_INLINE
 
ölöe


	)

27 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

31 #ifde‡
__USE_EXTERN_INLINES


34 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
)

36 
__STDIO_INLINE
 

37 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

39  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

40 
	}
}

44 
__STDIO_INLINE
 

45 
	$gëch¨
 ()

47  
	`_IO_gëc
 (
°dö
);

48 
	}
}

51 #ifde‡
__USE_MISC


53 
__STDIO_INLINE
 

54 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

56  
	`_IO_gëc_u∆ocked
 (
__Â
);

57 
	}
}

61 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


63 
__STDIO_INLINE
 

64 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

66  
	`_IO_gëc_u∆ocked
 (
__Â
);

67 
	}
}

70 
__STDIO_INLINE
 

71 
	$gëch¨_u∆ocked
 ()

73  
	`_IO_gëc_u∆ocked
 (
°dö
);

74 
	}
}

79 
__STDIO_INLINE
 

80 
	$putch¨
 (
__c
)

82  
	`_IO_putc
 (
__c
, 
°dout
);

83 
	}
}

86 #ifde‡
__USE_MISC


88 
__STDIO_INLINE
 

89 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

91  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

92 
	}
}

96 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


98 
__STDIO_INLINE
 

99 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

101  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

102 
	}
}

105 
__STDIO_INLINE
 

106 
	$putch¨_u∆ocked
 (
__c
)

108  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

109 
	}
}

113 #ifdef 
__USE_GNU


115 
__STDIO_INLINE
 
_IO_ssize_t


116 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

118  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

119 
	}
}

123 #ifde‡
__USE_MISC


125 
__STDIO_INLINE
 

126 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

128  
	`_IO_„of_u∆ocked
 (
__°ªam
);

129 
	}
}

132 
__STDIO_INLINE
 

133 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

135  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

136 
	}
}

142 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

143 && !
deföed
 
	g__˝lu•lus


145 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

146 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

147 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

148 && (
size_t
Ë(
size
) != 0) \

149 ? ({ *
__±r
 = (*Ë(
±r
); \

150 
FILE
 *
__°ªam
 = (
°ªam
); \

151 
size_t
 
__˙t
; \

152 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

153 
__˙t
 > 0; --__cnt) \

155 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

156 i‡(
__c
 =
EOF
) \

158 *
__±r
++ = 
__c
; \

160 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

161 / (
size_t
Ë(
size
); }) \

162 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

163 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

165 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

166 (Ë(
n
), (
size_t
) 0) \

167 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

169 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

170 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

171 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

172 && (
size_t
Ë(
size
) != 0) \

173 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

174 
FILE
 *
__°ªam
 = (
°ªam
); \

175 
size_t
 
__˙t
; \

176 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

177 
__˙t
 > 0; --__cnt) \

178 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

180 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

181 / (
size_t
Ë(
size
); }) \

182 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

183 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

185 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

186 (Ë(
n
), (
size_t
) 0) \

187 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

191 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

20 #i‚de‡
_STDIO_H


24 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

25 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

26 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

27 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

28 
_G_va_li°
 
__≠
Ë
__THROW
;

30 #ifde‡
__va_¨g_∑ck


31 
__exã∫_Æways_ölöe
 

32 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...))

34  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

35 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

36 
	}
}

37 #ñi‡!
deföed
 
__˝lu•lus


38 
	#•rötf
(
°r
, ...) \

39 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

40 
__VA_ARGS__
)

	)

43 
__exã∫_Æways_ölöe
 

44 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

45 
_G_va_li°
 
__≠
))

47  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

48 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

49 
	}
}

51 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


53 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

54 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

55 ...Ë
__THROW
;

56 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

57 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

58 
_G_va_li°
 
__≠
Ë
__THROW
;

60 #ifde‡
__va_¨g_∑ck


61 
__exã∫_Æways_ölöe
 

62 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

63 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...))

65  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

66 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

67 
	}
}

68 #ñi‡!
deföed
 
__˝lu•lus


69 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

70 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

71 
__VA_ARGS__
)

	)

74 
__exã∫_Æways_ölöe
 

75 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

76 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

78  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

79 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

80 
	}
}

84 #i‡
__USE_FORTIFY_LEVEL
 > 1

86 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

87 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

88 
__¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

89 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

90 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

91 
__v¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

92 
_G_va_li°
 
__≠
);

94 #ifde‡
__va_¨g_∑ck


95 
__exã∫_Æways_ölöe
 

96 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...)

98  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

99 
	`__va_¨g_∑ck
 ());

100 
	}
}

102 
__exã∫_Æways_ölöe
 

103 
	$¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

105  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

106 
	}
}

107 #ñi‡!
deföed
 
__˝lu•lus


108 
	#¥ötf
(...) \

109 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

110 
	#Ârötf
(
°ªam
, ...) \

111 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

114 
__exã∫_Æways_ölöe
 

115 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

117 #ifde‡
__USE_EXTERN_INLINES


118  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

120  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

122 
	}
}

124 
__exã∫_Æways_ölöe
 

125 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

126 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

128  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

129 
	}
}

131 #ifde‡
__USE_GNU


133 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

134 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

135 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

136 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

137 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

138 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

139 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

140 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

141 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

142 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

143 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

144 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

145 
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

147 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

148 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

149 
__Êag
,

150 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

151 
_G_va_li°
 
__¨gs
)

152 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

154 #ifde‡
__va_¨g_∑ck


155 
__exã∫_Æways_ölöe
 

156 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...))

158  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

159 
	`__va_¨g_∑ck
 ());

160 
	}
}

162 
__exã∫_Æways_ölöe
 

163 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

166  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

167 
	`__va_¨g_∑ck
 ());

168 
	}
}

170 
__exã∫_Æways_ölöe
 

171 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

173  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

174 
	`__va_¨g_∑ck
 ());

175 
	}
}

177 
__exã∫_Æways_ölöe
 

178 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

179 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...))

181  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

182 
	`__va_¨g_∑ck
 ());

183 
	}
}

184 #ñi‡!
deföed
 
__˝lu•lus


185 
	#a•rötf
(
±r
, ...) \

186 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

187 
	#__a•rötf
(
±r
, ...) \

188 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

189 
	#d¥ötf
(
fd
, ...) \

190 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

191 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

192 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

195 
__exã∫_Æways_ölöe
 

196 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

197 
_G_va_li°
 
__≠
))

199  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

200 
	}
}

202 
__exã∫_Æways_ölöe
 

203 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

205  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

206 
	}
}

208 
__exã∫_Æways_ölöe
 

209 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

210 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

212  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

213 
__≠
);

214 
	}
}

220 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

221 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

222 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

225 
__exã∫_Æways_ölöe
 
__wur
 *

226 
	$gës
 (*
__°r
)

228 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

229  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

230  
	`__gës_w¨n
 (
__°r
);

231 
	}
}

233 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

234 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

235 *
	`__REDIRECT
 (
__fgës_Æüs
,

236 (*
__ª°ri˘
 
__s
, 
__n
,

237 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

238 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

239 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

240 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

241 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

244 
__exã∫_Æways_ölöe
 
__wur
 *

245 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

247 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

249 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

250  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

252 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

253  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

255  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

256 
	}
}

258 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

259 
size_t
 
__size
, size_à
__n
,

260 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

261 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

262 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

263 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

264 
‰ód
Ë
__wur
;

265 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

266 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

267 
size_t
 
__size
, size_à
__n
,

268 
FILE
 *
__ª°ri˘
 
__°ªam
),

269 
__‰ód_chk
)

270 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

273 
__exã∫_Æways_ölöe
 
__wur
 
size_t


274 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

275 
FILE
 *
__ª°ri˘
 
__°ªam
)

277 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

279 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

280 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

281 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

282  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

284 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

285  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

287  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

288 
	}
}

290 #ifde‡
__USE_GNU


291 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

292 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

293 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

294 (*
__ª°ri˘
 
__s
, 
__n
,

295 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

296 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

297 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

298 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

299 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

302 
__exã∫_Æways_ölöe
 
__wur
 *

303 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

305 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

307 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

308  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

310 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

311  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

313  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

314 
	}
}

317 #ifde‡
__USE_MISC


318 #unde‡
‰ód_u∆ocked


319 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

320 
size_t
 
__size
, size_à
__n
,

321 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

322 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

323 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

324 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

325 
‰ód_u∆ocked
Ë
__wur
;

326 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

327 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

328 
size_t
 
__size
, size_à
__n
,

329 
FILE
 *
__ª°ri˘
 
__°ªam
),

330 
__‰ód_u∆ocked_chk
)

331 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

334 
__exã∫_Æways_ölöe
 
__wur
 
size_t


335 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

336 
FILE
 *
__ª°ri˘
 
__°ªam
)

338 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

340 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

341 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

342 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

343  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

344 
__°ªam
);

346 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

347  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

348 
__°ªam
);

351 #ifde‡
__USE_EXTERN_INLINES


352 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

353 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

354 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

355 && 
__size
 * 
__n
 <= 8)

357 
size_t
 
__˙t
 = 
__size
 * 
__n
;

358 *
__˝å
 = (*Ë
__±r
;

359 i‡(
__˙t
 == 0)

362 ; 
__˙t
 > 0; --__cnt)

364 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
);

365 i‡(
__c
 =
EOF
)

367 *
__˝å
++ = 
__c
;

369  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

372  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

373 
	}
}

	@/usr/include/bits/stdio_lim.h

19 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


23 #ifde‡
_STDIO_H


24 
	#L_tm≤am
 20

	)

25 
	#TMP_MAX
 238328

	)

26 
	#FILENAME_MAX
 4096

	)

28 #ifde‡
__USE_POSIX


29 
	#L_˘îmid
 9

	)

30 
	#L_cu£rid
 9

	)

34 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


35 #unde‡
FOPEN_MAX


36 
	#FOPEN_MAX
 16

	)

39 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


40 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-ldbl.h

20 #i‚de‡
_STDLIB_H


24 #ifdef 
__USE_ISOC99


25 
__BEGIN_NAMESPACE_C99


26 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

27 
__END_NAMESPACE_C99


30 #ifde‡
__USE_GNU


31 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

34 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


35 #ifde‡
__USE_MISC


36 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

38 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

39 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

40 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

20 #i‚de‡
_STDLIB_H


24 *
	$__ªÆ∑th_chk
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

25 *
__ª°ri˘
 
__ªsﬁved
,

26 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

27 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

28 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

29 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

30 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

31 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

32 *
__ª°ri˘
 
__ªsﬁved
,

33 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


34 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

37 
__exã∫_Æways_ölöe
 
__wur
 *

38 
	`__NTH
 (
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

40 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

42 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


43 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

44  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

46  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

49  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

50 
	}
}

53 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

54 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

55 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

56 
size_t
 
__buÊí
), 
±¢ame_r
)

57 
	`__n⁄nuŒ
 ((2));

58 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

60 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

61 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

64 
__exã∫_Æways_ölöe
 

65 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

67 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

69 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

70  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

71 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

72  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

74  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

75 
	}
}

78 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

79 
__THROW
 
__wur
;

80 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

81 
w˘omb
Ë
__wur
;

83 
__exã∫_Æways_ölöe
 
__wur
 

84 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

89 
	#__STDLIB_MB_LEN_MAX
 16

	)

90 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


93 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

94  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

95  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

96 
	}
}

99 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

100 
__c⁄°
 *
__ª°ri˘
 
__§c
,

101 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

102 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

103 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

104 
__c⁄°
 *
__ª°ri˘
 
__§c
,

105 
size_t
 
__Àn
), 
mb°owcs
);

106 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

107 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

108 
__c⁄°
 *
__ª°ri˘
 
__§c
,

109 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

110 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

113 
__exã∫_Æways_ölöe
 
size_t


114 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

115 
size_t
 
__Àn
))

117 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

119 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

120  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

121 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

123 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

124  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

125 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

127  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

128 
	}
}

131 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

132 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

133 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

134 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

135 (*
__ª°ri˘
 
__d°
,

136 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

137 
size_t
 
__Àn
), 
wc°ombs
);

138 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

139 (*
__ª°ri˘
 
__d°
,

140 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

141 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

142 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

144 
__exã∫_Æways_ölöe
 
size_t


145 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__§c
,

146 
size_t
 
__Àn
))

148 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

150 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

151  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

152 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

153  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

155  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

156 
	}
}

	@/usr/include/bits/string.h

20 #i‚de‡
_STRING_H


26 
	#_STRING_ARCH_u«lig√d
 1

	)

	@/usr/include/bits/string2.h

21 #i‚de‡
_STRING_H


25 #i‡!
deföed
 
__NO_STRING_INLINES
 && !deföed 
__BOUNDED_POINTERS__


42 #i‚de‡
__STRING_INLINE


43 #ifde‡
__˝lu•lus


44 
	#__STRING_INLINE
 
ölöe


	)

46 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

50 #i‡
_STRING_ARCH_u«lig√d


52 
	~<ídün.h
>

53 
	~<bôs/ty≥s.h
>

55 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


56 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

57 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

58 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

59 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

60 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

61 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

62 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

63 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

65 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

66 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

67 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1])

	)

68 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

69 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

70 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

71 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

72 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3])

	)

77 
	#__STRING2_COPY_TYPE
(
N
) \

78 °ru˘ { 
__¨r
[
N
]; } \

79 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

80 
	t__STRING2_COPY_TYPE
 (2);

81 
__STRING2_COPY_TYPE
 (3);

82 
__STRING2_COPY_TYPE
 (4);

83 
__STRING2_COPY_TYPE
 (5);

84 
__STRING2_COPY_TYPE
 (6);

85 
__STRING2_COPY_TYPE
 (7);

86 
__STRING2_COPY_TYPE
 (8);

87 #unde‡
__STRING2_COPY_TYPE


93 
	#__°rög2_1b±r_p
(
__x
) \

94 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

97 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


98 #i‡!
__GNUC_PREREQ
 (3, 0)

99 #i‡
_STRING_ARCH_u«lig√d


100 
	#mem£t
(
s
, 
c
, 
n
) \

101 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

102 ? ((
n
) == 1 \

103 ? 
	`__mem£t_1
 (
s
, 
c
) \

104 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

105 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

106 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

107 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

109 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

110 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

112 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

113 ({ *
__s
 = (
s
); \

115 
__ui
; \

116 
__usi
; \

117 
__uc
; \

118 } *
__u
 = 
__s
; \

119 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

122 (Ë(
n
)) \

125 
__u
->
__ui
 = 
__c
 * 0x01010101; \

126 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

128 
__u
->
__ui
 = 
__c
 * 0x01010101; \

129 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

131 
__u
->
__ui
 = 
__c
 * 0x01010101; \

132 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

134 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

135 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

136 
__u
->
__uc
 = (Ë
__c
; \

140 
__u
->
__ui
 = 
__c
 * 0x01010101; \

141 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

143 
__u
->
__ui
 = 
__c
 * 0x01010101; \

144 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

146 
__u
->
__ui
 = 
__c
 * 0x01010101; \

147 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

149 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

153 
__u
->
__ui
 = 
__c
 * 0x01010101; \

154 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

156 
__u
->
__ui
 = 
__c
 * 0x01010101; \

157 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

159 
__u
->
__ui
 = 
__c
 * 0x01010101; \

160 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

162 
__u
->
__uc
 = (Ë
__c
; \

166 
__u
->
__ui
 = 
__c
 * 0x01010101; \

167 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

169 
__u
->
__ui
 = 
__c
 * 0x01010101; \

170 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

172 
__u
->
__ui
 = 
__c
 * 0x01010101; \

173 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

175 
__u
->
__ui
 = 
__c
 * 0x01010101; \

180 
__s
; })

	)

182 
	#mem£t
(
s
, 
c
, 
n
) \

183 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

184 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

185 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

194 #i‡
__GNUC_PREREQ
 (2, 91)

195 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

203 #ifde‡
__USE_GNU


204 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


205 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


206 #i‡
__GNUC_PREREQ
 (3, 4)

207 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

208 #ñi‡
__GNUC_PREREQ
 (3, 0)

209 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

210 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

211 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

212 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

213 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

215 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

216 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

217 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

218 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

219 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

223 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

226 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


227 #i‡
_STRING_ARCH_u«lig√d


228 #i‚de‡
_FORCE_INLINES


229 
	#__memp˝y_¨gs
(
§c
) \

230 ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[2], \

231 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[6], \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

235 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

237 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

238 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

239 
__uöt32_t
, 
size_t
);

240 
__STRING_INLINE
 *

241 
	$__memp˝y_smÆl
 (*
__de°1
,

242 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

243 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

244 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

245 
size_t
 
__§˛í
)

248 
__uöt32_t
 
__ui
;

249 
__uöt16_t
 
__usi
;

250 
__uc
;

251 
__c
;

252 } *
__u
 = 
__de°1
;

253 (Ë
__§˛í
)

256 
__u
->
__c
 = 
__§c0_1
;

257 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

260 
__u
->
__usi
 = 
__§c0_2
;

261 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

264 
__u
->
__usi
 = 
__§c0_2
;

265 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

266 
__u
->
__c
 = 
__§c2_1
;

267 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

270 
__u
->
__ui
 = 
__§c0_4
;

271 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

274 
__u
->
__ui
 = 
__§c0_4
;

275 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

276 
__u
->
__c
 = 
__§c4_1
;

277 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

280 
__u
->
__ui
 = 
__§c0_4
;

281 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

282 
__u
->
__usi
 = 
__§c4_2
;

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

286 
__u
->
__ui
 = 
__§c0_4
;

287 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

288 
__u
->
__usi
 = 
__§c4_2
;

289 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

290 
__u
->
__c
 = 
__§c6_1
;

291 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

294 
__u
->
__ui
 = 
__§c0_4
;

295 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

296 
__u
->
__ui
 = 
__§c4_4
;

297 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

300  (*Ë
__u
;

301 
	}
}

303 #i‚de‡
_FORCE_INLINES


304 
	#__memp˝y_¨gs
(
§c
) \

305 ((
__c⁄°
 *Ë(
§c
))[0], \

306 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

307 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1] } }), \

308 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

309 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

310 ((
__c⁄°
 *Ë(
§c
))[2] } }), \

311 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

312 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

313 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3] } }), \

314 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

315 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

316 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

317 ((
__c⁄°
 *Ë(
§c
))[4] } }), \

318 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

319 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

320 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

321 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5] } }), \

322 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

323 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

324 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

325 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

326 ((
__c⁄°
 *Ë(
§c
))[6] } }), \

327 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

328 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

329 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

330 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

331 ((
__c⁄°
 *Ë(
§c
))[6], ((__c⁄° *Ë(§c))[7] } })

	)

333 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

334 
__STRING2_COPY_ARR3
,

335 
__STRING2_COPY_ARR4
,

336 
__STRING2_COPY_ARR5
,

337 
__STRING2_COPY_ARR6
,

338 
__STRING2_COPY_ARR7
,

339 
__STRING2_COPY_ARR8
, 
size_t
);

340 
__STRING_INLINE
 *

341 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

342 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

343 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

344 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

345 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

348 
__c
;

349 
__STRING2_COPY_ARR2
 
__sˇ2
;

350 
__STRING2_COPY_ARR3
 
__sˇ3
;

351 
__STRING2_COPY_ARR4
 
__sˇ4
;

352 
__STRING2_COPY_ARR5
 
__sˇ5
;

353 
__STRING2_COPY_ARR6
 
__sˇ6
;

354 
__STRING2_COPY_ARR7
 
__sˇ7
;

355 
__STRING2_COPY_ARR8
 
__sˇ8
;

356 } *
__u
 = 
__de°
;

357 (Ë
__§˛í
)

360 
__u
->
__c
 = 
__§c1
;

363 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

366 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

369 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

372 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

375 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

378 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

381 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

384  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

385 
	}
}

393 #i‚de‡
_HAVE_STRING_ARCH_°rchr


394 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

395 #i‡
__GNUC_PREREQ
 (3, 2)

396 
	#°rchr
(
s
, 
c
) \

397 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

398 && (
c
) == '\0' \

399 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

400 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

402 
	#°rchr
(
s
, 
c
) \

403 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

404 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

405 : 
	`°rchr
 (
s
, 
c
)))

	)

411 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

412 || 
deföed
 
	g_FORCE_INLINES


413 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

414 
	#°r˝y
(
de°
, 
§c
) \

415 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

416 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

417 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

418 
	`°æí
 (
§c
) + 1) \

419 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

420 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

423 #i‡
_STRING_ARCH_u«lig√d


424 #i‚de‡
_FORCE_INLINES


425 
	#__°r˝y_¨gs
(
§c
) \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

429 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

431 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

432 
__uöt32_t
, __uöt32_t, 
size_t
);

433 
__STRING_INLINE
 *

434 
	$__°r˝y_smÆl
 (*
__de°
,

435 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

436 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

437 
size_t
 
__§˛í
)

440 
__uöt32_t
 
__ui
;

441 
__uöt16_t
 
__usi
;

442 
__uc
;

443 } *
__u
 = (*Ë
__de°
;

444 (Ë
__§˛í
)

447 
__u
->
__uc
 = '\0';

450 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
->
__usi
 = 
__§c0_2
;

454 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

455 
__u
->
__uc
 = '\0';

458 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
->
__ui
 = 
__§c0_4
;

462 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

463 
__u
->
__uc
 = '\0';

466 
__u
->
__ui
 = 
__§c0_4
;

467 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

468 
__u
->
__usi
 = 
__§c4_2
;

471 
__u
->
__ui
 = 
__§c0_4
;

472 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

473 
__u
->
__usi
 = 
__§c4_2
;

474 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

475 
__u
->
__uc
 = '\0';

478 
__u
->
__ui
 = 
__§c0_4
;

479 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

480 
__u
->
__ui
 = 
__§c4_4
;

483  
__de°
;

484 
	}
}

486 #i‚de‡
_FORCE_INLINES


487 
	#__°r˝y_¨gs
(
§c
) \

488 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

489 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

490 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

491 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

493 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

494 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

495 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

496 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

497 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

498 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

500 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

501 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

502 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

503 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

504 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

505 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

506 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

507 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

509 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

510 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

511 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

512 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

513 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

515 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

516 
__STRING2_COPY_ARR3
,

517 
__STRING2_COPY_ARR4
,

518 
__STRING2_COPY_ARR5
,

519 
__STRING2_COPY_ARR6
,

520 
__STRING2_COPY_ARR7
,

521 
__STRING2_COPY_ARR8
, 
size_t
);

522 
__STRING_INLINE
 *

523 
	$__°r˝y_smÆl
 (*
__de°
,

524 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

525 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

526 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

527 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

530 
__c
;

531 
__STRING2_COPY_ARR2
 
__sˇ2
;

532 
__STRING2_COPY_ARR3
 
__sˇ3
;

533 
__STRING2_COPY_ARR4
 
__sˇ4
;

534 
__STRING2_COPY_ARR5
 
__sˇ5
;

535 
__STRING2_COPY_ARR6
 
__sˇ6
;

536 
__STRING2_COPY_ARR7
 
__sˇ7
;

537 
__STRING2_COPY_ARR8
 
__sˇ8
;

538 } *
__u
 = (*Ë
__de°
;

539 (Ë
__§˛í
)

542 
__u
->
__c
 = '\0';

545 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

548 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

551 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

554 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

557 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

560 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

563 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

566  
__de°
;

567 
	}
}

573 #ifde‡
__USE_GNU


574 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


575 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


576 #i‡
__GNUC_PREREQ
 (3, 4)

577 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

578 #ñi‡
__GNUC_PREREQ
 (3, 0)

579 
	#__°p˝y
(
de°
, 
§c
) \

580 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

581 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

582 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

583 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

585 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

587 
	#__°p˝y
(
de°
, 
§c
) \

588 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

589 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

590 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

591 
	`°æí
 (
§c
) + 1) \

592 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

594 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

598 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

601 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


602 #i‡
_STRING_ARCH_u«lig√d


603 #i‚de‡
_FORCE_INLINES


604 
	#__°p˝y_¨gs
(
§c
) \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

608 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

610 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

611 
__uöt32_t
, __uöt32_t, 
size_t
);

612 
__STRING_INLINE
 *

613 
	$__°p˝y_smÆl
 (*
__de°
,

614 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

615 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

616 
size_t
 
__§˛í
)

619 
__ui
;

620 
__usi
;

621 
__uc
;

622 
__c
;

623 } *
__u
 = (*Ë
__de°
;

624 (Ë
__§˛í
)

627 
__u
->
__uc
 = '\0';

630 
__u
->
__usi
 = 
__§c0_2
;

631 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

634 
__u
->
__usi
 = 
__§c0_2
;

635 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

636 
__u
->
__uc
 = '\0';

639 
__u
->
__ui
 = 
__§c0_4
;

640 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

643 
__u
->
__ui
 = 
__§c0_4
;

644 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

645 
__u
->
__uc
 = '\0';

648 
__u
->
__ui
 = 
__§c0_4
;

649 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

650 
__u
->
__usi
 = 
__§c4_2
;

651 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

654 
__u
->
__ui
 = 
__§c0_4
;

655 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

656 
__u
->
__usi
 = 
__§c4_2
;

657 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

658 
__u
->
__uc
 = '\0';

661 
__u
->
__ui
 = 
__§c0_4
;

662 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

663 
__u
->
__ui
 = 
__§c4_4
;

664 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

667  &
__u
->
__c
;

668 
	}
}

670 #i‚de‡
_FORCE_INLINES


671 
	#__°p˝y_¨gs
(
§c
) \

672 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

673 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

674 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

675 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

677 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

678 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

679 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

680 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

681 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

682 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

684 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

685 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

686 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

687 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

688 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

689 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

690 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

691 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

693 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

694 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

695 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

696 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

697 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

699 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

700 
__STRING2_COPY_ARR3
,

701 
__STRING2_COPY_ARR4
,

702 
__STRING2_COPY_ARR5
,

703 
__STRING2_COPY_ARR6
,

704 
__STRING2_COPY_ARR7
,

705 
__STRING2_COPY_ARR8
, 
size_t
);

706 
__STRING_INLINE
 *

707 
	$__°p˝y_smÆl
 (*
__de°
,

708 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

709 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

710 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

711 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

714 
__c
;

715 
__STRING2_COPY_ARR2
 
__sˇ2
;

716 
__STRING2_COPY_ARR3
 
__sˇ3
;

717 
__STRING2_COPY_ARR4
 
__sˇ4
;

718 
__STRING2_COPY_ARR5
 
__sˇ5
;

719 
__STRING2_COPY_ARR6
 
__sˇ6
;

720 
__STRING2_COPY_ARR7
 
__sˇ7
;

721 
__STRING2_COPY_ARR8
 
__sˇ8
;

722 } *
__u
 = (*Ë
__de°
;

723 (Ë
__§˛í
)

726 
__u
->
__c
 = '\0';

729 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

732 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

735 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

738 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

741 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

744 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

747 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

750  
__de°
 + 
__§˛í
 - 1;

751 
	}
}

759 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


760 #i‡
__GNUC_PREREQ
 (3, 2)

761 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

763 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

764 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

765 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

766 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

768 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

774 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


775 #ifde‡
_USE_STRING_ARCH_°rchr


776 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

777 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

778 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

779 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

780 ? 
	`°rˇt
 (
__de°
, 
§c
) \

781 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

782 
§c
, 
n
)Ë'\0', 
__de°
)) \

783 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

784 #ñi‡
__GNUC_PREREQ
 (3, 2)

785 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

787 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

788 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

789 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

790 ? 
	`°rˇt
 (
de°
, 
§c
) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

792 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

798 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


799 #i‡
__GNUC_PREREQ
 (3, 2)

800 
	#°rcmp
(
s1
, 
s2
) \

801 
__exãnsi⁄__
 \

802 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

803 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

804 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

805 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

806 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

807 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

808 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

809 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

810 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

811 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

812 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

813 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

814 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

815 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

816 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

817 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

818 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

820 
	#°rcmp
(
s1
, 
s2
) \

821 
__exãnsi⁄__
 \

822 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

823 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

824 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

825 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

826 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

827 ? 
	`memcmp
 ((
__c⁄°
 *Ë(
s1
), (__c⁄° *Ë(
s2
), \

828 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

829 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

830 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

831 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

832 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

833 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

834 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

835 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

836 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

837 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

838 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

839 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

842 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

843 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

844 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

845 - ((
__c⁄°
 *Ë(__c⁄° *)(
s2
))[0]);\

846 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

848 
__ªsu…
 = (((
__c⁄°
 *) \

849 (
__c⁄°
 *Ë(
s1
))[1] \

850 - ((
__c⁄°
 *) \

851 (
__c⁄°
 *Ë(
s2
))[1]); \

852 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

854 
__ªsu…
 = \

855 (((
__c⁄°
 *) \

856 (
__c⁄°
 *Ë(
s1
))[2] \

857 - ((
__c⁄°
 *) \

858 (
__c⁄°
 *Ë(
s2
))[2]); \

859 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

860 
__ªsu…
 = \

861 (((
__c⁄°
 *) \

862 (
__c⁄°
 *Ë(
s1
))[3] \

863 - ((
__c⁄°
 *) \

864 (
__c⁄°
 *Ë(
s2
))[3]); \

867 
__ªsu…
; }))

	)

869 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

870 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s2
 = \

871 (
__c⁄°
 *Ë(__c⁄° *Ë(
s2
); \

872 
__ªsu…
 = \

873 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

874 - 
__s2
[0]); \

875 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

877 
__ªsu…
 = (((
__c⁄°
 *) \

878 (
__c⁄°
 *Ë(
s1
))[1] - 
__s2
[1]); \

879 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

881 
__ªsu…
 = (((
__c⁄°
 *) \

882 (
__c⁄°
 *Ë(
s1
))[2] - 
__s2
[2]);\

883 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

884 
__ªsu…
 = (((
__c⁄°
 *) \

885 (
__c⁄°
 *Ë(
s1
))[3] \

886 - 
__s2
[3]); \

889 
__ªsu…
; }))

	)

891 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

892 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s1
 = \

893 (
__c⁄°
 *Ë(__c⁄° *Ë(
s1
); \

894 
__ªsu…
 = \

895 
__s1
[0] - ((
__c⁄°
 *) \

896 (
__c⁄°
 *Ë(
s2
))[0]; \

897 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

899 
__ªsu…
 = (
__s1
[1] \

900 - ((
__c⁄°
 *) \

901 (
__c⁄°
 *Ë(
s2
))[1]); \

902 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

904 
__ªsu…
 = \

905 (
__s1
[2] - ((
__c⁄°
 *) \

906 (
__c⁄°
 *Ë(
s2
))[2]); \

907 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

908 
__ªsu…
 = \

909 (
__s1
[3] \

910 - ((
__c⁄°
 *) \

911 (
__c⁄°
 *Ë(
s2
))[3]); \

914 
__ªsu…
; }))

	)

919 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


920 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

921 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

922 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

923 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

924 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

925 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

926 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

932 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


933 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


934 #i‡
__GNUC_PREREQ
 (3, 2)

935 
	#°rc•n
(
s
, 
ªje˘
) \

936 
__exãnsi⁄__
 \

937 ({ 
__r0
, 
__r1
, 
__r2
; \

938 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

939 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

940 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

941 : ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

942 ? 
	`°æí
 (
s
) \

943 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

944 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

945 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

946 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

947 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

948 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

949 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

950 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

952 
	#°rc•n
(
s
, 
ªje˘
) \

953 
__exãnsi⁄__
 \

954 ({ 
__r0
, 
__r1
, 
__r2
; \

955 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

956 ? ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

957 ? 
	`°æí
 (
s
) \

958 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

959 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

960 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

961 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

962 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

963 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

964 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

965 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

969 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
);

970 
__STRING_INLINE
 
size_t


971 
	$__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
)

973 
size_t
 
__ªsu…
 = 0;

974 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

975 ++
__ªsu…
;

976  
__ªsu…
;

977 
	}
}

979 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

980 
__ªje˘2
);

981 
__STRING_INLINE
 
size_t


982 
	$__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
)

984 
size_t
 
__ªsu…
 = 0;

985 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


986 && 
__s
[
__ªsu…
] !
__ªje˘2
)

987 ++
__ªsu…
;

988  
__ªsu…
;

989 
	}
}

991 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

992 
__ªje˘2
, 
__ªje˘3
);

993 
__STRING_INLINE
 
size_t


994 
	$__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
,

995 
__ªje˘3
)

997 
size_t
 
__ªsu…
 = 0;

998 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


999 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

1000 ++
__ªsu…
;

1001  
__ªsu…
;

1002 
	}
}

1008 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


1009 #i‚de‡
_HAVE_STRING_ARCH_°r•n


1010 #i‡
__GNUC_PREREQ
 (3, 2)

1011 
	#°r•n
(
s
, 
ac˚±
) \

1012 
__exãnsi⁄__
 \

1013 ({ 
__a0
, 
__a1
, 
__a2
; \

1014 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1015 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1016 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

1017 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1018 ? ((Ë(
s
), 0) \

1019 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1020 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1021 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1022 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1023 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1024 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1025 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1026 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1028 
	#°r•n
(
s
, 
ac˚±
) \

1029 
__exãnsi⁄__
 \

1030 ({ 
__a0
, 
__a1
, 
__a2
; \

1031 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1032 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1033 ? ((Ë(
s
), 0) \

1034 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1035 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1036 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1037 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1038 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1039 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1040 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1041 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1045 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
);

1046 
__STRING_INLINE
 
size_t


1047 
	$__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
)

1049 
size_t
 
__ªsu…
 = 0;

1051 
__s
[
__ªsu…
] =
__ac˚±
)

1052 ++
__ªsu…
;

1053  
__ªsu…
;

1054 
	}
}

1056 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1057 
__ac˚±2
);

1058 
__STRING_INLINE
 
size_t


1059 
	$__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1061 
size_t
 
__ªsu…
 = 0;

1063 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1064 ++
__ªsu…
;

1065  
__ªsu…
;

1066 
	}
}

1068 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1069 
__ac˚±2
, 
__ac˚±3
);

1070 
__STRING_INLINE
 
size_t


1071 
	$__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1073 
size_t
 
__ªsu…
 = 0;

1075 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1076 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1077 ++
__ªsu…
;

1078  
__ªsu…
;

1079 
	}
}

1084 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1085 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1086 #i‡
__GNUC_PREREQ
 (3, 2)

1087 
	#°Ωbrk
(
s
, 
ac˚±
) \

1088 
__exãnsi⁄__
 \

1089 ({ 
__a0
, 
__a1
, 
__a2
; \

1090 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1091 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1092 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1093 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1094 ? ((Ë(
s
), (*Ë
NULL
) \

1095 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1096 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1097 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1098 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1099 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1100 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1101 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1102 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1104 
	#°Ωbrk
(
s
, 
ac˚±
) \

1105 
__exãnsi⁄__
 \

1106 ({ 
__a0
, 
__a1
, 
__a2
; \

1107 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1108 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1109 ? ((Ë(
s
), (*Ë
NULL
) \

1110 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1111 ? 
	`°rchr
 (
s
, 
__a0
) \

1112 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1113 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1114 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1115 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1116 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1117 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1121 
__STRING_INLINE
 *
__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1122 
__ac˚±2
);

1123 
__STRING_INLINE
 *

1124 
	$__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1127 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1128 ++
__s
;

1129  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1130 
	}
}

1132 
__STRING_INLINE
 *
__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1133 
__ac˚±2
, 
__ac˚±3
);

1134 
__STRING_INLINE
 *

1135 
	$__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
,

1136 
__ac˚±3
)

1139 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1140 && *
__s
 !
__ac˚±3
)

1141 ++
__s
;

1142  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1143 
	}
}

1149 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1150 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1151 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1152 ? (((
__c⁄°
 *Ë(
√edÀ
))[0] == '\0' \

1153 ? (*Ë(
size_t
Ë(
hay°ack
) \

1154 : (((
__c⁄°
 *Ë(
√edÀ
))[1] == '\0' \

1155 ? 
	`°rchr
 (
hay°ack
, \

1156 ((
__c⁄°
 *Ë(
√edÀ
))[0]) \

1157 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1158 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1162 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1163 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1164 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1165 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1166 && ((
__c⁄°
 *Ë(
£p
))[0] != '\0' \

1167 && ((
__c⁄°
 *Ë(
£p
))[1] == '\0' \

1168 ? 
	`__°πok_r_1c
 (
s
, ((
__c⁄°
 *Ë(
£p
))[0], 
√xç
) \

1169 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1172 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1173 
__STRING_INLINE
 *

1174 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1176 *
__ªsu…
;

1177 i‡(
__s
 =
NULL
)

1178 
__s
 = *
__√xç
;

1179 *
__s
 =
__£p
)

1180 ++
__s
;

1181 
__ªsu…
 = 
NULL
;

1182 i‡(*
__s
 != '\0')

1184 
__ªsu…
 = 
__s
++;

1185 *
__s
 != '\0')

1186 i‡(*
__s
++ =
__£p
)

1188 
__s
[-1] = '\0';

1192 *
__√xç
 = 
__s
;

1193  
__ªsu…
;

1194 
	}
}

1195 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


1196 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1201 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1202 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1204 *
__°r£p_g
 (**
__°rögp
, 
__c⁄°
 *
__dñim
);

1205 
	#__°r£p
(
s
, 
ªje˘
) \

1206 
__exãnsi⁄__
 \

1207 ({ 
__r0
, 
__r1
, 
__r2
; \

1208 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1209 && (
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], \

1210 ((
__c⁄°
 *Ë(
ªje˘
))[0] != '\0') \

1211 ? ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], \

1212 ((
__c⁄°
 *Ë(
ªje˘
))[1] == '\0') \

1213 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1214 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

1215 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1216 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

1217 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1218 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1219 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1222 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1223 
__STRING_INLINE
 *

1224 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1226 *
__ªtvÆ
 = *
__s
;

1227 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1228 *(*
__s
)++ = '\0';

1229  
__ªtvÆ
;

1230 
	}
}

1232 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1233 
__STRING_INLINE
 *

1234 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1236 *
__ªtvÆ
 = *
__s
;

1237 i‡(
__ªtvÆ
 !
NULL
)

1239 *
__˝
 = 
__ªtvÆ
;

1242 i‡(*
__˝
 == '\0')

1244 
__˝
 = 
NULL
;

1247 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1249 *
__˝
++ = '\0';

1252 ++
__˝
;

1254 *
__s
 = 
__˝
;

1256  
__ªtvÆ
;

1257 
	}
}

1259 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1260 
__ªje˘3
);

1261 
__STRING_INLINE
 *

1262 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1264 *
__ªtvÆ
 = *
__s
;

1265 i‡(
__ªtvÆ
 !
NULL
)

1267 *
__˝
 = 
__ªtvÆ
;

1270 i‡(*
__˝
 == '\0')

1272 
__˝
 = 
NULL
;

1275 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1277 *
__˝
++ = '\0';

1280 ++
__˝
;

1282 *
__s
 = 
__˝
;

1284  
__ªtvÆ
;

1285 
	}
}

1286 #ifde‡
__USE_BSD


1287 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1294 #ifde‡
__USE_MISC


1296 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1297 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1298 
	~<°dlib.h
>

1301 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1303 *
	$__°rdup
 (
__c⁄°
 *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1304 
	#__°rdup
(
s
) \

1305 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1306 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1307 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1308 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1309 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1310 i‡(
__ªtvÆ
 !
NULL
) \

1311 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1312 
__ªtvÆ
; 
	}
})) \

1313 : 
	`__°rdup
 (
s
)))

	)

1315 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1316 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1320 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1322 *
	$__°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

1323 
__THROW
 
__©åibuã_mÆloc__
;

1324 
	#__°∫dup
(
s
, 
n
) \

1325 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1326 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1327 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1328 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1329 
size_t
 
__n
 = (
n
); \

1330 *
__ªtvÆ
; \

1331 i‡(
__n
 < 
__Àn
) \

1332 
__Àn
 = 
__n
 + 1; \

1333 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1334 i‡(
__ªtvÆ
 !
NULL
) \

1336 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1337 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1338 
__Àn
 - 1); \

1340 
__ªtvÆ
; 
	}
})) \

1341 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1343 #ifde‡
__USE_GNU


1344 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1350 #i‚de‡
_FORCE_INLINES


1351 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

19 #i‚de‡
_STRING_H


23 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

26 #i‚de‡
__˝lu•lus


30 #unde‡
mem˝y


31 #unde‡
memmove


32 #unde‡
mem£t


33 #unde‡
°rˇt


34 #unde‡
°r˝y


35 #unde‡
°∫ˇt


36 #unde‡
°∫˝y


37 #ifde‡
__USE_GNU


38 #unde‡
memp˝y


39 #unde‡
°p˝y


41 #ifde‡
__USE_BSD


42 #unde‡
bc›y


43 #unde‡
bzîo


48 
__exã∫_Æways_ölöe
 *

49 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

50 
size_t
 
__Àn
))

52  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

53 
	}
}

55 
__exã∫_Æways_ölöe
 *

56 
__NTH
 (
	$memmove
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

57 
size_t
 
__Àn
))

59  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

60 
	}
}

62 #ifde‡
__USE_GNU


63 
__exã∫_Æways_ölöe
 *

64 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

65 
size_t
 
__Àn
))

67  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

68 
	}
}

77 
__exã∫_Æways_ölöe
 *

78 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

80 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0)

82 
	`__w¨n_mem£t_zîo_Àn
 ();

83  
__de°
;

85  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

86 
	}
}

88 #ifde‡
__USE_BSD


89 
__exã∫_Æways_ölöe
 

90 
__NTH
 (
	$bc›y
 (
__c⁄°
 *
__ª°ri˘
 
__§c
, *__ª°ri˘ 
__de°
,

91 
size_t
 
__Àn
))

93 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

94 
	}
}

96 
__exã∫_Æways_ölöe
 

97 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

99 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

100 
	}
}

103 
__exã∫_Æways_ölöe
 *

104 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

106  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

107 
	}
}

109 #ifde‡
__USE_GNU


110 
__exã∫_Æways_ölöe
 *

111 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

113  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

114 
	}
}

118 
__exã∫_Æways_ölöe
 *

119 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

120 
size_t
 
__Àn
))

122  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

123 
	}
}

126 *
	$__°≤˝y_chk
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

127 
size_t
 
__de°Àn
Ë
__THROW
;

128 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
,

129 
__c⁄°
 *
__§c
,

130 
size_t
 
__n
), 
°≤˝y
);

132 
__exã∫_Æways_ölöe
 *

133 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
))

135 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

136 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿<
	`__bos
 (
__de°
)))

137  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

138  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

139 
	}
}

142 
__exã∫_Æways_ölöe
 *

143 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

145  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

146 
	}
}

149 
__exã∫_Æways_ölöe
 *

150 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

151 
size_t
 
__Àn
))

153  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

154 
	}
}

	@/usr/include/bits/sys_errlist.h

20 #i‚de‡
_STDIO_H


26 #ifde‡ 
__USE_BSD


27 
sys_√º
;

28 
__c⁄°
 *__c⁄° 
sys_îæi°
[];

30 #ifde‡ 
__USE_GNU


31 
_sys_√º
;

32 
__c⁄°
 *__c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/time.h

24 #i‚de‡
__√ed_timevÆ


25 #i‚de‡
_BITS_TIME_H


26 
	#_BITS_TIME_H
 1

	)

34 
	#CLOCKS_PER_SEC
 1000000l

	)

36 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


39 
	~<bôs/ty≥s.h
>

40 
__sysc⁄f
 ();

41 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

44 #ifde‡
__USE_POSIX199309


46 
	#CLOCK_REALTIME
 0

	)

48 
	#CLOCK_MONOTONIC
 1

	)

50 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

52 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

55 
	#TIMER_ABSTIME
 1

	)

61 #ifde‡
__√ed_timevÆ


62 #unde‡
__√ed_timevÆ


63 #i‚de‡
_STRUCT_TIMEVAL


64 
	#_STRUCT_TIMEVAL
 1

	)

65 
	~<bôs/ty≥s.h
>

69 
	stimevÆ


71 
__time_t
 
	mtv_£c
;

72 
__su£c⁄ds_t
 
	mtv_u£c
;

	@/usr/include/bits/types.h

24 #i‚def 
_BITS_TYPES_H


25 
	#_BITS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	t__u_ch¨
;

32 
	t__u_sh‹t
;

33 
	t__u_öt
;

34 
	t__u_l⁄g
;

37 sig√d 
	t__öt8_t
;

38 
	t__uöt8_t
;

39 sig√d 
	t__öt16_t
;

40 
	t__uöt16_t
;

41 sig√d 
	t__öt32_t
;

42 
	t__uöt32_t
;

43 #i‡
__WORDSIZE
 == 64

44 sig√d 
	t__öt64_t
;

45 
	t__uöt64_t
;

46 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


47 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

48 
__exãnsi⁄__
 
	t__uöt64_t
;

52 #i‡
__WORDSIZE
 == 64

53 
	t__quad_t
;

54 
	t__u_quad_t
;

55 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


56 
__exãnsi⁄__
 
	t__quad_t
;

57 
__exãnsi⁄__
 
	t__u_quad_t
;

61 
	m__vÆ
[2];

62 } 
	t__quad_t
;

65 
__u_l⁄g
 
	m__vÆ
[2];

66 } 
	t__u_quad_t
;

99 
	#__S16_TYPE
 

	)

100 
	#__U16_TYPE
 

	)

101 
	#__S32_TYPE
 

	)

102 
	#__U32_TYPE
 

	)

103 
	#__SLONGWORD_TYPE
 

	)

104 
	#__ULONGWORD_TYPE
 

	)

105 #i‡
__WORDSIZE
 == 32

106 
	#__SQUAD_TYPE
 
__quad_t


	)

107 
	#__UQUAD_TYPE
 
__u_quad_t


	)

108 
	#__SWORD_TYPE
 

	)

109 
	#__UWORD_TYPE
 

	)

110 
	#__SLONG32_TYPE
 

	)

111 
	#__ULONG32_TYPE
 

	)

112 
	#__S64_TYPE
 
__quad_t


	)

113 
	#__U64_TYPE
 
__u_quad_t


	)

116 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

117 #ñi‡
__WORDSIZE
 == 64

118 
	t__SQUAD_TYPE
 

	)

119 
	t__UQUAD_TYPE
 

	)

120 
	t__SWORD_TYPE
 

	)

121 
	t__UWORD_TYPE
 

	)

122 
	t__SLONG32_TYPE
 

	)

123 
	t__ULONG32_TYPE
 

	)

124 
	t__S64_TYPE
 

	)

125 
	t__U64_TYPE
 

	)

127 
	t__STD_TYPE
 

	)

131 
	~<bôs/ty≥sizes.h
>

134 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

135 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

136 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

137 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

138 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

139 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

140 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

141 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

142 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

143 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

144 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

145 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

146 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

147 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

148 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

149 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

150 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

151 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

153 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

154 
__STD_TYPE
 
__SWBLK_T_TYPE
 
	g__swblk_t
;

155 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

158 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

161 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

164 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

169 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

170 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

173 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

174 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

177 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

178 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

180 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

184 
__off64_t
 
	t__loff_t
;

185 
__quad_t
 *
	t__qaddr_t
;

186 *
	t__ˇddr_t
;

189 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

192 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

195 #unde‡
__STD_TYPE


	@/usr/include/bits/unistd.h

20 #i‚de‡
_UNISTD_H


24 
ssize_t
 
	$__ªad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

25 
size_t
 
__buÊí
Ë
__wur
;

26 
ssize_t
 
	`__REDIRECT
 (
__ªad_Æüs
, (
__fd
, *
__buf
,

27 
size_t
 
__nbyãs
), 
ªad
Ë
__wur
;

28 
ssize_t
 
	`__REDIRECT
 (
__ªad_chk_w¨n
,

29 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

30 
size_t
 
__buÊí
), 
__ªad_chk
)

31 
__wur
 
	`__w¨«âr
 ("read called with biggerÜengthÅhan size of "

34 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


35 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
)

37 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

39 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

40  
	`__ªad_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

42 i‡(
__nbyãs
 > 
	`__bos0
 (
__buf
))

43  
	`__ªad_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

45  
	`__ªad_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
);

46 
	}
}

48 #ifde‡
__USE_UNIX98


49 
ssize_t
 
	$__¥ód_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

50 
__off_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

51 
ssize_t
 
	$__¥ód64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

52 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

53 
ssize_t
 
	`__REDIRECT
 (
__¥ód_Æüs
,

54 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

55 
__off_t
 
__off£t
), 
¥ód
Ë
__wur
;

56 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_Æüs
,

57 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

58 
__off64_t
 
__off£t
), 
¥ód64
Ë
__wur
;

59 
ssize_t
 
	`__REDIRECT
 (
__¥ód_chk_w¨n
,

60 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

61 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__¥ód_chk
)

62 
__wur
 
	`__w¨«âr
 ("pread called with biggerÜengthÅhan size of "

64 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_chk_w¨n
,

65 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

66 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

67 
__¥ód64_chk
)

68 
__wur
 
	`__w¨«âr
 ("pread64 called with biggerÜengthÅhan size of "

71 #i‚de‡
__USE_FILE_OFFSET64


72 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


73 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off_t
 
__off£t
)

75 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

77 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

78  
	`__¥ód_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

80 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

81  
	`__¥ód_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

82 
	`__bos0
 (
__buf
));

84  
	`__¥ód_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

85 
	}
}

87 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


88 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

90 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

92 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

93  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

95 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

96  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

97 
	`__bos0
 (
__buf
));

100  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

101 
	}
}

104 #ifde‡
__USE_LARGEFILE64


105 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


106 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

108 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

110 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

111  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

113 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

114  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

115 
	`__bos0
 (
__buf
));

118  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

119 
	}
}

123 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


124 
ssize_t
 
	$__ªadlök_chk
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

125 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

126 
size_t
 
__buÊí
)

127 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

128 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_Æüs
,

129 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

130 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
), 
ªadlök
)

131 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

132 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_chk_w¨n
,

133 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

134 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

135 
size_t
 
__buÊí
), 
__ªadlök_chk
)

136 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__w¨«âr
 ("readlink called with biggerÜength "

139 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
ssize_t


140 
	`__NTH
 (
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

141 
size_t
 
__Àn
))

143 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

145 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

146  
	`__ªadlök_chk
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

148 i‡–
__Àn
 > 
	`__bos
 (
__buf
))

149  
	`__ªadlök_chk_w¨n
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

151  
	`__ªadlök_Æüs
 (
__∑th
, 
__buf
, 
__Àn
);

152 
	}
}

155 #ifde‡
__USE_ATFILE


156 
ssize_t
 
	$__ªadlök©_chk
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

157 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

158 
size_t
 
__buÊí
)

159 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

160 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_Æüs
,

161 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

162 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
),

163 
ªadlök©
)

164 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

165 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_chk_w¨n
,

166 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

167 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

168 
size_t
 
__buÊí
), 
__ªadlök©_chk
)

169 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__w¨«âr
 ("readlinkat called with bigger "

173 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
ssize_t


174 
	`__NTH
 (
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

175 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
))

177 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

179 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

180  
	`__ªadlök©_chk
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

182 i‡(
__Àn
 > 
	`__bos
 (
__buf
))

183  
	`__ªadlök©_chk_w¨n
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
,

184 
	`__bos
 (
__buf
));

186  
	`__ªadlök©_Æüs
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
);

187 
	}
}

190 *
	$__gëcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
)

191 
__THROW
 
__wur
;

192 *
	`__REDIRECT_NTH
 (
__gëcwd_Æüs
,

193 (*
__buf
, 
size_t
 
__size
), 
gëcwd
Ë
__wur
;

194 *
	`__REDIRECT_NTH
 (
__gëcwd_chk_w¨n
,

195 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
),

196 
__gëcwd_chk
)

197 
__wur
 
	`__w¨«âr
 ("getcwd caller with biggerÜengthÅhan size of "

200 
__exã∫_Æways_ölöe
 
__wur
 *

201 
	`__NTH
 (
	$gëcwd
 (*
__buf
, 
size_t
 
__size
))

203 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

205 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
))

206  
	`__gëcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

208 i‡(
__size
 > 
	`__bos
 (
__buf
))

209  
	`__gëcwd_chk_w¨n
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

211  
	`__gëcwd_Æüs
 (
__buf
, 
__size
);

212 
	}
}

214 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


215 *
	$__gëwd_chk
 (*
__buf
, 
size_t
 
buÊí
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

217 *
	`__REDIRECT_NTH
 (
__gëwd_w¨n
, (*
__buf
), 
gëwd
)

218 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("please use getcwd instead,ás getwd "

221 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
 *

222 
	`__NTH
 (
	$gëwd
 (*
__buf
))

224 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

225  
	`__gëwd_chk
 (
__buf
, 
	`__bos
 (__buf));

226  
	`__gëwd_w¨n
 (
__buf
);

227 
	}
}

230 
size_t
 
	$__c⁄f°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

231 
size_t
 
__buÊí
Ë
__THROW
;

232 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_Æüs
, (
__«me
, *
__buf
,

233 
size_t
 
__Àn
), 
c⁄f°r
);

234 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_chk_w¨n
,

235 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

236 
size_t
 
__buÊí
), 
__c⁄f°r_chk
)

237 
	`__w¨«âr
 ("confstr called with biggerÜengthÅhan size of destination "

240 
__exã∫_Æways_ölöe
 
size_t


241 
	`__NTH
 (
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
))

243 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

245 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

246  
	`__c⁄f°r_chk
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

248 i‡(
	`__bos
 (
__buf
Ë< 
__Àn
)

249  
	`__c⁄f°r_chk_w¨n
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

251  
	`__c⁄f°r_Æüs
 (
__«me
, 
__buf
, 
__Àn
);

252 
	}
}

255 
	$__gëgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
)

256 
__THROW
 
__wur
;

257 
	`__REDIRECT_NTH
 (
__gëgroups_Æüs
, (
__size
, 
__gid_t
 
__li°
[]),

258 
gëgroups
Ë
__wur
;

259 
	`__REDIRECT_NTH
 (
__gëgroups_chk_w¨n
,

260 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
),

261 
__gëgroups_chk
)

262 
__wur
 
	`__w¨«âr
 ("getgroups called with bigger group countÅhan what "

265 
__exã∫_Æways_ölöe
 

266 
	`__NTH
 (
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]))

268 i‡(
	`__bos
 (
__li°
Ë!(
size_t
) -1)

270 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
))

271  
	`__gëgroups_chk
 (
__size
, 
__li°
, 
	`__bos
 (__list));

273 i‡(
__size
 *  (
__gid_t
Ë> 
	`__bos
 (
__li°
))

274  
	`__gëgroups_chk_w¨n
 (
__size
, 
__li°
, 
	`__bos
 (__list));

276  
	`__gëgroups_Æüs
 (
__size
, 
__li°
);

277 
	}
}

280 
	$__ây«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

281 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

282 
	`__REDIRECT_NTH
 (
__ây«me_r_Æüs
, (
__fd
, *
__buf
,

283 
size_t
 
__buÊí
), 
ây«me_r
)

284 
	`__n⁄nuŒ
 ((2));

285 
	`__REDIRECT_NTH
 (
__ây«me_r_chk_w¨n
,

286 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

287 
size_t
 
__ƒól
), 
__ây«me_r_chk
)

288 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ttyname_r called with bigger buflenÅhan "

291 
__exã∫_Æways_ölöe
 

292 
	`__NTH
 (
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

294 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

296 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

297  
	`__ây«me_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

299 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

300  
	`__ây«me_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

302  
	`__ây«me_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

303 
	}
}

306 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


307 
	$__gëlogö_r_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

308 
	`__n⁄nuŒ
 ((1));

309 
	`__REDIRECT
 (
__gëlogö_r_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

310 
gëlogö_r
Ë
	`__n⁄nuŒ
 ((1));

311 
	`__REDIRECT
 (
__gëlogö_r_chk_w¨n
,

312 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

313 
__gëlogö_r_chk
)

314 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("getlogin_r called with bigger buflenÅhan "

317 
__exã∫_Æways_ölöe
 

318 
	$gëlogö_r
 (*
__buf
, 
size_t
 
__buÊí
)

320 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

322 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

323  
	`__gëlogö_r_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

325 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

326  
	`__gëlogö_r_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

328  
	`__gëlogö_r_Æüs
 (
__buf
, 
__buÊí
);

329 
	}
}

333 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


334 
	$__gëho°«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

335 
__THROW
 
	`__n⁄nuŒ
 ((1));

336 
	`__REDIRECT_NTH
 (
__gëho°«me_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

337 
gëho°«me
Ë
	`__n⁄nuŒ
 ((1));

338 
	`__REDIRECT_NTH
 (
__gëho°«me_chk_w¨n
,

339 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

340 
__gëho°«me_chk
)

341 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("gethostname called with bigger buflenÅhan "

344 
__exã∫_Æways_ölöe
 

345 
	`__NTH
 (
	$gëho°«me
 (*
__buf
, 
size_t
 
__buÊí
))

347 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

349 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

350  
	`__gëho°«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

352 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

353  
	`__gëho°«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

355  
	`__gëho°«me_Æüs
 (
__buf
, 
__buÊí
);

356 
	}
}

360 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

361 
	$__gëdomaö«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

362 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

363 
	`__REDIRECT_NTH
 (
__gëdomaö«me_Æüs
, (*
__buf
,

364 
size_t
 
__buÊí
),

365 
gëdomaö«me
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

366 
	`__REDIRECT_NTH
 (
__gëdomaö«me_chk_w¨n
,

367 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

368 
__gëdomaö«me_chk
)

369 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("getdomainname called with bigger "

373 
__exã∫_Æways_ölöe
 

374 
	`__NTH
 (
	$gëdomaö«me
 (*
__buf
, 
size_t
 
__buÊí
))

376 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

378 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

379  
	`__gëdomaö«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

381 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

382  
	`__gëdomaö«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

384  
	`__gëdomaö«me_Æüs
 (
__buf
, 
__buÊí
);

385 
	}
}

	@/usr/include/bits/waitflags.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


26 
	#WNOHANG
 1

	)

27 
	#WUNTRACED
 2

	)

30 
	#WSTOPPED
 2

	)

31 
	#WEXITED
 4

	)

32 
	#WCONTINUED
 8

	)

33 
	#WNOWAIT
 0x01000000

	)

35 
	#__WNOTHREAD
 0x20000000

	)

37 
	#__WALL
 0x40000000

	)

38 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


29 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

32 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

35 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

38 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

41 
	#__WIFSIGNALED
(
°©us
) \

42 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

45 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

49 #ifde‡
WCONTINUED


50 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

54 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

57 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

58 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

59 
	#__W_CONTINUED
 0xffff

	)

60 
	#__WCOREFLAG
 0x80

	)

63 #ifdef 
__USE_BSD


65 
	~<ídün.h
>

67 
	uwaô


69 
	mw_°©us
;

72 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


73 
	m__w_ãrmsig
:7;

74 
	m__w_c‹edump
:1;

75 
	m__w_ªtcode
:8;

78 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


80 
	m__w_ªtcode
:8;

81 
	m__w_c‹edump
:1;

82 
	m__w_ãrmsig
:7;

84 } 
	m__waô_ãrmö©ed
;

87 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


88 
	m__w_°›vÆ
:8;

89 
	m__w_°›sig
:8;

92 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


94 
	m__w_°›sig
:8;

95 
	m__w_°›vÆ
:8;

97 } 
	m__waô_°›≥d
;

100 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

101 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

102 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

103 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

104 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__


4 
	#__WORDSIZE
 64

	)

5 
	#__WORDSIZE_COMPAT32
 1

	)

7 
	#__WORDSIZE
 32

	)

	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

	@/usr/include/features.h

19 #i‚def 
_FEATURES_H


20 
	#_FEATURES_H
 1

	)

93 #unde‡
__USE_ISOC99


94 #unde‡
__USE_ISOC95


95 #unde‡
__USE_POSIX


96 #unde‡
__USE_POSIX2


97 #unde‡
__USE_POSIX199309


98 #unde‡
__USE_POSIX199506


99 #unde‡
__USE_XOPEN


100 #unde‡
__USE_XOPEN_EXTENDED


101 #unde‡
__USE_UNIX98


102 #unde‡
__USE_XOPEN2K


103 #unde‡
__USE_LARGEFILE


104 #unde‡
__USE_LARGEFILE64


105 #unde‡
__USE_FILE_OFFSET64


106 #unde‡
__USE_BSD


107 #unde‡
__USE_SVID


108 #unde‡
__USE_MISC


109 #unde‡
__USE_ATFILE


110 #unde‡
__USE_GNU


111 #unde‡
__USE_REENTRANT


112 #unde‡
__USE_FORTIFY_LEVEL


113 #unde‡
__FAVOR_BSD


114 #unde‡
__KERNEL_STRICT_NAMES


118 #i‚de‡
_LOOSE_KERNEL_NAMES


119 
	#__KERNEL_STRICT_NAMES


	)

123 
	#__USE_ANSI
 1

	)

132 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


133 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

134 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

136 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

141 #i‡
deföed
 
_BSD_SOURCE
 && \

142 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

143 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_XOPEN_SOURCE_EXTENDED
 || \

144 
deföed
 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

145 
	#__FAVOR_BSD
 1

	)

149 #ifde‡
_GNU_SOURCE


150 #unde‡
_ISOC99_SOURCE


151 
	#_ISOC99_SOURCE
 1

	)

152 #unde‡
_POSIX_SOURCE


153 
	#_POSIX_SOURCE
 1

	)

154 #unde‡
_POSIX_C_SOURCE


155 
	#_POSIX_C_SOURCE
 200112L

	)

156 #unde‡
_XOPEN_SOURCE


157 
	#_XOPEN_SOURCE
 600

	)

158 #unde‡
_XOPEN_SOURCE_EXTENDED


159 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

160 #unde‡
_LARGEFILE64_SOURCE


161 
	#_LARGEFILE64_SOURCE
 1

	)

162 #unde‡
_BSD_SOURCE


163 
	#_BSD_SOURCE
 1

	)

164 #unde‡
_SVID_SOURCE


165 
	#_SVID_SOURCE
 1

	)

166 #unde‡
_ATFILE_SOURCE


167 
	#_ATFILE_SOURCE
 1

	)

172 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

173 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

174 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_XOPEN_SOURCE_EXTENDED
 && \

175 !
deföed
 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

176 
	#_BSD_SOURCE
 1

	)

177 
	#_SVID_SOURCE
 1

	)

184 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

185 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

186 
	#__USE_ISOC99
 1

	)

190 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

191 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

192 
	#__USE_ISOC95
 1

	)

197 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

198 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

199 
	#_POSIX_SOURCE
 1

	)

200 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

201 
	#_POSIX_C_SOURCE
 2

	)

202 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

203 
	#_POSIX_C_SOURCE
 199506L

	)

205 
	#_POSIX_C_SOURCE
 200112L

	)

209 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


210 
	#__USE_POSIX
 1

	)

213 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


214 
	#__USE_POSIX2
 1

	)

217 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

218 
	#__USE_POSIX199309
 1

	)

221 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

222 
	#__USE_POSIX199506
 1

	)

225 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

226 
	#__USE_XOPEN2K
 1

	)

229 #ifdef 
_XOPEN_SOURCE


230 
	#__USE_XOPEN
 1

	)

231 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

232 
	#__USE_XOPEN_EXTENDED
 1

	)

233 
	#__USE_UNIX98
 1

	)

234 #unde‡
_LARGEFILE_SOURCE


235 
	#_LARGEFILE_SOURCE
 1

	)

236 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

237 
	#__USE_XOPEN2K
 1

	)

238 #unde‡
__USE_ISOC99


239 
	#__USE_ISOC99
 1

	)

242 #ifde‡
_XOPEN_SOURCE_EXTENDED


243 
	#__USE_XOPEN_EXTENDED
 1

	)

248 #ifde‡
_LARGEFILE_SOURCE


249 
	#__USE_LARGEFILE
 1

	)

252 #ifde‡
_LARGEFILE64_SOURCE


253 
	#__USE_LARGEFILE64
 1

	)

256 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

257 
	#__USE_FILE_OFFSET64
 1

	)

260 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


261 
	#__USE_MISC
 1

	)

264 #ifdef 
_BSD_SOURCE


265 
	#__USE_BSD
 1

	)

268 #ifdef 
_SVID_SOURCE


269 
	#__USE_SVID
 1

	)

272 #ifdef 
_ATFILE_SOURCE


273 
	#__USE_ATFILE
 1

	)

276 #ifdef 
_GNU_SOURCE


277 
	#__USE_GNU
 1

	)

280 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


281 
	#__USE_REENTRANT
 1

	)

284 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

285 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

286 #i‡
_FORTIFY_SOURCE
 > 1

287 
	#__USE_FORTIFY_LEVEL
 2

	)

289 
	#__USE_FORTIFY_LEVEL
 1

	)

292 
	#__USE_FORTIFY_LEVEL
 0

	)

296 
	#__STDC_IEC_559__
 1

	)

297 
	#__STDC_IEC_559_COMPLEX__
 1

	)

300 
	#__STDC_ISO_10646__
 200009L

	)

308 #unde‡
__GNU_LIBRARY__


309 
	#__GNU_LIBRARY__
 6

	)

313 
	#__GLIBC__
 2

	)

314 
	#__GLIBC_MINOR__
 8

	)

316 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

317 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

320 #i‡
deföed
 
__GNUC__
 \

321 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

322 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

323 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

324 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

328 #i‚de‡
__ASSEMBLER__


329 #i‚de‡
_SYS_CDEFS_H


330 
	~<sys/cdefs.h
>

335 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


336 
	#__USE_LARGEFILE
 1

	)

337 
	#__USE_LARGEFILE64
 1

	)

343 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

344 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

345 && 
deföed
 
	g__exã∫_ölöe


346 
	#__USE_EXTERN_INLINES
 1

	)

354 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

21 #i‚de‡
_GETOPT_H


23 #i‚de‡
__√ed_gë›t


24 
	#_GETOPT_H
 1

	)

34 #i‡!
deföed
 
__GNU_LIBRARY__


35 
	~<˘y≥.h
>

38 #i‚de‡
__THROW


39 #i‚de‡
__GNUC_PREREQ


40 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

42 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

43 
	#__THROW
 
	`throw
 ()

	)

45 
	#__THROW


	)

49 #ifdef 
__˝lu•lus


59 *
›èrg
;

73 
›töd
;

78 
›ãº
;

82 
›t›t
;

84 #i‚de‡
__√ed_gë›t


106 
	s›ti⁄


108 c⁄° *
	g«me
;

111 
	ghas_¨g
;

112 *
	gÊag
;

113 
	gvÆ
;

118 
	#no_¨gumít
 0

	)

119 
	#ªquúed_¨gumít
 1

	)

120 
	#›ti⁄Æ_¨gumít
 2

	)

148 #ifde‡
__GNU_LIBRARY__


152 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

153 
__THROW
;

155 
gë›t
 ();

158 #i‚de‡
__√ed_gë›t


159 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

160 c⁄° *
__sh‹t›ts
,

161 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

162 
__THROW
;

163 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

164 c⁄° *
__sh‹t›ts
,

165 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

166 
__THROW
;

170 #ifdef 
__˝lu•lus


175 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_pos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos_t
 
_G_Âos_t


	)

36 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

37 
	#_IO_size_t
 
_G_size_t


	)

38 
	#_IO_ssize_t
 
_G_ssize_t


	)

39 
	#_IO_off_t
 
_G_off_t


	)

40 
	#_IO_off64_t
 
_G_off64_t


	)

41 
	#_IO_pid_t
 
_G_pid_t


	)

42 
	#_IO_uid_t
 
_G_uid_t


	)

43 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

44 
	#_IO_HAVE_SYS_WAIT
 
_G_HAVE_SYS_WAIT


	)

45 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

46 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

47 
	#_IO_va_li°
 
_G_va_li°


	)

48 
	#_IO_wöt_t
 
_G_wöt_t


	)

50 #ifde‡
_G_NEED_STDARG_H


52 
	#__√ed___va_li°


	)

53 
	~<°d¨g.h
>

54 #ifde‡
__GNUC_VA_LIST


55 #unde‡
_IO_va_li°


56 
	#_IO_va_li°
 
__gnuc_va_li°


	)

60 #i‚de‡
__P


61 #i‡
_G_HAVE_SYS_CDEFS


62 
	~<sys/cdefs.h
>

64 #ifde‡
__STDC__


65 
	#__P
(
p
Ë
	)
p

66 
	#__PMT
(
p
Ë
	)
p

68 
	#__P
(
p
Ë()

	)

69 
	#__PMT
(
p
Ë()

	)

75 #i‚de‡
_PARAMS


76 
	#_PARAMS
(
¥Ÿos
Ë
	`__P
’rŸos)

	)

79 #i‚de‡
__STDC__


81 c⁄°

	)

84 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

85 #i‚de‡
_G_HAVE_PRINTF_FP


86 
	#_IO_USE_DTOA
 1

	)

89 #i‚de‡
EOF


90 
	#EOF
 (-1)

	)

92 #i‚de‡
NULL


93 #i‡
deföed
 
__GNUG__
 && \

94 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

95 
	#NULL
 (
__nuŒ
)

	)

97 #i‡!
deföed
(
__˝lu•lus
)

98 
	#NULL
 ((*)0)

	)

100 
	#NULL
 (0)

	)

105 
	#_IOS_INPUT
 1

	)

106 
	#_IOS_OUTPUT
 2

	)

107 
	#_IOS_ATEND
 4

	)

108 
	#_IOS_APPEND
 8

	)

109 
	#_IOS_TRUNC
 16

	)

110 
	#_IOS_NOCREATE
 32

	)

111 
	#_IOS_NOREPLACE
 64

	)

112 
	#_IOS_BIN
 128

	)

120 
	#_IO_MAGIC
 0xFBAD0000

	)

121 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

122 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

123 
	#_IO_USER_BUF
 1

	)

124 
	#_IO_UNBUFFERED
 2

	)

125 
	#_IO_NO_READS
 4

	)

126 
	#_IO_NO_WRITES
 8

	)

127 
	#_IO_EOF_SEEN
 0x10

	)

128 
	#_IO_ERR_SEEN
 0x20

	)

129 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

130 
	#_IO_LINKED
 0x80

	)

131 
	#_IO_IN_BACKUP
 0x100

	)

132 
	#_IO_LINE_BUF
 0x200

	)

133 
	#_IO_TIED_PUT_GET
 0x400

	)

134 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

135 
	#_IO_IS_APPENDING
 0x1000

	)

136 
	#_IO_IS_FILEBUF
 0x2000

	)

137 
	#_IO_BAD_SEEN
 0x4000

	)

138 
	#_IO_USER_LOCK
 0x8000

	)

140 
	#_IO_FLAGS2_MMAP
 1

	)

141 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

142 #ifde‡
_LIBC


143 
	#_IO_FLAGS2_FORTIFY
 4

	)

145 
	#_IO_FLAGS2_USER_WBUF
 8

	)

146 #ifde‡
_LIBC


147 
	#_IO_FLAGS2_SCANF_STD
 16

	)

151 
	#_IO_SKIPWS
 01

	)

152 
	#_IO_LEFT
 02

	)

153 
	#_IO_RIGHT
 04

	)

154 
	#_IO_INTERNAL
 010

	)

155 
	#_IO_DEC
 020

	)

156 
	#_IO_OCT
 040

	)

157 
	#_IO_HEX
 0100

	)

158 
	#_IO_SHOWBASE
 0200

	)

159 
	#_IO_SHOWPOINT
 0400

	)

160 
	#_IO_UPPERCASE
 01000

	)

161 
	#_IO_SHOWPOS
 02000

	)

162 
	#_IO_SCIENTIFIC
 04000

	)

163 
	#_IO_FIXED
 010000

	)

164 
	#_IO_UNITBUF
 020000

	)

165 
	#_IO_STDIO
 040000

	)

166 
	#_IO_DONT_CLOSE
 0100000

	)

167 
	#_IO_BOOLALPHA
 0200000

	)

170 
_IO_jump_t
; 
	g_IO_FILE
;

173 #ifde‡
_IO_MTSAFE_IO


174 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

175 
	~<bôs/°dio-lock.h
>

180 
	t_IO_lock_t
;

186 
	s_IO_m¨kî
 {

187 
_IO_m¨kî
 *
	m_√xt
;

188 
_IO_FILE
 *
	m_sbuf
;

192 
	m_pos
;

194 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

195 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

196 
	mpublic
:

197 
°ªamm¨kî
(
°ªambuf
 *
sb
);

198 ~
°ªamm¨kî
();

199 
ßvög
(Ë{  
	m_•os
 == -2; }

200 
dñè
(
°ªamm¨kî
&);

201 
dñè
();

206 
	e__codecvt_ªsu…


208 
	m__codecvt_ok
,

209 
	m__codecvt_∑πül
,

210 
	m__codecvt_îr‹
,

211 
	m__codecvt_noc⁄v


214 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


217 
	s_IO_codecvt


219 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

220 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

221 
	m__mb°©e_t
 *,

222 c⁄° 
	mwch¨_t
 *,

223 c⁄° 
	mwch¨_t
 *,

224 c⁄° 
	mwch¨_t
 **, *,

226 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

227 
	m__mb°©e_t
 *, *,

229 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

230 
	m__mb°©e_t
 *,

232 c⁄° **, 
	mwch¨_t
 *,

233 
	mwch¨_t
 *, wchar_t **);

234 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

235 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

236 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

237 c⁄° *, c⁄° *, 
	m_IO_size_t
);

238 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

240 
_IO_ic⁄v_t
 
	m__cd_ö
;

241 
_IO_ic⁄v_t
 
	m__cd_out
;

245 
	s_IO_wide_d©a


247 
wch¨_t
 *
	m_IO_ªad_±r
;

248 
wch¨_t
 *
	m_IO_ªad_íd
;

249 
wch¨_t
 *
	m_IO_ªad_ba£
;

250 
wch¨_t
 *
	m_IO_wrôe_ba£
;

251 
wch¨_t
 *
	m_IO_wrôe_±r
;

252 
wch¨_t
 *
	m_IO_wrôe_íd
;

253 
wch¨_t
 *
	m_IO_buf_ba£
;

254 
wch¨_t
 *
	m_IO_buf_íd
;

256 
wch¨_t
 *
	m_IO_ßve_ba£
;

257 
wch¨_t
 *
	m_IO_backup_ba£
;

259 
wch¨_t
 *
	m_IO_ßve_íd
;

261 
__mb°©e_t
 
	m_IO_°©e
;

262 
__mb°©e_t
 
	m_IO_œ°_°©e
;

263 
_IO_codecvt
 
	m_codecvt
;

265 
wch¨_t
 
	m_sh‹tbuf
[1];

267 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

271 
	s_IO_FILE
 {

272 
	m_Êags
;

273 
	#_IO_fûe_Êags
 
_Êags


	)

277 * 
	m_IO_ªad_±r
;

278 * 
	m_IO_ªad_íd
;

279 * 
	m_IO_ªad_ba£
;

280 * 
	m_IO_wrôe_ba£
;

281 * 
	m_IO_wrôe_±r
;

282 * 
	m_IO_wrôe_íd
;

283 * 
	m_IO_buf_ba£
;

284 * 
	m_IO_buf_íd
;

286 *
	m_IO_ßve_ba£
;

287 *
	m_IO_backup_ba£
;

288 *
	m_IO_ßve_íd
;

290 
_IO_m¨kî
 *
	m_m¨kîs
;

292 
_IO_FILE
 *
	m_chaö
;

294 
	m_fûío
;

296 
	m_blksize
;

298 
	m_Êags2
;

300 
_IO_off_t
 
	m_ﬁd_off£t
;

302 
	#__HAVE_COLUMN


	)

304 
	m_cur_cﬁumn
;

305 sig√d 
	m_vèbÀ_off£t
;

306 
	m_sh‹tbuf
[1];

310 
_IO_lock_t
 *
	m_lock
;

311 #ifde‡
_IO_USE_OLD_IO_FILE


314 
	s_IO_FILE_com∂ëe


316 
_IO_FILE
 
	m_fûe
;

318 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

319 
_IO_off64_t
 
	m_off£t
;

320 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


322 
_IO_codecvt
 *
	m_codecvt
;

323 
_IO_wide_d©a
 *
	m_wide_d©a
;

324 
_IO_FILE
 *
	m_‰ìªs_li°
;

325 *
	m_‰ìªs_buf
;

326 
size_t
 
	m_‰ìªs_size
;

328 *
	m__∑d1
;

329 *
	m__∑d2
;

330 *
	m__∑d3
;

331 *
	m__∑d4
;

332 
size_t
 
	m__∑d5
;

334 
	m_mode
;

336 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

340 #i‚de‡
__˝lu•lus


341 
_IO_FILE
 
	t_IO_FILE
;

344 
	g_IO_FILE_∂us
;

346 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

347 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

348 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

349 #i‚de‡
_LIBC


350 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

351 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

352 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

354 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

355 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

356 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

364 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

372 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, 
	t__c⁄°
 *
	t__buf
,

373 
	tsize_t
 
	t__n
);

381 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

384 
	t__io_˛o£_‚
 (*
	t__cookõ
);

387 #ifde‡
_GNU_SOURCE


389 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

390 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

391 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

392 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

397 
__io_ªad_‚
 *
	mªad
;

398 
__io_wrôe_‚
 *
	mwrôe
;

399 
__io_£ek_‚
 *
	m£ek
;

400 
__io_˛o£_‚
 *
	m˛o£
;

401 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

402 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

404 
	g_IO_cookõ_fûe
;

407 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

408 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

412 #ifde‡
__˝lu•lus


416 
__undîÊow
 (
_IO_FILE
 *);

417 
__uÊow
 (
_IO_FILE
 *);

418 
__ovîÊow
 (
_IO_FILE
 *, );

419 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


420 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

421 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

422 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

425 #i‡ 
__GNUC__
 >= 3

426 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

428 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

431 
	#_IO_gëc_u∆ocked
(
_Â
) \

432 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

433 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

434 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

435 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

436 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

437 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

438 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

439 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

440 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

441 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

443 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


444 
	#_IO_gëwc_u∆ocked
(
_Â
) \

445 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 >(_Â)->_wide_d©a->
_IO_ªad_íd
,\

447 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

448 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

449 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

450 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
, 0) \

451 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

452 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

455 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

456 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

458 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

459 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

460 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

461 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

463 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

466 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

467 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

469 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

470 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

471 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

473 #ifde‡
_IO_MTSAFE_IO


474 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

475 
	#_IO_Êockfûe
(
_Â
) \

476 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

477 
	#_IO_fu∆ockfûe
(
_Â
) \

478 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

480 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

481 
	#_IO_Êockfûe
(
_Â
Ë

	)

482 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

483 
	#_IO_·rylockfûe
(
_Â
Ë

	)

484 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

485 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

488 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

489 
_IO_va_li°
, *
__ª°ri˘
);

490 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

491 
_IO_va_li°
);

492 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

493 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

495 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

496 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

498 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

500 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


501 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

502 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

503 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

504 #i‡
__GNUC__
 >= 2

507 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


508 
	~<shlib-com∑t.h
>

509 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

510 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

511 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

512 c⁄° 
_IO_°dö_u£d
;

513 
wók_exã∫
 (
_IO_°dö_u£d
);

516 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


517 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

521 
	#_IO_fwide
(
__Â
, 
__mode
) \

522 ({ 
__ªsu…
 = (
__mode
); \

523 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

525 i‡((
__Â
)->
_mode
 == 0) \

527 (
__Â
)->
_mode
 = -1; \

528 
__ªsu…
 = (
__Â
)->
_mode
; \

530 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

531 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

533 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

534 
__ªsu…
; })

	)

537 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

538 
_IO_va_li°
, *
__ª°ri˘
);

539 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

540 
_IO_va_li°
);

541 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

542 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

545 #ifde‡
__LDBL_COMPAT


546 
	~<bôs/libio-ldbl.h
>

549 #ifde‡
__˝lu•lus


	@/usr/include/linux/i2c.h

26 #i‚de‡
_LINUX_I2C_H


27 
	#_LINUX_I2C_H


	)

29 
	~<löux/ty≥s.h
>

67 
	si2c_msg
 {

68 
__u16
 
	maddr
;

69 
__u16
 
	mÊags
;

70 
	#I2C_M_TEN
 0x0010

	)

71 
	#I2C_M_RD
 0x0001

	)

72 
	#I2C_M_NOSTART
 0x4000

	)

73 
	#I2C_M_REV_DIR_ADDR
 0x2000

	)

74 
	#I2C_M_IGNORE_NAK
 0x1000

	)

75 
	#I2C_M_NO_RD_ACK
 0x0800

	)

76 
	#I2C_M_RECV_LEN
 0x0400

	)

77 
__u16
 
	mÀn
;

78 
__u8
 *
	mbuf
;

83 
	#I2C_FUNC_I2C
 0x00000001

	)

84 
	#I2C_FUNC_10BIT_ADDR
 0x00000002

	)

85 
	#I2C_FUNC_PROTOCOL_MANGLING
 0x00000004

	)

86 
	#I2C_FUNC_SMBUS_PEC
 0x00000008

	)

87 
	#I2C_FUNC_SMBUS_BLOCK_PROC_CALL
 0x00008000

	)

88 
	#I2C_FUNC_SMBUS_QUICK
 0x00010000

	)

89 
	#I2C_FUNC_SMBUS_READ_BYTE
 0x00020000

	)

90 
	#I2C_FUNC_SMBUS_WRITE_BYTE
 0x00040000

	)

91 
	#I2C_FUNC_SMBUS_READ_BYTE_DATA
 0x00080000

	)

92 
	#I2C_FUNC_SMBUS_WRITE_BYTE_DATA
 0x00100000

	)

93 
	#I2C_FUNC_SMBUS_READ_WORD_DATA
 0x00200000

	)

94 
	#I2C_FUNC_SMBUS_WRITE_WORD_DATA
 0x00400000

	)

95 
	#I2C_FUNC_SMBUS_PROC_CALL
 0x00800000

	)

96 
	#I2C_FUNC_SMBUS_READ_BLOCK_DATA
 0x01000000

	)

97 
	#I2C_FUNC_SMBUS_WRITE_BLOCK_DATA
 0x02000000

	)

98 
	#I2C_FUNC_SMBUS_READ_I2C_BLOCK
 0x04000000

	)

99 
	#I2C_FUNC_SMBUS_WRITE_I2C_BLOCK
 0x08000000

	)

100 
	#I2C_FUNC_SMBUS_READ_I2C_BLOCK_2
 0x10000000

	)

101 
	#I2C_FUNC_SMBUS_WRITE_I2C_BLOCK_2
 0x20000000

	)

103 
	#I2C_FUNC_SMBUS_BYTE
 (
I2C_FUNC_SMBUS_READ_BYTE
 | \

104 
I2C_FUNC_SMBUS_WRITE_BYTE
)

	)

105 
	#I2C_FUNC_SMBUS_BYTE_DATA
 (
I2C_FUNC_SMBUS_READ_BYTE_DATA
 | \

106 
I2C_FUNC_SMBUS_WRITE_BYTE_DATA
)

	)

107 
	#I2C_FUNC_SMBUS_WORD_DATA
 (
I2C_FUNC_SMBUS_READ_WORD_DATA
 | \

108 
I2C_FUNC_SMBUS_WRITE_WORD_DATA
)

	)

109 
	#I2C_FUNC_SMBUS_BLOCK_DATA
 (
I2C_FUNC_SMBUS_READ_BLOCK_DATA
 | \

110 
I2C_FUNC_SMBUS_WRITE_BLOCK_DATA
)

	)

111 
	#I2C_FUNC_SMBUS_I2C_BLOCK
 (
I2C_FUNC_SMBUS_READ_I2C_BLOCK
 | \

112 
I2C_FUNC_SMBUS_WRITE_I2C_BLOCK
)

	)

113 
	#I2C_FUNC_SMBUS_I2C_BLOCK_2
 (
I2C_FUNC_SMBUS_READ_I2C_BLOCK_2
 | \

114 
I2C_FUNC_SMBUS_WRITE_I2C_BLOCK_2
)

	)

116 
	#I2C_FUNC_SMBUS_EMUL
 (
I2C_FUNC_SMBUS_QUICK
 | \

117 
I2C_FUNC_SMBUS_BYTE
 | \

118 
I2C_FUNC_SMBUS_BYTE_DATA
 | \

119 
I2C_FUNC_SMBUS_WORD_DATA
 | \

120 
I2C_FUNC_SMBUS_PROC_CALL
 | \

121 
I2C_FUNC_SMBUS_WRITE_BLOCK_DATA
 | \

122 
I2C_FUNC_SMBUS_I2C_BLOCK
 | \

123 
I2C_FUNC_SMBUS_PEC
)

	)

128 
	#I2C_SMBUS_BLOCK_MAX
 32

	)

129 
	ui2c_smbus_d©a
 {

130 
__u8
 
	mbyã
;

131 
__u16
 
	mw‹d
;

132 
__u8
 
	mblock
[
I2C_SMBUS_BLOCK_MAX
 + 2];

137 
	#I2C_SMBUS_READ
 1

	)

138 
	#I2C_SMBUS_WRITE
 0

	)

142 
	#I2C_SMBUS_QUICK
 0

	)

143 
	#I2C_SMBUS_BYTE
 1

	)

144 
	#I2C_SMBUS_BYTE_DATA
 2

	)

145 
	#I2C_SMBUS_WORD_DATA
 3

	)

146 
	#I2C_SMBUS_PROC_CALL
 4

	)

147 
	#I2C_SMBUS_BLOCK_DATA
 5

	)

148 
	#I2C_SMBUS_I2C_BLOCK_BROKEN
 6

	)

149 
	#I2C_SMBUS_BLOCK_PROC_CALL
 7

	)

150 
	#I2C_SMBUS_I2C_BLOCK_DATA
 8

	)

	@/usr/include/linux/soundcard.h

1 #i‚de‡
SOUNDCARD_H


2 
	#SOUNDCARD_H


	)

36 
	#SOUND_VERSION
 0x030802

	)

37 
	#OPEN_SOUND_SYSTEM


	)

40 
	~<löux/io˘l.h
>

43 
	~<ídün.h
>

49 
	#SNDCARD_ADLIB
 1

	)

50 
	#SNDCARD_SB
 2

	)

51 
	#SNDCARD_PAS
 3

	)

52 
	#SNDCARD_GUS
 4

	)

53 
	#SNDCARD_MPU401
 5

	)

54 
	#SNDCARD_SB16
 6

	)

55 
	#SNDCARD_SB16MIDI
 7

	)

56 
	#SNDCARD_UART6850
 8

	)

57 
	#SNDCARD_GUS16
 9

	)

58 
	#SNDCARD_MSS
 10

	)

59 
	#SNDCARD_PSS
 11

	)

60 
	#SNDCARD_SSCAPE
 12

	)

61 
	#SNDCARD_PSS_MPU
 13

	)

62 
	#SNDCARD_PSS_MSS
 14

	)

63 
	#SNDCARD_SSCAPE_MSS
 15

	)

64 
	#SNDCARD_TRXPRO
 16

	)

65 
	#SNDCARD_TRXPRO_SB
 17

	)

66 
	#SNDCARD_TRXPRO_MPU
 18

	)

67 
	#SNDCARD_MAD16
 19

	)

68 
	#SNDCARD_MAD16_MPU
 20

	)

69 
	#SNDCARD_CS4232
 21

	)

70 
	#SNDCARD_CS4232_MPU
 22

	)

71 
	#SNDCARD_MAUI
 23

	)

72 
	#SNDCARD_PSEUDO_MSS
 24

	)

73 
	#SNDCARD_GUSPNP
 25

	)

74 
	#SNDCARD_UART401
 26

	)

81 #i‚de‡
_SIOWR


82 #i‡
deföed
(
_IOWR
Ë&& (deföed(
_AIX
Ë|| (!deföed(
sun
Ë&& !deföed(
•¨c
Ë&& !deföed(
__•¨c__
Ë&& !deföed(
__INCio˘lh
Ë&& !deföed(
__Lynx__
)))

84 
	#SIOCPARM_MASK
 
IOCPARM_MASK


	)

85 
	#SIOC_VOID
 
IOC_VOID


	)

86 
	#SIOC_OUT
 
IOC_OUT


	)

87 
	#SIOC_IN
 
IOC_IN


	)

88 
	#SIOC_INOUT
 
IOC_INOUT


	)

89 
	#_SIOC_SIZE
 
_IOC_SIZE


	)

90 
	#_SIOC_DIR
 
_IOC_DIR


	)

91 
	#_SIOC_NONE
 
_IOC_NONE


	)

92 
	#_SIOC_READ
 
_IOC_READ


	)

93 
	#_SIOC_WRITE
 
_IOC_WRITE


	)

94 
	#_SIO
 
_IO


	)

95 
	#_SIOR
 
_IOR


	)

96 
	#_SIOW
 
_IOW


	)

97 
	#_SIOWR
 
_IOWR


	)

107 
	#SIOCPARM_MASK
 0x1ff‡

	)

108 
	#SIOC_VOID
 0x00000000

	)

109 
	#SIOC_OUT
 0x20000000

	)

110 
	#SIOC_IN
 0x40000000

	)

111 
	#SIOC_INOUT
 (
SIOC_IN
|
SIOC_OUT
)

	)

113 
	#_SIO
(
x
,
y
Ë(()(
SIOC_VOID
|(x<<8)|y))

	)

114 
	#_SIOR
(
x
,
y
,
t
Ë(()(
SIOC_OUT
|((—)&
SIOCPARM_MASK
)<<16)|(x<<8)|y))

	)

115 
	#_SIOW
(
x
,
y
,
t
Ë(()(
SIOC_IN
|((—)&
SIOCPARM_MASK
)<<16)|(x<<8)|y))

	)

117 
	#_SIOWR
(
x
,
y
,
t
Ë(()(
SIOC_INOUT
|((—)&
SIOCPARM_MASK
)<<16)|(x<<8)|y))

	)

118 
	#_SIOC_SIZE
(
x
Ë((x>>16)&
SIOCPARM_MASK
)

	)

119 
	#_SIOC_DIR
(
x
Ë(x & 0xf0000000)

	)

120 
	#_SIOC_NONE
 
SIOC_VOID


	)

121 
	#_SIOC_READ
 
SIOC_OUT


	)

122 
	#_SIOC_WRITE
 
SIOC_IN


	)

126 
	#SNDCTL_SEQ_RESET
 
	`_SIO
 ('Q', 0)

	)

127 
	#SNDCTL_SEQ_SYNC
 
	`_SIO
 ('Q', 1)

	)

128 
	#SNDCTL_SYNTH_INFO
 
	`_SIOWR
('Q', 2, 
sy¡h_öfo
)

	)

129 
	#SNDCTL_SEQ_CTRLRATE
 
	`_SIOWR
('Q', 3, Ë

	)

130 
	#SNDCTL_SEQ_GETOUTCOUNT
 
	`_SIOR
 ('Q', 4, )

	)

131 
	#SNDCTL_SEQ_GETINCOUNT
 
	`_SIOR
 ('Q', 5, )

	)

132 
	#SNDCTL_SEQ_PERCMODE
 
	`_SIOW
 ('Q', 6, )

	)

133 
	#SNDCTL_FM_LOAD_INSTR
 
	`_SIOW
 ('Q', 7, 
sbi_ö°rumít
Ë

	)

134 
	#SNDCTL_SEQ_TESTMIDI
 
	`_SIOW
 ('Q', 8, )

	)

135 
	#SNDCTL_SEQ_RESETSAMPLES
 
	`_SIOW
 ('Q', 9, )

	)

136 
	#SNDCTL_SEQ_NRSYNTHS
 
	`_SIOR
 ('Q',10, )

	)

137 
	#SNDCTL_SEQ_NRMIDIS
 
	`_SIOR
 ('Q',11, )

	)

138 
	#SNDCTL_MIDI_INFO
 
	`_SIOWR
('Q',12, 
midi_öfo
)

	)

139 
	#SNDCTL_SEQ_THRESHOLD
 
	`_SIOW
 ('Q',13, )

	)

140 
	#SNDCTL_SYNTH_MEMAVL
 
	`_SIOWR
('Q',14, Ë

	)

141 
	#SNDCTL_FM_4OP_ENABLE
 
	`_SIOW
 ('Q',15, Ë

	)

142 
	#SNDCTL_SEQ_PANIC
 
	`_SIO
 ('Q',17)

	)

143 
	#SNDCTL_SEQ_OUTOFBAND
 
	`_SIOW
 ('Q',18, 
£q_evít_ªc
)

	)

144 
	#SNDCTL_SEQ_GETTIME
 
	`_SIOR
 ('Q',19, )

	)

145 
	#SNDCTL_SYNTH_ID
 
	`_SIOWR
('Q',20, 
sy¡h_öfo
)

	)

146 
	#SNDCTL_SYNTH_CONTROL
 
	`_SIOWR
('Q',21, 
sy¡h_c⁄åﬁ
)

	)

147 
	#SNDCTL_SYNTH_REMOVESAMPLE
 
	`_SIOWR
('Q',22, 
ªmove_ßm∂e
)

	)

149 
	ssy¡h_c⁄åﬁ


151 
	mdevno
;

152 
	md©a
[4000];

153 }
	tsy¡h_c⁄åﬁ
;

155 
	sªmove_ßm∂e


157 
	mdevno
;

158 
	mb™kno
;

159 
	mö°∫o
;

160 } 
	tªmove_ßm∂e
;

162 
	s£q_evít_ªc
 {

163 
	m¨r
[8];

164 } 
	t£q_evít_ªc
;

166 
	#SNDCTL_TMR_TIMEBASE
 
	`_SIOWR
('T', 1, )

	)

167 
	#SNDCTL_TMR_START
 
	`_SIO
 ('T', 2)

	)

168 
	#SNDCTL_TMR_STOP
 
	`_SIO
 ('T', 3)

	)

169 
	#SNDCTL_TMR_CONTINUE
 
	`_SIO
 ('T', 4)

	)

170 
	#SNDCTL_TMR_TEMPO
 
	`_SIOWR
('T', 5, )

	)

171 
	#SNDCTL_TMR_SOURCE
 
	`_SIOWR
('T', 6, )

	)

172 
	#TMR_INTERNAL
 0x00000001

	)

173 
	#TMR_EXTERNAL
 0x00000002

	)

174 
	#TMR_MODE_MIDI
 0x00000010

	)

175 
	#TMR_MODE_FSK
 0x00000020

	)

176 
	#TMR_MODE_CLS
 0x00000040

	)

177 
	#TMR_MODE_SMPTE
 0x00000080

	)

178 
	#SNDCTL_TMR_METRONOME
 
	`_SIOW
 ('T', 7, )

	)

179 
	#SNDCTL_TMR_SELECT
 
	`_SIOW
 ('T', 8, )

	)

185 
	#_LINUX_PATCHKEY_H_INDIRECT


	)

186 
	~<löux/∑tchkey.h
>

187 #unde‡
_LINUX_PATCHKEY_H_INDIRECT


189 #i‡ 
deföed
(
__BYTE_ORDER
)

190 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


191 
	#AFMT_S16_NE
 
AFMT_S16_BE


	)

192 #ñi‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


193 
	#AFMT_S16_NE
 
AFMT_S16_LE


	)

209 
	s∑tch_öfo
 {

210 
	mkey
;

211 
	#WAVE_PATCH
 
	`_PATCHKEY
(0x04)

	)

212 
	#GUS_PATCH
 
WAVE_PATCH


	)

213 
	#WAVEFRONT_PATCH
 
	`_PATCHKEY
(0x06)

	)

215 
	mdevi˚_no
;

216 
	mö°r_no
;

218 
	mmode
;

223 
	#WAVE_16_BITS
 0x01

	)

224 
	#WAVE_UNSIGNED
 0x02

	)

225 
	#WAVE_LOOPING
 0x04

	)

226 
	#WAVE_BIDIR_LOOP
 0x08

	)

227 
	#WAVE_LOOP_BACK
 0x10

	)

228 
	#WAVE_SUSTAIN_ON
 0x20

	)

229 
	#WAVE_ENVELOPES
 0x40

	)

230 
	#WAVE_FAST_RELEASE
 0x80

	)

233 
	#WAVE_VIBRATO
 0x00010000

	)

234 
	#WAVE_TREMOLO
 0x00020000

	)

235 
	#WAVE_SCALE
 0x00040000

	)

236 
	#WAVE_FRACTIONS
 0x00080000

	)

238 
	#WAVE_ROM
 0x40000000

	)

239 
	#WAVE_MULAW
 0x20000000

	)

242 
	mÀn
;

243 
	mlo›_°¨t
, 
	mlo›_íd
;

261 
	mba£_‰eq
;

262 
	mba£_nŸe
;

263 
	mhigh_nŸe
;

264 
	mlow_nŸe
;

265 
	m∑¬ög
;

266 
	mdëunög
;

271 
	mív_øã
[ 6 ];

272 
	mív_off£t
[ 6 ];

280 
	måemﬁo_swìp
;

281 
	måemﬁo_øã
;

282 
	måemﬁo_dïth
;

284 
	mvibøto_swìp
;

285 
	mvibøto_øã
;

286 
	mvibøto_dïth
;

288 
	msˇÀ_‰equícy
;

289 
	msˇÀ_Á˘‹
;

291 
	mvﬁume
;

292 
	m‰a˘i⁄s
;

293 
	mª£rved1
;

294 
	m•¨e
[2];

295 
	md©a
[1];

298 
	ssy£x_öfo
 {

299 
	mkey
;

300 
	#SYSEX_PATCH
 
	`_PATCHKEY
(0x05)

	)

301 
	#MAUI_PATCH
 
	`_PATCHKEY
(0x06)

	)

302 
	mdevi˚_no
;

303 
	mÀn
;

304 
	md©a
[1];

327 
	#SEQ_NOTEOFF
 0

	)

328 
	#SEQ_FMNOTEOFF
 
SEQ_NOTEOFF


	)

329 
	#SEQ_NOTEON
 1

	)

330 
	#SEQ_FMNOTEON
 
SEQ_NOTEON


	)

331 
	#SEQ_WAIT
 
TMR_WAIT_ABS


	)

332 
	#SEQ_PGMCHANGE
 3

	)

333 
	#SEQ_FMPGMCHANGE
 
SEQ_PGMCHANGE


	)

334 
	#SEQ_SYNCTIMER
 
TMR_START


	)

335 
	#SEQ_MIDIPUTC
 5

	)

336 
	#SEQ_DRUMON
 6

	)

337 
	#SEQ_DRUMOFF
 7

	)

338 
	#SEQ_ECHO
 
TMR_ECHO


	)

339 
	#SEQ_AFTERTOUCH
 9

	)

340 
	#SEQ_CONTROLLER
 10

	)

354 
	#CTL_BANK_SELECT
 0x00

	)

355 
	#CTL_MODWHEEL
 0x01

	)

356 
	#CTL_BREATH
 0x02

	)

358 
	#CTL_FOOT
 0x04

	)

359 
	#CTL_PORTAMENTO_TIME
 0x05

	)

360 
	#CTL_DATA_ENTRY
 0x06

	)

361 
	#CTL_MAIN_VOLUME
 0x07

	)

362 
	#CTL_BALANCE
 0x08

	)

364 
	#CTL_PAN
 0x0a

	)

365 
	#CTL_EXPRESSION
 0x0b

	)

370 
	#CTL_GENERAL_PURPOSE1
 0x10

	)

371 
	#CTL_GENERAL_PURPOSE2
 0x11

	)

372 
	#CTL_GENERAL_PURPOSE3
 0x12

	)

373 
	#CTL_GENERAL_PURPOSE4
 0x13

	)

383 
	#CTL_DAMPER_PEDAL
 0x40

	)

384 
	#CTL_SUSTAIN
 0x40

	)

385 
	#CTL_HOLD
 0x40

	)

386 
	#CTL_PORTAMENTO
 0x41

	)

387 
	#CTL_SOSTENUTO
 0x42

	)

388 
	#CTL_SOFT_PEDAL
 0x43

	)

390 
	#CTL_HOLD2
 0x45

	)

393 
	#CTL_GENERAL_PURPOSE5
 0x50

	)

394 
	#CTL_GENERAL_PURPOSE6
 0x51

	)

395 
	#CTL_GENERAL_PURPOSE7
 0x52

	)

396 
	#CTL_GENERAL_PURPOSE8
 0x53

	)

398 
	#CTL_EXT_EFF_DEPTH
 0x5b

	)

399 
	#CTL_TREMOLO_DEPTH
 0x5c

	)

400 
	#CTL_CHORUS_DEPTH
 0x5d

	)

401 
	#CTL_DETUNE_DEPTH
 0x5e

	)

402 
	#CTL_CELESTE_DEPTH
 0x5ê

	)

403 
	#CTL_PHASER_DEPTH
 0x5f

	)

404 
	#CTL_DATA_INCREMENT
 0x60

	)

405 
	#CTL_DATA_DECREMENT
 0x61

	)

406 
	#CTL_NONREG_PARM_NUM_LSB
 0x62

	)

407 
	#CTL_NONREG_PARM_NUM_MSB
 0x63

	)

408 
	#CTL_REGIST_PARM_NUM_LSB
 0x64

	)

409 
	#CTL_REGIST_PARM_NUM_MSB
 0x65

	)

414 
	#CTRL_PITCH_BENDER
 255

	)

415 
	#CTRL_PITCH_BENDER_RANGE
 254

	)

416 
	#CTRL_EXPRESSION
 253

	)

417 
	#CTRL_MAIN_VOLUME
 252

	)

418 
	#SEQ_BALANCE
 11

	)

419 
	#SEQ_VOLMODE
 12

	)

425 
	#VOL_METHOD_ADAGIO
 1

	)

426 
	#VOL_METHOD_LINEAR
 2

	)

437 
	#SEQ_FULLSIZE
 0xfd

	)

458 
	#SEQ_PRIVATE
 0x„

	)

459 
	#SEQ_EXTENDED
 0xf‡

	)

465 
	tsbi_ö°r_d©a
[32];

467 
	ssbi_ö°rumít
 {

468 
	mkey
;

469 
	#FM_PATCH
 
	`_PATCHKEY
(0x01)

	)

470 
	#OPL3_PATCH
 
	`_PATCHKEY
(0x03)

	)

471 
	mdevi˚
;

472 
	mch™√l
;

473 
sbi_ö°r_d©a
 
	m›î©‹s
;

476 
	ssy¡h_öfo
 {

477 
	m«me
[30];

478 
	mdevi˚
;

479 
	msy¡h_ty≥
;

480 
	#SYNTH_TYPE_FM
 0

	)

481 
	#SYNTH_TYPE_SAMPLE
 1

	)

482 
	#SYNTH_TYPE_MIDI
 2

	)

484 
	msy¡h_subty≥
;

485 
	#FM_TYPE_ADLIB
 0x00

	)

486 
	#FM_TYPE_OPL3
 0x01

	)

487 
	#MIDI_TYPE_MPU401
 0x401

	)

489 
	#SAMPLE_TYPE_BASIC
 0x10

	)

490 
	#SAMPLE_TYPE_GUS
 
SAMPLE_TYPE_BASIC


	)

491 
	#SAMPLE_TYPE_WAVEFRONT
 0x11

	)

493 
	m≥rc_mode
;

494 
	mƒ_voi˚s
;

495 
	mƒ_drums
;

496 
	mö°r_b™k_size
;

497 
	mˇ∑bûôõs
;

498 
	#SYNTH_CAP_PERCMODE
 0x00000001

	)

499 
	#SYNTH_CAP_OPL3
 0x00000002

	)

500 
	#SYNTH_CAP_INPUT
 0x00000004

	)

501 
	mdummõs
[19];

504 
	ssound_timî_öfo
 {

505 
	m«me
[32];

506 
	mˇps
;

509 
	#MIDI_CAP_MPU401
 1

	)

511 
	smidi_öfo
 {

512 
	m«me
[30];

513 
	mdevi˚
;

514 
	mˇ∑bûôõs
;

515 
	mdev_ty≥
;

516 
	mdummõs
[18];

523 
	mcmd
;

524 
	mƒ_¨gs
, 
	mƒ_ªtu∫s
;

525 
	md©a
[30];

526 } 
	tmpu_comm™d_ªc
;

528 
	#SNDCTL_MIDI_PRETIME
 
	`_SIOWR
('m', 0, )

	)

529 
	#SNDCTL_MIDI_MPUMODE
 
	`_SIOWR
('m', 1, )

	)

530 
	#SNDCTL_MIDI_MPUCMD
 
	`_SIOWR
('m', 2, 
mpu_comm™d_ªc
)

	)

536 
	#SNDCTL_DSP_RESET
 
	`_SIO
 ('P', 0)

	)

537 
	#SNDCTL_DSP_SYNC
 
	`_SIO
 ('P', 1)

	)

538 
	#SNDCTL_DSP_SPEED
 
	`_SIOWR
('P', 2, )

	)

539 
	#SNDCTL_DSP_STEREO
 
	`_SIOWR
('P', 3, )

	)

540 
	#SNDCTL_DSP_GETBLKSIZE
 
	`_SIOWR
('P', 4, )

	)

541 
	#SNDCTL_DSP_SAMPLESIZE
 
SNDCTL_DSP_SETFMT


	)

542 
	#SNDCTL_DSP_CHANNELS
 
	`_SIOWR
('P', 6, )

	)

543 
	#SOUND_PCM_WRITE_CHANNELS
 
SNDCTL_DSP_CHANNELS


	)

544 
	#SOUND_PCM_WRITE_FILTER
 
	`_SIOWR
('P', 7, )

	)

545 
	#SNDCTL_DSP_POST
 
	`_SIO
 ('P', 8)

	)

546 
	#SNDCTL_DSP_SUBDIVIDE
 
	`_SIOWR
('P', 9, )

	)

547 
	#SNDCTL_DSP_SETFRAGMENT
 
	`_SIOWR
('P',10, )

	)

550 
	#SNDCTL_DSP_GETFMTS
 
	`_SIOR
 ('P',11, Ë

	)

551 
	#SNDCTL_DSP_SETFMT
 
	`_SIOWR
('P',5, Ë

	)

552 
	#AFMT_QUERY
 0x00000000

	)

553 
	#AFMT_MU_LAW
 0x00000001

	)

554 
	#AFMT_A_LAW
 0x00000002

	)

555 
	#AFMT_IMA_ADPCM
 0x00000004

	)

556 
	#AFMT_U8
 0x00000008

	)

557 
	#AFMT_S16_LE
 0x00000010

	)

558 
	#AFMT_S16_BE
 0x00000020

	)

559 
	#AFMT_S8
 0x00000040

	)

560 
	#AFMT_U16_LE
 0x00000080

	)

561 
	#AFMT_U16_BE
 0x00000100

	)

562 
	#AFMT_MPEG
 0x00000200

	)

563 
	#AFMT_AC3
 0x00000400

	)

568 
	saudio_buf_öfo
 {

569 
	m‰agmíts
;

570 
	m‰ag°ŸÆ
;

571 
	m‰agsize
;

573 
	mbyãs
;

575 } 
	taudio_buf_öfo
;

577 
	#SNDCTL_DSP_GETOSPACE
 
	`_SIOR
 ('P',12, 
audio_buf_öfo
)

	)

578 
	#SNDCTL_DSP_GETISPACE
 
	`_SIOR
 ('P',13, 
audio_buf_öfo
)

	)

579 
	#SNDCTL_DSP_NONBLOCK
 
	`_SIO
 ('P',14)

	)

580 
	#SNDCTL_DSP_GETCAPS
 
	`_SIOR
 ('P',15, )

	)

581 
	#DSP_CAP_REVISION
 0x000000f‡

	)

582 
	#DSP_CAP_DUPLEX
 0x00000100

	)

583 
	#DSP_CAP_REALTIME
 0x00000200

	)

584 
	#DSP_CAP_BATCH
 0x00000400

	)

588 
	#DSP_CAP_COPROC
 0x00000800

	)

591 
	#DSP_CAP_TRIGGER
 0x00001000

	)

592 
	#DSP_CAP_MMAP
 0x00002000

	)

593 
	#DSP_CAP_MULTI
 0x00004000

	)

594 
	#DSP_CAP_BIND
 0x00008000

	)

597 
	#SNDCTL_DSP_GETTRIGGER
 
	`_SIOR
 ('P',16, )

	)

598 
	#SNDCTL_DSP_SETTRIGGER
 
	`_SIOW
 ('P',16, )

	)

599 
	#PCM_ENABLE_INPUT
 0x00000001

	)

600 
	#PCM_ENABLE_OUTPUT
 0x00000002

	)

602 
	scou¡_öfo
 {

603 
	mbyãs
;

604 
	mblocks
;

605 
	m±r
;

606 } 
	tcou¡_öfo
;

608 
	#SNDCTL_DSP_GETIPTR
 
	`_SIOR
 ('P',17, 
cou¡_öfo
)

	)

609 
	#SNDCTL_DSP_GETOPTR
 
	`_SIOR
 ('P',18, 
cou¡_öfo
)

	)

611 
	sbuffmem_desc
 {

612 *
	mbuf„r
;

613 
	msize
;

614 } 
	tbuffmem_desc
;

615 
	#SNDCTL_DSP_MAPINBUF
 
	`_SIOR
 ('P', 19, 
buffmem_desc
)

	)

616 
	#SNDCTL_DSP_MAPOUTBUF
 
	`_SIOR
 ('P', 20, 
buffmem_desc
)

	)

617 
	#SNDCTL_DSP_SETSYNCRO
 
	`_SIO
 ('P', 21)

	)

618 
	#SNDCTL_DSP_SETDUPLEX
 
	`_SIO
 ('P', 22)

	)

619 
	#SNDCTL_DSP_GETODELAY
 
	`_SIOR
 ('P', 23, )

	)

621 
	#SNDCTL_DSP_GETCHANNELMASK
 
	`_SIOWR
('P', 64, )

	)

622 
	#SNDCTL_DSP_BIND_CHANNEL
 
	`_SIOWR
('P', 65, )

	)

623 
	#DSP_BIND_QUERY
 0x00000000

	)

624 
	#DSP_BIND_FRONT
 0x00000001

	)

625 
	#DSP_BIND_SURR
 0x00000002

	)

626 
	#DSP_BIND_CENTER_LFE
 0x00000004

	)

627 
	#DSP_BIND_HANDSET
 0x00000008

	)

628 
	#DSP_BIND_MIC
 0x00000010

	)

629 
	#DSP_BIND_MODEM1
 0x00000020

	)

630 
	#DSP_BIND_MODEM2
 0x00000040

	)

631 
	#DSP_BIND_I2S
 0x00000080

	)

632 
	#DSP_BIND_SPDIF
 0x00000100

	)

634 
	#SNDCTL_DSP_SETSPDIF
 
	`_SIOW
 ('P', 66, )

	)

635 
	#SNDCTL_DSP_GETSPDIF
 
	`_SIOR
 ('P', 67, )

	)

636 
	#SPDIF_PRO
 0x0001

	)

637 
	#SPDIF_N_AUD
 0x0002

	)

638 
	#SPDIF_COPY
 0x0004

	)

639 
	#SPDIF_PRE
 0x0008

	)

640 
	#SPDIF_CC
 0x07f0

	)

641 
	#SPDIF_L
 0x0800

	)

642 
	#SPDIF_DRS
 0x4000

	)

643 
	#SPDIF_V
 0x8000

	)

656 
	#SNDCTL_DSP_PROFILE
 
	`_SIOW
 ('P', 23, )

	)

657 
	#APF_NORMAL
 0

	)

658 
	#APF_NETWORK
 1

	)

659 
	#APF_CPUINTENS
 2

	)

661 
	#SOUND_PCM_READ_RATE
 
	`_SIOR
 ('P', 2, )

	)

662 
	#SOUND_PCM_READ_CHANNELS
 
	`_SIOR
 ('P', 6, )

	)

663 
	#SOUND_PCM_READ_BITS
 
	`_SIOR
 ('P', 5, )

	)

664 
	#SOUND_PCM_READ_FILTER
 
	`_SIOR
 ('P', 7, )

	)

667 
	#SOUND_PCM_WRITE_BITS
 
SNDCTL_DSP_SETFMT


	)

668 
	#SOUND_PCM_WRITE_RATE
 
SNDCTL_DSP_SPEED


	)

669 
	#SOUND_PCM_POST
 
SNDCTL_DSP_POST


	)

670 
	#SOUND_PCM_RESET
 
SNDCTL_DSP_RESET


	)

671 
	#SOUND_PCM_SYNC
 
SNDCTL_DSP_SYNC


	)

672 
	#SOUND_PCM_SUBDIVIDE
 
SNDCTL_DSP_SUBDIVIDE


	)

673 
	#SOUND_PCM_SETFRAGMENT
 
SNDCTL_DSP_SETFRAGMENT


	)

674 
	#SOUND_PCM_GETFMTS
 
SNDCTL_DSP_GETFMTS


	)

675 
	#SOUND_PCM_SETFMT
 
SNDCTL_DSP_SETFMT


	)

676 
	#SOUND_PCM_GETOSPACE
 
SNDCTL_DSP_GETOSPACE


	)

677 
	#SOUND_PCM_GETISPACE
 
SNDCTL_DSP_GETISPACE


	)

678 
	#SOUND_PCM_NONBLOCK
 
SNDCTL_DSP_NONBLOCK


	)

679 
	#SOUND_PCM_GETCAPS
 
SNDCTL_DSP_GETCAPS


	)

680 
	#SOUND_PCM_GETTRIGGER
 
SNDCTL_DSP_GETTRIGGER


	)

681 
	#SOUND_PCM_SETTRIGGER
 
SNDCTL_DSP_SETTRIGGER


	)

682 
	#SOUND_PCM_SETSYNCRO
 
SNDCTL_DSP_SETSYNCRO


	)

683 
	#SOUND_PCM_GETIPTR
 
SNDCTL_DSP_GETIPTR


	)

684 
	#SOUND_PCM_GETOPTR
 
SNDCTL_DSP_GETOPTR


	)

685 
	#SOUND_PCM_MAPINBUF
 
SNDCTL_DSP_MAPINBUF


	)

686 
	#SOUND_PCM_MAPOUTBUF
 
SNDCTL_DSP_MAPOUTBUF


	)

693 
	sc›r_buf„r
 {

694 
	mcomm™d
;

695 
	mÊags
;

696 
	#CPF_NONE
 0x0000

	)

697 
	#CPF_FIRST
 0x0001

	)

698 
	#CPF_LAST
 0x0002

	)

699 
	mÀn
;

700 
	moffs
;

702 
	md©a
[4000];

703 } 
	tc›r_buf„r
;

705 
	sc›r_debug_buf
 {

706 
	mcomm™d
;

707 
	m∑rm1
;

708 
	m∑rm2
;

709 
	mÊags
;

710 
	mÀn
;

711 } 
	tc›r_debug_buf
;

713 
	sc›r_msg
 {

714 
	mÀn
;

715 
	md©a
[4000];

716 } 
	tc›r_msg
;

718 
	#SNDCTL_COPR_RESET
 
	`_SIO
 ('C', 0)

	)

719 
	#SNDCTL_COPR_LOAD
 
	`_SIOWR
('C', 1, 
c›r_buf„r
)

	)

720 
	#SNDCTL_COPR_RDATA
 
	`_SIOWR
('C', 2, 
c›r_debug_buf
)

	)

721 
	#SNDCTL_COPR_RCODE
 
	`_SIOWR
('C', 3, 
c›r_debug_buf
)

	)

722 
	#SNDCTL_COPR_WDATA
 
	`_SIOW
 ('C', 4, 
c›r_debug_buf
)

	)

723 
	#SNDCTL_COPR_WCODE
 
	`_SIOW
 ('C', 5, 
c›r_debug_buf
)

	)

724 
	#SNDCTL_COPR_RUN
 
	`_SIOWR
('C', 6, 
c›r_debug_buf
)

	)

725 
	#SNDCTL_COPR_HALT
 
	`_SIOWR
('C', 7, 
c›r_debug_buf
)

	)

726 
	#SNDCTL_COPR_SENDMSG
 
	`_SIOWR
('C', 8, 
c›r_msg
)

	)

727 
	#SNDCTL_COPR_RCVMSG
 
	`_SIOR
 ('C', 9, 
c›r_msg
)

	)

742 
	#SOUND_MIXER_NRDEVICES
 25

	)

743 
	#SOUND_MIXER_VOLUME
 0

	)

744 
	#SOUND_MIXER_BASS
 1

	)

745 
	#SOUND_MIXER_TREBLE
 2

	)

746 
	#SOUND_MIXER_SYNTH
 3

	)

747 
	#SOUND_MIXER_PCM
 4

	)

748 
	#SOUND_MIXER_SPEAKER
 5

	)

749 
	#SOUND_MIXER_LINE
 6

	)

750 
	#SOUND_MIXER_MIC
 7

	)

751 
	#SOUND_MIXER_CD
 8

	)

752 
	#SOUND_MIXER_IMIX
 9

	)

753 
	#SOUND_MIXER_ALTPCM
 10

	)

754 
	#SOUND_MIXER_RECLEV
 11

	)

755 
	#SOUND_MIXER_IGAIN
 12

	)

756 
	#SOUND_MIXER_OGAIN
 13

	)

763 
	#SOUND_MIXER_LINE1
 14

	)

764 
	#SOUND_MIXER_LINE2
 15

	)

765 
	#SOUND_MIXER_LINE3
 16

	)

766 
	#SOUND_MIXER_DIGITAL1
 17

	)

767 
	#SOUND_MIXER_DIGITAL2
 18

	)

768 
	#SOUND_MIXER_DIGITAL3
 19

	)

769 
	#SOUND_MIXER_PHONEIN
 20

	)

770 
	#SOUND_MIXER_PHONEOUT
 21

	)

771 
	#SOUND_MIXER_VIDEO
 22

	)

772 
	#SOUND_MIXER_RADIO
 23

	)

773 
	#SOUND_MIXER_MONITOR
 24

	)

777 
	#SOUND_ONOFF_MIN
 28

	)

778 
	#SOUND_ONOFF_MAX
 30

	)

781 
	#SOUND_MIXER_NONE
 31

	)

787 
	#SOUND_MIXER_ENHANCE
 
SOUND_MIXER_NONE


	)

788 
	#SOUND_MIXER_MUTE
 
SOUND_MIXER_NONE


	)

789 
	#SOUND_MIXER_LOUD
 
SOUND_MIXER_NONE


	)

792 
	#SOUND_DEVICE_LABELS
 {"Vol ", "Bass ", "Trebl", "Synth", "Pcm ", "Spkr ", "Line ", \

795 "Ph⁄eIn", "Ph⁄eOut", "Video", "Radio", "M⁄ô‹"}

	)

797 
	#SOUND_DEVICE_NAMES
 {"vol", "bass", "treble", "synth", "pcm", "speaker", "line", \

800 "phö", "phout", "video", "ødio", "m⁄ô‹"}

	)

804 
	#SOUND_MIXER_RECSRC
 0xf‡

	)

805 
	#SOUND_MIXER_DEVMASK
 0x„

	)

806 
	#SOUND_MIXER_RECMASK
 0xfd

	)

807 
	#SOUND_MIXER_CAPS
 0xfc

	)

808 
	#SOUND_CAP_EXCL_INPUT
 0x00000001

	)

809 
	#SOUND_MIXER_STEREODEVS
 0xfb

	)

810 
	#SOUND_MIXER_OUTSRC
 0xÁ

	)

811 
	#SOUND_MIXER_OUTMASK
 0xf9

	)

815 
	#SOUND_MASK_VOLUME
 (1 << 
SOUND_MIXER_VOLUME
)

	)

816 
	#SOUND_MASK_BASS
 (1 << 
SOUND_MIXER_BASS
)

	)

817 
	#SOUND_MASK_TREBLE
 (1 << 
SOUND_MIXER_TREBLE
)

	)

818 
	#SOUND_MASK_SYNTH
 (1 << 
SOUND_MIXER_SYNTH
)

	)

819 
	#SOUND_MASK_PCM
 (1 << 
SOUND_MIXER_PCM
)

	)

820 
	#SOUND_MASK_SPEAKER
 (1 << 
SOUND_MIXER_SPEAKER
)

	)

821 
	#SOUND_MASK_LINE
 (1 << 
SOUND_MIXER_LINE
)

	)

822 
	#SOUND_MASK_MIC
 (1 << 
SOUND_MIXER_MIC
)

	)

823 
	#SOUND_MASK_CD
 (1 << 
SOUND_MIXER_CD
)

	)

824 
	#SOUND_MASK_IMIX
 (1 << 
SOUND_MIXER_IMIX
)

	)

825 
	#SOUND_MASK_ALTPCM
 (1 << 
SOUND_MIXER_ALTPCM
)

	)

826 
	#SOUND_MASK_RECLEV
 (1 << 
SOUND_MIXER_RECLEV
)

	)

827 
	#SOUND_MASK_IGAIN
 (1 << 
SOUND_MIXER_IGAIN
)

	)

828 
	#SOUND_MASK_OGAIN
 (1 << 
SOUND_MIXER_OGAIN
)

	)

829 
	#SOUND_MASK_LINE1
 (1 << 
SOUND_MIXER_LINE1
)

	)

830 
	#SOUND_MASK_LINE2
 (1 << 
SOUND_MIXER_LINE2
)

	)

831 
	#SOUND_MASK_LINE3
 (1 << 
SOUND_MIXER_LINE3
)

	)

832 
	#SOUND_MASK_DIGITAL1
 (1 << 
SOUND_MIXER_DIGITAL1
)

	)

833 
	#SOUND_MASK_DIGITAL2
 (1 << 
SOUND_MIXER_DIGITAL2
)

	)

834 
	#SOUND_MASK_DIGITAL3
 (1 << 
SOUND_MIXER_DIGITAL3
)

	)

835 
	#SOUND_MASK_PHONEIN
 (1 << 
SOUND_MIXER_PHONEIN
)

	)

836 
	#SOUND_MASK_PHONEOUT
 (1 << 
SOUND_MIXER_PHONEOUT
)

	)

837 
	#SOUND_MASK_RADIO
 (1 << 
SOUND_MIXER_RADIO
)

	)

838 
	#SOUND_MASK_VIDEO
 (1 << 
SOUND_MIXER_VIDEO
)

	)

839 
	#SOUND_MASK_MONITOR
 (1 << 
SOUND_MIXER_MONITOR
)

	)

842 
	#SOUND_MASK_MUTE
 (1 << 
SOUND_MIXER_MUTE
)

	)

843 
	#SOUND_MASK_ENHANCE
 (1 << 
SOUND_MIXER_ENHANCE
)

	)

844 
	#SOUND_MASK_LOUD
 (1 << 
SOUND_MIXER_LOUD
)

	)

846 
	#MIXER_READ
(
dev
Ë
	`_SIOR
('M', dev, )

	)

847 
	#SOUND_MIXER_READ_VOLUME
 
	`MIXER_READ
(
SOUND_MIXER_VOLUME
)

	)

848 
	#SOUND_MIXER_READ_BASS
 
	`MIXER_READ
(
SOUND_MIXER_BASS
)

	)

849 
	#SOUND_MIXER_READ_TREBLE
 
	`MIXER_READ
(
SOUND_MIXER_TREBLE
)

	)

850 
	#SOUND_MIXER_READ_SYNTH
 
	`MIXER_READ
(
SOUND_MIXER_SYNTH
)

	)

851 
	#SOUND_MIXER_READ_PCM
 
	`MIXER_READ
(
SOUND_MIXER_PCM
)

	)

852 
	#SOUND_MIXER_READ_SPEAKER
 
	`MIXER_READ
(
SOUND_MIXER_SPEAKER
)

	)

853 
	#SOUND_MIXER_READ_LINE
 
	`MIXER_READ
(
SOUND_MIXER_LINE
)

	)

854 
	#SOUND_MIXER_READ_MIC
 
	`MIXER_READ
(
SOUND_MIXER_MIC
)

	)

855 
	#SOUND_MIXER_READ_CD
 
	`MIXER_READ
(
SOUND_MIXER_CD
)

	)

856 
	#SOUND_MIXER_READ_IMIX
 
	`MIXER_READ
(
SOUND_MIXER_IMIX
)

	)

857 
	#SOUND_MIXER_READ_ALTPCM
 
	`MIXER_READ
(
SOUND_MIXER_ALTPCM
)

	)

858 
	#SOUND_MIXER_READ_RECLEV
 
	`MIXER_READ
(
SOUND_MIXER_RECLEV
)

	)

859 
	#SOUND_MIXER_READ_IGAIN
 
	`MIXER_READ
(
SOUND_MIXER_IGAIN
)

	)

860 
	#SOUND_MIXER_READ_OGAIN
 
	`MIXER_READ
(
SOUND_MIXER_OGAIN
)

	)

861 
	#SOUND_MIXER_READ_LINE1
 
	`MIXER_READ
(
SOUND_MIXER_LINE1
)

	)

862 
	#SOUND_MIXER_READ_LINE2
 
	`MIXER_READ
(
SOUND_MIXER_LINE2
)

	)

863 
	#SOUND_MIXER_READ_LINE3
 
	`MIXER_READ
(
SOUND_MIXER_LINE3
)

	)

866 
	#SOUND_MIXER_READ_MUTE
 
	`MIXER_READ
(
SOUND_MIXER_MUTE
)

	)

867 
	#SOUND_MIXER_READ_ENHANCE
 
	`MIXER_READ
(
SOUND_MIXER_ENHANCE
)

	)

868 
	#SOUND_MIXER_READ_LOUD
 
	`MIXER_READ
(
SOUND_MIXER_LOUD
)

	)

870 
	#SOUND_MIXER_READ_RECSRC
 
	`MIXER_READ
(
SOUND_MIXER_RECSRC
)

	)

871 
	#SOUND_MIXER_READ_DEVMASK
 
	`MIXER_READ
(
SOUND_MIXER_DEVMASK
)

	)

872 
	#SOUND_MIXER_READ_RECMASK
 
	`MIXER_READ
(
SOUND_MIXER_RECMASK
)

	)

873 
	#SOUND_MIXER_READ_STEREODEVS
 
	`MIXER_READ
(
SOUND_MIXER_STEREODEVS
)

	)

874 
	#SOUND_MIXER_READ_CAPS
 
	`MIXER_READ
(
SOUND_MIXER_CAPS
)

	)

876 
	#MIXER_WRITE
(
dev
Ë
	`_SIOWR
('M', dev, )

	)

877 
	#SOUND_MIXER_WRITE_VOLUME
 
	`MIXER_WRITE
(
SOUND_MIXER_VOLUME
)

	)

878 
	#SOUND_MIXER_WRITE_BASS
 
	`MIXER_WRITE
(
SOUND_MIXER_BASS
)

	)

879 
	#SOUND_MIXER_WRITE_TREBLE
 
	`MIXER_WRITE
(
SOUND_MIXER_TREBLE
)

	)

880 
	#SOUND_MIXER_WRITE_SYNTH
 
	`MIXER_WRITE
(
SOUND_MIXER_SYNTH
)

	)

881 
	#SOUND_MIXER_WRITE_PCM
 
	`MIXER_WRITE
(
SOUND_MIXER_PCM
)

	)

882 
	#SOUND_MIXER_WRITE_SPEAKER
 
	`MIXER_WRITE
(
SOUND_MIXER_SPEAKER
)

	)

883 
	#SOUND_MIXER_WRITE_LINE
 
	`MIXER_WRITE
(
SOUND_MIXER_LINE
)

	)

884 
	#SOUND_MIXER_WRITE_MIC
 
	`MIXER_WRITE
(
SOUND_MIXER_MIC
)

	)

885 
	#SOUND_MIXER_WRITE_CD
 
	`MIXER_WRITE
(
SOUND_MIXER_CD
)

	)

886 
	#SOUND_MIXER_WRITE_IMIX
 
	`MIXER_WRITE
(
SOUND_MIXER_IMIX
)

	)

887 
	#SOUND_MIXER_WRITE_ALTPCM
 
	`MIXER_WRITE
(
SOUND_MIXER_ALTPCM
)

	)

888 
	#SOUND_MIXER_WRITE_RECLEV
 
	`MIXER_WRITE
(
SOUND_MIXER_RECLEV
)

	)

889 
	#SOUND_MIXER_WRITE_IGAIN
 
	`MIXER_WRITE
(
SOUND_MIXER_IGAIN
)

	)

890 
	#SOUND_MIXER_WRITE_OGAIN
 
	`MIXER_WRITE
(
SOUND_MIXER_OGAIN
)

	)

891 
	#SOUND_MIXER_WRITE_LINE1
 
	`MIXER_WRITE
(
SOUND_MIXER_LINE1
)

	)

892 
	#SOUND_MIXER_WRITE_LINE2
 
	`MIXER_WRITE
(
SOUND_MIXER_LINE2
)

	)

893 
	#SOUND_MIXER_WRITE_LINE3
 
	`MIXER_WRITE
(
SOUND_MIXER_LINE3
)

	)

896 
	#SOUND_MIXER_WRITE_MUTE
 
	`MIXER_WRITE
(
SOUND_MIXER_MUTE
)

	)

897 
	#SOUND_MIXER_WRITE_ENHANCE
 
	`MIXER_WRITE
(
SOUND_MIXER_ENHANCE
)

	)

898 
	#SOUND_MIXER_WRITE_LOUD
 
	`MIXER_WRITE
(
SOUND_MIXER_LOUD
)

	)

900 
	#SOUND_MIXER_WRITE_RECSRC
 
	`MIXER_WRITE
(
SOUND_MIXER_RECSRC
)

	)

902 
	smixî_öfo


904 
	mid
[16];

905 
	m«me
[32];

906 
	mmodify_cou¡î
;

907 
	mfûÀrs
[10];

908 } 
	tmixî_öfo
;

910 
	s_ﬁd_mixî_öfo


912 
	mid
[16];

913 
	m«me
[32];

914 } 
	t_ﬁd_mixî_öfo
;

916 
	#SOUND_MIXER_INFO
 
	`_SIOR
 ('M', 101, 
mixî_öfo
)

	)

917 
	#SOUND_OLD_MIXER_INFO
 
	`_SIOR
 ('M', 101, 
_ﬁd_mixî_öfo
)

	)

925 
	tmixî_ªc‹d
[128];

927 
	#SOUND_MIXER_ACCESS
 
	`_SIOWR
('M', 102, 
mixî_ªc‹d
)

	)

932 
	#SOUND_MIXER_AGC
 
	`_SIOWR
('M', 103, )

	)

933 
	#SOUND_MIXER_3DSE
 
	`_SIOWR
('M', 104, )

	)

939 
	#SOUND_MIXER_PRIVATE1
 
	`_SIOWR
('M', 111, )

	)

940 
	#SOUND_MIXER_PRIVATE2
 
	`_SIOWR
('M', 112, )

	)

941 
	#SOUND_MIXER_PRIVATE3
 
	`_SIOWR
('M', 113, )

	)

942 
	#SOUND_MIXER_PRIVATE4
 
	`_SIOWR
('M', 114, )

	)

943 
	#SOUND_MIXER_PRIVATE5
 
	`_SIOWR
('M', 115, )

	)

953 
	smixî_vﬁ_èbÀ
 {

954 
	mnum
;

955 
	m«me
[32];

956 
	mÀvñs
[32];

957 } 
	tmixî_vﬁ_èbÀ
;

959 
	#SOUND_MIXER_GETLEVELS
 
	`_SIOWR
('M', 116, 
mixî_vﬁ_èbÀ
)

	)

960 
	#SOUND_MIXER_SETLEVELS
 
	`_SIOWR
('M', 117, 
mixî_vﬁ_èbÀ
)

	)

968 
	#OSS_GETVERSION
 
	`_SIOR
 ('M', 118, )

	)

988 
	#EV_SEQ_LOCAL
 0x80

	)

989 
	#EV_TIMING
 0x81

	)

990 
	#EV_CHN_COMMON
 0x92

	)

991 
	#EV_CHN_VOICE
 0x93

	)

992 
	#EV_SYSEX
 0x94

	)

1002 
	#MIDI_NOTEOFF
 0x80

	)

1003 
	#MIDI_NOTEON
 0x90

	)

1004 
	#MIDI_KEY_PRESSURE
 0xA0

	)

1010 
	#MIDI_CTL_CHANGE
 0xB0

	)

1011 
	#MIDI_PGM_CHANGE
 0xC0

	)

1012 
	#MIDI_CHN_PRESSURE
 0xD0

	)

1013 
	#MIDI_PITCH_BEND
 0xE0

	)

1015 
	#MIDI_SYSTEM_PREFIX
 0xF0

	)

1020 
	#TMR_WAIT_REL
 1

	)

1021 
	#TMR_WAIT_ABS
 2

	)

1022 
	#TMR_STOP
 3

	)

1023 
	#TMR_START
 4

	)

1024 
	#TMR_CONTINUE
 5

	)

1025 
	#TMR_TEMPO
 6

	)

1026 
	#TMR_ECHO
 8

	)

1027 
	#TMR_CLOCK
 9

	)

1028 
	#TMR_SPP
 10

	)

1029 
	#TMR_TIMESIG
 11

	)

1034 
	#LOCL_STARTAUDIO
 1

	)

1036 #i‡(!
deföed
(
__KERNEL__
Ë&& !deföed(
KERNEL
Ë&& !deföed(
INKERNEL
Ë&& !deföed(
_KERNEL
)Ë|| deföed(
USE_SEQ_MACROS
)

1043 
	#SEQ_DECLAREBUF
(Ë
	`SEQ_USE_EXTBUF
()

	)

1045 
£qbuf_dump
();

1047 
OSS_öô
(
£qfd
, 
buÊí
);

1048 
OSS_£qbuf_dump
(
fd
, *
buf
, 
buÊí
);

1049 
OSS_£q_advbuf
(
Àn
, 
fd
, *
buf
, 
buÊí
);

1050 
OSS_£q_√edbuf
(
Àn
, 
fd
, *
buf
, 
buÊí
);

1051 
OSS_∑tch_ˇchög
(
dev
, 
chn
, 
∑tch
,

1052 
fd
, *
buf
, 
buÊí
);

1053 
OSS_drum_ˇchög
(
dev
, 
chn
, 
∑tch
,

1054 
fd
, *
buf
, 
buÊí
);

1055 
OSS_wrôe_∑tch
(
fd
, *
buf
, 
Àn
);

1056 
OSS_wrôe_∑tch2
(
fd
, *
buf
, 
Àn
);

1058 
	#SEQ_PM_DEFINES
 
__foo_b¨___


	)

1059 #ifde‡
OSSLIB


1060 
	#SEQ_USE_EXTBUF
() \

1061 *
_£qbuf
; \

1062 
_£qbuÊí
;
_£qbuÂå


	)

1063 
	#SEQ_DEFINEBUF
(
Àn
Ë
	`SEQ_USE_EXTBUF
();
_ªque°ed_£qbuÊí
=
	)
len

1064 
	#_SEQ_ADVBUF
(
Àn
Ë
	`OSS_£q_advbuf
÷í, 
£qfd
, 
_£qbuf
, 
_£qbuÊí
)

	)

1065 
	#_SEQ_NEEDBUF
(
Àn
Ë
	`OSS_£q_√edbuf
÷í, 
£qfd
, 
_£qbuf
, 
_£qbuÊí
)

	)

1066 
	#SEQ_DUMPBUF
(Ë
	`OSS_£qbuf_dump
(
£qfd
, 
_£qbuf
, 
_£qbuÊí
)

	)

1068 
	#SEQ_LOAD_GMINSTR
(
dev
, 
ö°r
) \

1069 
	`OSS_∑tch_ˇchög
(
dev
, -1, 
ö°r
, 
£qfd
, 
_£qbuf
, 
_£qbuÊí
)

	)

1070 
	#SEQ_LOAD_GMDRUM
(
dev
, 
drum
) \

1071 
	`OSS_drum_ˇchög
(
dev
, -1, 
drum
, 
£qfd
, 
_£qbuf
, 
_£qbuÊí
)

	)

1074 
	#SEQ_LOAD_GMINSTR
(
dev
, 
ö°r
)

	)

1075 
	#SEQ_LOAD_GMDRUM
(
dev
, 
drum
)

	)

1077 
	#SEQ_USE_EXTBUF
() \

1078 
_£qbuf
[]; \

1079 
_£qbuÊí
;
_£qbuÂå


	)

1081 #i‚de‡
USE_SIMPLE_MACROS


1101 
	#SEQ_DEFINEBUF
(
Àn
Ë
_£qbuf
[Àn]; 
_£qbuÊí
 =Üí;
_£qbuÂå
 = 0

	)

1102 
	#_SEQ_NEEDBUF
(
Àn
Ëi‡((
_£qbuÂå
+÷í)Ë> 
_£qbuÊí
Ë
	`£qbuf_dump
()

	)

1103 
	#_SEQ_ADVBUF
(
Àn
Ë
_£qbuÂå
 +
	)
len

1104 
	#SEQ_DUMPBUF
 
£qbuf_dump


	)

1120 
	#_SEQ_NEEDBUF
(
Àn
Ë

	)

1124 
	#SEQ_VOLUME_MODE
(
dev
, 
mode
Ë{
	`_SEQ_NEEDBUF
(8);\

1125 
_£qbuf
[
_£qbuÂå
] = 
SEQ_EXTENDED
;\

1126 
_£qbuf
[
_£qbuÂå
+1] = 
SEQ_VOLMODE
;\

1127 
_£qbuf
[
_£qbuÂå
+2] = (
dev
);\

1128 
_£qbuf
[
_£qbuÂå
+3] = (
mode
);\

1129 
_£qbuf
[
_£qbuÂå
+4] = 0;\

1130 
_£qbuf
[
_£qbuÂå
+5] = 0;\

1131 
_£qbuf
[
_£qbuÂå
+6] = 0;\

1132 
_£qbuf
[
_£qbuÂå
+7] = 0;\

1133 
	`_SEQ_ADVBUF
(8);}

	)

1139 
	#_CHN_VOICE
(
dev
, 
evít
, 
chn
, 
nŸe
, 
∑rm
) \

1140 {
	`_SEQ_NEEDBUF
(8);\

1141 
_£qbuf
[
_£qbuÂå
] = 
EV_CHN_VOICE
;\

1142 
_£qbuf
[
_£qbuÂå
+1] = (
dev
);\

1143 
_£qbuf
[
_£qbuÂå
+2] = (
evít
);\

1144 
_£qbuf
[
_£qbuÂå
+3] = (
chn
);\

1145 
_£qbuf
[
_£qbuÂå
+4] = (
nŸe
);\

1146 
_£qbuf
[
_£qbuÂå
+5] = (
∑rm
);\

1147 
_£qbuf
[
_£qbuÂå
+6] = (0);\

1148 
_£qbuf
[
_£qbuÂå
+7] = 0;\

1149 
	`_SEQ_ADVBUF
(8);}

	)

1151 
	#SEQ_START_NOTE
(
dev
, 
chn
, 
nŸe
, 
vﬁ
) \

1152 
	`_CHN_VOICE
(
dev
, 
MIDI_NOTEON
, 
chn
, 
nŸe
, 
vﬁ
)

	)

1154 
	#SEQ_STOP_NOTE
(
dev
, 
chn
, 
nŸe
, 
vﬁ
) \

1155 
	`_CHN_VOICE
(
dev
, 
MIDI_NOTEOFF
, 
chn
, 
nŸe
, 
vﬁ
)

	)

1157 
	#SEQ_KEY_PRESSURE
(
dev
, 
chn
, 
nŸe
, 
¥essuª
) \

1158 
	`_CHN_VOICE
(
dev
, 
MIDI_KEY_PRESSURE
, 
chn
, 
nŸe
, 
¥essuª
)

	)

1164 
	#_CHN_COMMON
(
dev
, 
evít
, 
chn
, 
p1
, 
p2
, 
w14
) \

1165 {
	`_SEQ_NEEDBUF
(8);\

1166 
_£qbuf
[
_£qbuÂå
] = 
EV_CHN_COMMON
;\

1167 
_£qbuf
[
_£qbuÂå
+1] = (
dev
);\

1168 
_£qbuf
[
_£qbuÂå
+2] = (
evít
);\

1169 
_£qbuf
[
_£qbuÂå
+3] = (
chn
);\

1170 
_£qbuf
[
_£qbuÂå
+4] = (
p1
);\

1171 
_£qbuf
[
_£qbuÂå
+5] = (
p2
);\

1172 *(*)&
_£qbuf
[
_£qbuÂå
+6] = (
w14
);\

1173 
	`_SEQ_ADVBUF
(8);}

	)

1189 
	#SEQ_SYSEX
(
dev
, 
buf
, 
Àn
) \

1190 {
ii
, 
Œ
=(
Àn
); \

1191 *
buÂ
=
buf
;\

1192 i‡(
Œ
>6)ll=6;\

1193 
	`_SEQ_NEEDBUF
(8);\

1194 
_£qbuf
[
_£qbuÂå
] = 
EV_SYSEX
;\

1195 
_£qbuf
[
_£qbuÂå
+1] = (
dev
);\

1196 
ii
=0;ii<
Œ
;ii++)\

1197 
_£qbuf
[
_£qbuÂå
+
ii
+2] = 
buÂ
[ii];\

1198 
ii
=
Œ
;ii<6;ii++)\

1199 
_£qbuf
[
_£qbuÂå
+
ii
+2] = 0xff;\

1200 
	`_SEQ_ADVBUF
(8);}

	)

1202 
	#SEQ_CHN_PRESSURE
(
dev
, 
chn
, 
¥essuª
) \

1203 
	`_CHN_COMMON
(
dev
, 
MIDI_CHN_PRESSURE
, 
chn
, 
¥essuª
, 0, 0)

	)

1205 
	#SEQ_SET_PATCH
 
SEQ_PGM_CHANGE


	)

1206 #ifde‡
OSSLIB


1207 
	#SEQ_PGM_CHANGE
(
dev
, 
chn
, 
∑tch
) \

1208 {
	`OSS_∑tch_ˇchög
(
dev
, 
chn
, 
∑tch
, 
£qfd
, 
_£qbuf
, 
_£qbuÊí
); \

1209 
	`_CHN_COMMON
(
dev
, 
MIDI_PGM_CHANGE
, 
chn
, 
∑tch
, 0, 0);}

	)

1211 
	#SEQ_PGM_CHANGE
(
dev
, 
chn
, 
∑tch
) \

1212 
	`_CHN_COMMON
(
dev
, 
MIDI_PGM_CHANGE
, 
chn
, 
∑tch
, 0, 0)

	)

1215 
	#SEQ_CONTROL
(
dev
, 
chn
, 
c⁄åﬁÀr
, 
vÆue
) \

1216 
	`_CHN_COMMON
(
dev
, 
MIDI_CTL_CHANGE
, 
chn
, 
c⁄åﬁÀr
, 0, 
vÆue
)

	)

1218 
	#SEQ_BENDER
(
dev
, 
chn
, 
vÆue
) \

1219 
	`_CHN_COMMON
(
dev
, 
MIDI_PITCH_BEND
, 
chn
, 0, 0, 
vÆue
)

	)

1222 
	#SEQ_V2_X_CONTROL
(
dev
, 
voi˚
, 
c⁄åﬁÀr
, 
vÆue
Ë{
	`_SEQ_NEEDBUF
(8);\

1223 
_£qbuf
[
_£qbuÂå
] = 
SEQ_EXTENDED
;\

1224 
_£qbuf
[
_£qbuÂå
+1] = 
SEQ_CONTROLLER
;\

1225 
_£qbuf
[
_£qbuÂå
+2] = (
dev
);\

1226 
_£qbuf
[
_£qbuÂå
+3] = (
voi˚
);\

1227 
_£qbuf
[
_£qbuÂå
+4] = (
c⁄åﬁÀr
);\

1228 
_£qbuf
[
_£qbuÂå
+5] = ((
vÆue
)&0xff);\

1229 
_£qbuf
[
_£qbuÂå
+6] = ((
vÆue
>>8)&0xff);\

1230 
_£qbuf
[
_£qbuÂå
+7] = 0;\

1231 
	`_SEQ_ADVBUF
(8);}

	)

1236 
	#SEQ_PITCHBEND
(
dev
, 
voi˚
, 
vÆue
Ë
	`SEQ_V2_X_CONTROL
(dev, voi˚, 
CTRL_PITCH_BENDER
, vÆue)

	)

1237 
	#SEQ_BENDER_RANGE
(
dev
, 
voi˚
, 
vÆue
Ë
	`SEQ_V2_X_CONTROL
(dev, voi˚, 
CTRL_PITCH_BENDER_RANGE
, vÆue)

	)

1238 
	#SEQ_EXPRESSION
(
dev
, 
voi˚
, 
vÆue
Ë
	`SEQ_CONTROL
(dev, voi˚, 
CTL_EXPRESSION
, vÆue*128)

	)

1239 
	#SEQ_MAIN_VOLUME
(
dev
, 
voi˚
, 
vÆue
Ë
	`SEQ_CONTROL
(dev, voi˚, 
CTL_MAIN_VOLUME
, (vÆue*16383)/100)

	)

1240 
	#SEQ_PANNING
(
dev
, 
voi˚
, 
pos
Ë
	`SEQ_CONTROL
(dev, voi˚, 
CTL_PAN
, (pos+128Ë/ 2)

	)

1246 
	#_TIMER_EVENT
(
ev
, 
∑rm
Ë{
	`_SEQ_NEEDBUF
(8);\

1247 
_£qbuf
[
_£qbuÂå
+0] = 
EV_TIMING
; \

1248 
_£qbuf
[
_£qbuÂå
+1] = (
ev
); \

1249 
_£qbuf
[
_£qbuÂå
+2] = 0;\

1250 
_£qbuf
[
_£qbuÂå
+3] = 0;\

1251 *(*)&
_£qbuf
[
_£qbuÂå
+4] = (
∑rm
); \

1252 
	`_SEQ_ADVBUF
(8);}

	)

1254 
	#SEQ_START_TIMER
(Ë
	`_TIMER_EVENT
(
TMR_START
, 0)

	)

1255 
	#SEQ_STOP_TIMER
(Ë
	`_TIMER_EVENT
(
TMR_STOP
, 0)

	)

1256 
	#SEQ_CONTINUE_TIMER
(Ë
	`_TIMER_EVENT
(
TMR_CONTINUE
, 0)

	)

1257 
	#SEQ_WAIT_TIME
(
ticks
Ë
	`_TIMER_EVENT
(
TMR_WAIT_ABS
,Åicks)

	)

1258 
	#SEQ_DELTA_TIME
(
ticks
Ë
	`_TIMER_EVENT
(
TMR_WAIT_REL
,Åicks)

	)

1259 
	#SEQ_ECHO_BACK
(
key
Ë
	`_TIMER_EVENT
(
TMR_ECHO
, key)

	)

1260 
	#SEQ_SET_TEMPO
(
vÆue
Ë
	`_TIMER_EVENT
(
TMR_TEMPO
, vÆue)

	)

1261 
	#SEQ_SONGPOS
(
pos
Ë
	`_TIMER_EVENT
(
TMR_SPP
,Öos)

	)

1262 
	#SEQ_TIME_SIGNATURE
(
sig
Ë
	`_TIMER_EVENT
(
TMR_TIMESIG
, sig)

	)

1268 
	#_LOCAL_EVENT
(
ev
, 
∑rm
Ë{
	`_SEQ_NEEDBUF
(8);\

1269 
_£qbuf
[
_£qbuÂå
+0] = 
EV_SEQ_LOCAL
; \

1270 
_£qbuf
[
_£qbuÂå
+1] = (
ev
); \

1271 
_£qbuf
[
_£qbuÂå
+2] = 0;\

1272 
_£qbuf
[
_£qbuÂå
+3] = 0;\

1273 *(*)&
_£qbuf
[
_£qbuÂå
+4] = (
∑rm
); \

1274 
	`_SEQ_ADVBUF
(8);}

	)

1276 
	#SEQ_PLAYAUDIO
(
devmask
Ë
	`_LOCAL_EVENT
(
LOCL_STARTAUDIO
, devmask)

	)

1281 
	#SEQ_MIDIOUT
(
devi˚
, 
byã
Ë{
	`_SEQ_NEEDBUF
(4);\

1282 
_£qbuf
[
_£qbuÂå
] = 
SEQ_MIDIPUTC
;\

1283 
_£qbuf
[
_£qbuÂå
+1] = (
byã
);\

1284 
_£qbuf
[
_£qbuÂå
+2] = (
devi˚
);\

1285 
_£qbuf
[
_£qbuÂå
+3] = 0;\

1286 
	`_SEQ_ADVBUF
(4);}

	)

1291 #ifde‡
OSSLIB


1292 
	#SEQ_WRPATCH
(
∑tchx
, 
Àn
) \

1293 
	`OSS_wrôe_∑tch
(
£qfd
, (*)(
∑tchx
), 
Àn
)

	)

1294 
	#SEQ_WRPATCH2
(
∑tchx
, 
Àn
) \

1295 
	`OSS_wrôe_∑tch2
(
£qfd
, (*)(
∑tchx
), 
Àn
)

	)

1297 
	#SEQ_WRPATCH
(
∑tchx
, 
Àn
) \

1298 {i‡(
_£qbuÂå
Ë
	`SEQ_DUMPBUF
();\

1299 i‡(
	`wrôe
(
£qfd
, (*)(
∑tchx
), 
Àn
)==-1) \

1300 
	`≥º‹
("Wrôê∑tch: /dev/£quí˚r");}

	)

1301 
	#SEQ_WRPATCH2
(
∑tchx
, 
Àn
) \

1302 (
	`SEQ_DUMPBUF
(), 
	`wrôe
(
£qfd
, (*)(
∑tchx
), 
Àn
))

	)

	@/usr/include/sched.h

20 #i‚def 
_SCHED_H


21 
	#_SCHED_H
 1

	)

23 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	#__√ed_size_t


	)

29 
	~<°ddef.h
>

31 
	#__√ed_time•ec


	)

32 
	~<time.h
>

35 
	~<bôs/sched.h
>

37 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

40 
__BEGIN_DECLS


43 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

44 
__THROW
;

47 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

50 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

51 
__c⁄°
 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

54 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

57 
	$sched_yõld
 (Ë
__THROW
;

60 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

63 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

66 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

69 #ifde‡
__USE_GNU


71 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

72 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

73 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

74 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

75 
˝u£ç
)

	)

76 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

77 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

79 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

80 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

81 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

82 
˝u£ç
)

	)

83 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

84 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

86 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

87 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

88 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

89 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

91 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

92 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

93 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

94 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

95 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

96 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

97 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

98 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

99 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

101 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

104 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

105 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

106 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

110 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

111 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

114 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

115 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

118 
__END_DECLS


	@/usr/include/signal.h

23 #i‚def 
_SIGNAL_H


25 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


26 
	#_SIGNAL_H


	)

29 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


33 
	~<bôs/sig£t.h
>

37 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


38 #i‚de‡
__sig_©omic_t_deföed


39 
	#__sig_©omic_t_deföed


	)

40 
__BEGIN_NAMESPACE_STD


41 
__sig_©omic_t
 
	tsig_©omic_t
;

42 
	g__END_NAMESPACE_STD


44 #unde‡
__√ed_sig_©omic_t


47 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

48 #i‚de‡
__sig£t_t_deföed


49 
	#__sig£t_t_deföed


	)

50 
__sig£t_t
 
	tsig£t_t
;

52 #unde‡
__√ed_sig£t_t


55 #ifde‡
_SIGNAL_H


57 
	~<bôs/ty≥s.h
>

58 
	~<bôs/signum.h
>

60 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__pid_t_deföed


62 
__pid_t
 
	tpid_t
;

63 
	#__pid_t_deföed


	)

65 #ifde‡
__USE_XOPEN


67 #i‚de‡
__uid_t_deföed


68 
__uid_t
 
	tuid_t
;

69 
	#__uid_t_deföed


	)

75 (*
	t__sigh™dÀr_t
) ();

80 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

81 
__THROW
;

82 #ifde‡
__USE_GNU


83 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

84 
__THROW
;

90 
__BEGIN_NAMESPACE_STD


91 #ifde‡
__USE_BSD


92 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

93 
__THROW
;

96 #ifde‡
__REDIRECT_NTH


97 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

98 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

99 
__sysv_sig«l
);

101 
	#sig«l
 
__sysv_sig«l


	)

104 
__END_NAMESPACE_STD


106 #ifde‡
__USE_XOPEN


109 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

110 
__THROW
;

116 #ifde‡
__USE_POSIX


117 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

120 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


124 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

127 
__BEGIN_NAMESPACE_STD


129 
	$øi£
 (
__sig
Ë
__THROW
;

130 
__END_NAMESPACE_STD


132 #ifde‡
__USE_SVID


134 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

135 
__THROW
;

136 
	$gsig«l
 (
__sig
Ë
__THROW
;

139 #ifde‡
__USE_MISC


141 
	`psig«l
 (
__sig
, 
__c⁄°
 *
__s
);

153 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

155 #ifde‡
__FAVOR_BSD


158 
	$sig∑u£
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

160 #ifde‡
__USE_XOPEN


161 #ifde‡
__GNUC__


162 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

165 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

171 #ifde‡
__USE_BSD


178 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

181 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

184 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

187 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

191 #ifde‡
__USE_MISC


192 
	#NSIG
 
_NSIG


	)

195 #ifde‡
__USE_GNU


196 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

200 #ifde‡
__USE_BSD


201 
__sigh™dÀr_t
 
	tsig_t
;

204 #ifde‡
__USE_POSIX


206 #ifde‡
__USE_POSIX199309


208 
	#__√ed_time•ec


	)

209 
	~<time.h
>

212 
	~<bôs/sigöfo.h
>

216 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

219 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

222 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

228 
	$sigismembî
 (
__c⁄°
 
sig£t_t
 *
__£t
, 
__signo
)

229 
__THROW
 
	`__n⁄nuŒ
 ((1));

231 #ifde‡
__USE_GNU


233 
	$sigi£m±y£t
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

236 
	$sig™d£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

237 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

240 
	$sig‹£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

241 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

246 
	~<bôs/siga˘i⁄.h
>

249 
	$sig¥ocmask
 (
__how
, 
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

250 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

257 
	$sigsu•íd
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

260 
	$siga˘i⁄
 (
__sig
, 
__c⁄°
 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

261 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

264 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

271 
	$sigwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

272 
	`__n⁄nuŒ
 ((1, 2));

274 #ifde‡
__USE_POSIX199309


279 
	$sigwaôöfo
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

280 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

287 
	$sigtimedwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

288 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

289 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__timeout
)

290 
	`__n⁄nuŒ
 ((1));

294 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, 
__c⁄°
 
sigvÆ
 
__vÆ
)

295 
__THROW
;

300 #ifde‡
__USE_BSD


304 
__c⁄°
 *__c⁄° 
_sys_sigli°
[
_NSIG
];

305 
__c⁄°
 *__c⁄° 
sys_sigli°
[
_NSIG
];

308 
	ssigvec


310 
__sigh™dÀr_t
 
sv_h™dÀr
;

311 
sv_mask
;

313 
sv_Êags
;

314 
	#sv_⁄°ack
 
sv_Êags


	)

318 
	#SV_ONSTACK
 (1 << 0)

	)

319 
	#SV_INTERRUPT
 (1 << 1)

	)

320 
	#SV_RESETHAND
 (1 << 2)

	)

328 
	$sigvec
 (
__sig
, 
__c⁄°
 
sigvec
 *
__vec
,

329 
sigvec
 *
__ovec
Ë
__THROW
;

333 
	~<bôs/sigc⁄ãxt.h
>

336 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

341 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


342 
	#__√ed_size_t


	)

343 
	~<°ddef.h
>

348 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

350 
	~<bôs/sig°ack.h
>

351 #ifde‡
__USE_XOPEN


353 
	~<sys/uc⁄ãxt.h
>

359 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

360 
__THROW
 
__©åibuã_dïªˇãd__
;

364 
	$sigÆt°ack
 (
__c⁄°
 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

365 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

369 #ifde‡
__USE_XOPEN_EXTENDED


373 
	$sighﬁd
 (
__sig
Ë
__THROW
;

376 
	$sigªl£
 (
__sig
Ë
__THROW
;

379 
	$sigign‹e
 (
__sig
Ë
__THROW
;

382 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

385 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


388 
	~<bôs/±hªadty≥s.h
>

389 
	~<bôs/sigthªad.h
>

396 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

398 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

402 
__END_DECLS


	@/usr/include/sys/select.h

22 #i‚de‡
_SYS_SELECT_H


23 
	#_SYS_SELECT_H
 1

	)

25 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

31 
	~<bôs/£À˘.h
>

34 
	~<bôs/sig£t.h
>

36 #i‚de‡
__sig£t_t_deföed


37 
	#__sig£t_t_deföed


	)

38 
__sig£t_t
 
	tsig£t_t
;

42 
	#__√ed_time_t


	)

43 
	#__√ed_time•ec


	)

44 
	~<time.h
>

45 
	#__√ed_timevÆ


	)

46 
	~<bôs/time.h
>

48 #i‚de‡
__su£c⁄ds_t_deföed


49 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

50 
	#__su£c⁄ds_t_deföed


	)

55 
	t__fd_mask
;

58 #unde‡
__NFDBITS


59 #unde‡
__FDELT


60 #unde‡
__FDMASK


62 
	#__NFDBITS
 (8 *  (
__fd_mask
))

	)

63 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

64 
	#__FDMASK
(
d
Ë((
__fd_mask
Ë1 << ((dË% 
__NFDBITS
))

	)

71 #ifde‡
__USE_XOPEN


72 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

75 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

76 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

78 } 
	tfd_£t
;

81 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

83 #ifde‡
__USE_MISC


85 
__fd_mask
 
	tfd_mask
;

88 
	#NFDBITS
 
__NFDBITS


	)

93 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

94 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

95 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

96 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

99 
__BEGIN_DECLS


109 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

110 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

111 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

112 
timevÆ
 *
__ª°ri˘
 
__timeout
);

114 #ifde‡
__USE_XOPEN2K


121 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

122 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

123 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

124 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

125 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

128 
	g__END_DECLS


	@/usr/include/sys/sysmacros.h

21 #i‚de‡
_SYS_SYSMACROS_H


22 
	#_SYS_SYSMACROS_H
 1

	)

24 
	~<„©uªs.h
>

29 #ifde‡
__GLIBC_HAVE_LONG_LONG


30 
__exãnsi⁄__


31 
	$gnu_dev_maj‹
 (
__dev
)

32 
__THROW
;

33 
__exãnsi⁄__


34 
	$gnu_dev_mö‹
 (
__dev
)

35 
__THROW
;

36 
__exãnsi⁄__


37 
	$gnu_dev_makedev
 (
__maj‹
,

38 
__mö‹
)

39 
__THROW
;

41 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES


42 
__exãnsi⁄__
 
__exã∫_ölöe
 

43 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

45  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

46 
	}
}

48 
__exãnsi⁄__
 
__exã∫_ölöe
 

49 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

51  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

52 
	}
}

54 
__exãnsi⁄__
 
__exã∫_ölöe
 

55 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

57  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

58 | (((Ë(
__mö‹
 & ~0xff)) << 12)

59 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

60 
	}
}

65 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

66 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

67 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/sys/ttydefaults.h

40 #i‚de‡
_SYS_TTYDEFAULTS_H_


41 
	#_SYS_TTYDEFAULTS_H_


	)

46 
	#TTYDEF_IFLAG
 (
BRKINT
 | 
ISTRIP
 | 
ICRNL
 | 
IMAXBEL
 | 
IXON
 | 
IXANY
)

	)

47 
	#TTYDEF_OFLAG
 (
OPOST
 | 
ONLCR
 | 
XTABS
)

	)

48 
	#TTYDEF_LFLAG
 (
ECHO
 | 
ICANON
 | 
ISIG
 | 
IEXTEN
 | 
ECHOE
|
ECHOKE
|
ECHOCTL
)

	)

49 
	#TTYDEF_CFLAG
 (
CREAD
 | 
CS7
 | 
PARENB
 | 
HUPCL
)

	)

50 
	#TTYDEF_SPEED
 (
B9600
)

	)

55 
	#CTRL
(
x
Ë(x&037)

	)

56 
	#CEOF
 
	`CTRL
('d')

	)

57 #ifde‡
_POSIX_VDISABLE


58 
	#CEOL
 
_POSIX_VDISABLE


	)

60 
	#CEOL
 '\0'

	)

62 
	#CERASE
 0177

	)

63 
	#CINTR
 
	`CTRL
('c')

	)

64 #ifde‡
_POSIX_VDISABLE


65 
	#CSTATUS
 
_POSIX_VDISABLE


	)

67 
	#CSTATUS
 '\0'

	)

69 
	#CKILL
 
	`CTRL
('u')

	)

70 
	#CMIN
 1

	)

71 
	#CQUIT
 034

	)

72 
	#CSUSP
 
	`CTRL
('z')

	)

73 
	#CTIME
 0

	)

74 
	#CDSUSP
 
	`CTRL
('y')

	)

75 
	#CSTART
 
	`CTRL
('q')

	)

76 
	#CSTOP
 
	`CTRL
('s')

	)

77 
	#CLNEXT
 
	`CTRL
('v')

	)

78 
	#CDISCARD
 
	`CTRL
('o')

	)

79 
	#CWERASE
 
	`CTRL
('w')

	)

80 
	#CREPRINT
 
	`CTRL
('r')

	)

81 
	#CEOT
 
CEOF


	)

83 
	#CBRK
 
CEOL


	)

84 
	#CRPRNT
 
CREPRINT


	)

85 
	#CFLUSH
 
CDISCARD


	)

93 #ifde‡
TTYDEFCHARS


94 
cc_t
 
	gâydefch¨s
[
NCCS
] = {

95 
CEOF
, 
CEOL
, CEOL, 
CERASE
, 
CWERASE
, 
CKILL
, 
CREPRINT
,

96 
_POSIX_VDISABLE
, 
CINTR
, 
CQUIT
, 
CSUSP
, 
CDSUSP
, 
CSTART
, 
CSTOP
, 
CLNEXT
,

97 
CDISCARD
, 
CMIN
, 
CTIME
, 
CSTATUS
, 
_POSIX_VDISABLE


99 #unde‡
TTYDEFCHARS


	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

	@/usr/include/zconf.h

8 #i‚de‡
ZCONF_H


9 
	#ZCONF_H


	)

17 #ifde‡
Z_PREFIX


20 
	#_di°_code
 
z__di°_code


	)

21 
	#_Àngth_code
 
z__Àngth_code


	)

22 
	#_å_Æign
 
z__å_Æign


	)

23 
	#_å_Êush_block
 
z__å_Êush_block


	)

24 
	#_å_öô
 
z__å_öô


	)

25 
	#_å_°‹ed_block
 
z__å_°‹ed_block


	)

26 
	#_å_èŒy
 
z__å_èŒy


	)

27 
	#adÀr32
 
z_adÀr32


	)

28 
	#adÀr32_comböe
 
z_adÀr32_comböe


	)

29 
	#com¥ess
 
z_com¥ess


	)

30 
	#com¥ess2
 
z_com¥ess2


	)

31 
	#com¥essBound
 
z_com¥essBound


	)

32 
	#¸c32
 
z_¸c32


	)

33 
	#¸c32_comböe
 
z_¸c32_comböe


	)

34 
	#deÊ©e
 
z_deÊ©e


	)

35 
	#deÊ©eBound
 
z_deÊ©eBound


	)

36 
	#deÊ©eC›y
 
z_deÊ©eC›y


	)

37 
	#deÊ©eEnd
 
z_deÊ©eEnd


	)

38 
	#deÊ©eInô2_
 
z_deÊ©eInô2_


	)

39 
	#deÊ©eInô_
 
z_deÊ©eInô_


	)

40 
	#deÊ©eP¨ams
 
z_deÊ©eP¨ams


	)

41 
	#deÊ©ePrime
 
z_deÊ©ePrime


	)

42 
	#deÊ©eRe£t
 
z_deÊ©eRe£t


	)

43 
	#deÊ©eSëDi˘i⁄¨y
 
z_deÊ©eSëDi˘i⁄¨y


	)

44 
	#deÊ©eSëHódî
 
z_deÊ©eSëHódî


	)

45 
	#deÊ©eTu√
 
z_deÊ©eTu√


	)

46 
	#deÊ©e_c›yright
 
z_deÊ©e_c›yright


	)

47 
	#gë_¸c_èbÀ
 
z_gë_¸c_èbÀ


	)

48 
	#gz˛óªº
 
z_gz˛óªº


	)

49 
	#gz˛o£
 
z_gz˛o£


	)

50 
	#gzdúe˘
 
z_gzdúe˘


	)

51 
	#gzd›í
 
z_gzd›í


	)

52 
	#gzeof
 
z_gzeof


	)

53 
	#gzîr‹
 
z_gzîr‹


	)

54 
	#gzÊush
 
z_gzÊush


	)

55 
	#gzgëc
 
z_gzgëc


	)

56 
	#gzgës
 
z_gzgës


	)

57 
	#gz›í
 
z_gz›í


	)

58 
	#gz¥ötf
 
z_gz¥ötf


	)

59 
	#gzputc
 
z_gzputc


	)

60 
	#gzputs
 
z_gzputs


	)

61 
	#gzªad
 
z_gzªad


	)

62 
	#gzªwöd
 
z_gzªwöd


	)

63 
	#gz£ek
 
z_gz£ek


	)

64 
	#gz£ç¨ams
 
z_gz£ç¨ams


	)

65 
	#gzãŒ
 
z_gzãŒ


	)

66 
	#gzungëc
 
z_gzungëc


	)

67 
	#gzwrôe
 
z_gzwrôe


	)

68 
	#öÊ©e
 
z_öÊ©e


	)

69 
	#öÊ©eBack
 
z_öÊ©eBack


	)

70 
	#öÊ©eBackEnd
 
z_öÊ©eBackEnd


	)

71 
	#öÊ©eBackInô_
 
z_öÊ©eBackInô_


	)

72 
	#öÊ©eC›y
 
z_öÊ©eC›y


	)

73 
	#öÊ©eEnd
 
z_öÊ©eEnd


	)

74 
	#öÊ©eGëHódî
 
z_öÊ©eGëHódî


	)

75 
	#öÊ©eInô2_
 
z_öÊ©eInô2_


	)

76 
	#öÊ©eInô_
 
z_öÊ©eInô_


	)

77 
	#öÊ©ePrime
 
z_öÊ©ePrime


	)

78 
	#öÊ©eRe£t
 
z_öÊ©eRe£t


	)

79 
	#öÊ©eSëDi˘i⁄¨y
 
z_öÊ©eSëDi˘i⁄¨y


	)

80 
	#öÊ©eSync
 
z_öÊ©eSync


	)

81 
	#öÊ©eSyncPoöt
 
z_öÊ©eSyncPoöt


	)

82 
	#öÊ©e_c›yright
 
z_öÊ©e_c›yright


	)

83 
	#öÊ©e_Á°
 
z_öÊ©e_Á°


	)

84 
	#öÊ©e_èbÀ
 
z_öÊ©e_èbÀ


	)

85 
	#uncom¥ess
 
z_uncom¥ess


	)

86 
	#zEº‹
 
z_zEº‹


	)

87 
	#z_îrmsg
 
z_z_îrmsg


	)

88 
	#zˇŒoc
 
z_zˇŒoc


	)

89 
	#zc‰ì
 
z_zc‰ì


	)

90 
	#zlibCompûeFœgs
 
z_zlibCompûeFœgs


	)

91 
	#zlibVîsi⁄
 
z_zlibVîsi⁄


	)

94 
	#Byã
 
z_Byã


	)

95 
	#Byãf
 
z_Byãf


	)

96 
	#Æloc_func
 
z_Æloc_func


	)

97 
	#ch¨f
 
z_ch¨f


	)

98 
	#‰ì_func
 
z_‰ì_func


	)

99 
	#gzFûe
 
z_gzFûe


	)

100 
	#gz_hódî
 
z_gz_hódî


	)

101 
	#gz_hódîp
 
z_gz_hódîp


	)

102 
	#ö_func
 
z_ö_func


	)

103 
	#ötf
 
z_ötf


	)

104 
	#out_func
 
z_out_func


	)

105 
	#uI¡
 
z_uI¡


	)

106 
	#uI¡f
 
z_uI¡f


	)

107 
	#uL⁄g
 
z_uL⁄g


	)

108 
	#uL⁄gf
 
z_uL⁄gf


	)

109 
	#voidp
 
z_voidp


	)

110 
	#voidp
 
z_voidp


	)

111 
	#voidpc
 
z_voidpc


	)

112 
	#voidpc
 
z_voidpc


	)

113 
	#voidpf
 
z_voidpf


	)

114 
	#voidpf
 
z_voidpf


	)

115 
	#z_°ªam
 
z_z_°ªam


	)

116 
	#z_°ªamp
 
z_z_°ªamp


	)

119 
	#gz_hódî_s
 
z_gz_hódî_s


	)

120 
	#öã∫Æ_°©e
 
z_öã∫Æ_°©e


	)

121 
	#z_°ªam_s
 
z_z_°ªam_s


	)

125 #i‡
deföed
(
__MSDOS__
Ë&& !deföed(
MSDOS
)

126 
	#MSDOS


	)

128 #i‡(
deföed
(
OS_2
Ë|| deföed(
__OS2__
)Ë&& !deföed(
OS2
)

129 
	#OS2


	)

131 #i‡
deföed
(
_WINDOWS
Ë&& !deföed(
WINDOWS
)

132 
	#WINDOWS


	)

134 #i‡
deföed
(
_WIN32
Ë|| deföed(
_WIN32_WCE
Ë|| deföed(
__WIN32__
)

135 #i‚de‡
WIN32


136 
	#WIN32


	)

139 #i‡(
deföed
(
MSDOS
Ë|| deföed(
OS2
Ë|| deföed(
WINDOWS
)Ë&& !deföed(
WIN32
)

140 #i‡!
deföed
(
__GNUC__
Ë&& !deföed(
__FLAT__
Ë&& !deföed(
__386__
)

141 #i‚de‡
SYS16BIT


142 
	#SYS16BIT


	)

151 #ifde‡
SYS16BIT


152 
	#MAXSEG_64K


	)

154 #ifde‡
MSDOS


155 
	#UNALIGNED_OK


	)

158 #ifde‡
__STDC_VERSION__


159 #i‚de‡
STDC


160 
	#STDC


	)

162 #i‡
__STDC_VERSION__
 >= 199901L

163 #i‚de‡
STDC99


164 
	#STDC99


	)

168 #i‡!
deföed
(
STDC
Ë&& (deföed(
__STDC__
Ë|| deföed(
__˝lu•lus
))

169 
	#STDC


	)

171 #i‡!
deföed
(
STDC
Ë&& (deföed(
__GNUC__
Ë|| deföed(
__BORLANDC__
))

172 
	#STDC


	)

174 #i‡!
deföed
(
STDC
Ë&& (deföed(
MSDOS
Ë|| deföed(
WINDOWS
Ë|| deföed(
WIN32
))

175 
	#STDC


	)

177 #i‡!
deföed
(
STDC
Ë&& (deföed(
OS2
Ë|| deföed(
__HOS_AIX__
))

178 
	#STDC


	)

181 #i‡
deföed
(
__OS400__
Ë&& !deföed(
STDC
)

182 
	#STDC


	)

185 #i‚de‡
STDC


187 c⁄°

	)

192 #i‡
deföed
(
__MWERKS__
)||deföed(
≠∂ec
)||deföed(
THINK_C
)||deföed(
__SC__
)

193 
	#NO_DUMMY_DECL


	)

197 #i‚de‡
MAX_MEM_LEVEL


198 #ifde‡
MAXSEG_64K


199 
	#MAX_MEM_LEVEL
 8

	)

201 
	#MAX_MEM_LEVEL
 9

	)

210 #i‚de‡
MAX_WBITS


211 
	#MAX_WBITS
 15

	)

229 #i‚de‡
OF


230 #ifde‡
STDC


231 
	#OF
(
¨gs
Ë
	)
args

233 
	#OF
(
¨gs
Ë()

	)

243 #ifde‡
SYS16BIT


244 #i‡
deföed
(
M_I86SM
Ë|| deföed(
M_I86MM
)

246 
	#SMALL_MEDIUM


	)

247 #ifde‡
_MSC_VER


248 
	#FAR
 
_Ár


	)

250 
	#FAR
 
Ár


	)

253 #i‡(
deföed
(
__SMALL__
Ë|| deföed(
__MEDIUM__
))

255 
	#SMALL_MEDIUM


	)

256 #ifde‡
__BORLANDC__


257 
	#FAR
 
_Ár


	)

259 
	#FAR
 
Ár


	)

264 #i‡
deföed
(
WINDOWS
Ë|| deföed(
WIN32
)

268 #ifde‡
ZLIB_DLL


269 #i‡
deföed
(
WIN32
Ë&& (!deföed(
__BORLANDC__
) || (__BORLANDC__ >= 0x500))

270 #ifde‡
ZLIB_INTERNAL


271 
	#ZEXTERN
 
	`__de˛•ec
(
dŒexp‹t
)

	)

273 
	#ZEXTERN
 
	`__de˛•ec
(
dŒimp‹t
)

	)

281 #ifde‡
ZLIB_WINAPI


282 #ifde‡
FAR


283 #unde‡
FAR


285 
	~<wödows.h
>

288 
	#ZEXPORT
 
WINAPI


	)

289 #ifde‡
WIN32


290 
	#ZEXPORTVA
 
WINAPIV


	)

292 
	#ZEXPORTVA
 
FAR
 
CDECL


	)

297 #i‡
deföed
 (
__BEOS__
)

298 #ifde‡
ZLIB_DLL


299 #ifde‡
ZLIB_INTERNAL


300 
	#ZEXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

301 
	#ZEXPORTVA
 
	`__de˛•ec
(
dŒexp‹t
)

	)

303 
	#ZEXPORT
 
	`__de˛•ec
(
dŒimp‹t
)

	)

304 
	#ZEXPORTVA
 
	`__de˛•ec
(
dŒimp‹t
)

	)

309 #ifde‡
HAVE_VISIBILITY_PRAGMA


310 
	#ZEXTERN
 
	`__©åibuã__
((
	`visibûôy
 ("deÁu…"))Ë

	)

313 #i‚de‡
ZEXTERN


314 
	#ZEXTERN
 

	)

316 #i‚de‡
ZEXPORT


317 
	#ZEXPORT


	)

319 #i‚de‡
ZEXPORTVA


320 
	#ZEXPORTVA


	)

323 #i‚de‡
FAR


324 
	#FAR


	)

327 #i‡!
deföed
(
__MACTYPES__
)

328 
	tByã
;

330 
	tuI¡
;

331 
	tuL⁄g
;

333 #ifde‡
SMALL_MEDIUM


335 
	#Byãf
 
Byã
 
FAR


	)

337 
Byã
 
	tFAR
 
	tByãf
;

339 
	tFAR
 
	tch¨f
;

340 
	tFAR
 
	tötf
;

341 
uI¡
 
	tFAR
 
	tuI¡f
;

342 
uL⁄g
 
	tFAR
 
	tuL⁄gf
;

344 #ifde‡
STDC


345 c⁄° *
	tvoidpc
;

346 
	tFAR
 *
	tvoidpf
;

347 *
	tvoidp
;

349 
Byã
 c⁄° *
	tvoidpc
;

350 
Byã
 
	tFAR
 *
	tvoidpf
;

351 
Byã
 *
	tvoidp
;

354 
	~"zlibdefs.h
"

356 #ifde‡
_LARGEFILE64_SOURCE


357 
	~<sys/ty≥s.h
>

360 #i‚de‡
SEEK_SET


361 
	#SEEK_SET
 0

	)

362 
	#SEEK_CUR
 1

	)

363 
	#SEEK_END
 2

	)

365 #i‚de‡
z_off_t


366 
	#z_off_t
 

	)

369 #i‡
deföed
(
__OS400__
)

370 
	#NO_v¢¥ötf


	)

373 #i‡
deföed
(
__MVS__
)

374 
	#NO_v¢¥ötf


	)

378 #i‡
deföed
(
__MVS__
)

379 #¥agm®
m≠
(
deÊ©eInô_
,"DEIN")

380 #¥agm®
m≠
(
deÊ©eInô2_
,"DEIN2")

381 #¥agm®
m≠
(
deÊ©eEnd
,"DEEND")

382 #¥agm®
m≠
(
deÊ©eBound
,"DEBND")

383 #¥agm®
m≠
(
öÊ©eInô_
,"ININ")

384 #¥agm®
m≠
(
öÊ©eInô2_
,"ININ2")

385 #¥agm®
m≠
(
öÊ©eEnd
,"INEND")

386 #¥agm®
m≠
(
öÊ©eSync
,"INSY")

387 #¥agm®
m≠
(
öÊ©eSëDi˘i⁄¨y
,"INSEDI")

388 #¥agm®
m≠
(
com¥essBound
,"CMBND")

389 #¥agm®
m≠
(
öÊ©e_èbÀ
,"INTABL")

390 #¥agm®
m≠
(
öÊ©e_Á°
,"INFA")

391 #¥agm®
m≠
(
öÊ©e_c›yright
,"INCOPY")

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

21 
	#_G_size_t
 
size_t


	)

24 
__off_t
 
	m__pos
;

25 
__mb°©e_t
 
	m__°©e
;

26 } 
	t_G_Âos_t
;

29 
__off64_t
 
	m__pos
;

30 
__mb°©e_t
 
	m__°©e
;

31 } 
	t_G_Âos64_t
;

32 
	#_G_ssize_t
 
__ssize_t


	)

33 
	#_G_off_t
 
__off_t


	)

34 
	#_G_off64_t
 
__off64_t


	)

35 
	#_G_pid_t
 
__pid_t


	)

36 
	#_G_uid_t
 
__uid_t


	)

37 
	#_G_wch¨_t
 
wch¨_t


	)

38 
	#_G_wöt_t
 
wöt_t


	)

39 
	#_G_°©64
 
°©64


	)

40 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


41 
	~<gc⁄v.h
>

44 
__gc⁄v_öfo
 
	m__cd
;

47 
__gc⁄v_öfo
 
	m__cd
;

48 
__gc⁄v_°ï_d©a
 
	m__d©a
;

49 } 
	m__comböed
;

50 } 
	t_G_ic⁄v_t
;

53 
	t_G_öt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

54 
	t_G_öt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

55 
	t_G_uöt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

56 
	t_G_uöt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

58 
	#_G_HAVE_BOOL
 1

	)

62 
	#_G_HAVE_ATEXIT
 1

	)

63 
	#_G_HAVE_SYS_CDEFS
 1

	)

64 
	#_G_HAVE_SYS_WAIT
 1

	)

65 
	#_G_NEED_STDARG_H
 1

	)

66 
	#_G_va_li°
 
__gnuc_va_li°


	)

68 
	#_G_HAVE_PRINTF_FP
 1

	)

69 
	#_G_HAVE_MMAP
 1

	)

70 
	#_G_HAVE_MREMAP
 1

	)

71 
	#_G_HAVE_LONG_DOUBLE_IO
 1

	)

72 
	#_G_HAVE_IO_FILE_OPEN
 1

	)

73 
	#_G_HAVE_IO_GETLINE_INFO
 1

	)

75 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

77 
	#_G_OPEN64
 
__›í64


	)

78 
	#_G_LSEEK64
 
__l£ek64


	)

79 
	#_G_MMAP64
 
__mm≠64


	)

80 
	#_G_FSTAT64
(
fd
,
buf
Ë
	`__fx°©64
 (
_STAT_VER
, fd, buf)

	)

83 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

85 
	#_G_BUFSIZ
 8192

	)

88 
	#_G_NAMES_HAVE_UNDERSCORE
 0

	)

89 
	#_G_VTABLE_LABEL_HAS_LENGTH
 1

	)

90 
	#_G_USING_THUNKS
 1

	)

91 
	#_G_VTABLE_LABEL_PREFIX
 "__vt_"

	)

92 
	#_G_VTABLE_LABEL_PREFIX_ID
 
__vt_


	)

95 #i‡
deföed
 
__˝lu•lus
 || deföed 
__STDC__


96 
	#_G_ARGS
(
ARGLIST
Ë
	)
ARGLIST

98 
	#_G_ARGS
(
ARGLIST
Ë()

	)

	@/usr/include/asm-generic/int-ll64.h

8 #i‚de‡
_ASM_GENERIC_INT_LL64_H


9 
	#_ASM_GENERIC_INT_LL64_H


	)

11 #i‚de‡
__ASSEMBLY__


17 
__sig√d__
 
	t__s8
;

18 
	t__u8
;

20 
__sig√d__
 
	t__s16
;

21 
	t__u16
;

23 
__sig√d__
 
	t__s32
;

24 
	t__u32
;

26 #ifde‡
__GNUC__


27 
__exãnsi⁄__
 
__sig√d__
 
	t__s64
;

28 
__exãnsi⁄__
 
	t__u64
;

30 
__sig√d__
 
	t__s64
;

31 
	t__u64
;

	@/usr/include/asm/ioctls.h

1 #i‚de‡
_ASM_X86_IOCTLS_H


2 
	#_ASM_X86_IOCTLS_H


	)

4 
	~<asm/io˘l.h
>

8 
	#TCGETS
 0x5401

	)

9 
	#TCSETS
 0x5402

	)

10 
	#TCSETSW
 0x5403

	)

11 
	#TCSETSF
 0x5404

	)

12 
	#TCGETA
 0x5405

	)

13 
	#TCSETA
 0x5406

	)

14 
	#TCSETAW
 0x5407

	)

15 
	#TCSETAF
 0x5408

	)

16 
	#TCSBRK
 0x5409

	)

17 
	#TCXONC
 0x540A

	)

18 
	#TCFLSH
 0x540B

	)

19 
	#TIOCEXCL
 0x540C

	)

20 
	#TIOCNXCL
 0x540D

	)

21 
	#TIOCSCTTY
 0x540E

	)

22 
	#TIOCGPGRP
 0x540F

	)

23 
	#TIOCSPGRP
 0x5410

	)

24 
	#TIOCOUTQ
 0x5411

	)

25 
	#TIOCSTI
 0x5412

	)

26 
	#TIOCGWINSZ
 0x5413

	)

27 
	#TIOCSWINSZ
 0x5414

	)

28 
	#TIOCMGET
 0x5415

	)

29 
	#TIOCMBIS
 0x5416

	)

30 
	#TIOCMBIC
 0x5417

	)

31 
	#TIOCMSET
 0x5418

	)

32 
	#TIOCGSOFTCAR
 0x5419

	)

33 
	#TIOCSSOFTCAR
 0x541A

	)

34 
	#FIONREAD
 0x541B

	)

35 
	#TIOCINQ
 
FIONREAD


	)

36 
	#TIOCLINUX
 0x541C

	)

37 
	#TIOCCONS
 0x541D

	)

38 
	#TIOCGSERIAL
 0x541E

	)

39 
	#TIOCSSERIAL
 0x541F

	)

40 
	#TIOCPKT
 0x5420

	)

41 
	#FIONBIO
 0x5421

	)

42 
	#TIOCNOTTY
 0x5422

	)

43 
	#TIOCSETD
 0x5423

	)

44 
	#TIOCGETD
 0x5424

	)

45 
	#TCSBRKP
 0x5425

	)

47 
	#TIOCSBRK
 0x5427

	)

48 
	#TIOCCBRK
 0x5428

	)

49 
	#TIOCGSID
 0x5429

	)

50 
	#TCGETS2
 
	`_IOR
('T', 0x2A, 
ãrmios2
)

	)

51 
	#TCSETS2
 
	`_IOW
('T', 0x2B, 
ãrmios2
)

	)

52 
	#TCSETSW2
 
	`_IOW
('T', 0x2C, 
ãrmios2
)

	)

53 
	#TCSETSF2
 
	`_IOW
('T', 0x2D, 
ãrmios2
)

	)

54 
	#TIOCGPTN
 
	`_IOR
('T', 0x30, )

	)

56 
	#TIOCSPTLCK
 
	`_IOW
('T', 0x31, Ë

	)

58 
	#FIONCLEX
 0x5450

	)

59 
	#FIOCLEX
 0x5451

	)

60 
	#FIOASYNC
 0x5452

	)

61 
	#TIOCSERCONFIG
 0x5453

	)

62 
	#TIOCSERGWILD
 0x5454

	)

63 
	#TIOCSERSWILD
 0x5455

	)

64 
	#TIOCGLCKTRMIOS
 0x5456

	)

65 
	#TIOCSLCKTRMIOS
 0x5457

	)

66 
	#TIOCSERGSTRUCT
 0x5458

	)

67 
	#TIOCSERGETLSR
 0x5459

	)

68 
	#TIOCSERGETMULTI
 0x545A

	)

69 
	#TIOCSERSETMULTI
 0x545B

	)

71 
	#TIOCMIWAIT
 0x545C

	)

72 
	#TIOCGICOUNT
 0x545D

	)

73 
	#TIOCGHAYESESP
 0x545E

	)

74 
	#TIOCSHAYESESP
 0x545F

	)

75 
	#FIOQSIZE
 0x5460

	)

78 
	#TIOCPKT_DATA
 0

	)

79 
	#TIOCPKT_FLUSHREAD
 1

	)

80 
	#TIOCPKT_FLUSHWRITE
 2

	)

81 
	#TIOCPKT_STOP
 4

	)

82 
	#TIOCPKT_START
 8

	)

83 
	#TIOCPKT_NOSTOP
 16

	)

84 
	#TIOCPKT_DOSTOP
 32

	)

86 
	#TIOCSER_TEMT
 0x01

	)

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/libio-ldbl.h

20 #i‚de‡
_IO_STDIO_H


24 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

25 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/local_lim.h

25 #i‚de‡
NR_OPEN


26 
	#__undef_NR_OPEN


	)

28 #i‚de‡
LINK_MAX


29 
	#__undef_LINK_MAX


	)

31 #i‚de‡
OPEN_MAX


32 
	#__undef_OPEN_MAX


	)

34 #i‚de‡
ARG_MAX


35 
	#__undef_ARG_MAX


	)

39 
	~<löux/limôs.h
>

42 #ifde‡
__undef_NR_OPEN


43 #unde‡
NR_OPEN


44 #unde‡
__undef_NR_OPEN


47 #ifde‡
__undef_LINK_MAX


48 #unde‡
LINK_MAX


49 #unde‡
__undef_LINK_MAX


52 #ifde‡
__undef_OPEN_MAX


53 #unde‡
OPEN_MAX


54 #unde‡
__undef_OPEN_MAX


57 #ifde‡
__undef_ARG_MAX


58 #unde‡
ARG_MAX


59 #unde‡
__undef_ARG_MAX


63 
	#_POSIX_THREAD_KEYS_MAX
 128

	)

65 
	#PTHREAD_KEYS_MAX
 1024

	)

68 
	#_POSIX_THREAD_DESTRUCTOR_ITERATIONS
 4

	)

70 
	#PTHREAD_DESTRUCTOR_ITERATIONS
 
_POSIX_THREAD_DESTRUCTOR_ITERATIONS


	)

73 
	#_POSIX_THREAD_THREADS_MAX
 64

	)

75 #unde‡
PTHREAD_THREADS_MAX


79 
	#AIO_PRIO_DELTA_MAX
 20

	)

82 
	#PTHREAD_STACK_MIN
 16384

	)

85 
	#DELAYTIMER_MAX
 2147483647

	)

88 
	#TTY_NAME_MAX
 32

	)

91 
	#LOGIN_NAME_MAX
 256

	)

94 
	#HOST_NAME_MAX
 64

	)

97 
	#MQ_PRIO_MAX
 32768

	)

100 
	#SEM_VALUE_MAX
 (2147483647)

	)

	@/usr/include/bits/sched.h

22 #i‚de‡
__√ed_sched∑øm


24 #i‚de‡
_SCHED_H


30 
	#SCHED_OTHER
 0

	)

31 
	#SCHED_FIFO
 1

	)

32 
	#SCHED_RR
 2

	)

33 #ifde‡
__USE_GNU


34 
	#SCHED_BATCH
 3

	)

37 #ifde‡
__USE_MISC


39 
	#CSIGNAL
 0x000000f‡

	)

40 
	#CLONE_VM
 0x00000100

	)

41 
	#CLONE_FS
 0x00000200

	)

42 
	#CLONE_FILES
 0x00000400

	)

43 
	#CLONE_SIGHAND
 0x00000800

	)

44 
	#CLONE_PTRACE
 0x00002000

	)

45 
	#CLONE_VFORK
 0x00004000

	)

47 
	#CLONE_PARENT
 0x00008000

	)

49 
	#CLONE_THREAD
 0x00010000

	)

50 
	#CLONE_NEWNS
 0x00020000

	)

51 
	#CLONE_SYSVSEM
 0x00040000

	)

52 
	#CLONE_SETTLS
 0x00080000

	)

53 
	#CLONE_PARENT_SETTID
 0x00100000

	)

55 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

57 
	#CLONE_DETACHED
 0x00400000

	)

58 
	#CLONE_UNTRACED
 0x00800000

	)

60 
	#CLONE_CHILD_SETTID
 0x01000000

	)

62 
	#CLONE_NEWUTS
 0x04000000

	)

63 
	#CLONE_NEWIPC
 0x08000000

	)

64 
	#CLONE_NEWUSER
 0x10000000

	)

65 
	#CLONE_NEWPID
 0x20000000

	)

66 
	#CLONE_NEWNET
 0x40000000

	)

67 
	#CLONE_IO
 0x80000000

	)

71 
	ssched_∑øm


73 
	m__sched_¥i‹ôy
;

76 
	g__BEGIN_DECLS


78 #ifde‡
__USE_MISC


80 
˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

81 
__Êags
, *
__¨g
, ...Ë
__THROW
;

84 
	$unsh¨e
 (
__Êags
Ë
__THROW
;

87 
	$sched_gë˝u
 (Ë
__THROW
;

90 
__END_DECLS


94 #i‡!
deföed
 
__deföed_sched∑øm
 \

95 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

96 
	#__deföed_sched∑øm
 1

	)

98 
	s__sched_∑øm


100 
__sched_¥i‹ôy
;

102 #unde‡
__√ed_sched∑øm


106 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


107 
	#__˝u_£t_t_deföed


	)

109 
	#__CPU_SETSIZE
 1024

	)

110 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

113 
	t__˝u_mask
;

116 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

117 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

122 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

123 } 
	t˝u_£t_t
;

126 #i‡
	`__GNUC_PREREQ
 (2, 91)

127 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

128 dÿ
	`__buûtö_mem£t
 (
˝u£ç
, '\0', 
£tsize
); 0)

	)

130 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

132 
size_t
 
__i
; \

133 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

134 
˝u_£t_t
 *
__¨r
 = (
˝u£ç
); \

135 
__i
 = 0; __ò< 
__imax
; ++__i) \

136 
__¨r
->
__bôs
[
__i
] = 0; \

137 
	}
} 0)

	)

139 
	#__CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

140 (
__exãnsi⁄__
 \

141 ({ 
size_t
 
__˝u
 = (
˝u
); \

142 
__˝u
 < 8 * (
£tsize
) \

143 ? ((
˝u£ç
)->
__bôs
[
	`__CPUELT
 (
__˝u
)] |
	`__CPUMASK
 (__˝u)Ë: 0; }))

	)

144 
	#__CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

145 (
__exãnsi⁄__
 \

146 ({ 
size_t
 
__˝u
 = (
˝u
); \

147 
__˝u
 < 8 * (
£tsize
) \

148 ? ((
˝u£ç
)->
__bôs
[
	`__CPUELT
 (
__˝u
)] &~
	`__CPUMASK
 (__˝u)Ë: 0; }))

	)

149 
	#__CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

150 (
__exãnsi⁄__
 \

151 ({ 
size_t
 
__˝u
 = (
˝u
); \

152 
__˝u
 < 8 * (
£tsize
) \

153 ? (((
˝u£ç
)->
__bôs
[
	`__CPUELT
 (
__˝u
)] & 
	`__CPUMASK
 (__cpu))) != 0 \

154 : 0; }))

	)

156 
	#__CPU_COUNT_S
(
£tsize
, 
˝u£ç
) \

157 
	`__sched_˝ucou¡
 (
£tsize
, 
˝u£ç
)

	)

159 #i‡
__GNUC_PREREQ
 (2, 91)

160 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

161 (
	`__buûtö_memcmp
 (
˝u£ç1
, 
˝u£ç2
, 
£tsize
Ë=0)

	)

163 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

164 (
__exãnsi⁄__
 \

165 ({ 
˝u_£t_t
 *
__¨r1
 = (
˝u£ç1
); \

166 
˝u_£t_t
 *
__¨r2
 = (
˝u£ç2
); \

167 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

168 
size_t
 
__i
; \

169 
__i
 = 0; __ò< 
__imax
; ++__i) \

170 i‡(
__¨r1
->
__bôs
[
__i
] !
__¨r2
->__bits[__i]) \

172 
__i
 =
__imax
; }))

	)

175 
	#__CPU_OP_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, 
›
) \

176 (
__exãnsi⁄__
 \

177 ({ 
˝u_£t_t
 *
__de°
 = (
de°£t
); \

178 
˝u_£t_t
 *
__¨r1
 = (
§c£t1
); \

179 
˝u_£t_t
 *
__¨r2
 = (
§c£t2
); \

180 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

181 
size_t
 
__i
; \

182 
__i
 = 0; __ò< 
__imax
; ++__i) \

183 
__de°
->
__bôs
[
__i
] = 
__¨r1
->__bôs[__i] 
›
 
__¨r2
->__bits[__i]; \

184 
__de°
; }))

	)

186 
	#__CPU_ALLOC_SIZE
(
cou¡
) \

187 ((((
cou¡
Ë+ 
__NCPUBITS
 - 1Ë/ __NCPUBITSË* 8)

	)

188 
	#__CPU_ALLOC
(
cou¡
Ë
	`__sched_˝uÆloc
 (cou¡)

	)

189 
	#__CPU_FREE
(
˝u£t
Ë
	`__sched_˝u‰ì
 (˝u£t)

	)

191 
__BEGIN_DECLS


193 
	$__sched_˝ucou¡
 (
size_t
 
__£tsize
, c⁄° 
˝u_£t_t
 *
__£ç
)

194 
__THROW
;

195 
˝u_£t_t
 *
	$__sched_˝uÆloc
 (
size_t
 
__cou¡
Ë
__THROW
 
__wur
;

196 
	$__sched_˝u‰ì
 (
˝u_£t_t
 *
__£t
Ë
__THROW
;

198 
__END_DECLS


	@/usr/include/bits/select.h

19 #i‚de‡
_SYS_SELECT_H


26 
	#__FD_ZERO
(
s
) \

28 
__i
; \

29 
fd_£t
 *
__¨r
 = (
s
); \

30 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

31 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

32 } 0)

	)

33 
	#__FD_SET
(
d
, 
s
Ë(
	`__FDS_BITS
 (s)[
	`__FDELT
(d)] |
	`__FDMASK
(d))

	)

34 
	#__FD_CLR
(
d
, 
s
Ë(
	`__FDS_BITS
 (s)[
	`__FDELT
(d)] &~
	`__FDMASK
(d))

	)

35 
	#__FD_ISSET
(
d
, 
s
Ë((
	`__FDS_BITS
 (s)[
	`__FDELT
(d)] & 
	`__FDMASK
(d)Ë!0)

	)

	@/usr/include/bits/sigaction.h

20 #i‚de‡
_SIGNAL_H


25 
	ssiga˘i⁄


28 #ifde‡
__USE_POSIX199309


32 
__sigh™dÀr_t
 
	mß_h™dÀr
;

34 (*
	mß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

36 
	m__siga˘i⁄_h™dÀr
;

37 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

38 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

40 
__sigh™dÀr_t
 
	mß_h™dÀr
;

44 
__sig£t_t
 
	mß_mask
;

47 
	mß_Êags
;

50 (*
	mß_ª°‹î
) ();

54 
	#SA_NOCLDSTOP
 1

	)

55 
	#SA_NOCLDWAIT
 2

	)

56 
	#SA_SIGINFO
 4

	)

58 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC


59 
	#SA_ONSTACK
 0x08000000

	)

60 
	#SA_RESTART
 0x10000000

	)

61 
	#SA_NODEFER
 0x40000000

	)

63 
	#SA_RESETHAND
 0x80000000

	)

65 #ifde‡
__USE_MISC


66 
	#SA_INTERRUPT
 0x20000000

	)

69 
	#SA_NOMASK
 
SA_NODEFER


	)

70 
	#SA_ONESHOT
 
SA_RESETHAND


	)

71 
	#SA_STACK
 
SA_ONSTACK


	)

75 
	#SIG_BLOCK
 0

	)

76 
	#SIG_UNBLOCK
 1

	)

77 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

19 #i‚de‡
_BITS_SIGCONTEXT_H


20 
	#_BITS_SIGCONTEXT_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


26 
	~<bôs/w‹dsize.h
>

28 
	s_Âªg


30 
	msignifiˇnd
[4];

31 
	mexp⁄ít
;

34 
	s_Âxªg


36 
	msignifiˇnd
[4];

37 
	mexp⁄ít
;

38 
	m∑ddög
[3];

41 
	s_xmmªg


43 
__uöt32_t
 
	mñemít
[4];

48 #i‡
__WORDSIZE
 == 32

50 
	s_Â°©e


53 
__uöt32_t
 
	mcw
;

54 
__uöt32_t
 
	msw
;

55 
__uöt32_t
 
	mèg
;

56 
__uöt32_t
 
	mùoff
;

57 
__uöt32_t
 
	mcs£l
;

58 
__uöt32_t
 
	md©aoff
;

59 
__uöt32_t
 
	md©a£l
;

60 
_Âªg
 
	m_°
[8];

61 
	m°©us
;

62 
	mmagic
;

65 
__uöt32_t
 
	m_fx§_ív
[6];

66 
__uöt32_t
 
	mmxc§
;

67 
__uöt32_t
 
	mª£rved
;

68 
_Âxªg
 
	m_fx§_°
[8];

69 
_xmmªg
 
	m_xmm
[8];

70 
__uöt32_t
 
	m∑ddög
[56];

73 #i‚de‡
sigc⁄ãxt_°ru˘


78 
	#sigc⁄ãxt_°ru˘
 
sigc⁄ãxt


	)

81 
	ssigc⁄ãxt


83 
	mgs
, 
	m__gsh
;

84 
	mfs
, 
	m__fsh
;

85 
	mes
, 
	m__esh
;

86 
	mds
, 
	m__dsh
;

87 
	medi
;

88 
	mesi
;

89 
	mebp
;

90 
	me•
;

91 
	mebx
;

92 
	medx
;

93 
	mecx
;

94 
	móx
;

95 
	må≠no
;

96 
	mîr
;

97 
	meù
;

98 
	mcs
, 
	m__csh
;

99 
	meÊags
;

100 
	me•_©_sig«l
;

101 
	mss
, 
	m__ssh
;

102 
_Â°©e
 * 
	mÂ°©e
;

103 
	mﬁdmask
;

104 
	m¸2
;

109 
	s_Â°©e


112 
__uöt16_t
 
	mcwd
;

113 
__uöt16_t
 
	mswd
;

114 
__uöt16_t
 
	m·w
;

115 
__uöt16_t
 
	mf›
;

116 
__uöt64_t
 
	mrù
;

117 
__uöt64_t
 
	mrdp
;

118 
__uöt32_t
 
	mmxc§
;

119 
__uöt32_t
 
	mmx¸_mask
;

120 
_Âxªg
 
	m_°
[8];

121 
_xmmªg
 
	m_xmm
[16];

122 
__uöt32_t
 
	m∑ddög
[24];

125 
	ssigc⁄ãxt


127 
	mr8
;

128 
	mr9
;

129 
	mr10
;

130 
	mr11
;

131 
	mr12
;

132 
	mr13
;

133 
	mr14
;

134 
	mr15
;

135 
	mrdi
;

136 
	mrsi
;

137 
	mrbp
;

138 
	mrbx
;

139 
	mrdx
;

140 
	møx
;

141 
	mrcx
;

142 
	mr•
;

143 
	mrù
;

144 
	meÊags
;

145 
	mcs
;

146 
	mgs
;

147 
	mfs
;

148 
	m__∑d0
;

149 
	mîr
;

150 
	må≠no
;

151 
	mﬁdmask
;

152 
	m¸2
;

153 
_Â°©e
 * 
	mÂ°©e
;

154 
	m__ª£rved1
 [8];

	@/usr/include/bits/siginfo.h

20 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
__√ed_sigöfo_t
 \

21 && !
deföed
 
	g__√ed_sigevít_t


25 
	~<bôs/w‹dsize.h
>

27 #i‡(!
deföed
 
__have_sigvÆ_t
 \

28 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
 \

29 || 
deföed
 
	g__√ed_sigevít_t
))

30 
	#__have_sigvÆ_t
 1

	)

33 
	usigvÆ


35 
	msivÆ_öt
;

36 *
	msivÆ_±r
;

37 } 
	tsigvÆ_t
;

40 #i‡(!
deföed
 
__have_sigöfo_t
 \

41 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
))

42 
	#__have_sigöfo_t
 1

	)

44 
	#__SI_MAX_SIZE
 128

	)

45 #i‡
__WORDSIZE
 == 64

46 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

48 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

51 
	ssigöfo


53 
	msi_signo
;

54 
	msi_î∫o
;

56 
	msi_code
;

60 
	m_∑d
[
__SI_PAD_SIZE
];

65 
__pid_t
 
	msi_pid
;

66 
__uid_t
 
	msi_uid
;

67 } 
	m_kûl
;

72 
	msi_tid
;

73 
	msi_ovîrun
;

74 
sigvÆ_t
 
	msi_sigvÆ
;

75 } 
	m_timî
;

80 
__pid_t
 
	msi_pid
;

81 
__uid_t
 
	msi_uid
;

82 
sigvÆ_t
 
	msi_sigvÆ
;

83 } 
	m_π
;

88 
__pid_t
 
	msi_pid
;

89 
__uid_t
 
	msi_uid
;

90 
	msi_°©us
;

91 
__˛ock_t
 
	msi_utime
;

92 
__˛ock_t
 
	msi_°ime
;

93 } 
	m_sigchld
;

98 *
	msi_addr
;

99 } 
	m_sigÁu…
;

104 
	msi_b™d
;

105 
	msi_fd
;

106 } 
	m_sigpﬁl
;

107 } 
	m_sifõlds
;

108 } 
	tsigöfo_t
;

112 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

113 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

114 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

115 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

116 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

117 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

118 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

119 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

120 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

121 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

122 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

123 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

124 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

131 
	mSI_ASYNCNL
 = -60,

132 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

133 
	mSI_TKILL
 = -6,

134 
	#SI_TKILL
 
SI_TKILL


	)

135 
	mSI_SIGIO
,

136 
	#SI_SIGIO
 
SI_SIGIO


	)

137 
	mSI_ASYNCIO
,

138 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

139 
	mSI_MESGQ
,

140 
	#SI_MESGQ
 
SI_MESGQ


	)

141 
	mSI_TIMER
,

142 
	#SI_TIMER
 
SI_TIMER


	)

143 
	mSI_QUEUE
,

144 
	#SI_QUEUE
 
SI_QUEUE


	)

145 
	mSI_USER
,

146 
	#SI_USER
 
SI_USER


	)

147 
	mSI_KERNEL
 = 0x80

148 
	#SI_KERNEL
 
SI_KERNEL


	)

155 
	mILL_ILLOPC
 = 1,

156 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

157 
	mILL_ILLOPN
,

158 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

159 
	mILL_ILLADR
,

160 
	#ILL_ILLADR
 
ILL_ILLADR


	)

161 
	mILL_ILLTRP
,

162 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

163 
	mILL_PRVOPC
,

164 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

165 
	mILL_PRVREG
,

166 
	#ILL_PRVREG
 
ILL_PRVREG


	)

167 
	mILL_COPROC
,

168 
	#ILL_COPROC
 
ILL_COPROC


	)

169 
	mILL_BADSTK


170 
	#ILL_BADSTK
 
ILL_BADSTK


	)

176 
	mFPE_INTDIV
 = 1,

177 
	#FPE_INTDIV
 
FPE_INTDIV


	)

178 
	mFPE_INTOVF
,

179 
	#FPE_INTOVF
 
FPE_INTOVF


	)

180 
	mFPE_FLTDIV
,

181 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

182 
	mFPE_FLTOVF
,

183 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

184 
	mFPE_FLTUND
,

185 
	#FPE_FLTUND
 
FPE_FLTUND


	)

186 
	mFPE_FLTRES
,

187 
	#FPE_FLTRES
 
FPE_FLTRES


	)

188 
	mFPE_FLTINV
,

189 
	#FPE_FLTINV
 
FPE_FLTINV


	)

190 
	mFPE_FLTSUB


191 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

197 
	mSEGV_MAPERR
 = 1,

198 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

199 
	mSEGV_ACCERR


200 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

206 
	mBUS_ADRALN
 = 1,

207 
	#BUS_ADRALN
 
BUS_ADRALN


	)

208 
	mBUS_ADRERR
,

209 
	#BUS_ADRERR
 
BUS_ADRERR


	)

210 
	mBUS_OBJERR


211 
	#BUS_OBJERR
 
BUS_OBJERR


	)

217 
	mTRAP_BRKPT
 = 1,

218 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

219 
	mTRAP_TRACE


220 
	#TRAP_TRACE
 
TRAP_TRACE


	)

226 
	mCLD_EXITED
 = 1,

227 
	#CLD_EXITED
 
CLD_EXITED


	)

228 
	mCLD_KILLED
,

229 
	#CLD_KILLED
 
CLD_KILLED


	)

230 
	mCLD_DUMPED
,

231 
	#CLD_DUMPED
 
CLD_DUMPED


	)

232 
	mCLD_TRAPPED
,

233 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

234 
	mCLD_STOPPED
,

235 
	#CLD_STOPPED
 
CLD_STOPPED


	)

236 
	mCLD_CONTINUED


237 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

243 
	mPOLL_IN
 = 1,

244 
	#POLL_IN
 
POLL_IN


	)

245 
	mPOLL_OUT
,

246 
	#POLL_OUT
 
POLL_OUT


	)

247 
	mPOLL_MSG
,

248 
	#POLL_MSG
 
POLL_MSG


	)

249 
	mPOLL_ERR
,

250 
	#POLL_ERR
 
POLL_ERR


	)

251 
	mPOLL_PRI
,

252 
	#POLL_PRI
 
POLL_PRI


	)

253 
	mPOLL_HUP


254 
	#POLL_HUP
 
POLL_HUP


	)

257 #unde‡
__√ed_sigöfo_t


261 #i‡(
deföed
 
_SIGNAL_H
 || deföed 
__√ed_sigevít_t
) \

262 && !
deföed
 
	g__have_sigevít_t


263 
	#__have_sigevít_t
 1

	)

266 
	#__SIGEV_MAX_SIZE
 64

	)

267 #i‡
__WORDSIZE
 == 64

268 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

270 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

273 
	ssigevít


275 
sigvÆ_t
 
	msigev_vÆue
;

276 
	msigev_signo
;

277 
	msigev_nŸify
;

281 
	m_∑d
[
__SIGEV_PAD_SIZE
];

285 
__pid_t
 
	m_tid
;

289 (*
	m_fun˘i⁄
Ë(
	msigvÆ_t
);

290 *
	m_©åibuã
;

291 } 
	m_sigev_thªad
;

292 } 
	m_sigev_un
;

293 } 
	tsigevít_t
;

296 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

297 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

302 
	mSIGEV_SIGNAL
 = 0,

303 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

304 
	mSIGEV_NONE
,

305 
	#SIGEV_NONE
 
SIGEV_NONE


	)

306 
	mSIGEV_THREAD
,

307 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

309 
	mSIGEV_THREAD_ID
 = 4

310 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/signum.h

20 #ifdef 
_SIGNAL_H


23 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

24 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

25 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

27 #ifde‡
__USE_UNIX98


28 
	#SIG_HOLD
 ((
__sigh™dÀr_t
Ë2Ë

	)

33 
	#SIGHUP
 1

	)

34 
	#SIGINT
 2

	)

35 
	#SIGQUIT
 3

	)

36 
	#SIGILL
 4

	)

37 
	#SIGTRAP
 5

	)

38 
	#SIGABRT
 6

	)

39 
	#SIGIOT
 6

	)

40 
	#SIGBUS
 7

	)

41 
	#SIGFPE
 8

	)

42 
	#SIGKILL
 9

	)

43 
	#SIGUSR1
 10

	)

44 
	#SIGSEGV
 11

	)

45 
	#SIGUSR2
 12

	)

46 
	#SIGPIPE
 13

	)

47 
	#SIGALRM
 14

	)

48 
	#SIGTERM
 15

	)

49 
	#SIGSTKFLT
 16

	)

50 
	#SIGCLD
 
SIGCHLD


	)

51 
	#SIGCHLD
 17

	)

52 
	#SIGCONT
 18

	)

53 
	#SIGSTOP
 19

	)

54 
	#SIGTSTP
 20

	)

55 
	#SIGTTIN
 21

	)

56 
	#SIGTTOU
 22

	)

57 
	#SIGURG
 23

	)

58 
	#SIGXCPU
 24

	)

59 
	#SIGXFSZ
 25

	)

60 
	#SIGVTALRM
 26

	)

61 
	#SIGPROF
 27

	)

62 
	#SIGWINCH
 28

	)

63 
	#SIGPOLL
 
SIGIO


	)

64 
	#SIGIO
 29

	)

65 
	#SIGPWR
 30

	)

66 
	#SIGSYS
 31

	)

67 
	#SIGUNUSED
 31

	)

69 
	#_NSIG
 65

	)

72 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

73 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

77 
	#__SIGRTMIN
 32

	)

78 
	#__SIGRTMAX
 (
_NSIG
 - 1)

	)

	@/usr/include/bits/sigset.h

21 #i‚def 
_SIGSET_H_ty≥s


22 
	#_SIGSET_H_ty≥s
 1

	)

24 
	t__sig_©omic_t
;

28 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

31 
	m__vÆ
[
_SIGSET_NWORDS
];

32 } 
	t__sig£t_t
;

43 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


44 
	#_SIGSET_H_‚s
 1

	)

46 #i‚de‡
_EXTERN_INLINE


47 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

51 
	#__sigmask
(
sig
) \

52 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

55 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

57 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

58 
	#__sigem±y£t
(
£t
) \

59 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

60 
sig£t_t
 *
__£t
 = (
£t
); \

61 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

62 0; }))

	)

63 
	#__sigfûl£t
(
£t
) \

64 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

65 
sig£t_t
 *
__£t
 = (
£t
); \

66 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

67 0; }))

	)

69 #ifde‡
__USE_GNU


73 
	#__sigi£m±y£t
(
£t
) \

74 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

75 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

76 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

77 !
__ªt
 && --
__˙t
 >= 0) \

78 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

79 
__ªt
 =0; }))

	)

80 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

81 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

82 
sig£t_t
 *
__de°
 = (
de°
); \

83 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

84 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

85 --
__˙t
 >= 0) \

86 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

87 & 
__right
->
__vÆ
[
__˙t
]); \

88 0; }))

	)

89 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

90 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

91 
sig£t_t
 *
__de°
 = (
de°
); \

92 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

93 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

94 --
__˙t
 >= 0) \

95 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

96 | 
__right
->
__vÆ
[
__˙t
]); \

97 0; }))

	)

104 
__sigismembî
 (
__c⁄°
 
__sig£t_t
 *, );

105 
__sigadd£t
 (
__sig£t_t
 *, );

106 
__sigdñ£t
 (
__sig£t_t
 *, );

108 #ifde‡
__USE_EXTERN_INLINES


109 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

110 
_EXTERN_INLINE
 \

111 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

113 
__mask
 = 
	`__sigmask
 (
__sig
); \

114 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

115  
BODY
; \

116 }

	)

118 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
Ë? 1 : 0, 
__c⁄°
)

119 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

120 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

122 #unde‡
__SIGSETFN


	@/usr/include/bits/sigstack.h

20 #i‚de‡
_SIGNAL_H


26 
	ssig°ack


28 *
	mss_•
;

29 
	mss_⁄°ack
;

36 
	mSS_ONSTACK
 = 1,

37 
	#SS_ONSTACK
 
SS_ONSTACK


	)

38 
	mSS_DISABLE


39 
	#SS_DISABLE
 
SS_DISABLE


	)

43 
	#MINSIGSTKSZ
 2048

	)

46 
	#SIGSTKSZ
 8192

	)

50 
	ssigÆt°ack


52 *
	mss_•
;

53 
	mss_Êags
;

54 
size_t
 
	mss_size
;

55 } 
	t°ack_t
;

	@/usr/include/bits/sigthread.h

20 #i‚de‡
_BITS_SIGTHREAD_H


21 
	#_BITS_SIGTHREAD_H
 1

	)

23 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_PTHREAD_H


31 
	$±hªad_sigmask
 (
__how
,

32 
__c⁄°
 
__sig£t_t
 *
__ª°ri˘
 
__√wmask
,

33 
__sig£t_t
 *
__ª°ri˘
 
__ﬁdmask
)
__THROW
;

36 
	$±hªad_kûl
 (
±hªad_t
 
__thªadid
, 
__signo
Ë
__THROW
;

	@/usr/include/bits/stdio-lock.h

20 #i‚de‡
_BITS_STDIO_LOCK_H


21 
	#_BITS_STDIO_LOCK_H
 1

	)

23 
	~<bôs/libc-lock.h
>

24 
	~<lowÀvñlock.h
>

28 
	#_IO_lock_öex≥nsive
 1

	)

30 °ru˘ { 
	mlock
; 
	m˙t
; *
	mow√r
; } 
	t_IO_lock_t
;

32 
	#_IO_lock_öôülizî
 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

34 
	#_IO_lock_öô
(
_«me
) \

35 ((
_«me
Ë(
_IO_lock_t
Ë
_IO_lock_öôülizî
 , 0)

	)

37 
	#_IO_lock_föi
(
_«me
) \

38 ((Ë0)

	)

40 
	#_IO_lock_lock
(
_«me
) \

42 *
__£lf
 = 
THREAD_SELF
; \

43 i‡((
_«me
).
ow√r
 !
__£lf
) \

45 
	`Œl_lock
 ((
_«me
).
lock
, 
LLL_PRIVATE
); \

46 (
_«me
).
ow√r
 = 
__£lf
; \

48 ++(
_«me
).
˙t
; \

49 } 0)

	)

51 
	#_IO_lock_åylock
(
_«me
) \

53 
__ªsu…
 = 0; \

54 *
__£lf
 = 
THREAD_SELF
; \

55 i‡((
_«me
).
ow√r
 !
__£lf
) \

57 i‡(
	`Œl_åylock
 ((
_«me
).
lock
) == 0) \

59 (
_«me
).
ow√r
 = 
__£lf
; \

60 (
_«me
).
˙t
 = 1; \

63 
__ªsu…
 = 
EBUSY
; \

66 ++(
_«me
).
˙t
; \

67 
__ªsu…
; \

68 })

	)

70 
	#_IO_lock_u∆ock
(
_«me
) \

72 i‡(--(
_«me
).
˙t
 == 0) \

74 (
_«me
).
ow√r
 = 
NULL
; \

75 
	`Œl_u∆ock
 ((
_«me
).
lock
, 
LLL_PRIVATE
); \

77 } 0)

	)

81 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
) \

82 
	`__libc_˛ónup_ªgi⁄_°¨t
 (((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0, 
_f˘
, _Â)

	)

83 
	#_IO_˛ónup_ªgi⁄_°¨t_nﬂrg
(
_f˘
) \

84 
	`__libc_˛ónup_ªgi⁄_°¨t
 (1, 
_f˘
, 
NULL
)

	)

85 
	#_IO_˛ónup_ªgi⁄_íd
(
_doô
) \

86 
	`__libc_˛ónup_ªgi⁄_íd
 (
_doô
)

	)

88 #i‡
deföed
 
_LIBC
 && !deföed 
NOT_IN_libc


90 #ifde‡
__EXCEPTIONS


91 
	#_IO_acquúe_lock
(
_Â
) \

93 
_IO_FILE
 *
_IO_acquúe_lock_fûe
 \

94 
	`__©åibuã__
((
	`˛ónup
 (
_IO_acquúe_lock_f˘
))) \

95 (
_Â
); \

96 
	`_IO_Êockfûe
 (
_IO_acquúe_lock_fûe
);

	)

97 
	#_IO_acquúe_lock_˛ór_Êags2
(
_Â
) \

99 
_IO_FILE
 *
_IO_acquúe_lock_fûe
 \

100 
	`__©åibuã__
((
	`˛ónup
 (
_IO_acquúe_lock_˛ór_Êags2_f˘
))) \

101 (
_Â
); \

102 
	`_IO_Êockfûe
 (
_IO_acquúe_lock_fûe
);

	)

104 
	#_IO_acquúe_lock
(
_Â
Ë
_IO_acquúe_lock_√eds_ex˚±i⁄s_íabÀd


	)

105 
	#_IO_acquúe_lock_˛ór_Êags2
(
_Â
Ë
	`_IO_acquúe_lock
 (_Â)

	)

107 
	#_IO_ªÀa£_lock
(
_Â
Ë; } 0)

	)

	@/usr/include/bits/typesizes.h

20 #i‚de‡
_BITS_TYPES_H


24 #i‚def 
_BITS_TYPESIZES_H


25 
	#_BITS_TYPESIZES_H
 1

	)

30 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

31 
	#__UID_T_TYPE
 
__U32_TYPE


	)

32 
	#__GID_T_TYPE
 
__U32_TYPE


	)

33 
	#__INO_T_TYPE
 
__ULONGWORD_TYPE


	)

34 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

35 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

36 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

37 
	#__OFF_T_TYPE
 
__SLONGWORD_TYPE


	)

38 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

39 
	#__PID_T_TYPE
 
__S32_TYPE


	)

40 
	#__RLIM_T_TYPE
 
__ULONGWORD_TYPE


	)

41 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

42 
	#__BLKCNT_T_TYPE
 
__SLONGWORD_TYPE


	)

43 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

44 
	#__FSBLKCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

45 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

46 
	#__FSFILCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

47 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

48 
	#__ID_T_TYPE
 
__U32_TYPE


	)

49 
	#__CLOCK_T_TYPE
 
__SLONGWORD_TYPE


	)

50 
	#__TIME_T_TYPE
 
__SLONGWORD_TYPE


	)

51 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

52 
	#__SUSECONDS_T_TYPE
 
__SLONGWORD_TYPE


	)

53 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

54 
	#__SWBLK_T_TYPE
 
__SLONGWORD_TYPE


	)

55 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

56 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

57 
	#__TIMER_T_TYPE
 *

	)

58 
	#__BLKSIZE_T_TYPE
 
__SLONGWORD_TYPE


	)

59 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

60 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

63 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/uio.h

19 #i‡!
deföed
 
_SYS_UIO_H
 && !deföed 
_FCNTL_H


23 #i‚de‡
_BITS_UIO_H


24 
	#_BITS_UIO_H
 1

	)

26 
	~<sys/ty≥s.h
>

40 
	#UIO_MAXIOV
 1024

	)

44 
	siovec


46 *
	miov_ba£
;

47 
size_t
 
	miov_Àn
;

	@/usr/include/gnu/stubs.h

4 
	~<bôs/w‹dsize.h
>

6 #i‡
__WORDSIZE
 == 32

7 
	~<gnu/°ubs-32.h
>

8 #ñi‡
__WORDSIZE
 == 64

9 
	~<gnu/°ubs-64.h
>

	@/usr/include/linux/ioctl.h

1 #i‚de‡
_LINUX_IOCTL_H


2 
	#_LINUX_IOCTL_H


	)

4 
	~<asm/io˘l.h
>

	@/usr/include/linux/patchkey.h

13 #i‚de‡
_LINUX_PATCHKEY_H_INDIRECT


17 #i‚de‡
_LINUX_PATCHKEY_H


18 
	#_LINUX_PATCHKEY_H


	)

21 
	~<ídün.h
>

23 #i‡ 
deföed
(
__BYTE_ORDER
)

24 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


25 
	#_PATCHKEY
(
id
Ë(0xfd00|id)

	)

26 #ñi‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


27 
	#_PATCHKEY
(
id
Ë((id<<8)|0x00fd)

	)

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

5 
	~<löux/posix_ty≥s.h
>

6 
	~<asm/ty≥s.h
>

8 #i‚de‡
__KERNEL_STRICT_NAMES


10 
__u32
 
	t__kî√l_dev_t
;

12 
__kî√l_fd_£t
 
	tfd_£t
;

13 
__kî√l_dev_t
 
	tdev_t
;

14 
__kî√l_öo_t
 
	töo_t
;

15 
__kî√l_mode_t
 
	tmode_t
;

16 
__kî√l_∆ök_t
 
	t∆ök_t
;

17 
__kî√l_off_t
 
	toff_t
;

18 
__kî√l_pid_t
 
	tpid_t
;

19 
__kî√l_daddr_t
 
	tdaddr_t
;

20 
__kî√l_key_t
 
	tkey_t
;

21 
__kî√l_su£c⁄ds_t
 
	tsu£c⁄ds_t
;

22 
__kî√l_timî_t
 
	ttimî_t
;

23 
__kî√l_˛ockid_t
 
	t˛ockid_t
;

24 
__kî√l_mqd_t
 
	tmqd_t
;

26 
__kî√l_uid_t
 
	tuid_t
;

27 
__kî√l_gid_t
 
	tgid_t
;

29 #i‡
deföed
(
__GNUC__
)

30 
__kî√l_loff_t
 
	tloff_t
;

37 #i‚de‡
_SIZE_T


38 
	#_SIZE_T


	)

39 
__kî√l_size_t
 
	tsize_t
;

42 #i‚de‡
_SSIZE_T


43 
	#_SSIZE_T


	)

44 
__kî√l_ssize_t
 
	tssize_t
;

47 #i‚de‡
_PTRDIFF_T


48 
	#_PTRDIFF_T


	)

49 
__kî√l_±rdiff_t
 
	t±rdiff_t
;

52 #i‚de‡
_TIME_T


53 
	#_TIME_T


	)

54 
__kî√l_time_t
 
	ttime_t
;

57 #i‚de‡
_CLOCK_T


58 
	#_CLOCK_T


	)

59 
__kî√l_˛ock_t
 
	t˛ock_t
;

62 #i‚de‡
_CADDR_T


63 
	#_CADDR_T


	)

64 
__kî√l_ˇddr_t
 
	tˇddr_t
;

68 
	tu_ch¨
;

69 
	tu_sh‹t
;

70 
	tu_öt
;

71 
	tu_l⁄g
;

74 
	tunch¨
;

75 
	tush‹t
;

76 
	tuöt
;

77 
	tul⁄g
;

79 #i‚de‡
__BIT_TYPES_DEFINED__


80 
	#__BIT_TYPES_DEFINED__


	)

82 
__u8
 
	tu_öt8_t
;

83 
__s8
 
	töt8_t
;

84 
__u16
 
	tu_öt16_t
;

85 
__s16
 
	töt16_t
;

86 
__u32
 
	tu_öt32_t
;

87 
__s32
 
	töt32_t
;

91 
__u8
 
	tuöt8_t
;

92 
__u16
 
	tuöt16_t
;

93 
__u32
 
	tuöt32_t
;

95 #i‡
deföed
(
__GNUC__
)

96 
__u64
 
	tuöt64_t
;

97 
__u64
 
	tu_öt64_t
;

98 
__s64
 
	töt64_t
;

102 
	#Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

103 
	#Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

104 
	#Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

112 #ifde‡
CONFIG_LBD


113 
u64
 
	t£˘‹_t
;

115 
	t£˘‹_t
;

121 #ifde‡
CONFIG_LSF


122 
u64
 
	tblk˙t_t
;

124 
	tblk˙t_t
;

131 #i‚de‡
pgoff_t


132 
	#pgoff_t
 

	)

142 #ifde‡
__CHECKER__


143 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

145 
	#__bôwi£__


	)

147 #ifde‡
__CHECK_ENDIAN__


148 
	#__bôwi£
 
__bôwi£__


	)

150 
	#__bôwi£


	)

153 
__u16
 
	t__bôwi£
 
	t__À16
;

154 
__u16
 
	t__bôwi£
 
	t__be16
;

155 
__u32
 
	t__bôwi£
 
	t__À32
;

156 
__u32
 
	t__bôwi£
 
	t__be32
;

157 #i‡
deföed
(
__GNUC__
)

158 
__u64
 
	t__bôwi£
 
	t__À64
;

159 
__u64
 
	t__bôwi£
 
	t__be64
;

161 
__u16
 
	t__bôwi£
 
	t__sum16
;

162 
__u32
 
	t__bôwi£
 
	t__wsum
;

	@/usr/include/sys/cdefs.h

20 #i‚def 
_SYS_CDEFS_H


21 
	#_SYS_CDEFS_H
 1

	)

24 #i‚de‡
_FEATURES_H


25 
	~<„©uªs.h
>

31 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


36 #unde‡
__P


37 #unde‡
__PMT


39 #ifde‡
__GNUC__


46 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

47 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

48 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
)Ë
	)
fct

50 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

51 
	#__THROW
 
	`throw
 ()

	)

52 
	#__NTH
(
f˘
Ëf˘ 
	`throw
 ()

	)

54 
	#__THROW


	)

55 
	#__NTH
(
f˘
Ë
	)
fct

61 
	#__ölöe


	)

63 
	#__THROW


	)

64 
	#__NTH
(
f˘
Ë
	)
fct

66 
	#__c⁄°
 c⁄°

	)

67 
	#__sig√d
 sig√d

	)

68 
	#__vﬁ©ûe
 vﬁ©ûe

	)

74 
	#__P
(
¨gs
Ë
	)
args

75 
	#__PMT
(
¨gs
Ë
	)
args

80 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

81 
	#__STRING
(
x
Ë#x

	)

84 
	#__±r_t
 *

	)

85 
	#__l⁄g_doubÀ_t
 

	)

89 #ifdef 
__˝lu•lus


90 
	#__BEGIN_DECLS
 "C" {

	)

91 
	#__END_DECLS
 }

	)

93 
	#__BEGIN_DECLS


	)

94 
	#__END_DECLS


	)

103 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


104 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

105 
	#__END_NAMESPACE_STD
 }

	)

106 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

107 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

108 
	#__END_NAMESPACE_C99
 }

	)

109 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

114 
	#__BEGIN_NAMESPACE_STD


	)

115 
	#__END_NAMESPACE_STD


	)

116 
	#__USING_NAMESPACE_STD
(
«me
)

	)

117 
	#__BEGIN_NAMESPACE_C99


	)

118 
	#__END_NAMESPACE_C99


	)

119 
	#__USING_NAMESPACE_C99
(
«me
)

	)

124 #i‚de‡
__BOUNDED_POINTERS__


125 
	#__bounded


	)

126 
	#__unbounded


	)

127 
	#__±rvÆue


	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

135 #i‡
__GNUC_PREREQ
 (4,3)

136 
	#__w¨nde˛
(
«me
, 
msg
) \

137 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

138 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

139 
	#__îr‹de˛
(
«me
, 
msg
) \

140 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

142 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

143 
	#__w¨«âr
(
msg
)

	)

144 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

148 #i‡
__GNUC_PREREQ
 (2,97)

150 
	#__Êex¨r
 []

	)

152 #ifde‡
__GNUC__


153 
	#__Êex¨r
 [0]

	)

155 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

156 
	#__Êex¨r
 []

	)

159 
	#__Êex¨r
 [1]

	)

175 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

177 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

178 #ifde‡
__˝lu•lus


179 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

180 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

182 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

183 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

185 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

186 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

199 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

200 
	#__©åibuã__
(
xyz
Ë

	)

206 #i‡
__GNUC_PREREQ
 (2,96)

207 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

209 
	#__©åibuã_mÆloc__


	)

215 #i‡
__GNUC_PREREQ
 (2,96)

216 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

218 
	#__©åibuã_puª__


	)

224 #i‡
__GNUC_PREREQ
 (3,1)

225 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

226 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

228 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

229 
	#__©åibuã_noölöe__


	)

233 #i‡
__GNUC_PREREQ
 (3,2)

234 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

236 
	#__©åibuã_dïªˇãd__


	)

245 #i‡
__GNUC_PREREQ
 (2,8)

246 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

248 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

255 #i‡
__GNUC_PREREQ
 (2,97)

256 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

257 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

259 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

264 #i‡
__GNUC_PREREQ
 (3,3)

265 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

267 
	#__n⁄nuŒ
(
∑øms
)

	)

272 #i‡
__GNUC_PREREQ
 (3,4)

273 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

274 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

275 #i‡
__USE_FORTIFY_LEVEL
 > 0

276 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

279 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

281 #i‚de‡
__wur


282 
	#__wur


	)

286 #i‡
__GNUC_PREREQ
 (3,2)

287 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

289 
	#__Æways_ölöe
 
__ölöe


	)

294 #i‡!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3)

295 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


296 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

297 #i‡
__GNUC_PREREQ
 (4,3)

298 
	#__exã∫_Æways_ölöe
 \

299 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
, 
__¨tificül__
))

	)

301 
	#__exã∫_Æways_ölöe
 \

302 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

305 
	#__exã∫_ölöe
 
__ölöe


	)

306 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

312 #i‡
__GNUC_PREREQ
 (4,3)

313 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

314 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

321 #i‡!
__GNUC_PREREQ
 (2,8)

322 
	#__exãnsi⁄__


	)

326 #i‡!
__GNUC_PREREQ
 (2,92)

327 
	#__ª°ri˘


	)

333 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


334 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

336 #ifde‡
__GNUC__


337 
	#__ª°ri˘_¨r


	)

339 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

340 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

343 
	#__ª°ri˘_¨r


	)

348 
	~<bôs/w‹dsize.h
>

350 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


351 
	#__LDBL_COMPAT
 1

	)

352 #ifde‡
__REDIRECT


353 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

354 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

355 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

356 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

357 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

358 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

359 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

360 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

361 
	#__LDBL_REDIR_DECL
(
«me
) \

362 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

363 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

364 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

365 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

366 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

369 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


370 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

371 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

372 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

373 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

374 
	#__LDBL_REDIR_DECL
(
«me
)

	)

375 #ifde‡
__REDIRECT


376 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

377 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

378 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/sys/ucontext.h

19 #i‚de‡
_SYS_UCONTEXT_H


20 
	#_SYS_UCONTEXT_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<sig«l.h
>

24 
	~<bôs/w‹dsize.h
>

28 
	~<bôs/sigc⁄ãxt.h
>

30 #i‡
__WORDSIZE
 == 64

33 
	tgªg_t
;

36 
	#NGREG
 23

	)

39 
gªg_t
 
	tgªg£t_t
[
NGREG
];

41 #ifde‡
__USE_GNU


45 
	mREG_R8
 = 0,

46 
	#REG_R8
 
REG_R8


	)

47 
	mREG_R9
,

48 
	#REG_R9
 
REG_R9


	)

49 
	mREG_R10
,

50 
	#REG_R10
 
REG_R10


	)

51 
	mREG_R11
,

52 
	#REG_R11
 
REG_R11


	)

53 
	mREG_R12
,

54 
	#REG_R12
 
REG_R12


	)

55 
	mREG_R13
,

56 
	#REG_R13
 
REG_R13


	)

57 
	mREG_R14
,

58 
	#REG_R14
 
REG_R14


	)

59 
	mREG_R15
,

60 
	#REG_R15
 
REG_R15


	)

61 
	mREG_RDI
,

62 
	#REG_RDI
 
REG_RDI


	)

63 
	mREG_RSI
,

64 
	#REG_RSI
 
REG_RSI


	)

65 
	mREG_RBP
,

66 
	#REG_RBP
 
REG_RBP


	)

67 
	mREG_RBX
,

68 
	#REG_RBX
 
REG_RBX


	)

69 
	mREG_RDX
,

70 
	#REG_RDX
 
REG_RDX


	)

71 
	mREG_RAX
,

72 
	#REG_RAX
 
REG_RAX


	)

73 
	mREG_RCX
,

74 
	#REG_RCX
 
REG_RCX


	)

75 
	mREG_RSP
,

76 
	#REG_RSP
 
REG_RSP


	)

77 
	mREG_RIP
,

78 
	#REG_RIP
 
REG_RIP


	)

79 
	mREG_EFL
,

80 
	#REG_EFL
 
REG_EFL


	)

81 
	mREG_CSGSFS
,

82 
	#REG_CSGSFS
 
REG_CSGSFS


	)

83 
	mREG_ERR
,

84 
	#REG_ERR
 
REG_ERR


	)

85 
	mREG_TRAPNO
,

86 
	#REG_TRAPNO
 
REG_TRAPNO


	)

87 
	mREG_OLDMASK
,

88 
	#REG_OLDMASK
 
REG_OLDMASK


	)

89 
	mREG_CR2


90 
	#REG_CR2
 
REG_CR2


	)

94 
	s_libc_Âxªg


96 
	msignifiˇnd
[4];

97 
	mexp⁄ít
;

98 
	m∑ddög
[3];

101 
	s_libc_xmmªg


103 
__uöt32_t
 
	mñemít
[4];

106 
	s_libc_Â°©e


109 
__uöt16_t
 
	mcwd
;

110 
__uöt16_t
 
	mswd
;

111 
__uöt16_t
 
	m·w
;

112 
__uöt16_t
 
	mf›
;

113 
__uöt64_t
 
	mrù
;

114 
__uöt64_t
 
	mrdp
;

115 
__uöt32_t
 
	mmxc§
;

116 
__uöt32_t
 
	mmx¸_mask
;

117 
_libc_Âxªg
 
	m_°
[8];

118 
_libc_xmmªg
 
	m_xmm
[16];

119 
__uöt32_t
 
	m∑ddög
[24];

123 
_libc_Â°©e
 *
	tÂªg£t_t
;

128 
gªg£t_t
 
	mgªgs
;

130 
Âªg£t_t
 
	mÂªgs
;

131 
	m__ª£rved1
 [8];

132 } 
	tmc⁄ãxt_t
;

135 
	suc⁄ãxt


137 
	muc_Êags
;

138 
uc⁄ãxt
 *
	muc_lök
;

139 
°ack_t
 
	muc_°ack
;

140 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

141 
__sig£t_t
 
	muc_sigmask
;

142 
_libc_Â°©e
 
	m__Âªgs_mem
;

143 } 
	tuc⁄ãxt_t
;

148 
	tgªg_t
;

151 
	#NGREG
 19

	)

154 
gªg_t
 
	tgªg£t_t
[
NGREG
];

156 #ifde‡
__USE_GNU


160 
	mREG_GS
 = 0,

161 
	#REG_GS
 
REG_GS


	)

162 
	mREG_FS
,

163 
	#REG_FS
 
REG_FS


	)

164 
	mREG_ES
,

165 
	#REG_ES
 
REG_ES


	)

166 
	mREG_DS
,

167 
	#REG_DS
 
REG_DS


	)

168 
	mREG_EDI
,

169 
	#REG_EDI
 
REG_EDI


	)

170 
	mREG_ESI
,

171 
	#REG_ESI
 
REG_ESI


	)

172 
	mREG_EBP
,

173 
	#REG_EBP
 
REG_EBP


	)

174 
	mREG_ESP
,

175 
	#REG_ESP
 
REG_ESP


	)

176 
	mREG_EBX
,

177 
	#REG_EBX
 
REG_EBX


	)

178 
	mREG_EDX
,

179 
	#REG_EDX
 
REG_EDX


	)

180 
	mREG_ECX
,

181 
	#REG_ECX
 
REG_ECX


	)

182 
	mREG_EAX
,

183 
	#REG_EAX
 
REG_EAX


	)

184 
	mREG_TRAPNO
,

185 
	#REG_TRAPNO
 
REG_TRAPNO


	)

186 
	mREG_ERR
,

187 
	#REG_ERR
 
REG_ERR


	)

188 
	mREG_EIP
,

189 
	#REG_EIP
 
REG_EIP


	)

190 
	mREG_CS
,

191 
	#REG_CS
 
REG_CS


	)

192 
	mREG_EFL
,

193 
	#REG_EFL
 
REG_EFL


	)

194 
	mREG_UESP
,

195 
	#REG_UESP
 
REG_UESP


	)

196 
	mREG_SS


197 
	#REG_SS
 
REG_SS


	)

202 
	s_libc_Âªg


204 
	msignifiˇnd
[4];

205 
	mexp⁄ít
;

208 
	s_libc_Â°©e


210 
	mcw
;

211 
	msw
;

212 
	mèg
;

213 
	mùoff
;

214 
	mcs£l
;

215 
	md©aoff
;

216 
	md©a£l
;

217 
_libc_Âªg
 
	m_°
[8];

218 
	m°©us
;

222 
_libc_Â°©e
 *
	tÂªg£t_t
;

227 
gªg£t_t
 
	mgªgs
;

230 
Âªg£t_t
 
	mÂªgs
;

231 
	mﬁdmask
;

232 
	m¸2
;

233 } 
	tmc⁄ãxt_t
;

236 
	suc⁄ãxt


238 
	muc_Êags
;

239 
uc⁄ãxt
 *
	muc_lök
;

240 
°ack_t
 
	muc_°ack
;

241 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

242 
__sig£t_t
 
	muc_sigmask
;

243 
_libc_Â°©e
 
	m__Âªgs_mem
;

244 } 
	tuc⁄ãxt_t
;

	@/usr/include/zlibdefs.h

6 
	~<sys/ty≥s.h
>

7 
	~<uni°d.h
>

8 #ifde‡
VMS


9 
	~<unixio.h
>

11 #i‚de‡
z_off_t


12 
	#z_off_t
 
off_t


	)

	@/usr/include/asm/ioctl.h

1 
	~<asm-gíîic/io˘l.h
>

	@/usr/include/bits/libc-lock.h

20 #i‚de‡
_BITS_LIBC_LOCK_H


21 
	#_BITS_LIBC_LOCK_H
 1

	)

23 
	~<±hªad.h
>

24 
	#__√ed_NULL


	)

25 
	~<°ddef.h
>

34 #ifde‡
_LIBC


35 
	~<lowÀvñlock.h
>

36 
	~<és.h
>

37 
	~<±hªad-fun˘i⁄s.h
>

41 #i‡
deföed
 
_LIBC
 || deföed 
_IO_MTSAFE_IO


42 #i‡(
deföed
 
NOT_IN_libc
 && !deföed 
IS_IN_lib±hªad
Ë|| !deföed 
_LIBC


43 
±hªad_muãx_t
 
	t__libc_lock_t
;

44 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__libc_lock_ªcursive_t
;

46 
	t__libc_lock_t
;

47 °ru˘ { 
	mlock
; 
	m˙t
; *
	mow√r
; } 
	t__libc_lock_ªcursive_t
;

49 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__πld_lock_ªcursive_t
;

50 #ifde‡
__USE_UNIX98


51 
±hªad_rwlock_t
 
	t__libc_rwlock_t
;

53 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

56 
__libc_lock_›aque__
 
	t__libc_lock_t
;

57 
__libc_lock_ªcursive_›aque__
 
	t__libc_lock_ªcursive_t
;

58 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

62 
±hªad_key_t
 
	t__libc_key_t
;

71 
	#__libc_lock_deföe
(
CLASS
,
NAME
) \

72 
CLASS
 
__libc_lock_t
 
NAME
;

	)

73 
	#__libc_rwlock_deföe
(
CLASS
,
NAME
) \

74 
CLASS
 
__libc_rwlock_t
 
NAME
;

	)

75 
	#__libc_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

76 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

77 
	#__πld_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

78 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
;

	)

89 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

90 #i‡
LLL_LOCK_INITIALIZER
 == 0

91 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

92 
CLASS
 
__libc_lock_t
 
NAME
;

	)

94 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

95 
CLASS
 
__libc_lock_t
 
NAME
 = 
LLL_LOCK_INITIALIZER
;

	)

98 #i‡
__LT_SPINLOCK_INIT
 == 0

99 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

100 
CLASS
 
__libc_lock_t
 
NAME
;

	)

102 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

103 
CLASS
 
__libc_lock_t
 
NAME
 = 
PTHREAD_MUTEX_INITIALIZER
;

	)

107 
	#__libc_rwlock_deföe_öôülized
(
CLASS
,
NAME
) \

108 
CLASS
 
__libc_rwlock_t
 
NAME
 = 
PTHREAD_RWLOCK_INITIALIZER
;

	)

112 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

113 #i‡
LLL_LOCK_INITIALIZER
 == 0

114 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

115 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

117 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

118 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

120 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

121 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

123 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

124 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

125 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

126 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

129 
	#__πld_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

130 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
 = 
_RTLD_LOCK_RECURSIVE_INITIALIZER
;

	)

131 
	#_RTLD_LOCK_RECURSIVE_INITIALIZER
 \

132 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

134 
	#__πld_lock_öôülize
(
NAME
) \

135 (Ë((
NAME
Ë(
__πld_lock_ªcursive_t
Ë
_RTLD_LOCK_RECURSIVE_INITIALIZER
)

	)

142 #ifde‡
__PIC__


143 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

144 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of
 (
FUNC
Ë*
_‚
 = (FUNC); \

145 
_‚
 !
NULL
 ? (*_‚Ë
ARGS
 : 
ELSE
; }))

	)

147 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

148 (
FUNC
 !
NULL
 ? FUNC 
ARGS
 : 
ELSE
)

	)

152 #i‡
deföed
 
SHARED
 && !deföed 
NOT_IN_libc


153 
	#PTFAVAIL
(
NAME
Ë
__libc_±hªad_fun˘i⁄s_öô


	)

154 
	#__libc_±f_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

155 (
__libc_±hªad_fun˘i⁄s_öô
 ? 
	`PTHFCT_CALL
 (
±r_
##
FUNC
, 
ARGS
Ë: 
ELSE
)

	)

156 
	#__libc_±f_ˇŒ_Æways
(
FUNC
, 
ARGS
) \

157 
	`PTHFCT_CALL
 (
±r_
##
FUNC
, 
ARGS
)

	)

159 
	#PTFAVAIL
(
NAME
Ë(NAME !
NULL
)

	)

160 
	#__libc_±f_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

161 
	`__libc_maybe_ˇŒ
 (
FUNC
, 
ARGS
, 
ELSE
)

	)

162 
	#__libc_±f_ˇŒ_Æways
(
FUNC
, 
ARGS
) \

163 
FUNC
 
ARGS


	)

169 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

170 
	#__libc_lock_öô
(
NAME
Ë((NAMEË
LLL_LOCK_INITIALIZER
, 0)

	)

172 
	#__libc_lock_öô
(
NAME
) \

173 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_öô
, (&(
NAME
), 
NULL
), 0)

	)

175 #i‡
deföed
 
SHARED
 && !deföed 
NOT_IN_libc


178 
	#__libc_rwlock_öô
(
NAME
) \

179 (
	`__buûtö_mem£t
 (&(
NAME
), '\0',  (NAME)), 0)

	)

181 
	#__libc_rwlock_öô
(
NAME
) \

182 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_öô
, (&(
NAME
), 
NULL
), 0)

	)

186 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

187 
	#__libc_lock_öô_ªcursive
(
NAME
) \

188 ((
NAME
Ë(
__libc_lock_ªcursive_t
Ë
_LIBC_LOCK_RECURSIVE_INITIALIZER
, 0)

	)

190 
	#__libc_lock_öô_ªcursive
(
NAME
) \

192 i‡(
__±hªad_muãx_öô
 !
NULL
) \

194 
±hªad_muãx©å_t
 
__©å
; \

195 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

196 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

197 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

198 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

200 } 0)

	)

203 
	#__πld_lock_öô_ªcursive
(
NAME
) \

205 i‡(
__±hªad_muãx_öô
 !
NULL
) \

207 
±hªad_muãx©å_t
 
__©å
; \

208 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

209 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

210 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

211 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

213 } 0)

	)

218 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

219 
	#__libc_lock_föi
(
NAME
Ë((Ë0)

	)

221 
	#__libc_lock_föi
(
NAME
) \

222 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_de°roy
, (&(
NAME
)), 0)

	)

224 #i‡
deföed
 
SHARED
 && !deföed 
NOT_IN_libc


225 
	#__libc_rwlock_föi
(
NAME
Ë((Ë0)

	)

227 
	#__libc_rwlock_föi
(
NAME
) \

228 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_de°roy
, (&(
NAME
)), 0)

	)

232 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

233 
	#__libc_lock_föi_ªcursive
(
NAME
Ë((Ë0)

	)

235 
	#__libc_lock_föi_ªcursive
(
NAME
) \

236 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_de°roy
, (&(
NAME
)), 0)

	)

240 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

241 
	#__libc_lock_lock
(
NAME
) \

242 ({ 
	`Œl_lock
 (
NAME
, 
LLL_PRIVATE
); 0; })

	)

244 
	#__libc_lock_lock
(
NAME
) \

245 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
)), 0)

	)

247 
	#__libc_rwlock_rdlock
(
NAME
) \

248 
	`__libc_±f_ˇŒ
 (
__±hªad_rwlock_rdlock
, (&(
NAME
)), 0)

	)

249 
	#__libc_rwlock_wæock
(
NAME
) \

250 
	`__libc_±f_ˇŒ
 (
__±hªad_rwlock_wæock
, (&(
NAME
)), 0)

	)

253 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

254 
	#__libc_lock_lock_ªcursive
(
NAME
) \

256 *
£lf
 = 
THREAD_SELF
; \

257 i‡((
NAME
).
ow√r
 !
£lf
) \

259 
	`Œl_lock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

260 (
NAME
).
ow√r
 = 
£lf
; \

262 ++(
NAME
).
˙t
; \

263 } 0)

	)

265 
	#__libc_lock_lock_ªcursive
(
NAME
) \

266 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
).
muãx
), 0)

	)

270 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

271 
	#__libc_lock_åylock
(
NAME
) \

272 
	`Œl_åylock
 (
NAME
)

	)

274 
	#__libc_lock_åylock
(
NAME
) \

275 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
)), 0)

	)

277 
	#__libc_rwlock_åyrdlock
(
NAME
) \

278 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åyrdlock
, (&(
NAME
)), 0)

	)

279 
	#__libc_rwlock_åywæock
(
NAME
) \

280 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åywæock
, (&(
NAME
)), 0)

	)

283 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

284 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

286 
ªsu…
 = 0; \

287 *
£lf
 = 
THREAD_SELF
; \

288 i‡((
NAME
).
ow√r
 !
£lf
) \

290 i‡(
	`Œl_åylock
 ((
NAME
).
lock
) == 0) \

292 (
NAME
).
ow√r
 = 
£lf
; \

293 (
NAME
).
˙t
 = 1; \

296 
ªsu…
 = 
EBUSY
; \

299 ++(
NAME
).
˙t
; \

300 
ªsu…
; \

301 })

	)

303 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

304 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
)), 0)

	)

307 
	#__πld_lock_åylock_ªcursive
(
NAME
) \

308 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
).
muãx
), 0)

	)

311 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

312 
	#__libc_lock_u∆ock
(
NAME
) \

313 
	`Œl_u∆ock
 (
NAME
, 
LLL_PRIVATE
)

	)

315 
	#__libc_lock_u∆ock
(
NAME
) \

316 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
)), 0)

	)

318 
	#__libc_rwlock_u∆ock
(
NAME
) \

319 
	`__libc_±f_ˇŒ
 (
__±hªad_rwlock_u∆ock
, (&(
NAME
)), 0)

	)

322 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

324 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

326 i‡(--(
NAME
).
˙t
 == 0) \

328 (
NAME
).
ow√r
 = 
NULL
; \

329 
	`Œl_u∆ock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

331 } 0)

	)

333 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

334 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
)), 0)

	)

337 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


338 
	#__πld_lock_deÁu…_lock_ªcursive
(
lock
) \

339 ++((
±hªad_muãx_t
 *)(
lock
))->
__d©a
.
__cou¡
;

	)

341 
	#__πld_lock_deÁu…_u∆ock_ªcursive
(
lock
) \

342 --((
±hªad_muãx_t
 *)(
lock
))->
__d©a
.
__cou¡
;

	)

344 
	#__πld_lock_lock_ªcursive
(
NAME
) \

345 
	`GL
(
dl_πld_lock_ªcursive
Ë(&(
NAME
).
muãx
)

	)

347 
	#__πld_lock_u∆ock_ªcursive
(
NAME
) \

348 
	`GL
(
dl_πld_u∆ock_ªcursive
Ë(&(
NAME
).
muãx
)

	)

350 
	#__πld_lock_lock_ªcursive
(
NAME
) \

351 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
).
muãx
), 0)

	)

353 
	#__πld_lock_u∆ock_ªcursive
(
NAME
) \

354 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
).
muãx
), 0)

	)

358 #i‡
PTHREAD_ONCE_INIT
 == 0

361 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

362 
CLASS
 
±hªad_⁄˚_t
 
NAME


	)

364 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

365 
CLASS
 
±hªad_⁄˚_t
 
NAME
 = 
PTHREAD_ONCE_INIT


	)

369 
	#__libc_⁄˚
(
ONCE_CONTROL
, 
INIT_FUNCTION
) \

371 i‡(
	`PTFAVAIL
 (
__±hªad_⁄˚
)) \

372 
	`__libc_±f_ˇŒ_Æways
 (
__±hªad_⁄˚
, (&(
ONCE_CONTROL
), \

373 
INIT_FUNCTION
)); \

374 i‡((
ONCE_CONTROL
Ë=
PTHREAD_ONCE_INIT
) { \

375 
	`INIT_FUNCTION
 (); \

376 (
ONCE_CONTROL
) |= 2; \

378 } 0)

	)

385 
_±hªad_˛ónup_push
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

386 (*
routöe
Ë(*), *
¨g
);

387 
	`_±hªad_˛ónup_p›
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

388 
execuã
);

389 
	`_±hªad_˛ónup_push_de„r
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

390 (*
routöe
Ë(*), *
¨g
);

391 
	`_±hªad_˛ónup_p›_ª°‹e
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

392 
execuã
);

395 
	#__libc_˛ónup_ªgi⁄_°¨t
(
DOIT
, 
FCT
, 
ARG
) \

396 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

397 
_avaû
; \

398 i‡(
DOIT
) { \

399 
_avaû
 = 
	`PTFAVAIL
 (
_±hªad_˛ónup_push_de„r
); \

400 i‡(
_avaû
) { \

401 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_push_de„r
, (&
_buf„r
, 
FCT
, \

402 
ARG
)); \

404 
_buf„r
.
__routöe
 = (
FCT
); \

405 
_buf„r
.
__¨g
 = (
ARG
); \

408 
_avaû
 = 0; \

409 }

	)

412 
	#__libc_˛ónup_ªgi⁄_íd
(
DOIT
) \

413 i‡(
_avaû
) { \

414 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_p›_ª°‹e
, (&
_buf„r
, 
DOIT
));\

415 } i‡(
DOIT
) \

416 
_buf„r
.
	`__routöe
 (_buf„r.
__¨g
); \

417 
	}

	)
}

420 
	#__libc_˛ónup_íd
(
DOIT
) \

421 i‡(
_avaû
) { \

422 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_p›_ª°‹e
, (&
_buf„r
, 
DOIT
));\

423 } i‡(
DOIT
) \

424 
_buf„r
.
	`__routöe
 (_buf„r.
__¨g
)

	)

428 
__exã∫_ölöe
 

429 
	$__libc_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
f
)

431 i‡(
f
->
__do_ô
)

432 
f
->
	`__ˇn˚l_routöe
 (f->
__ˇn˚l_¨g
);

433 
	}
}

435 
	#__libc_˛ónup_push
(
f˘
, 
¨g
) \

437 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

438 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__libc_˛ónup_routöe
))) \

439 { .
__ˇn˚l_routöe
 = (
f˘
), .
__ˇn˚l_¨g
 = (
¨g
), \

440 .
__do_ô
 = 1 };

	)

442 
	#__libc_˛ónup_p›
(
execuã
) \

443 
__˛‰ame
.
__do_ô
 = (
execuã
); \

444 } 0)

	)

448 
	#__libc_key_¸óã
(
KEY
, 
DESTRUCTOR
) \

449 
	`__libc_±f_ˇŒ
 (
__±hªad_key_¸óã
, (
KEY
, 
DESTRUCTOR
), 1)

	)

452 
	#__libc_gë•ecific
(
KEY
) \

453 
	`__libc_±f_ˇŒ
 (
__±hªad_gë•ecific
, (
KEY
), 
NULL
)

	)

456 
	#__libc_£t•ecific
(
KEY
, 
VALUE
) \

457 
	`__libc_±f_ˇŒ
 (
__±hªad_£t•ecific
, (
KEY
, 
VALUE
), 0)

	)

463 
	#__libc_©f‹k
(
PREPARE
, 
PARENT
, 
CHILD
) \

464 
	`__ªgi°î_©f‹k
 (
PREPARE
, 
PARENT
, 
CHILD
, 
NULL
)

	)

465 
__ªgi°î_©f‹k
 ((*
__¥ï¨e
) (),

466 (*
__∑ª¡
) (),

467 (*
__chûd
) (),

468 *
__dso_h™dÀ
);

473 
	`__±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

474 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx_©å
);

476 
	`__±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
);

478 
	`__±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
);

480 
	`__±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
);

482 
	`__±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
);

484 
	`__±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
);

486 
	`__±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
);

488 
	`__±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
,

489 
__köd
);

491 #ifde‡
__USE_UNIX98


492 
	`__±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__rwlock
,

493 
__c⁄°
 
±hªad_rwlock©å_t
 *
__©å
);

495 
	`__±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
);

497 
	`__±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

499 
	`__±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

501 
	`__±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
);

503 
	`__±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
);

505 
	`__±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
);

508 
	`__±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

509 (*
__de°r_fun˘i⁄
) (*));

511 
	`__±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

512 
__c⁄°
 *
__poöãr
);

514 *
	`__±hªad_gë•ecific
 (
±hªad_key_t
 
__key
);

516 
	`__±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

517 (*
__öô_routöe
) ());

519 
	`__±hªad_©f‹k
 ((*
__¥ï¨e
) (),

520 (*
__∑ª¡
) (),

521 (*
__chûd
) ());

527 #i‚de‡
__NO_WEAK_PTHREAD_ALIASES


528 #ifde‡
wók_exã∫


529 #i‡
_LIBC


530 
	~<bp-sym.h
>

532 
	#BP_SYM
 (
sym
Ë
	)
sym

534 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_öô
))

535 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_de°roy
))

536 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_lock
))

537 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_åylock
))

538 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_u∆ock
))

539 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_öô
))

540 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_de°roy
))

541 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_£ây≥
))

542 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_öô
))

543 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_de°roy
))

544 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_rdlock
))

545 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_åyrdlock
))

546 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_wæock
))

547 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_åywæock
))

548 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_u∆ock
))

549 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_key_¸óã
))

550 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_£t•ecific
))

551 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_gë•ecific
))

552 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_⁄˚
))

553 
	$wók_exã∫
 (
__±hªad_öôülize
)

554 
	$wók_exã∫
 (
__±hªad_©f‹k
)

555 
	`wók_exã∫
 (
	$BP_SYM
 (
_±hªad_˛ónup_push_de„r
))

556 
	`wók_exã∫
 (
	$BP_SYM
 (
_±hªad_˛ónup_p›_ª°‹e
))

557 
	`wók_exã∫
 (
	$BP_SYM
 (
±hªad_£tˇn˚l°©e
))

559 #¥agm®
wók
 
__±hªad_muãx_öô


560 #¥agm®
wók
 
__±hªad_muãx_de°roy


561 #¥agm®
wók
 
__±hªad_muãx_lock


562 #¥agm®
wók
 
__±hªad_muãx_åylock


563 #¥agm®
wók
 
__±hªad_muãx_u∆ock


564 #¥agm®
wók
 
__±hªad_muãx©å_öô


565 #¥agm®
wók
 
__±hªad_muãx©å_de°roy


566 #¥agm®
wók
 
__±hªad_muãx©å_£ây≥


567 #¥agm®
wók
 
__±hªad_rwlock_de°roy


568 #¥agm®
wók
 
__±hªad_rwlock_rdlock


569 #¥agm®
wók
 
__±hªad_rwlock_åyrdlock


570 #¥agm®
wók
 
__±hªad_rwlock_wæock


571 #¥agm®
wók
 
__±hªad_rwlock_åywæock


572 #¥agm®
wók
 
__±hªad_rwlock_u∆ock


573 #¥agm®
wók
 
__±hªad_key_¸óã


574 #¥agm®
wók
 
__±hªad_£t•ecific


575 #¥agm®
wók
 
__±hªad_gë•ecific


576 #¥agm®
wók
 
__±hªad_⁄˚


577 #¥agm®
wók
 
__±hªad_öôülize


578 #¥agm®
wók
 
__±hªad_©f‹k


579 #¥agm®
wók
 
_±hªad_˛ónup_push_de„r


580 #¥agm®
wók
 
_±hªad_˛ónup_p›_ª°‹e


581 #¥agm®
wók
 
±hªad_£tˇn˚l°©e


	@/usr/include/gconv.h

23 #i‚de‡
_GCONV_H


24 
	#_GCONV_H
 1

	)

26 
	~<„©uªs.h
>

27 
	#__√ed_mb°©e_t


	)

28 
	#__√ed_wöt_t


	)

29 
	~<wch¨.h
>

30 
	#__√ed_size_t


	)

31 
	#__√ed_wch¨_t


	)

32 
	~<°ddef.h
>

35 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

40 
	m__GCONV_OK
 = 0,

41 
	m__GCONV_NOCONV
,

42 
	m__GCONV_NODB
,

43 
	m__GCONV_NOMEM
,

45 
	m__GCONV_EMPTY_INPUT
,

46 
	m__GCONV_FULL_OUTPUT
,

47 
	m__GCONV_ILLEGAL_INPUT
,

48 
	m__GCONV_INCOMPLETE_INPUT
,

50 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

51 
	m__GCONV_INTERNAL_ERROR


58 
	m__GCONV_IS_LAST
 = 0x0001,

59 
	m__GCONV_IGNORE_ERRORS
 = 0x0002

64 
	g__gc⁄v_°ï
;

65 
	g__gc⁄v_°ï_d©a
;

66 
	g__gc⁄v_lﬂded_obje˘
;

67 
	g__gc⁄v_å™s_d©a
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

72 
	t__c⁄°
 **, __const *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

85 
	t__gc⁄v_°ï_d©a
 *, *,

86 
	t__c⁄°
 *,

87 
	t__c⁄°
 **,

88 
	t__c⁄°
 *, **,

89 
	tsize_t
 *);

92 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
Ë(*, 
	t__c⁄°
 *,

93 
	t__c⁄°
 *,

97 (*
	t__gc⁄v_å™s_quîy_f˘
Ë(
	t__c⁄°
 *, __const ***,

98 
	tsize_t
 *);

101 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

102 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

104 
	s__gc⁄v_å™s_d©a


107 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

108 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

109 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

110 *
__d©a
;

111 
__gc⁄v_å™s_d©a
 *
__√xt
;

116 
	s__gc⁄v_°ï


118 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

119 
__c⁄°
 *
__mod«me
;

121 
__cou¡î
;

123 *
__‰om_«me
;

124 *
__to_«me
;

126 
__gc⁄v_f˘
 
__f˘
;

127 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

128 
__gc⁄v_öô_f˘
 
__öô_f˘
;

129 
__gc⁄v_íd_f˘
 
__íd_f˘
;

133 
__mö_√eded_‰om
;

134 
__max_√eded_‰om
;

135 
__mö_√eded_to
;

136 
__max_√eded_to
;

139 
__°©eful
;

141 *
__d©a
;

146 
	s__gc⁄v_°ï_d©a


148 *
__outbuf
;

149 *
__outbu„nd
;

153 
__Êags
;

157 
__övoˇti⁄_cou¡î
;

161 
__öã∫Æ_u£
;

163 
__mb°©e_t
 *
__°©ï
;

164 
__mb°©e_t
 
__°©e
;

168 
__gc⁄v_å™s_d©a
 *
__å™s
;

173 
	s__gc⁄v_öfo


175 
size_t
 
__n°ïs
;

176 
__gc⁄v_°ï
 *
__°ïs
;

177 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

178 } *
	t__gc⁄v_t
;

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___kî√l_co¶


	)

11 
	#__°ub___kî√l_söl


	)

12 
	#__°ub___kî√l_è∆


	)

13 
	#__°ub_chÊags


	)

14 
	#__°ub_Áâach


	)

15 
	#__°ub_fchÊags


	)

16 
	#__°ub_fdëach


	)

17 
	#__°ub_gây


	)

18 
	#__°ub_lchmod


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/linux/limits.h

1 #i‚de‡
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 65536

	)

7 
	#ARG_MAX
 131072

	)

8 
	#LINK_MAX
 127

	)

9 
	#MAX_CANON
 255

	)

10 
	#MAX_INPUT
 255

	)

11 
	#NAME_MAX
 255

	)

12 
	#PATH_MAX
 4096

	)

13 
	#PIPE_BUF
 4096

	)

14 
	#XATTR_NAME_MAX
 255

	)

15 
	#XATTR_SIZE_MAX
 65536

	)

16 
	#XATTR_LIST_MAX
 65536

	)

18 
	#RTSIG_MAX
 32

	)

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__NFDBITS


22 
	#__NFDBITS
 (8 * ())

	)

24 #unde‡
__FD_SETSIZE


25 
	#__FD_SETSIZE
 1024

	)

27 #unde‡
__FDSET_LONGS


28 
	#__FDSET_LONGS
 (
__FD_SETSIZE
/
__NFDBITS
)

	)

30 #unde‡
__FDELT


31 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

33 #unde‡
__FDMASK


34 
	#__FDMASK
(
d
Ë(1UL << ((dË% 
__NFDBITS
))

	)

37 
	mfds_bôs
 [
__FDSET_LONGS
];

38 } 
	t__kî√l_fd_£t
;

41 (*
	t__kî√l_sigh™dÀr_t
)();

44 
	t__kî√l_key_t
;

45 
	t__kî√l_mqd_t
;

47 
	~<asm/posix_ty≥s.h
>

	@/usr/include/wchar.h

24 #i‚de‡
_WCHAR_H


26 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


27 
	#_WCHAR_H
 1

	)

28 
	~<„©uªs.h
>

31 #ifde‡
_WCHAR_H


33 
	#__√ed___FILE


	)

34 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


35 
	#__√ed_FILE


	)

37 
	~<°dio.h
>

39 
	#__√ed___va_li°


	)

40 
	~<°d¨g.h
>

42 
	~<bôs/wch¨.h
>

45 
	#__√ed_size_t


	)

46 
	#__√ed_wch¨_t


	)

47 
	#__√ed_NULL


	)

49 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


50 #unde‡
__√ed_wöt_t


51 
	#__√ed_wöt_t


	)

52 
	~<°ddef.h
>

56 #i‚de‡
_WINT_T


61 
	#_WINT_T


	)

62 
	twöt_t
;

66 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

67 && 
deföed
 
__WINT_TYPE__


68 
__BEGIN_NAMESPACE_STD


69 
__WINT_TYPE__
 
	twöt_t
;

70 
	g__END_NAMESPACE_STD


75 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
__mb°©e_t_deföed


76 
	#__mb°©e_t_deföed
 1

	)

80 
	m__cou¡
;

83 #ifde‡
__WINT_TYPE__


84 
__WINT_TYPE__
 
	m__wch
;

86 
wöt_t
 
	m__wch
;

88 
	m__wchb
[4];

89 } 
	m__vÆue
;

90 } 
	t__mb°©e_t
;

92 #unde‡
__√ed_mb°©e_t


97 #ifde‡
_WCHAR_H


99 
__BEGIN_NAMESPACE_C99


101 
__mb°©e_t
 
	tmb°©e_t
;

102 
	g__END_NAMESPACE_C99


103 #ifde‡
__USE_GNU


104 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

107 #i‚de‡
WCHAR_MIN


109 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

110 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

113 #i‚de‡
WEOF


114 
	#WEOF
 (0xffffffffu)

	)

119 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


120 
	~<w˘y≥.h
>

124 
__BEGIN_DECLS


126 
__BEGIN_NAMESPACE_STD


129 
tm
;

130 
__END_NAMESPACE_STD


134 
	$__USING_NAMESPACE_STD
(
tm
)

137 
__BEGIN_NAMESPACE_STD


139 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

140 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

142 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

143 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

144 
__THROW
;

147 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

150 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

151 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
;

155 
	$wcscmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
)

156 
__THROW
 
__©åibuã_puª__
;

158 
	$wc¢cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

159 
__THROW
 
__©åibuã_puª__
;

160 
__END_NAMESPACE_STD


162 #ifde‡
__USE_GNU


164 
	$wcsˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

167 
	$wc¢ˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

168 
size_t
 
__n
Ë
__THROW
;

172 
	~<xloˇÀ.h
>

174 
	$wcsˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

175 
__loˇÀ_t
 
__loc
Ë
__THROW
;

177 
	$wc¢ˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

178 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

181 
__BEGIN_NAMESPACE_STD


184 
	$wcscﬁl
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

188 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

189 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

190 
__END_NAMESPACE_STD


192 #ifde‡
__USE_GNU


198 
	$wcscﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

199 
__loˇÀ_t
 
__loc
Ë
__THROW
;

204 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

205 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

208 
wch¨_t
 *
	$wcsdup
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

211 
__BEGIN_NAMESPACE_STD


213 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

214 
__THROW
 
__©åibuã_puª__
;

216 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

217 
__THROW
 
__©åibuã_puª__
;

218 
__END_NAMESPACE_STD


220 #ifde‡
__USE_GNU


223 
wch¨_t
 *
	$wcsch∫ul
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__wc
)

224 
__THROW
 
__©åibuã_puª__
;

227 
__BEGIN_NAMESPACE_STD


230 
size_t
 
	$wcsc•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ªje˘
)

231 
__THROW
 
__©åibuã_puª__
;

234 
size_t
 
	$wcs•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

235 
__THROW
 
__©åibuã_puª__
;

237 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

238 
__THROW
 
__©åibuã_puª__
;

240 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

241 
__THROW
 
__©åibuã_puª__
;

244 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

245 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

246 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

249 
size_t
 
	$wc¶í
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

250 
__END_NAMESPACE_STD


252 #ifde‡
__USE_XOPEN


254 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

255 
__THROW
 
__©åibuã_puª__
;

258 #ifde‡
__USE_GNU


260 
size_t
 
	$wc¢Àn
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

261 
__THROW
 
__©åibuã_puª__
;

265 
__BEGIN_NAMESPACE_STD


267 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

268 
__THROW
 
__©åibuã_puª__
;

271 
	$wmemcmp
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s1
,

272 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

273 
__THROW
 
__©åibuã_puª__
;

276 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

277 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

281 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
)

282 
__THROW
;

285 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

286 
__END_NAMESPACE_STD


288 #ifde‡
__USE_GNU


291 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

292 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

293 
__THROW
;

297 
__BEGIN_NAMESPACE_STD


300 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

304 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

308 
	$mbsöô
 (
__c⁄°
 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

312 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

313 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

314 
mb°©e_t
 *
__p
Ë
__THROW
;

317 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

318 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

321 
size_t
 
	$__mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

322 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

323 
size_t
 
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

324 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

325 
__END_NAMESPACE_STD


327 #ifde‡
__USE_EXTERN_INLINES


333 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

334 
__exã∫_ölöe
 
wöt_t


335 
	`__NTH
 (
	$btowc
 (
__c
))

336 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

337 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

339 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

340 
__exã∫_ölöe
 

341 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

342 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

343 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

345 
__exã∫_ölöe
 
size_t


346 
__NTH
 (
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

347 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

348 {  (
__ps
 !
NULL


349 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

352 
__BEGIN_NAMESPACE_STD


355 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

356 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

357 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

361 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

362 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

363 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

364 
__END_NAMESPACE_STD


367 #ifdef 
__USE_GNU


370 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

371 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

372 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

377 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

378 
size_t
 
__nwc
, size_à
__Àn
,

379 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

384 #ifde‡
__USE_XOPEN


386 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

390 
	$wcswidth
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

394 
__BEGIN_NAMESPACE_STD


397 
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

398 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

399 
__END_NAMESPACE_STD


401 #ifde‡
__USE_ISOC99


402 
__BEGIN_NAMESPACE_C99


404 
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

405 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

406 
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

407 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

408 
__END_NAMESPACE_C99


412 
__BEGIN_NAMESPACE_STD


415 
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

416 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

420 
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

421 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

422 
__THROW
;

423 
__END_NAMESPACE_STD


425 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

426 
__BEGIN_NAMESPACE_C99


429 
__exãnsi⁄__


430 
	$wc°ﬁl
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

431 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

432 
__THROW
;

436 
__exãnsi⁄__


437 
	$wc°ouŒ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

438 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

439 
__ba£
Ë
__THROW
;

440 
__END_NAMESPACE_C99


443 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


446 
__exãnsi⁄__


447 
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

448 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

449 
__THROW
;

453 
__exãnsi⁄__


454 
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

455 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

456 
__ba£
Ë
__THROW
;

459 #ifde‡
__USE_GNU


473 
	~<xloˇÀ.h
>

477 
	$wc°ﬁ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

478 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

479 
__loˇÀ_t
 
__loc
Ë
__THROW
;

481 
	$wc°oul_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

482 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

483 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

485 
__exãnsi⁄__


486 
	$wc°ﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

487 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

488 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

490 
__exãnsi⁄__


491 
	$wc°ouŒ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

492 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

493 
__ba£
, 
__loˇÀ_t
 
__loc
)

494 
__THROW
;

496 
	$wc°od_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

497 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

498 
__THROW
;

500 
	$wc°of_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

501 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

502 
__THROW
;

504 
	$wc°ﬁd_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

505 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

506 
__loˇÀ_t
 
__loc
Ë
__THROW
;

510 #ifdef 
__USE_GNU


513 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
Ë
__THROW
;

517 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
)

518 
__THROW
;

524 #ifdef 
__USE_GNU


527 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

530 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


531 
__BEGIN_NAMESPACE_STD


534 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

541 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

542 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

548 
	`w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

551 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

552 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

553 
__THROW
 ;

559 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

560 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

561 
__gnuc_va_li°
 
__¨g
)

567 
	`vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

568 
__gnuc_va_li°
 
__¨g
)

572 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

573 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

574 
__gnuc_va_li°
 
__¨g
)

575 
__THROW
 ;

582 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

583 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

589 
	`wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

592 
	$swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

593 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

594 
__THROW
 ;

596 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

597 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

598 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

599 #ifde‡
__REDIRECT


603 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

604 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

605 
__isoc99_fwsˇnf
)

607 
	`__REDIRECT
 (
wsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

608 
__isoc99_wsˇnf
)

610 
	`__REDIRECT
 (
swsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

611 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

612 
__isoc99_swsˇnf
)

613 
__THROW
 ;

615 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

616 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

617 
	`__isoc99_wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

618 
	$__isoc99_swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

619 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

620 
__THROW
;

621 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

622 
	#wsˇnf
 
__isoc99_wsˇnf


	)

623 
	#swsˇnf
 
__isoc99_swsˇnf


	)

627 
__END_NAMESPACE_STD


630 #ifde‡
__USE_ISOC99


631 
__BEGIN_NAMESPACE_C99


636 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

637 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

638 
__gnuc_va_li°
 
__¨g
)

644 
	`vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

645 
__gnuc_va_li°
 
__¨g
)

648 
	$vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

649 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

650 
__gnuc_va_li°
 
__¨g
)

651 
__THROW
 ;

653 #i‡!
deföed
 
__USE_GNU
 \

654 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

655 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

656 #ifde‡
__REDIRECT


657 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

658 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

659 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

661 
	`__REDIRECT
 (
vwsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

662 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

664 
	`__REDIRECT
 (
vswsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

665 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

666 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

667 
__THROW
 ;

669 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

670 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

671 
__gnuc_va_li°
 
__¨g
);

672 
	`__isoc99_vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

673 
__gnuc_va_li°
 
__¨g
);

674 
	$__isoc99_vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

675 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

676 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

677 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

678 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

679 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

683 
__END_NAMESPACE_C99


687 
__BEGIN_NAMESPACE_STD


692 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

693 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

699 
wöt_t
 
	`gëwch¨
 ();

706 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

707 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

713 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

721 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

722 
__FILE
 *
__ª°ri˘
 
__°ªam
);

728 
	`Âutws
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

729 
__FILE
 *
__ª°ri˘
 
__°ªam
);

736 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

737 
__END_NAMESPACE_STD


740 #ifde‡
__USE_GNU


748 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

749 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

757 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

765 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

774 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

775 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

784 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

785 
__FILE
 *
__ª°ri˘
 
__°ªam
);

793 
	`Âutws_u∆ocked
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

794 
__FILE
 *
__ª°ri˘
 
__°ªam
);

798 
__BEGIN_NAMESPACE_C99


802 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

803 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

804 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

805 
__END_NAMESPACE_C99


807 #ifde‡
__USE_GNU


808 
	~<xloˇÀ.h
>

812 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

813 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

814 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

815 
__loˇÀ_t
 
__loc
Ë
__THROW
;

824 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


825 
	#__√ed_iswxxx


	)

826 
	~<w˘y≥.h
>

830 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


831 
	~<bôs/wch¨2.h
>

834 #ifde‡
__LDBL_COMPAT


835 
	~<bôs/wch¨-ldbl.h
>

838 
__END_DECLS


844 #unde‡
__√ed_mb°©e_t


845 #unde‡
__√ed_wöt_t


	@/usr/include/asm-generic/ioctl.h

1 #i‚de‡
_ASM_GENERIC_IOCTL_H


2 
	#_ASM_GENERIC_IOCTL_H


	)

22 
	#_IOC_NRBITS
 8

	)

23 
	#_IOC_TYPEBITS
 8

	)

30 #i‚de‡
_IOC_SIZEBITS


31 
	#_IOC_SIZEBITS
 14

	)

34 #i‚de‡
_IOC_DIRBITS


35 
	#_IOC_DIRBITS
 2

	)

38 
	#_IOC_NRMASK
 ((1 << 
_IOC_NRBITS
)-1)

	)

39 
	#_IOC_TYPEMASK
 ((1 << 
_IOC_TYPEBITS
)-1)

	)

40 
	#_IOC_SIZEMASK
 ((1 << 
_IOC_SIZEBITS
)-1)

	)

41 
	#_IOC_DIRMASK
 ((1 << 
_IOC_DIRBITS
)-1)

	)

43 
	#_IOC_NRSHIFT
 0

	)

44 
	#_IOC_TYPESHIFT
 (
_IOC_NRSHIFT
+
_IOC_NRBITS
)

	)

45 
	#_IOC_SIZESHIFT
 (
_IOC_TYPESHIFT
+
_IOC_TYPEBITS
)

	)

46 
	#_IOC_DIRSHIFT
 (
_IOC_SIZESHIFT
+
_IOC_SIZEBITS
)

	)

53 #i‚de‡
_IOC_NONE


54 
	#_IOC_NONE
 0U

	)

57 #i‚de‡
_IOC_WRITE


58 
	#_IOC_WRITE
 1U

	)

61 #i‚de‡
_IOC_READ


62 
	#_IOC_READ
 2U

	)

65 
	#_IOC
(
dú
,
ty≥
,
ƒ
,
size
) \

66 (((
dú
Ë<< 
_IOC_DIRSHIFT
) | \

67 ((
ty≥
Ë<< 
_IOC_TYPESHIFT
) | \

68 ((
ƒ
Ë<< 
_IOC_NRSHIFT
) | \

69 ((
size
Ë<< 
_IOC_SIZESHIFT
))

	)

71 
	#_IOC_TYPECHECK
(
t
Ë(—))

	)

74 
	#_IO
(
ty≥
,
ƒ
Ë
	`_IOC
(
_IOC_NONE
,—y≥),“r),0)

	)

75 
	#_IOR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

76 
	#_IOW
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

77 
	#_IOWR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

78 
	#_IOR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(size))

	)

79 
	#_IOW_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(size))

	)

80 
	#_IOWR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(size))

	)

83 
	#_IOC_DIR
(
ƒ
Ë((“rË>> 
_IOC_DIRSHIFT
Ë& 
_IOC_DIRMASK
)

	)

84 
	#_IOC_TYPE
(
ƒ
Ë((“rË>> 
_IOC_TYPESHIFT
Ë& 
_IOC_TYPEMASK
)

	)

85 
	#_IOC_NR
(
ƒ
Ë((“rË>> 
_IOC_NRSHIFT
Ë& 
_IOC_NRMASK
)

	)

86 
	#_IOC_SIZE
(
ƒ
Ë((“rË>> 
_IOC_SIZESHIFT
Ë& 
_IOC_SIZEMASK
)

	)

90 
	#IOC_IN
 (
_IOC_WRITE
 << 
_IOC_DIRSHIFT
)

	)

91 
	#IOC_OUT
 (
_IOC_READ
 << 
_IOC_DIRSHIFT
)

	)

92 
	#IOC_INOUT
 ((
_IOC_WRITE
|
_IOC_READ
Ë<< 
_IOC_DIRSHIFT
)

	)

93 
	#IOCSIZE_MASK
 (
_IOC_SIZEMASK
 << 
_IOC_SIZESHIFT
)

	)

94 
	#IOCSIZE_SHIFT
 (
_IOC_SIZESHIFT
)

	)

	@/usr/include/asm/posix_types.h

1 #ifde‡
__i386__


2 
	~"posix_ty≥s_32.h
"

4 
	~"posix_ty≥s_64.h
"

	@/usr/include/bits/wchar-ldbl.h

20 #i‚de‡
_WCHAR_H


24 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


25 
__BEGIN_NAMESPACE_C99


26 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

27 
__LDBL_REDIR_DECL
 (
w¥ötf
);

28 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

31 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

32 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

33 && !
deföed
 
	g__REDIRECT
 \

34 && (
deföed
 
	g__STRICT_ANSI__
 || deföed 
	g__USE_XOPEN2K
)

35 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__∆dbl___isoc99_fwsˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__∆dbl___isoc99_wsˇnf
)

37 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__∆dbl___isoc99_swsˇnf
)

39 
	`__LDBL_REDIR_DECL
 (
fwsˇnf
);

40 
	`__LDBL_REDIR_DECL
 (
wsˇnf
);

41 
	`__LDBL_REDIR_DECL
 (
swsˇnf
);

43 
__END_NAMESPACE_C99


46 #ifde‡
__USE_ISOC99


47 
__BEGIN_NAMESPACE_C99


48 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

49 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

50 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

51 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__∆dbl___isoc99_vfwsˇnf
)

52 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__∆dbl___isoc99_vwsˇnf
)

53 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__∆dbl___isoc99_vswsˇnf
)

55 
	`__LDBL_REDIR_DECL
 (
vfwsˇnf
);

56 
	`__LDBL_REDIR_DECL
 (
vwsˇnf
);

57 
	`__LDBL_REDIR_DECL
 (
vswsˇnf
);

59 
__END_NAMESPACE_C99


62 #ifde‡
__USE_GNU


63 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

66 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


67 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

68 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

69 #i‡
__USE_FORTIFY_LEVEL
 > 1

70 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

73 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar.h

20 #i‚de‡
_BITS_WCHAR_H


21 
	#_BITS_WCHAR_H
 1

	)

23 
	#__WCHAR_MIN
 (-2147483647 - 1)

	)

24 
	#__WCHAR_MAX
 (2147483647)

	)

	@/usr/include/bits/wchar2.h

20 #i‚de‡
_WCHAR_H


25 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

26 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

27 
size_t
 
__ns1
Ë
__THROW
;

28 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

29 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

30 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

31 
wmem˝y
);

32 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_chk_w¨n
,

33 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

34 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

35 
size_t
 
__ns1
), 
__wmem˝y_chk
)

36 
	`__w¨«âr
 ("wmemcpy called withÜength biggerÅhan size of destination "

39 
__exã∫_Æways_ölöe
 
wch¨_t
 *

40 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

41 
size_t
 
__n
))

43 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

45 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

46  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
,

47 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

49 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

50  
	`__wmem˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

51 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

53  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

54 
	}
}

57 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

58 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

59 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

60 
__c⁄°
 
wch¨_t
 *
__s2
,

61 
size_t
 
__n
), 
wmemmove
);

62 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¨n
,

63 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

64 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

65 
size_t
 
__ns1
), 
__wmemmove_chk
)

66 
	`__w¨«âr
 ("wmemmove called withÜength biggerÅhan size of destination "

69 
__exã∫_Æways_ölöe
 
wch¨_t
 *

70 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

71 
size_t
 
__n
))

73 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

75 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

76  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

77 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

79 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

80  
	`__wmemmove_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

81 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

83  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

84 
	}
}

87 #ifde‡
__USE_GNU


88 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

89 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

90 
size_t
 
__ns1
Ë
__THROW
;

91 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

92 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

93 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
,

94 
size_t
 
__n
), 
wmemp˝y
);

95 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_chk_w¨n
,

96 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

97 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

98 
size_t
 
__ns1
), 
__wmemp˝y_chk
)

99 
	`__w¨«âr
 ("wmempcpy called withÜength biggerÅhan size of destination "

102 
__exã∫_Æways_ölöe
 
wch¨_t
 *

103 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

104 
size_t
 
__n
))

106 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

108 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

109  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
,

110 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

112 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

113  
	`__wmemp˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

114 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

116  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

117 
	}
}

121 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

122 
size_t
 
__ns
Ë
__THROW
;

123 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

124 
size_t
 
__n
), 
wmem£t
);

125 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¨n
,

126 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

127 
size_t
 
__ns
), 
__wmem£t_chk
)

128 
	`__w¨«âr
 ("wmemset called withÜength biggerÅhan size of destination "

131 
__exã∫_Æways_ölöe
 
wch¨_t
 *

132 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__ª°ri˘
 
__s
, wch¨_à
__c
, 
size_t
 
__n
))

134 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

136 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

137  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

139 i‡(
__n
 > 
	`__bos0
 (
__s
Ë/  (
wch¨_t
))

140  
	`__wmem£t_chk_w¨n
 (
__s
, 
__c
, 
__n
,

141 
	`__bos0
 (
__s
Ë/  (
wch¨_t
));

143  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

144 
	}
}

147 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

149 
size_t
 
__n
Ë
__THROW
;

150 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

151 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

152 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

154 
__exã∫_Æways_ölöe
 
wch¨_t
 *

155 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
))

157 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

158  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

159  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

160 
	}
}

163 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
,

164 
size_t
 
__de°Àn
Ë
__THROW
;

165 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
, (wch¨_à*
__de°
,

166 
__c⁄°
 
wch¨_t
 *
__§c
),

167 
w˝˝y
);

169 
__exã∫_Æways_ölöe
 
wch¨_t
 *

170 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
))

172 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

173  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

174  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

175 
	}
}

178 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

179 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

180 
size_t
 
__de°Àn
Ë
__THROW
;

181 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

182 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

183 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

184 
size_t
 
__n
), 
wc¢˝y
);

185 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_chk_w¨n
,

186 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

187 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

188 
size_t
 
__n
, size_à
__de°Àn
), 
__wc¢˝y_chk
)

189 
	`__w¨«âr
 ("wcsncpy called withÜength biggerÅhan size of destination "

192 
__exã∫_Æways_ölöe
 
wch¨_t
 *

193 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
))

195 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

197 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

198  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

199 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

200 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

201  
	`__wc¢˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

202 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

204  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

205 
	}
}

208 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

209 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

210 
size_t
 
__de°Àn
Ë
__THROW
;

211 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

212 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

213 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

214 
size_t
 
__n
), 
w˝n˝y
);

215 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_chk_w¨n
,

216 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

217 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

218 
size_t
 
__n
, size_à
__de°Àn
), 
__w˝n˝y_chk
)

219 
	`__w¨«âr
 ("wcpncpy called withÜength biggerÅhan size of destination "

222 
__exã∫_Æways_ölöe
 
wch¨_t
 *

223 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
))

225 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

227 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

228  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

229 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

230 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

231  
	`__w˝n˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

232 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

234  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

235 
	}
}

238 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

239 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

240 
size_t
 
__de°Àn
Ë
__THROW
;

241 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

242 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

243 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

245 
__exã∫_Æways_ölöe
 
wch¨_t
 *

246 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
))

248 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

249  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

250  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

251 
	}
}

254 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

255 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

256 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

257 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

258 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

259 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

260 
size_t
 
__n
), 
wc¢ˇt
);

262 
__exã∫_Æways_ölöe
 
wch¨_t
 *

263 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
))

265 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

266  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

267 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

268  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

269 
	}
}

272 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

273 
__Êag
, 
size_t
 
__s_Àn
,

274 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

275 
__THROW
 ;

277 
	`__REDIRECT_NTH_LDBL
 (
__sw¥ötf_Æüs
,

278 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

279 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...),

280 
sw¥ötf
);

282 #ifde‡
__va_¨g_∑ck


283 
__exã∫_Æways_ölöe
 

284 
	`__NTH
 (
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

285 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...))

287 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

288  
	`__sw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

289 
	`__bos
 (
__s
Ë/  (
wch¨_t
),

290 
__fmt
, 
	`__va_¨g_∑ck
 ());

291  
	`__sw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¨g_∑ck
 ());

292 
	}
}

293 #ñi‡!
deföed
 
__˝lu•lus


295 
	#sw¥ötf
(
s
, 
n
, ...) \

296 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

297 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

298 
	`__bos
 (
s
Ë/  (
wch¨_t
), 
__VA_ARGS__
) \

299 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

302 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

303 
__Êag
, 
size_t
 
__s_Àn
,

304 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

305 
__gnuc_va_li°
 
__¨g
)

306 
__THROW
 ;

308 
	`__REDIRECT_NTH_LDBL
 (
__vsw¥ötf_Æüs
,

309 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

310 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
,

311 
__gnuc_va_li°
 
__≠
), 
vsw¥ötf
);

313 
__exã∫_Æways_ölöe
 

314 
	`__NTH
 (
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

315 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

317 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

318  
	`__vsw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

319 
	`__bos
 (
__s
Ë/  (
wch¨_t
), 
__fmt
, 
__≠
);

320  
	`__vsw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

321 
	}
}

324 #i‡
__USE_FORTIFY_LEVEL
 > 1

326 
__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

327 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

328 
__w¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

330 
__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

331 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

332 
__gnuc_va_li°
 
__≠
);

333 
__vw¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

334 
__gnuc_va_li°
 
__≠
);

336 #ifde‡
__va_¨g_∑ck


337 
__exã∫_Æways_ölöe
 

338 
	$w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...)

340  
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

341 
	}
}

343 
__exã∫_Æways_ölöe
 

344 
	$fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__fmt
, ...)

346  
	`__fw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

347 
	`__va_¨g_∑ck
 ());

348 
	}
}

349 #ñi‡!
deföed
 
__˝lu•lus


350 
	#w¥ötf
(...) \

351 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

352 
	#fw¥ötf
(
°ªam
, ...) \

353 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

356 
__exã∫_Æways_ölöe
 

357 
	$vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

359  
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

360 
	}
}

362 
__exã∫_Æways_ölöe
 

363 
	$vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

364 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

366  
	`__vfw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

367 
	}
}

371 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

372 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

373 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

374 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

375 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

376 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_chk_w¨n
,

377 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

378 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgëws_chk
)

379 
__wur
 
	`__w¨«âr
 ("fgetws called with bigger sizeÅhanÜength "

382 
__exã∫_Æways_ölöe
 
__wur
 
wch¨_t
 *

383 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

385 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

387 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

388  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

389 
__n
, 
__°ªam
);

391 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

392  
	`__fgëws_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

393 
__n
, 
__°ªam
);

395  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

396 
	}
}

398 #ifde‡
__USE_GNU


399 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

400 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

401 
__wur
;

402 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

403 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

404 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

405 
__wur
;

406 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_chk_w¨n
,

407 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

408 
__FILE
 *
__ª°ri˘
 
__°ªam
),

409 
__fgëws_u∆ocked_chk
)

410 
__wur
 
	`__w¨«âr
 ("fgetws_unlocked called with bigger sizeÅhanÜength "

413 
__exã∫_Æways_ölöe
 
__wur
 
wch¨_t
 *

414 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

416 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

418 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

419  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

420 
__n
, 
__°ªam
);

422 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

423  
	`__fgëws_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

424 
__n
, 
__°ªam
);

426  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

427 
	}
}

431 
size_t
 
	$__w¸tomb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
mb°©e_t
 *
__p
,

432 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

433 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

434 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

435 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

437 
__exã∫_Æways_ölöe
 
__wur
 
size_t


438 
	`__NTH
 (
	$w¸tomb
 (*
__s
, 
wch¨_t
 
__wch¨
, 
mb°©e_t
 *
__ps
))

443 
	#__WCHAR_MB_LEN_MAX
 16

	)

444 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


447 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

448  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

449  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

450 
	}
}

453 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

454 
__c⁄°
 **
__ª°ri˘
 
__§c
,

455 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

456 
size_t
 
__d°Àn
Ë
__THROW
;

457 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

458 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

459 
__c⁄°
 **
__ª°ri˘
 
__§c
,

460 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

461 
mb§towcs
);

462 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_w¨n
,

463 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

464 
__c⁄°
 **
__ª°ri˘
 
__§c
,

465 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

466 
size_t
 
__d°Àn
), 
__mb§towcs_chk
)

467 
	`__w¨«âr
 ("mbsrtowcs called with dst buffer smallerÅhanÜen "

470 
__exã∫_Æways_ölöe
 
size_t


471 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

472 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

474 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

476 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

477  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

478 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

480 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

481  
	`__mb§towcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

482 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

484  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

485 
	}
}

488 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

489 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

490 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

491 
size_t
 
__d°Àn
Ë
__THROW
;

492 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

493 (*
__ª°ri˘
 
__d°
,

494 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

495 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

496 
wc§tombs
);

497 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_w¨n
,

498 (*
__ª°ri˘
 
__d°
,

499 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

500 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

501 
size_t
 
__d°Àn
), 
__wc§tombs_chk
)

502 
	`__w¨«âr
 ("wcsrtombs called with dst buffer smallerÅhanÜen");

504 
__exã∫_Æways_ölöe
 
size_t


505 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

506 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

508 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

510 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

511  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

513 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

514  
	`__wc§tombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

516  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

517 
	}
}

520 #ifde‡
__USE_GNU


521 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

522 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

523 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

524 
size_t
 
__d°Àn
Ë
__THROW
;

525 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

526 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

527 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

528 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

529 
mb¢πowcs
);

530 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_chk_w¨n
,

531 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

532 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

533 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

534 
size_t
 
__d°Àn
), 
__mb¢πowcs_chk
)

535 
	`__w¨«âr
 ("mbsnrtowcs called with dst buffer smallerÅhanÜen "

538 
__exã∫_Æways_ölöe
 
size_t


539 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

540 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

542 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

544 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

545  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

546 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

548 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

549  
	`__mb¢πowcs_chk_w¨n
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

550 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

552  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

553 
	}
}

556 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

557 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

558 
size_t
 
__nwc
, size_à
__Àn
,

559 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

560 
__THROW
;

561 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

562 (*
__ª°ri˘
 
__d°
,

563 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

564 
size_t
 
__nwc
, size_à
__Àn
,

565 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

566 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_chk_w¨n
,

567 (*
__ª°ri˘
 
__d°
,

568 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

569 
size_t
 
__nwc
, size_à
__Àn
,

570 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

571 
size_t
 
__d°Àn
), 
__wc¢πombs_chk
)

572 
	`__w¨«âr
 ("wcsnrtombs called with dst buffer smallerÅhanÜen");

574 
__exã∫_Æways_ölöe
 
size_t


575 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

576 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

578 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

580 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

581  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

582 
	`__bos
 (
__d°
));

584 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

585  
	`__wc¢πombs_chk_w¨n
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

586 
	`__bos
 (
__d°
));

588  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

589 
	}
}

	@/usr/include/linux/stddef.h

1 #i‚de‡
_LINUX_STDDEF_H


2 
	#_LINUX_STDDEF_H


	)

6 #unde‡
NULL


7 #i‡
deföed
(
__˝lu•lus
)

8 
	#NULL
 0

	)

10 
	#NULL
 ((*)0)

	)

	@/usr/include/wctype.h

24 #i‚de‡
_WCTYPE_H


26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__√ed_iswxxx


30 
	#_WCTYPE_H
 1

	)

33 
	#__√ed_wöt_t


	)

34 
	~<wch¨.h
>

38 #i‚de‡
WEOF


39 
	#WEOF
 (0xffffffffu)

	)

42 #unde‡
__√ed_iswxxx


47 #i‚de‡
__iswxxx_deföed


48 
	#__iswxxx_deföed
 1

	)

50 
__BEGIN_NAMESPACE_C99


53 
	tw˘y≥_t
;

54 
	g__END_NAMESPACE_C99


56 #i‚de‡
_ISwbô


61 
	~<ídün.h
>

62 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


63 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

65 
	#_ISwbô
(
bô
) \

66 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

67 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

68 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

69 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

74 
	m__ISwuµî
 = 0,

75 
	m__ISwlowî
 = 1,

76 
	m__ISwÆpha
 = 2,

77 
	m__ISwdigô
 = 3,

78 
	m__ISwxdigô
 = 4,

79 
	m__ISw•a˚
 = 5,

80 
	m__ISw¥öt
 = 6,

81 
	m__ISwgøph
 = 7,

82 
	m__ISwbœnk
 = 8,

83 
	m__ISw˙ål
 = 9,

84 
	m__ISwpun˘
 = 10,

85 
	m__ISwÆnum
 = 11,

87 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

88 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

89 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

90 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

91 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

92 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

93 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

94 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

95 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

96 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

97 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

98 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

103 
__BEGIN_DECLS


105 
__BEGIN_NAMESPACE_C99


112 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

118 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

121 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

125 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

129 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

134 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

137 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

142 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

147 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

152 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

157 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

162 #ifde‡
__USE_ISOC99


163 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

172 
w˘y≥_t
 
	$w˘y≥
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

176 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

177 
__END_NAMESPACE_C99


184 
__BEGIN_NAMESPACE_C99


187 
__c⁄°
 
	t__öt32_t
 *
	tw˘øns_t
;

188 
__END_NAMESPACE_C99


189 #ifde‡
__USE_GNU


190 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

193 
__BEGIN_NAMESPACE_C99


195 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

199 
__END_NAMESPACE_C99


201 
__END_DECLS


208 #ifde‡
_WCTYPE_H


214 
__BEGIN_DECLS


216 
__BEGIN_NAMESPACE_C99


219 
w˘øns_t
 
	$w˘øns
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

222 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

223 
__END_NAMESPACE_C99


225 #ifde‡
__USE_GNU


227 
	~<xloˇÀ.h
>

231 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

237 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

240 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

244 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

248 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

253 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

256 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

261 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

266 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

271 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

276 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

281 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

285 
w˘y≥_t
 
	$w˘y≥_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

286 
__THROW
;

290 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

291 
__THROW
;

299 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

302 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

306 
w˘øns_t
 
	$w˘øns_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

307 
__THROW
;

310 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

311 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

315 
__END_DECLS


	@
1
.
1
/usr/include
155
3479
cheats.c
cheats.h
common.h
cpu.c
cpu.h
cpu_threaded.c
disasm.c
font.h
gp2x/align_test.c
gp2x/arm_codegen.h
gp2x/arm_dpimacros.h
gp2x/arm_emit.h
gp2x/cmdline.c
gp2x/cmdline.h
gp2x/cpu_speed.c
gp2x/cpuctrl.c
gp2x/cpuctrl.h
gp2x/daemon.c
gp2x/daemon.h
gp2x/display.c
gp2x/display.h
gp2x/font.c
gp2x/gp2x.c
gp2x/gp2x.h
gp2x/gp2xminilib.c
gp2x/gp2xminilib.h
gp2x/load_imm_test.c
gp2x/speedtest.c
gp2x/speedtest.h
gui.c
gui.h
input.c
input.h
main.c
main.h
memory.c
memory.h
psp/mips_emit.h
sound.c
sound.h
video.c
video.h
x86/x86_emit.h
zip.c
zip.h
/usr/include/ctype.h
/usr/include/dirent.h
/usr/include/fcntl.h
/usr/include/linux/fb.h
/usr/include/math.h
/usr/include/pthread.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/strings.h
/usr/include/sys/ioctl.h
/usr/include/sys/mman.h
/usr/include/sys/soundcard.h
/usr/include/sys/stat.h
/usr/include/sys/time.h
/usr/include/sys/types.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/zlib.h
/usr/include/alloca.h
/usr/include/asm/types.h
/usr/include/bits/confname.h
/usr/include/bits/dirent.h
/usr/include/bits/environments.h
/usr/include/bits/fcntl.h
/usr/include/bits/fcntl2.h
/usr/include/bits/huge_val.h
/usr/include/bits/huge_valf.h
/usr/include/bits/huge_vall.h
/usr/include/bits/inf.h
/usr/include/bits/ioctl-types.h
/usr/include/bits/ioctls.h
/usr/include/bits/mathcalls.h
/usr/include/bits/mathdef.h
/usr/include/bits/mathinline.h
/usr/include/bits/mman.h
/usr/include/bits/nan.h
/usr/include/bits/posix1_lim.h
/usr/include/bits/posix_opt.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/setjmp.h
/usr/include/bits/stat.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/time.h
/usr/include/bits/types.h
/usr/include/bits/unistd.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wordsize.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/linux/i2c.h
/usr/include/linux/soundcard.h
/usr/include/sched.h
/usr/include/signal.h
/usr/include/sys/select.h
/usr/include/sys/sysmacros.h
/usr/include/sys/ttydefaults.h
/usr/include/xlocale.h
/usr/include/zconf.h
/usr/include/_G_config.h
/usr/include/asm-generic/int-ll64.h
/usr/include/asm/ioctls.h
/usr/include/bits/endian.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/local_lim.h
/usr/include/bits/sched.h
/usr/include/bits/select.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/siginfo.h
/usr/include/bits/signum.h
/usr/include/bits/sigset.h
/usr/include/bits/sigstack.h
/usr/include/bits/sigthread.h
/usr/include/bits/stdio-lock.h
/usr/include/bits/typesizes.h
/usr/include/bits/uio.h
/usr/include/gnu/stubs.h
/usr/include/linux/ioctl.h
/usr/include/linux/patchkey.h
/usr/include/linux/types.h
/usr/include/sys/cdefs.h
/usr/include/sys/ucontext.h
/usr/include/zlibdefs.h
/usr/include/asm/ioctl.h
/usr/include/bits/libc-lock.h
/usr/include/gconv.h
/usr/include/gnu/stubs-32.h
/usr/include/linux/limits.h
/usr/include/linux/posix_types.h
/usr/include/wchar.h
/usr/include/asm-generic/ioctl.h
/usr/include/asm/posix_types.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar.h
/usr/include/bits/wchar2.h
/usr/include/linux/stddef.h
/usr/include/wctype.h
